// +build !minimal

#pragma once

#ifndef GO_QTLOCATION_H
#define GO_QTLOCATION_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

struct QtLocation_PackedString { char* data; long long len; };
struct QtLocation_PackedList { void* data; long long len; };
void* QGeoManeuver_NewQGeoManeuver();
void* QGeoManeuver_NewQGeoManeuver2(void* other);
long long QGeoManeuver_Direction(void* ptr);
double QGeoManeuver_DistanceToNextInstruction(void* ptr);
struct QtLocation_PackedString QGeoManeuver_InstructionText(void* ptr);
char QGeoManeuver_IsValid(void* ptr);
void* QGeoManeuver_Position(void* ptr);
void QGeoManeuver_SetDirection(void* ptr, long long direction);
void QGeoManeuver_SetDistanceToNextInstruction(void* ptr, double distance);
void QGeoManeuver_SetInstructionText(void* ptr, char* instructionText);
void QGeoManeuver_SetPosition(void* ptr, void* position);
void QGeoManeuver_SetTimeToNextInstruction(void* ptr, int secs);
void QGeoManeuver_SetWaypoint(void* ptr, void* coordinate);
int QGeoManeuver_TimeToNextInstruction(void* ptr);
void* QGeoManeuver_Waypoint(void* ptr);
void QGeoManeuver_DestroyQGeoManeuver(void* ptr);
void* QGeoRoute_NewQGeoRoute();
void* QGeoRoute_NewQGeoRoute2(void* other);
void* QGeoRoute_Bounds(void* ptr);
double QGeoRoute_Distance(void* ptr);
void* QGeoRoute_FirstRouteSegment(void* ptr);
struct QtLocation_PackedList QGeoRoute_Path(void* ptr);
void* QGeoRoute_Request(void* ptr);
struct QtLocation_PackedString QGeoRoute_RouteId(void* ptr);
void QGeoRoute_SetBounds(void* ptr, void* bounds);
void QGeoRoute_SetDistance(void* ptr, double distance);
void QGeoRoute_SetFirstRouteSegment(void* ptr, void* routeSegment);
void QGeoRoute_SetRequest(void* ptr, void* request);
void QGeoRoute_SetRouteId(void* ptr, char* id);
void QGeoRoute_SetTravelMode(void* ptr, long long mode);
void QGeoRoute_SetTravelTime(void* ptr, int secs);
long long QGeoRoute_TravelMode(void* ptr);
int QGeoRoute_TravelTime(void* ptr);
void QGeoRoute_DestroyQGeoRoute(void* ptr);
void* QGeoRoute_path_atList(void* ptr, int i);
void* QGeoRouteReply_NewQGeoRouteReply(long long error, char* errorString, void* parent);
void* QGeoRouteReply_NewQGeoRouteReply2(void* request, void* parent);
void QGeoRouteReply_Abort(void* ptr);
void QGeoRouteReply_AbortDefault(void* ptr);
void QGeoRouteReply_ConnectError2(void* ptr);
void QGeoRouteReply_DisconnectError2(void* ptr);
void QGeoRouteReply_Error2(void* ptr, long long error, char* errorString);
long long QGeoRouteReply_Error(void* ptr);
struct QtLocation_PackedString QGeoRouteReply_ErrorString(void* ptr);
void QGeoRouteReply_ConnectFinished(void* ptr);
void QGeoRouteReply_DisconnectFinished(void* ptr);
void QGeoRouteReply_Finished(void* ptr);
char QGeoRouteReply_IsFinished(void* ptr);
void* QGeoRouteReply_Request(void* ptr);
struct QtLocation_PackedList QGeoRouteReply_Routes(void* ptr);
void QGeoRouteReply_SetError(void* ptr, long long error, char* errorString);
void QGeoRouteReply_SetFinished(void* ptr, char finished);
void QGeoRouteReply_DestroyQGeoRouteReply(void* ptr);
void QGeoRouteReply_DestroyQGeoRouteReplyDefault(void* ptr);
void* QGeoRouteReply_routes_atList(void* ptr, int i);
void QGeoRouteReply_TimerEvent(void* ptr, void* event);
void QGeoRouteReply_TimerEventDefault(void* ptr, void* event);
void QGeoRouteReply_ChildEvent(void* ptr, void* event);
void QGeoRouteReply_ChildEventDefault(void* ptr, void* event);
void QGeoRouteReply_ConnectNotify(void* ptr, void* sign);
void QGeoRouteReply_ConnectNotifyDefault(void* ptr, void* sign);
void QGeoRouteReply_CustomEvent(void* ptr, void* event);
void QGeoRouteReply_CustomEventDefault(void* ptr, void* event);
void QGeoRouteReply_DeleteLater(void* ptr);
void QGeoRouteReply_DeleteLaterDefault(void* ptr);
void QGeoRouteReply_DisconnectNotify(void* ptr, void* sign);
void QGeoRouteReply_DisconnectNotifyDefault(void* ptr, void* sign);
char QGeoRouteReply_Event(void* ptr, void* e);
char QGeoRouteReply_EventDefault(void* ptr, void* e);
char QGeoRouteReply_EventFilter(void* ptr, void* watched, void* event);
char QGeoRouteReply_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGeoRouteReply_MetaObject(void* ptr);
void* QGeoRouteReply_MetaObjectDefault(void* ptr);
void* QGeoRouteRequest_NewQGeoRouteRequest2(void* origin, void* destination);
void* QGeoRouteRequest_NewQGeoRouteRequest3(void* other);
struct QtLocation_PackedList QGeoRouteRequest_ExcludeAreas(void* ptr);
long long QGeoRouteRequest_FeatureWeight(void* ptr, long long featureType);
long long QGeoRouteRequest_ManeuverDetail(void* ptr);
int QGeoRouteRequest_NumberAlternativeRoutes(void* ptr);
long long QGeoRouteRequest_RouteOptimization(void* ptr);
long long QGeoRouteRequest_SegmentDetail(void* ptr);
void QGeoRouteRequest_SetFeatureWeight(void* ptr, long long featureType, long long featureWeight);
void QGeoRouteRequest_SetManeuverDetail(void* ptr, long long maneuverDetail);
void QGeoRouteRequest_SetNumberAlternativeRoutes(void* ptr, int alternatives);
void QGeoRouteRequest_SetRouteOptimization(void* ptr, long long optimization);
void QGeoRouteRequest_SetSegmentDetail(void* ptr, long long segmentDetail);
void QGeoRouteRequest_SetTravelModes(void* ptr, long long travelModes);
long long QGeoRouteRequest_TravelModes(void* ptr);
struct QtLocation_PackedList QGeoRouteRequest_Waypoints(void* ptr);
void QGeoRouteRequest_DestroyQGeoRouteRequest(void* ptr);
void* QGeoRouteRequest_excludeAreas_atList(void* ptr, int i);
void* QGeoRouteRequest_waypoints_atList(void* ptr, int i);
void* QGeoRouteSegment_NewQGeoRouteSegment();
void* QGeoRouteSegment_NewQGeoRouteSegment2(void* other);
double QGeoRouteSegment_Distance(void* ptr);
char QGeoRouteSegment_IsValid(void* ptr);
void* QGeoRouteSegment_Maneuver(void* ptr);
void* QGeoRouteSegment_NextRouteSegment(void* ptr);
struct QtLocation_PackedList QGeoRouteSegment_Path(void* ptr);
void QGeoRouteSegment_SetDistance(void* ptr, double distance);
void QGeoRouteSegment_SetManeuver(void* ptr, void* maneuver);
void QGeoRouteSegment_SetNextRouteSegment(void* ptr, void* routeSegment);
void QGeoRouteSegment_SetTravelTime(void* ptr, int secs);
int QGeoRouteSegment_TravelTime(void* ptr);
void QGeoRouteSegment_DestroyQGeoRouteSegment(void* ptr);
void* QGeoRouteSegment_path_atList(void* ptr, int i);
void* QGeoRoutingManager_CalculateRoute(void* ptr, void* request);
void QGeoRoutingManager_ConnectError(void* ptr);
void QGeoRoutingManager_DisconnectError(void* ptr);
void QGeoRoutingManager_Error(void* ptr, void* reply, long long error, char* errorString);
void QGeoRoutingManager_ConnectFinished(void* ptr);
void QGeoRoutingManager_DisconnectFinished(void* ptr);
void QGeoRoutingManager_Finished(void* ptr, void* reply);
void* QGeoRoutingManager_Locale(void* ptr);
struct QtLocation_PackedString QGeoRoutingManager_ManagerName(void* ptr);
int QGeoRoutingManager_ManagerVersion(void* ptr);
long long QGeoRoutingManager_MeasurementSystem(void* ptr);
void QGeoRoutingManager_SetLocale(void* ptr, void* locale);
void QGeoRoutingManager_SetMeasurementSystem(void* ptr, long long system);
long long QGeoRoutingManager_SupportedFeatureTypes(void* ptr);
long long QGeoRoutingManager_SupportedFeatureWeights(void* ptr);
long long QGeoRoutingManager_SupportedManeuverDetails(void* ptr);
long long QGeoRoutingManager_SupportedRouteOptimizations(void* ptr);
long long QGeoRoutingManager_SupportedSegmentDetails(void* ptr);
long long QGeoRoutingManager_SupportedTravelModes(void* ptr);
void* QGeoRoutingManager_UpdateRoute(void* ptr, void* route, void* position);
void QGeoRoutingManager_DestroyQGeoRoutingManager(void* ptr);
void QGeoRoutingManager_TimerEvent(void* ptr, void* event);
void QGeoRoutingManager_TimerEventDefault(void* ptr, void* event);
void QGeoRoutingManager_ChildEvent(void* ptr, void* event);
void QGeoRoutingManager_ChildEventDefault(void* ptr, void* event);
void QGeoRoutingManager_ConnectNotify(void* ptr, void* sign);
void QGeoRoutingManager_ConnectNotifyDefault(void* ptr, void* sign);
void QGeoRoutingManager_CustomEvent(void* ptr, void* event);
void QGeoRoutingManager_CustomEventDefault(void* ptr, void* event);
void QGeoRoutingManager_DeleteLater(void* ptr);
void QGeoRoutingManager_DeleteLaterDefault(void* ptr);
void QGeoRoutingManager_DisconnectNotify(void* ptr, void* sign);
void QGeoRoutingManager_DisconnectNotifyDefault(void* ptr, void* sign);
char QGeoRoutingManager_Event(void* ptr, void* e);
char QGeoRoutingManager_EventDefault(void* ptr, void* e);
char QGeoRoutingManager_EventFilter(void* ptr, void* watched, void* event);
char QGeoRoutingManager_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGeoRoutingManager_MetaObject(void* ptr);
void* QGeoRoutingManager_MetaObjectDefault(void* ptr);
void* QGeoRoutingManagerEngine_CalculateRoute(void* ptr, void* request);
void QGeoRoutingManagerEngine_ConnectError(void* ptr);
void QGeoRoutingManagerEngine_DisconnectError(void* ptr);
void QGeoRoutingManagerEngine_Error(void* ptr, void* reply, long long error, char* errorString);
void QGeoRoutingManagerEngine_ConnectFinished(void* ptr);
void QGeoRoutingManagerEngine_DisconnectFinished(void* ptr);
void QGeoRoutingManagerEngine_Finished(void* ptr, void* reply);
void* QGeoRoutingManagerEngine_Locale(void* ptr);
struct QtLocation_PackedString QGeoRoutingManagerEngine_ManagerName(void* ptr);
int QGeoRoutingManagerEngine_ManagerVersion(void* ptr);
long long QGeoRoutingManagerEngine_MeasurementSystem(void* ptr);
void QGeoRoutingManagerEngine_SetLocale(void* ptr, void* locale);
void QGeoRoutingManagerEngine_SetMeasurementSystem(void* ptr, long long system);
void QGeoRoutingManagerEngine_SetSupportedFeatureTypes(void* ptr, long long featureTypes);
void QGeoRoutingManagerEngine_SetSupportedFeatureWeights(void* ptr, long long featureWeights);
void QGeoRoutingManagerEngine_SetSupportedManeuverDetails(void* ptr, long long maneuverDetails);
void QGeoRoutingManagerEngine_SetSupportedRouteOptimizations(void* ptr, long long optimizations);
void QGeoRoutingManagerEngine_SetSupportedSegmentDetails(void* ptr, long long segmentDetails);
void QGeoRoutingManagerEngine_SetSupportedTravelModes(void* ptr, long long travelModes);
long long QGeoRoutingManagerEngine_SupportedFeatureTypes(void* ptr);
long long QGeoRoutingManagerEngine_SupportedFeatureWeights(void* ptr);
long long QGeoRoutingManagerEngine_SupportedManeuverDetails(void* ptr);
long long QGeoRoutingManagerEngine_SupportedRouteOptimizations(void* ptr);
long long QGeoRoutingManagerEngine_SupportedSegmentDetails(void* ptr);
long long QGeoRoutingManagerEngine_SupportedTravelModes(void* ptr);
void* QGeoRoutingManagerEngine_UpdateRoute(void* ptr, void* route, void* position);
void* QGeoRoutingManagerEngine_UpdateRouteDefault(void* ptr, void* route, void* position);
void QGeoRoutingManagerEngine_DestroyQGeoRoutingManagerEngine(void* ptr);
void QGeoRoutingManagerEngine_DestroyQGeoRoutingManagerEngineDefault(void* ptr);
void QGeoRoutingManagerEngine_TimerEvent(void* ptr, void* event);
void QGeoRoutingManagerEngine_TimerEventDefault(void* ptr, void* event);
void QGeoRoutingManagerEngine_ChildEvent(void* ptr, void* event);
void QGeoRoutingManagerEngine_ChildEventDefault(void* ptr, void* event);
void QGeoRoutingManagerEngine_ConnectNotify(void* ptr, void* sign);
void QGeoRoutingManagerEngine_ConnectNotifyDefault(void* ptr, void* sign);
void QGeoRoutingManagerEngine_CustomEvent(void* ptr, void* event);
void QGeoRoutingManagerEngine_CustomEventDefault(void* ptr, void* event);
void QGeoRoutingManagerEngine_DeleteLater(void* ptr);
void QGeoRoutingManagerEngine_DeleteLaterDefault(void* ptr);
void QGeoRoutingManagerEngine_DisconnectNotify(void* ptr, void* sign);
void QGeoRoutingManagerEngine_DisconnectNotifyDefault(void* ptr, void* sign);
char QGeoRoutingManagerEngine_Event(void* ptr, void* e);
char QGeoRoutingManagerEngine_EventDefault(void* ptr, void* e);
char QGeoRoutingManagerEngine_EventFilter(void* ptr, void* watched, void* event);
char QGeoRoutingManagerEngine_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGeoRoutingManagerEngine_MetaObject(void* ptr);
void* QGeoRoutingManagerEngine_MetaObjectDefault(void* ptr);
int QGeoServiceProvider_OnlineGeocodingFeature_Type();
int QGeoServiceProvider_OfflineGeocodingFeature_Type();
int QGeoServiceProvider_ReverseGeocodingFeature_Type();
int QGeoServiceProvider_LocalizedGeocodingFeature_Type();
int QGeoServiceProvider_AnyGeocodingFeatures_Type();
int QGeoServiceProvider_OnlineMappingFeature_Type();
int QGeoServiceProvider_OfflineMappingFeature_Type();
int QGeoServiceProvider_LocalizedMappingFeature_Type();
int QGeoServiceProvider_AnyMappingFeatures_Type();
int QGeoServiceProvider_OnlinePlacesFeature_Type();
int QGeoServiceProvider_OfflinePlacesFeature_Type();
int QGeoServiceProvider_SavePlaceFeature_Type();
int QGeoServiceProvider_RemovePlaceFeature_Type();
int QGeoServiceProvider_SaveCategoryFeature_Type();
int QGeoServiceProvider_RemoveCategoryFeature_Type();
int QGeoServiceProvider_PlaceRecommendationsFeature_Type();
int QGeoServiceProvider_SearchSuggestionsFeature_Type();
int QGeoServiceProvider_LocalizedPlacesFeature_Type();
int QGeoServiceProvider_NotificationsFeature_Type();
int QGeoServiceProvider_PlaceMatchingFeature_Type();
int QGeoServiceProvider_AnyPlacesFeatures_Type();
int QGeoServiceProvider_OnlineRoutingFeature_Type();
int QGeoServiceProvider_OfflineRoutingFeature_Type();
int QGeoServiceProvider_LocalizedRoutingFeature_Type();
int QGeoServiceProvider_RouteUpdatesFeature_Type();
int QGeoServiceProvider_AlternativeRoutesFeature_Type();
int QGeoServiceProvider_ExcludeAreasRoutingFeature_Type();
int QGeoServiceProvider_AnyRoutingFeatures_Type();
struct QtLocation_PackedString QGeoServiceProvider_QGeoServiceProvider_AvailableServiceProviders();
long long QGeoServiceProvider_Error(void* ptr);
struct QtLocation_PackedString QGeoServiceProvider_ErrorString(void* ptr);
long long QGeoServiceProvider_GeocodingFeatures(void* ptr);
void* QGeoServiceProvider_GeocodingManager(void* ptr);
long long QGeoServiceProvider_MappingFeatures(void* ptr);
void* QGeoServiceProvider_PlaceManager(void* ptr);
long long QGeoServiceProvider_PlacesFeatures(void* ptr);
long long QGeoServiceProvider_RoutingFeatures(void* ptr);
void* QGeoServiceProvider_RoutingManager(void* ptr);
void QGeoServiceProvider_SetAllowExperimental(void* ptr, char allow);
void QGeoServiceProvider_SetLocale(void* ptr, void* locale);
void QGeoServiceProvider_DestroyQGeoServiceProvider(void* ptr);
void QGeoServiceProvider_TimerEvent(void* ptr, void* event);
void QGeoServiceProvider_TimerEventDefault(void* ptr, void* event);
void QGeoServiceProvider_ChildEvent(void* ptr, void* event);
void QGeoServiceProvider_ChildEventDefault(void* ptr, void* event);
void QGeoServiceProvider_ConnectNotify(void* ptr, void* sign);
void QGeoServiceProvider_ConnectNotifyDefault(void* ptr, void* sign);
void QGeoServiceProvider_CustomEvent(void* ptr, void* event);
void QGeoServiceProvider_CustomEventDefault(void* ptr, void* event);
void QGeoServiceProvider_DeleteLater(void* ptr);
void QGeoServiceProvider_DeleteLaterDefault(void* ptr);
void QGeoServiceProvider_DisconnectNotify(void* ptr, void* sign);
void QGeoServiceProvider_DisconnectNotifyDefault(void* ptr, void* sign);
char QGeoServiceProvider_Event(void* ptr, void* e);
char QGeoServiceProvider_EventDefault(void* ptr, void* e);
char QGeoServiceProvider_EventFilter(void* ptr, void* watched, void* event);
char QGeoServiceProvider_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGeoServiceProvider_MetaObject(void* ptr);
void* QGeoServiceProvider_MetaObjectDefault(void* ptr);
void QGeoServiceProviderFactory_DestroyQGeoServiceProviderFactory(void* ptr);
void QGeoServiceProviderFactory_DestroyQGeoServiceProviderFactoryDefault(void* ptr);

#ifdef __cplusplus
}
#endif

#endif