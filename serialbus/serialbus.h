// +build !minimal

#pragma once

#ifndef GO_QTSERIALBUS_H
#define GO_QTSERIALBUS_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

struct QtSerialBus_PackedString { char* data; long long len; };
struct QtSerialBus_PackedList { void* data; long long len; };
void* QCanBus_CreateDevice(void* ptr, void* plugin, char* interfaceName);
void* QCanBus_QCanBus_Instance();
struct QtSerialBus_PackedList QCanBus_Plugins(void* ptr);
void* QCanBus_plugins_atList(void* ptr, int i);
void QCanBus_TimerEvent(void* ptr, void* event);
void QCanBus_TimerEventDefault(void* ptr, void* event);
void QCanBus_ChildEvent(void* ptr, void* event);
void QCanBus_ChildEventDefault(void* ptr, void* event);
void QCanBus_ConnectNotify(void* ptr, void* sign);
void QCanBus_ConnectNotifyDefault(void* ptr, void* sign);
void QCanBus_CustomEvent(void* ptr, void* event);
void QCanBus_CustomEventDefault(void* ptr, void* event);
void QCanBus_DeleteLater(void* ptr);
void QCanBus_DeleteLaterDefault(void* ptr);
void QCanBus_DisconnectNotify(void* ptr, void* sign);
void QCanBus_DisconnectNotifyDefault(void* ptr, void* sign);
char QCanBus_Event(void* ptr, void* e);
char QCanBus_EventDefault(void* ptr, void* e);
char QCanBus_EventFilter(void* ptr, void* watched, void* event);
char QCanBus_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCanBus_MetaObject(void* ptr);
void* QCanBus_MetaObjectDefault(void* ptr);
long long QCanBusDevice_FramesAvailable(void* ptr);
long long QCanBusDevice_FramesToWrite(void* ptr);
void* QCanBusDevice_NewQCanBusDevice(void* parent);
void QCanBusDevice_Close(void* ptr);
void* QCanBusDevice_ConfigurationParameter(void* ptr, int key);
char QCanBusDevice_ConnectDevice(void* ptr);
void QCanBusDevice_DisconnectDevice(void* ptr);
void QCanBusDevice_EnqueueOutgoingFrame(void* ptr, void* newFrame);
long long QCanBusDevice_Error(void* ptr);
void QCanBusDevice_ConnectErrorOccurred(void* ptr);
void QCanBusDevice_DisconnectErrorOccurred(void* ptr);
void QCanBusDevice_ErrorOccurred(void* ptr, long long error);
struct QtSerialBus_PackedString QCanBusDevice_ErrorString(void* ptr);
void QCanBusDevice_ConnectFramesReceived(void* ptr);
void QCanBusDevice_DisconnectFramesReceived(void* ptr);
void QCanBusDevice_FramesReceived(void* ptr);
void QCanBusDevice_ConnectFramesWritten(void* ptr);
void QCanBusDevice_DisconnectFramesWritten(void* ptr);
void QCanBusDevice_FramesWritten(void* ptr, long long framesCount);
char QCanBusDevice_HasOutgoingFrames(void* ptr);
struct QtSerialBus_PackedString QCanBusDevice_InterpretErrorFrame(void* ptr, void* frame);
char QCanBusDevice_Open(void* ptr);
void QCanBusDevice_SetConfigurationParameter(void* ptr, int key, void* value);
void QCanBusDevice_SetConfigurationParameterDefault(void* ptr, int key, void* value);
void QCanBusDevice_SetError(void* ptr, char* errorText, long long errorId);
void QCanBusDevice_SetState(void* ptr, long long newState);
long long QCanBusDevice_State(void* ptr);
void QCanBusDevice_ConnectStateChanged(void* ptr);
void QCanBusDevice_DisconnectStateChanged(void* ptr);
void QCanBusDevice_StateChanged(void* ptr, long long state);
char QCanBusDevice_WriteFrame(void* ptr, void* frame);
void QCanBusDevice_TimerEvent(void* ptr, void* event);
void QCanBusDevice_TimerEventDefault(void* ptr, void* event);
void QCanBusDevice_ChildEvent(void* ptr, void* event);
void QCanBusDevice_ChildEventDefault(void* ptr, void* event);
void QCanBusDevice_ConnectNotify(void* ptr, void* sign);
void QCanBusDevice_ConnectNotifyDefault(void* ptr, void* sign);
void QCanBusDevice_CustomEvent(void* ptr, void* event);
void QCanBusDevice_CustomEventDefault(void* ptr, void* event);
void QCanBusDevice_DeleteLater(void* ptr);
void QCanBusDevice_DeleteLaterDefault(void* ptr);
void QCanBusDevice_DisconnectNotify(void* ptr, void* sign);
void QCanBusDevice_DisconnectNotifyDefault(void* ptr, void* sign);
char QCanBusDevice_Event(void* ptr, void* e);
char QCanBusDevice_EventDefault(void* ptr, void* e);
char QCanBusDevice_EventFilter(void* ptr, void* watched, void* event);
char QCanBusDevice_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCanBusDevice_MetaObject(void* ptr);
void* QCanBusDevice_MetaObjectDefault(void* ptr);
void* QCanBusFactory_CreateDevice(void* ptr, char* interfaceName);
int QCanBusFrame_TransmissionTimeoutError_Type();
int QCanBusFrame_LostArbitrationError_Type();
int QCanBusFrame_ControllerError_Type();
int QCanBusFrame_ProtocolViolationError_Type();
int QCanBusFrame_TransceiverError_Type();
int QCanBusFrame_MissingAcknowledgmentError_Type();
int QCanBusFrame_BusOffError_Type();
int QCanBusFrame_BusError_Type();
int QCanBusFrame_ControllerRestartError_Type();
int QCanBusFrame_UnknownError_Type();
int QCanBusFrame_AnyError_Type();
void* QCanBusFrame_NewQCanBusFrame(long long ty);
void* QCanBusFrame_NewQCanBusFrame2(unsigned int identifier, void* data);
long long QCanBusFrame_Error(void* ptr);
unsigned int QCanBusFrame_FrameId(void* ptr);
long long QCanBusFrame_FrameType(void* ptr);
char QCanBusFrame_HasExtendedFrameFormat(void* ptr);
char QCanBusFrame_IsValid(void* ptr);
void* QCanBusFrame_Payload(void* ptr);
void QCanBusFrame_SetError(void* ptr, long long error);
void QCanBusFrame_SetExtendedFrameFormat(void* ptr, char isExtended);
void QCanBusFrame_SetFrameId(void* ptr, unsigned int newFrameId);
void QCanBusFrame_SetFrameType(void* ptr, long long newType);
void QCanBusFrame_SetPayload(void* ptr, void* data);
int QModbusClient_Timeout(void* ptr);
void* QModbusClient_NewQModbusClient(void* parent);
int QModbusClient_NumberOfRetries(void* ptr);
void* QModbusClient_SendRawRequest(void* ptr, void* request, int serverAddress);
void* QModbusClient_SendReadRequest(void* ptr, void* read, int serverAddress);
void* QModbusClient_SendReadWriteRequest(void* ptr, void* read, void* write, int serverAddress);
void* QModbusClient_SendWriteRequest(void* ptr, void* write, int serverAddress);
void QModbusClient_SetNumberOfRetries(void* ptr, int number);
void QModbusClient_SetTimeout(void* ptr, int newTimeout);
void QModbusClient_ConnectTimeoutChanged(void* ptr);
void QModbusClient_DisconnectTimeoutChanged(void* ptr);
void QModbusClient_TimeoutChanged(void* ptr, int newTimeout);
char QModbusClient_ProcessPrivateResponse(void* ptr, void* response, void* data);
char QModbusClient_ProcessPrivateResponseDefault(void* ptr, void* response, void* data);
char QModbusClient_ProcessResponse(void* ptr, void* response, void* data);
char QModbusClient_ProcessResponseDefault(void* ptr, void* response, void* data);
void QModbusClient_Close(void* ptr);
;
char QModbusClient_Open(void* ptr);
;
void QModbusClient_TimerEvent(void* ptr, void* event);
void QModbusClient_TimerEventDefault(void* ptr, void* event);
void QModbusClient_ChildEvent(void* ptr, void* event);
void QModbusClient_ChildEventDefault(void* ptr, void* event);
void QModbusClient_ConnectNotify(void* ptr, void* sign);
void QModbusClient_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusClient_CustomEvent(void* ptr, void* event);
void QModbusClient_CustomEventDefault(void* ptr, void* event);
void QModbusClient_DeleteLater(void* ptr);
void QModbusClient_DeleteLaterDefault(void* ptr);
void QModbusClient_DisconnectNotify(void* ptr, void* sign);
void QModbusClient_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusClient_Event(void* ptr, void* e);
char QModbusClient_EventDefault(void* ptr, void* e);
char QModbusClient_EventFilter(void* ptr, void* watched, void* event);
char QModbusClient_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusClient_MetaObject(void* ptr);
void* QModbusClient_MetaObjectDefault(void* ptr);
void* QModbusDataUnit_NewQModbusDataUnit();
void* QModbusDataUnit_NewQModbusDataUnit2(long long ty);
void* QModbusDataUnit_NewQModbusDataUnit3(long long ty, int address, unsigned short size);
char QModbusDataUnit_IsValid(void* ptr);
long long QModbusDataUnit_RegisterType(void* ptr);
void QModbusDataUnit_SetRegisterType(void* ptr, long long ty);
void QModbusDataUnit_SetStartAddress(void* ptr, int address);
void QModbusDataUnit_SetValue(void* ptr, int index, unsigned short value);
void QModbusDataUnit_SetValueCount(void* ptr, unsigned int newCount);
int QModbusDataUnit_StartAddress(void* ptr);
unsigned short QModbusDataUnit_Value(void* ptr, int index);
unsigned int QModbusDataUnit_ValueCount(void* ptr);
void* QModbusDevice_NewQModbusDevice(void* parent);
void QModbusDevice_Close(void* ptr);
char QModbusDevice_ConnectDevice(void* ptr);
void* QModbusDevice_ConnectionParameter(void* ptr, int parameter);
void QModbusDevice_DisconnectDevice(void* ptr);
long long QModbusDevice_Error(void* ptr);
void QModbusDevice_ConnectErrorOccurred(void* ptr);
void QModbusDevice_DisconnectErrorOccurred(void* ptr);
void QModbusDevice_ErrorOccurred(void* ptr, long long error);
struct QtSerialBus_PackedString QModbusDevice_ErrorString(void* ptr);
char QModbusDevice_Open(void* ptr);
void QModbusDevice_SetConnectionParameter(void* ptr, int parameter, void* value);
void QModbusDevice_SetError(void* ptr, char* errorText, long long error);
void QModbusDevice_SetState(void* ptr, long long newState);
long long QModbusDevice_State(void* ptr);
void QModbusDevice_ConnectStateChanged(void* ptr);
void QModbusDevice_DisconnectStateChanged(void* ptr);
void QModbusDevice_StateChanged(void* ptr, long long state);
void QModbusDevice_DestroyQModbusDevice(void* ptr);
void QModbusDevice_TimerEvent(void* ptr, void* event);
void QModbusDevice_TimerEventDefault(void* ptr, void* event);
void QModbusDevice_ChildEvent(void* ptr, void* event);
void QModbusDevice_ChildEventDefault(void* ptr, void* event);
void QModbusDevice_ConnectNotify(void* ptr, void* sign);
void QModbusDevice_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusDevice_CustomEvent(void* ptr, void* event);
void QModbusDevice_CustomEventDefault(void* ptr, void* event);
void QModbusDevice_DeleteLater(void* ptr);
void QModbusDevice_DeleteLaterDefault(void* ptr);
void QModbusDevice_DisconnectNotify(void* ptr, void* sign);
void QModbusDevice_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusDevice_Event(void* ptr, void* e);
char QModbusDevice_EventDefault(void* ptr, void* e);
char QModbusDevice_EventFilter(void* ptr, void* watched, void* event);
char QModbusDevice_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusDevice_MetaObject(void* ptr);
void* QModbusDevice_MetaObjectDefault(void* ptr);
void* QModbusDeviceIdentification_NewQModbusDeviceIdentification();
long long QModbusDeviceIdentification_ConformityLevel(void* ptr);
char QModbusDeviceIdentification_Contains(void* ptr, unsigned int objectId);
void* QModbusDeviceIdentification_QModbusDeviceIdentification_FromByteArray(void* ba);
char QModbusDeviceIdentification_Insert(void* ptr, unsigned int objectId, void* value);
char QModbusDeviceIdentification_IsValid(void* ptr);
void QModbusDeviceIdentification_Remove(void* ptr, unsigned int objectId);
void QModbusDeviceIdentification_SetConformityLevel(void* ptr, long long level);
void* QModbusDeviceIdentification_Value(void* ptr, unsigned int objectId);
void* QModbusExceptionResponse_NewQModbusExceptionResponse();
void* QModbusExceptionResponse_NewQModbusExceptionResponse3(long long code, long long ec);
void* QModbusExceptionResponse_NewQModbusExceptionResponse2(void* pdu);
void QModbusExceptionResponse_SetExceptionCode(void* ptr, long long ec);
void QModbusExceptionResponse_SetFunctionCode(void* ptr, long long c);
void QModbusExceptionResponse_SetFunctionCodeDefault(void* ptr, long long c);
void* QModbusPdu_NewQModbusPdu();
void* QModbusPdu_NewQModbusPdu2(long long code, void* data);
void* QModbusPdu_NewQModbusPdu3(void* other);
short QModbusPdu_DataSize(void* ptr);
void* QModbusPdu_Data(void* ptr);
long long QModbusPdu_ExceptionCode(void* ptr);
long long QModbusPdu_FunctionCode(void* ptr);
char QModbusPdu_IsException(void* ptr);
char QModbusPdu_IsValid(void* ptr);
void QModbusPdu_SetData(void* ptr, void* data);
void QModbusPdu_SetFunctionCode(void* ptr, long long code);
void QModbusPdu_SetFunctionCodeDefault(void* ptr, long long code);
short QModbusPdu_Size(void* ptr);
void QModbusPdu_DestroyQModbusPdu(void* ptr);
void QModbusPdu_DestroyQModbusPduDefault(void* ptr);
void* QModbusReply_NewQModbusReply(long long ty, int serverAddress, void* parent);
long long QModbusReply_Error(void* ptr);
void QModbusReply_ConnectErrorOccurred(void* ptr);
void QModbusReply_DisconnectErrorOccurred(void* ptr);
void QModbusReply_ErrorOccurred(void* ptr, long long error);
struct QtSerialBus_PackedString QModbusReply_ErrorString(void* ptr);
void QModbusReply_ConnectFinished(void* ptr);
void QModbusReply_DisconnectFinished(void* ptr);
void QModbusReply_Finished(void* ptr);
char QModbusReply_IsFinished(void* ptr);
void* QModbusReply_RawResult(void* ptr);
void* QModbusReply_Result(void* ptr);
int QModbusReply_ServerAddress(void* ptr);
long long QModbusReply_Type(void* ptr);
void QModbusReply_TimerEvent(void* ptr, void* event);
void QModbusReply_TimerEventDefault(void* ptr, void* event);
void QModbusReply_ChildEvent(void* ptr, void* event);
void QModbusReply_ChildEventDefault(void* ptr, void* event);
void QModbusReply_ConnectNotify(void* ptr, void* sign);
void QModbusReply_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusReply_CustomEvent(void* ptr, void* event);
void QModbusReply_CustomEventDefault(void* ptr, void* event);
void QModbusReply_DeleteLater(void* ptr);
void QModbusReply_DeleteLaterDefault(void* ptr);
void QModbusReply_DisconnectNotify(void* ptr, void* sign);
void QModbusReply_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusReply_Event(void* ptr, void* e);
char QModbusReply_EventDefault(void* ptr, void* e);
char QModbusReply_EventFilter(void* ptr, void* watched, void* event);
char QModbusReply_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusReply_MetaObject(void* ptr);
void* QModbusReply_MetaObjectDefault(void* ptr);
void* QModbusRequest_NewQModbusRequest();
void* QModbusRequest_NewQModbusRequest3(long long code, void* data);
void* QModbusRequest_NewQModbusRequest2(void* pdu);
int QModbusRequest_QModbusRequest_CalculateDataSize(void* request);
int QModbusRequest_QModbusRequest_MinimumDataSize(void* request);
void QModbusRequest_SetFunctionCode(void* ptr, long long code);
void QModbusRequest_SetFunctionCodeDefault(void* ptr, long long code);
void* QModbusResponse_NewQModbusResponse();
void* QModbusResponse_NewQModbusResponse3(long long code, void* data);
void* QModbusResponse_NewQModbusResponse2(void* pdu);
int QModbusResponse_QModbusResponse_CalculateDataSize(void* response);
int QModbusResponse_QModbusResponse_MinimumDataSize(void* response);
void QModbusResponse_SetFunctionCode(void* ptr, long long code);
void QModbusResponse_SetFunctionCodeDefault(void* ptr, long long code);
void* QModbusRtuSerialMaster_NewQModbusRtuSerialMaster(void* parent);
int QModbusRtuSerialMaster_InterFrameDelay(void* ptr);
void QModbusRtuSerialMaster_SetInterFrameDelay(void* ptr, int microseconds);
char QModbusRtuSerialMaster_ProcessPrivateResponse(void* ptr, void* response, void* data);
char QModbusRtuSerialMaster_ProcessPrivateResponseDefault(void* ptr, void* response, void* data);
char QModbusRtuSerialMaster_ProcessResponse(void* ptr, void* response, void* data);
char QModbusRtuSerialMaster_ProcessResponseDefault(void* ptr, void* response, void* data);
void QModbusRtuSerialMaster_Close(void* ptr);
void QModbusRtuSerialMaster_CloseDefault(void* ptr);
char QModbusRtuSerialMaster_Open(void* ptr);
char QModbusRtuSerialMaster_OpenDefault(void* ptr);
void QModbusRtuSerialMaster_TimerEvent(void* ptr, void* event);
void QModbusRtuSerialMaster_TimerEventDefault(void* ptr, void* event);
void QModbusRtuSerialMaster_ChildEvent(void* ptr, void* event);
void QModbusRtuSerialMaster_ChildEventDefault(void* ptr, void* event);
void QModbusRtuSerialMaster_ConnectNotify(void* ptr, void* sign);
void QModbusRtuSerialMaster_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusRtuSerialMaster_CustomEvent(void* ptr, void* event);
void QModbusRtuSerialMaster_CustomEventDefault(void* ptr, void* event);
void QModbusRtuSerialMaster_DeleteLater(void* ptr);
void QModbusRtuSerialMaster_DeleteLaterDefault(void* ptr);
void QModbusRtuSerialMaster_DisconnectNotify(void* ptr, void* sign);
void QModbusRtuSerialMaster_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusRtuSerialMaster_Event(void* ptr, void* e);
char QModbusRtuSerialMaster_EventDefault(void* ptr, void* e);
char QModbusRtuSerialMaster_EventFilter(void* ptr, void* watched, void* event);
char QModbusRtuSerialMaster_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusRtuSerialMaster_MetaObject(void* ptr);
void* QModbusRtuSerialMaster_MetaObjectDefault(void* ptr);
void* QModbusRtuSerialSlave_NewQModbusRtuSerialSlave(void* parent);
void QModbusRtuSerialSlave_DestroyQModbusRtuSerialSlave(void* ptr);
void* QModbusRtuSerialSlave_ProcessPrivateRequest(void* ptr, void* request);
void* QModbusRtuSerialSlave_ProcessPrivateRequestDefault(void* ptr, void* request);
void* QModbusRtuSerialSlave_ProcessRequest(void* ptr, void* request);
void* QModbusRtuSerialSlave_ProcessRequestDefault(void* ptr, void* request);
char QModbusRtuSerialSlave_ProcessesBroadcast(void* ptr);
char QModbusRtuSerialSlave_ProcessesBroadcastDefault(void* ptr);
char QModbusRtuSerialSlave_SetValue(void* ptr, int option, void* newValue);
char QModbusRtuSerialSlave_SetValueDefault(void* ptr, int option, void* newValue);
void* QModbusRtuSerialSlave_Value(void* ptr, int option);
void* QModbusRtuSerialSlave_ValueDefault(void* ptr, int option);
char QModbusRtuSerialSlave_WriteData(void* ptr, void* newData);
char QModbusRtuSerialSlave_WriteDataDefault(void* ptr, void* newData);
void QModbusRtuSerialSlave_Close(void* ptr);
void QModbusRtuSerialSlave_CloseDefault(void* ptr);
char QModbusRtuSerialSlave_Open(void* ptr);
char QModbusRtuSerialSlave_OpenDefault(void* ptr);
void QModbusRtuSerialSlave_TimerEvent(void* ptr, void* event);
void QModbusRtuSerialSlave_TimerEventDefault(void* ptr, void* event);
void QModbusRtuSerialSlave_ChildEvent(void* ptr, void* event);
void QModbusRtuSerialSlave_ChildEventDefault(void* ptr, void* event);
void QModbusRtuSerialSlave_ConnectNotify(void* ptr, void* sign);
void QModbusRtuSerialSlave_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusRtuSerialSlave_CustomEvent(void* ptr, void* event);
void QModbusRtuSerialSlave_CustomEventDefault(void* ptr, void* event);
void QModbusRtuSerialSlave_DeleteLater(void* ptr);
void QModbusRtuSerialSlave_DeleteLaterDefault(void* ptr);
void QModbusRtuSerialSlave_DisconnectNotify(void* ptr, void* sign);
void QModbusRtuSerialSlave_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusRtuSerialSlave_Event(void* ptr, void* e);
char QModbusRtuSerialSlave_EventDefault(void* ptr, void* e);
char QModbusRtuSerialSlave_EventFilter(void* ptr, void* watched, void* event);
char QModbusRtuSerialSlave_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusRtuSerialSlave_MetaObject(void* ptr);
void* QModbusRtuSerialSlave_MetaObjectDefault(void* ptr);
void* QModbusServer_NewQModbusServer(void* parent);
char QModbusServer_Data(void* ptr, void* newData);
char QModbusServer_Data2(void* ptr, long long table, unsigned short address, unsigned short data);
void QModbusServer_ConnectDataWritten(void* ptr);
void QModbusServer_DisconnectDataWritten(void* ptr);
void QModbusServer_DataWritten(void* ptr, long long regist, int address, int size);
void* QModbusServer_ProcessPrivateRequest(void* ptr, void* request);
void* QModbusServer_ProcessPrivateRequestDefault(void* ptr, void* request);
void* QModbusServer_ProcessRequest(void* ptr, void* request);
void* QModbusServer_ProcessRequestDefault(void* ptr, void* request);
char QModbusServer_ProcessesBroadcast(void* ptr);
char QModbusServer_ProcessesBroadcastDefault(void* ptr);
int QModbusServer_ServerAddress(void* ptr);
char QModbusServer_SetData2(void* ptr, long long table, unsigned short address, unsigned short data);
char QModbusServer_SetData(void* ptr, void* newData);
void QModbusServer_SetServerAddress(void* ptr, int serverAddress);
char QModbusServer_SetValue(void* ptr, int option, void* newValue);
char QModbusServer_SetValueDefault(void* ptr, int option, void* newValue);
void* QModbusServer_Value(void* ptr, int option);
void* QModbusServer_ValueDefault(void* ptr, int option);
char QModbusServer_WriteData(void* ptr, void* newData);
char QModbusServer_WriteDataDefault(void* ptr, void* newData);
void QModbusServer_Close(void* ptr);
;
char QModbusServer_Open(void* ptr);
;
void QModbusServer_TimerEvent(void* ptr, void* event);
void QModbusServer_TimerEventDefault(void* ptr, void* event);
void QModbusServer_ChildEvent(void* ptr, void* event);
void QModbusServer_ChildEventDefault(void* ptr, void* event);
void QModbusServer_ConnectNotify(void* ptr, void* sign);
void QModbusServer_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusServer_CustomEvent(void* ptr, void* event);
void QModbusServer_CustomEventDefault(void* ptr, void* event);
void QModbusServer_DeleteLater(void* ptr);
void QModbusServer_DeleteLaterDefault(void* ptr);
void QModbusServer_DisconnectNotify(void* ptr, void* sign);
void QModbusServer_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusServer_Event(void* ptr, void* e);
char QModbusServer_EventDefault(void* ptr, void* e);
char QModbusServer_EventFilter(void* ptr, void* watched, void* event);
char QModbusServer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusServer_MetaObject(void* ptr);
void* QModbusServer_MetaObjectDefault(void* ptr);
void* QModbusTcpClient_NewQModbusTcpClient(void* parent);
void QModbusTcpClient_DestroyQModbusTcpClient(void* ptr);
char QModbusTcpClient_ProcessPrivateResponse(void* ptr, void* response, void* data);
char QModbusTcpClient_ProcessPrivateResponseDefault(void* ptr, void* response, void* data);
char QModbusTcpClient_ProcessResponse(void* ptr, void* response, void* data);
char QModbusTcpClient_ProcessResponseDefault(void* ptr, void* response, void* data);
void QModbusTcpClient_Close(void* ptr);
void QModbusTcpClient_CloseDefault(void* ptr);
char QModbusTcpClient_Open(void* ptr);
char QModbusTcpClient_OpenDefault(void* ptr);
void QModbusTcpClient_TimerEvent(void* ptr, void* event);
void QModbusTcpClient_TimerEventDefault(void* ptr, void* event);
void QModbusTcpClient_ChildEvent(void* ptr, void* event);
void QModbusTcpClient_ChildEventDefault(void* ptr, void* event);
void QModbusTcpClient_ConnectNotify(void* ptr, void* sign);
void QModbusTcpClient_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusTcpClient_CustomEvent(void* ptr, void* event);
void QModbusTcpClient_CustomEventDefault(void* ptr, void* event);
void QModbusTcpClient_DeleteLater(void* ptr);
void QModbusTcpClient_DeleteLaterDefault(void* ptr);
void QModbusTcpClient_DisconnectNotify(void* ptr, void* sign);
void QModbusTcpClient_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusTcpClient_Event(void* ptr, void* e);
char QModbusTcpClient_EventDefault(void* ptr, void* e);
char QModbusTcpClient_EventFilter(void* ptr, void* watched, void* event);
char QModbusTcpClient_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusTcpClient_MetaObject(void* ptr);
void* QModbusTcpClient_MetaObjectDefault(void* ptr);
void* QModbusTcpServer_NewQModbusTcpServer(void* parent);
void QModbusTcpServer_DestroyQModbusTcpServer(void* ptr);
void* QModbusTcpServer_ProcessPrivateRequest(void* ptr, void* request);
void* QModbusTcpServer_ProcessPrivateRequestDefault(void* ptr, void* request);
void* QModbusTcpServer_ProcessRequest(void* ptr, void* request);
void* QModbusTcpServer_ProcessRequestDefault(void* ptr, void* request);
char QModbusTcpServer_ProcessesBroadcast(void* ptr);
char QModbusTcpServer_ProcessesBroadcastDefault(void* ptr);
char QModbusTcpServer_SetValue(void* ptr, int option, void* newValue);
char QModbusTcpServer_SetValueDefault(void* ptr, int option, void* newValue);
void* QModbusTcpServer_Value(void* ptr, int option);
void* QModbusTcpServer_ValueDefault(void* ptr, int option);
char QModbusTcpServer_WriteData(void* ptr, void* newData);
char QModbusTcpServer_WriteDataDefault(void* ptr, void* newData);
void QModbusTcpServer_Close(void* ptr);
void QModbusTcpServer_CloseDefault(void* ptr);
char QModbusTcpServer_Open(void* ptr);
char QModbusTcpServer_OpenDefault(void* ptr);
void QModbusTcpServer_TimerEvent(void* ptr, void* event);
void QModbusTcpServer_TimerEventDefault(void* ptr, void* event);
void QModbusTcpServer_ChildEvent(void* ptr, void* event);
void QModbusTcpServer_ChildEventDefault(void* ptr, void* event);
void QModbusTcpServer_ConnectNotify(void* ptr, void* sign);
void QModbusTcpServer_ConnectNotifyDefault(void* ptr, void* sign);
void QModbusTcpServer_CustomEvent(void* ptr, void* event);
void QModbusTcpServer_CustomEventDefault(void* ptr, void* event);
void QModbusTcpServer_DeleteLater(void* ptr);
void QModbusTcpServer_DeleteLaterDefault(void* ptr);
void QModbusTcpServer_DisconnectNotify(void* ptr, void* sign);
void QModbusTcpServer_DisconnectNotifyDefault(void* ptr, void* sign);
char QModbusTcpServer_Event(void* ptr, void* e);
char QModbusTcpServer_EventDefault(void* ptr, void* e);
char QModbusTcpServer_EventFilter(void* ptr, void* watched, void* event);
char QModbusTcpServer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QModbusTcpServer_MetaObject(void* ptr);
void* QModbusTcpServer_MetaObjectDefault(void* ptr);

#ifdef __cplusplus
}
#endif

#endif