// +build !minimal

package gui

//#include <stdint.h>
//#include <stdlib.h>
//#include "gui.h"
import "C"
import (
	"fmt"
	"github.com/therecipe/qt"
	"github.com/therecipe/qt/core"
	"runtime"
	"strings"
	"unsafe"
)

func cGoUnpackString(s C.struct_QtGui_PackedString) string {
	if len := int(s.len); len == -1 {
		return C.GoString(s.data)
	}
	return C.GoStringN(s.data, C.int(s.len))
}

type QAbstractTextDocumentLayout_PaintContext struct {
	ptr unsafe.Pointer
}

type QAbstractTextDocumentLayout_PaintContext_ITF interface {
	QAbstractTextDocumentLayout_PaintContext_PTR() *QAbstractTextDocumentLayout_PaintContext
}

func (p *QAbstractTextDocumentLayout_PaintContext) QAbstractTextDocumentLayout_PaintContext_PTR() *QAbstractTextDocumentLayout_PaintContext {
	return p
}

func (p *QAbstractTextDocumentLayout_PaintContext) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAbstractTextDocumentLayout_PaintContext) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAbstractTextDocumentLayout_PaintContext(ptr QAbstractTextDocumentLayout_PaintContext_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractTextDocumentLayout_PaintContext_PTR().Pointer()
	}
	return nil
}

func NewQAbstractTextDocumentLayout_PaintContextFromPointer(ptr unsafe.Pointer) *QAbstractTextDocumentLayout_PaintContext {
	var n = new(QAbstractTextDocumentLayout_PaintContext)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) DestroyQAbstractTextDocumentLayout_PaintContext() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAbstractTextDocumentLayout_PaintContext() *QAbstractTextDocumentLayout_PaintContext {
	var tmpValue = NewQAbstractTextDocumentLayout_PaintContextFromPointer(C.PaintContext_NewPaintContext())
	runtime.SetFinalizer(tmpValue, (*QAbstractTextDocumentLayout_PaintContext).DestroyQAbstractTextDocumentLayout_PaintContext)
	return tmpValue
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) Clip() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.PaintContext_Clip(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) SetClip(vqr core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.PaintContext_SetClip(ptr.Pointer(), core.PointerFromQRectF(vqr))
	}
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) CursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.PaintContext_CursorPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) SetCursorPosition(vin int) {
	if ptr.Pointer() != nil {
		C.PaintContext_SetCursorPosition(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) Palette() *QPalette {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPaletteFromPointer(C.PaintContext_Palette(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout_PaintContext) SetPalette(vqp QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.PaintContext_SetPalette(ptr.Pointer(), PointerFromQPalette(vqp))
	}
}

type QAbstractOpenGLFunctions struct {
	ptr unsafe.Pointer
}

type QAbstractOpenGLFunctions_ITF interface {
	QAbstractOpenGLFunctions_PTR() *QAbstractOpenGLFunctions
}

func (p *QAbstractOpenGLFunctions) QAbstractOpenGLFunctions_PTR() *QAbstractOpenGLFunctions {
	return p
}

func (p *QAbstractOpenGLFunctions) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAbstractOpenGLFunctions) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAbstractOpenGLFunctions(ptr QAbstractOpenGLFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func NewQAbstractOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QAbstractOpenGLFunctions {
	var n = new(QAbstractOpenGLFunctions)
	n.SetPointer(ptr)
	return n
}

type QAbstractTextDocumentLayout struct {
	core.QObject
}

type QAbstractTextDocumentLayout_ITF interface {
	core.QObject_ITF
	QAbstractTextDocumentLayout_PTR() *QAbstractTextDocumentLayout
}

func (p *QAbstractTextDocumentLayout) QAbstractTextDocumentLayout_PTR() *QAbstractTextDocumentLayout {
	return p
}

func (p *QAbstractTextDocumentLayout) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractTextDocumentLayout) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractTextDocumentLayout(ptr QAbstractTextDocumentLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractTextDocumentLayout_PTR().Pointer()
	}
	return nil
}

func NewQAbstractTextDocumentLayoutFromPointer(ptr unsafe.Pointer) *QAbstractTextDocumentLayout {
	var n = new(QAbstractTextDocumentLayout)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAbstractTextDocumentLayout) DestroyQAbstractTextDocumentLayout() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QAbstractTextDocumentLayout) AnchorAt(position core.QPointF_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAbstractTextDocumentLayout_AnchorAt(ptr.Pointer(), core.PointerFromQPointF(position)))
	}
	return ""
}

func (ptr *QAbstractTextDocumentLayout) Format(position int) *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QAbstractTextDocumentLayout_Format(ptr.Pointer(), C.int(int32(position))))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func NewQAbstractTextDocumentLayout(document QTextDocument_ITF) *QAbstractTextDocumentLayout {
	var tmpValue = NewQAbstractTextDocumentLayoutFromPointer(C.QAbstractTextDocumentLayout_NewQAbstractTextDocumentLayout(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractTextDocumentLayout_BlockBoundingRect
func callbackQAbstractTextDocumentLayout_BlockBoundingRect(ptr unsafe.Pointer, block unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::blockBoundingRect"); signal != nil {
		return core.PointerFromQRectF(signal.(func(*QTextBlock) *core.QRectF)(NewQTextBlockFromPointer(block)))
	}

	return core.PointerFromQRectF(nil)
}

func (ptr *QAbstractTextDocumentLayout) ConnectBlockBoundingRect(f func(block *QTextBlock) *core.QRectF) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::blockBoundingRect", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectBlockBoundingRect(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::blockBoundingRect")
	}
}

func (ptr *QAbstractTextDocumentLayout) BlockBoundingRect(block QTextBlock_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QAbstractTextDocumentLayout_BlockBoundingRect(ptr.Pointer(), PointerFromQTextBlock(block)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QAbstractTextDocumentLayout_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_DocumentChanged
func callbackQAbstractTextDocumentLayout_DocumentChanged(ptr unsafe.Pointer, position C.int, charsRemoved C.int, charsAdded C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::documentChanged"); signal != nil {
		signal.(func(int, int, int))(int(int32(position)), int(int32(charsRemoved)), int(int32(charsAdded)))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentChanged(f func(position int, charsRemoved int, charsAdded int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::documentChanged", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentChanged(position int, charsRemoved int, charsAdded int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::documentChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentChanged(position int, charsRemoved int, charsAdded int) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DocumentChanged(ptr.Pointer(), C.int(int32(position)), C.int(int32(charsRemoved)), C.int(int32(charsAdded)))
	}
}

//export callbackQAbstractTextDocumentLayout_DocumentSize
func callbackQAbstractTextDocumentLayout_DocumentSize(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::documentSize"); signal != nil {
		return core.PointerFromQSizeF(signal.(func() *core.QSizeF)())
	}

	return core.PointerFromQSizeF(nil)
}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentSize(f func() *core.QSizeF) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::documentSize", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::documentSize")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QAbstractTextDocumentLayout_DocumentSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_DocumentSizeChanged
func callbackQAbstractTextDocumentLayout_DocumentSizeChanged(ptr unsafe.Pointer, newSize unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::documentSizeChanged"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(newSize))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDocumentSizeChanged(f func(newSize *core.QSizeF)) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectDocumentSizeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::documentSizeChanged", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDocumentSizeChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectDocumentSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::documentSizeChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) DocumentSizeChanged(newSize core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DocumentSizeChanged(ptr.Pointer(), core.PointerFromQSizeF(newSize))
	}
}

//export callbackQAbstractTextDocumentLayout_Draw
func callbackQAbstractTextDocumentLayout_Draw(ptr unsafe.Pointer, painter unsafe.Pointer, context unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::draw"); signal != nil {
		signal.(func(*QPainter, *QAbstractTextDocumentLayout_PaintContext))(NewQPainterFromPointer(painter), NewQAbstractTextDocumentLayout_PaintContextFromPointer(context))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectDraw(f func(painter *QPainter, context *QAbstractTextDocumentLayout_PaintContext)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::draw", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDraw(painter QPainter_ITF, context QAbstractTextDocumentLayout_PaintContext_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::draw")
	}
}

func (ptr *QAbstractTextDocumentLayout) Draw(painter QPainter_ITF, context QAbstractTextDocumentLayout_PaintContext_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_Draw(ptr.Pointer(), PointerFromQPainter(painter), PointerFromQAbstractTextDocumentLayout_PaintContext(context))
	}
}

//export callbackQAbstractTextDocumentLayout_FrameBoundingRect
func callbackQAbstractTextDocumentLayout_FrameBoundingRect(ptr unsafe.Pointer, frame unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::frameBoundingRect"); signal != nil {
		return core.PointerFromQRectF(signal.(func(*QTextFrame) *core.QRectF)(NewQTextFrameFromPointer(frame)))
	}

	return core.PointerFromQRectF(nil)
}

func (ptr *QAbstractTextDocumentLayout) ConnectFrameBoundingRect(f func(frame *QTextFrame) *core.QRectF) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::frameBoundingRect", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectFrameBoundingRect(frame QTextFrame_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::frameBoundingRect")
	}
}

func (ptr *QAbstractTextDocumentLayout) FrameBoundingRect(frame QTextFrame_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QAbstractTextDocumentLayout_FrameBoundingRect(ptr.Pointer(), PointerFromQTextFrame(frame)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) HandlerForObject(objectType int) *QTextObjectInterface {
	if ptr.Pointer() != nil {
		return NewQTextObjectInterfaceFromPointer(C.QAbstractTextDocumentLayout_HandlerForObject(ptr.Pointer(), C.int(int32(objectType))))
	}
	return nil
}

//export callbackQAbstractTextDocumentLayout_HitTest
func callbackQAbstractTextDocumentLayout_HitTest(ptr unsafe.Pointer, point unsafe.Pointer, accuracy C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::hitTest"); signal != nil {
		return C.int(int32(signal.(func(*core.QPointF, core.Qt__HitTestAccuracy) int)(core.NewQPointFFromPointer(point), core.Qt__HitTestAccuracy(accuracy))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractTextDocumentLayout) ConnectHitTest(f func(point *core.QPointF, accuracy core.Qt__HitTestAccuracy) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::hitTest", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectHitTest(point core.QPointF_ITF, accuracy core.Qt__HitTestAccuracy) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::hitTest")
	}
}

func (ptr *QAbstractTextDocumentLayout) HitTest(point core.QPointF_ITF, accuracy core.Qt__HitTestAccuracy) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractTextDocumentLayout_HitTest(ptr.Pointer(), core.PointerFromQPointF(point), C.longlong(accuracy))))
	}
	return 0
}

//export callbackQAbstractTextDocumentLayout_PageCount
func callbackQAbstractTextDocumentLayout_PageCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::pageCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractTextDocumentLayout) ConnectPageCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::pageCount", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectPageCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::pageCount")
	}
}

func (ptr *QAbstractTextDocumentLayout) PageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractTextDocumentLayout_PageCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAbstractTextDocumentLayout_PageCountChanged
func callbackQAbstractTextDocumentLayout_PageCountChanged(ptr unsafe.Pointer, newPages C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::pageCountChanged"); signal != nil {
		signal.(func(int))(int(int32(newPages)))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectPageCountChanged(f func(newPages int)) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectPageCountChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::pageCountChanged", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectPageCountChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectPageCountChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::pageCountChanged")
	}
}

func (ptr *QAbstractTextDocumentLayout) PageCountChanged(newPages int) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_PageCountChanged(ptr.Pointer(), C.int(int32(newPages)))
	}
}

func (ptr *QAbstractTextDocumentLayout) PaintDevice() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QAbstractTextDocumentLayout_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) RegisterHandler(objectType int, component core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_RegisterHandler(ptr.Pointer(), C.int(int32(objectType)), core.PointerFromQObject(component))
	}
}

func (ptr *QAbstractTextDocumentLayout) SetPaintDevice(device QPaintDevice_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_SetPaintDevice(ptr.Pointer(), PointerFromQPaintDevice(device))
	}
}

func (ptr *QAbstractTextDocumentLayout) UnregisterHandler(objectType int, component core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_UnregisterHandler(ptr.Pointer(), C.int(int32(objectType)), core.PointerFromQObject(component))
	}
}

//export callbackQAbstractTextDocumentLayout_Update
func callbackQAbstractTextDocumentLayout_Update(ptr unsafe.Pointer, rect unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::update"); signal != nil {
		signal.(func(*core.QRectF))(core.NewQRectFFromPointer(rect))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectUpdate(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectUpdate(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::update", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectUpdate() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectUpdate(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::update")
	}
}

func (ptr *QAbstractTextDocumentLayout) Update(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_Update(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQAbstractTextDocumentLayout_UpdateBlock
func callbackQAbstractTextDocumentLayout_UpdateBlock(ptr unsafe.Pointer, block unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::updateBlock"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	}

}

func (ptr *QAbstractTextDocumentLayout) ConnectUpdateBlock(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectUpdateBlock(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::updateBlock", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectUpdateBlock() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectUpdateBlock(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::updateBlock")
	}
}

func (ptr *QAbstractTextDocumentLayout) UpdateBlock(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_UpdateBlock(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQAbstractTextDocumentLayout_TimerEvent
func callbackQAbstractTextDocumentLayout_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::timerEvent", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::timerEvent")
	}
}

func (ptr *QAbstractTextDocumentLayout) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_ChildEvent
func callbackQAbstractTextDocumentLayout_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::childEvent", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::childEvent")
	}
}

func (ptr *QAbstractTextDocumentLayout) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_ConnectNotify
func callbackQAbstractTextDocumentLayout_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::connectNotify", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::connectNotify")
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTextDocumentLayout_CustomEvent
func callbackQAbstractTextDocumentLayout_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::customEvent", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::customEvent")
	}
}

func (ptr *QAbstractTextDocumentLayout) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAbstractTextDocumentLayout) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAbstractTextDocumentLayout_DeleteLater
func callbackQAbstractTextDocumentLayout_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::deleteLater", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::deleteLater")
	}
}

func (ptr *QAbstractTextDocumentLayout) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractTextDocumentLayout) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractTextDocumentLayout_DisconnectNotify
func callbackQAbstractTextDocumentLayout_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTextDocumentLayoutFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::disconnectNotify", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::disconnectNotify")
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTextDocumentLayout_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTextDocumentLayout_Event
func callbackQAbstractTextDocumentLayout_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTextDocumentLayoutFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAbstractTextDocumentLayout) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::event", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::event")
	}
}

func (ptr *QAbstractTextDocumentLayout) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractTextDocumentLayout) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractTextDocumentLayout_EventFilter
func callbackQAbstractTextDocumentLayout_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTextDocumentLayoutFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAbstractTextDocumentLayout) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::eventFilter", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::eventFilter")
	}
}

func (ptr *QAbstractTextDocumentLayout) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractTextDocumentLayout) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTextDocumentLayout_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractTextDocumentLayout_MetaObject
func callbackQAbstractTextDocumentLayout_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTextDocumentLayout::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAbstractTextDocumentLayoutFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractTextDocumentLayout) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::metaObject", f)
	}
}

func (ptr *QAbstractTextDocumentLayout) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTextDocumentLayout::metaObject")
	}
}

func (ptr *QAbstractTextDocumentLayout) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractTextDocumentLayout_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractTextDocumentLayout) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAbstractTextDocumentLayout_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QAccessible::Event
type QAccessible__Event int64

var (
	QAccessible__SoundPlayed                     = QAccessible__Event(0x0001)
	QAccessible__Alert                           = QAccessible__Event(0x0002)
	QAccessible__ForegroundChanged               = QAccessible__Event(0x0003)
	QAccessible__MenuStart                       = QAccessible__Event(0x0004)
	QAccessible__MenuEnd                         = QAccessible__Event(0x0005)
	QAccessible__PopupMenuStart                  = QAccessible__Event(0x0006)
	QAccessible__PopupMenuEnd                    = QAccessible__Event(0x0007)
	QAccessible__ContextHelpStart                = QAccessible__Event(0x000C)
	QAccessible__ContextHelpEnd                  = QAccessible__Event(0x000D)
	QAccessible__DragDropStart                   = QAccessible__Event(0x000E)
	QAccessible__DragDropEnd                     = QAccessible__Event(0x000F)
	QAccessible__DialogStart                     = QAccessible__Event(0x0010)
	QAccessible__DialogEnd                       = QAccessible__Event(0x0011)
	QAccessible__ScrollingStart                  = QAccessible__Event(0x0012)
	QAccessible__ScrollingEnd                    = QAccessible__Event(0x0013)
	QAccessible__MenuCommand                     = QAccessible__Event(0x0018)
	QAccessible__ActionChanged                   = QAccessible__Event(0x0101)
	QAccessible__ActiveDescendantChanged         = QAccessible__Event(0x0102)
	QAccessible__AttributeChanged                = QAccessible__Event(0x0103)
	QAccessible__DocumentContentChanged          = QAccessible__Event(0x0104)
	QAccessible__DocumentLoadComplete            = QAccessible__Event(0x0105)
	QAccessible__DocumentLoadStopped             = QAccessible__Event(0x0106)
	QAccessible__DocumentReload                  = QAccessible__Event(0x0107)
	QAccessible__HyperlinkEndIndexChanged        = QAccessible__Event(0x0108)
	QAccessible__HyperlinkNumberOfAnchorsChanged = QAccessible__Event(0x0109)
	QAccessible__HyperlinkSelectedLinkChanged    = QAccessible__Event(0x010A)
	QAccessible__HypertextLinkActivated          = QAccessible__Event(0x010B)
	QAccessible__HypertextLinkSelected           = QAccessible__Event(0x010C)
	QAccessible__HyperlinkStartIndexChanged      = QAccessible__Event(0x010D)
	QAccessible__HypertextChanged                = QAccessible__Event(0x010E)
	QAccessible__HypertextNLinksChanged          = QAccessible__Event(0x010F)
	QAccessible__ObjectAttributeChanged          = QAccessible__Event(0x0110)
	QAccessible__PageChanged                     = QAccessible__Event(0x0111)
	QAccessible__SectionChanged                  = QAccessible__Event(0x0112)
	QAccessible__TableCaptionChanged             = QAccessible__Event(0x0113)
	QAccessible__TableColumnDescriptionChanged   = QAccessible__Event(0x0114)
	QAccessible__TableColumnHeaderChanged        = QAccessible__Event(0x0115)
	QAccessible__TableModelChanged               = QAccessible__Event(0x0116)
	QAccessible__TableRowDescriptionChanged      = QAccessible__Event(0x0117)
	QAccessible__TableRowHeaderChanged           = QAccessible__Event(0x0118)
	QAccessible__TableSummaryChanged             = QAccessible__Event(0x0119)
	QAccessible__TextAttributeChanged            = QAccessible__Event(0x011A)
	QAccessible__TextCaretMoved                  = QAccessible__Event(0x011B)
	QAccessible__TextColumnChanged               = QAccessible__Event(0x011D)
	QAccessible__TextInserted                    = QAccessible__Event(0x011E)
	QAccessible__TextRemoved                     = QAccessible__Event(0x011F)
	QAccessible__TextUpdated                     = QAccessible__Event(0x0120)
	QAccessible__TextSelectionChanged            = QAccessible__Event(0x0121)
	QAccessible__VisibleDataChanged              = QAccessible__Event(0x0122)
	QAccessible__ObjectCreated                   = QAccessible__Event(0x8000)
	QAccessible__ObjectDestroyed                 = QAccessible__Event(0x8001)
	QAccessible__ObjectShow                      = QAccessible__Event(0x8002)
	QAccessible__ObjectHide                      = QAccessible__Event(0x8003)
	QAccessible__ObjectReorder                   = QAccessible__Event(0x8004)
	QAccessible__Focus                           = QAccessible__Event(0x8005)
	QAccessible__Selection                       = QAccessible__Event(0x8006)
	QAccessible__SelectionAdd                    = QAccessible__Event(0x8007)
	QAccessible__SelectionRemove                 = QAccessible__Event(0x8008)
	QAccessible__SelectionWithin                 = QAccessible__Event(0x8009)
	QAccessible__StateChanged                    = QAccessible__Event(0x800A)
	QAccessible__LocationChanged                 = QAccessible__Event(0x800B)
	QAccessible__NameChanged                     = QAccessible__Event(0x800C)
	QAccessible__DescriptionChanged              = QAccessible__Event(0x800D)
	QAccessible__ValueChanged                    = QAccessible__Event(0x800E)
	QAccessible__ParentChanged                   = QAccessible__Event(0x800F)
	QAccessible__HelpChanged                     = QAccessible__Event(0x80A0)
	QAccessible__DefaultActionChanged            = QAccessible__Event(0x80B0)
	QAccessible__AcceleratorChanged              = QAccessible__Event(0x80C0)
	QAccessible__InvalidEvent                    = QAccessible__Event(C.QAccessible_InvalidEvent_Type())
)

//QAccessible::InterfaceType
type QAccessible__InterfaceType int64

const (
	QAccessible__TextInterface         = QAccessible__InterfaceType(0)
	QAccessible__EditableTextInterface = QAccessible__InterfaceType(1)
	QAccessible__ValueInterface        = QAccessible__InterfaceType(2)
	QAccessible__ActionInterface       = QAccessible__InterfaceType(3)
	QAccessible__ImageInterface        = QAccessible__InterfaceType(4)
	QAccessible__TableInterface        = QAccessible__InterfaceType(5)
	QAccessible__TableCellInterface    = QAccessible__InterfaceType(6)
)

//QAccessible::RelationFlag
type QAccessible__RelationFlag int64

const (
	QAccessible__Label        = QAccessible__RelationFlag(0x00000001)
	QAccessible__Labelled     = QAccessible__RelationFlag(0x00000002)
	QAccessible__Controller   = QAccessible__RelationFlag(0x00000004)
	QAccessible__Controlled   = QAccessible__RelationFlag(0x00000008)
	QAccessible__AllRelations = QAccessible__RelationFlag(0xffffffff)
)

//QAccessible::Role
type QAccessible__Role int64

const (
	QAccessible__NoRole               = QAccessible__Role(0x00000000)
	QAccessible__TitleBar             = QAccessible__Role(0x00000001)
	QAccessible__MenuBar              = QAccessible__Role(0x00000002)
	QAccessible__ScrollBar            = QAccessible__Role(0x00000003)
	QAccessible__Grip                 = QAccessible__Role(0x00000004)
	QAccessible__Sound                = QAccessible__Role(0x00000005)
	QAccessible__Cursor               = QAccessible__Role(0x00000006)
	QAccessible__Caret                = QAccessible__Role(0x00000007)
	QAccessible__AlertMessage         = QAccessible__Role(0x00000008)
	QAccessible__Window               = QAccessible__Role(0x00000009)
	QAccessible__Client               = QAccessible__Role(0x0000000A)
	QAccessible__PopupMenu            = QAccessible__Role(0x0000000B)
	QAccessible__MenuItem             = QAccessible__Role(0x0000000C)
	QAccessible__ToolTip              = QAccessible__Role(0x0000000D)
	QAccessible__Application          = QAccessible__Role(0x0000000E)
	QAccessible__Document             = QAccessible__Role(0x0000000F)
	QAccessible__Pane                 = QAccessible__Role(0x00000010)
	QAccessible__Chart                = QAccessible__Role(0x00000011)
	QAccessible__Dialog               = QAccessible__Role(0x00000012)
	QAccessible__Border               = QAccessible__Role(0x00000013)
	QAccessible__Grouping             = QAccessible__Role(0x00000014)
	QAccessible__Separator            = QAccessible__Role(0x00000015)
	QAccessible__ToolBar              = QAccessible__Role(0x00000016)
	QAccessible__StatusBar            = QAccessible__Role(0x00000017)
	QAccessible__Table                = QAccessible__Role(0x00000018)
	QAccessible__ColumnHeader         = QAccessible__Role(0x00000019)
	QAccessible__RowHeader            = QAccessible__Role(0x0000001A)
	QAccessible__Column               = QAccessible__Role(0x0000001B)
	QAccessible__Row                  = QAccessible__Role(0x0000001C)
	QAccessible__Cell                 = QAccessible__Role(0x0000001D)
	QAccessible__Link                 = QAccessible__Role(0x0000001E)
	QAccessible__HelpBalloon          = QAccessible__Role(0x0000001F)
	QAccessible__Assistant            = QAccessible__Role(0x00000020)
	QAccessible__List                 = QAccessible__Role(0x00000021)
	QAccessible__ListItem             = QAccessible__Role(0x00000022)
	QAccessible__Tree                 = QAccessible__Role(0x00000023)
	QAccessible__TreeItem             = QAccessible__Role(0x00000024)
	QAccessible__PageTab              = QAccessible__Role(0x00000025)
	QAccessible__PropertyPage         = QAccessible__Role(0x00000026)
	QAccessible__Indicator            = QAccessible__Role(0x00000027)
	QAccessible__Graphic              = QAccessible__Role(0x00000028)
	QAccessible__StaticText           = QAccessible__Role(0x00000029)
	QAccessible__EditableText         = QAccessible__Role(0x0000002A)
	QAccessible__Button               = QAccessible__Role(0x0000002B)
	QAccessible__CheckBox             = QAccessible__Role(0x0000002C)
	QAccessible__RadioButton          = QAccessible__Role(0x0000002D)
	QAccessible__ComboBox             = QAccessible__Role(0x0000002E)
	QAccessible__ProgressBar          = QAccessible__Role(0x00000030)
	QAccessible__Dial                 = QAccessible__Role(0x00000031)
	QAccessible__HotkeyField          = QAccessible__Role(0x00000032)
	QAccessible__Slider               = QAccessible__Role(0x00000033)
	QAccessible__SpinBox              = QAccessible__Role(0x00000034)
	QAccessible__Canvas               = QAccessible__Role(0x00000035)
	QAccessible__Animation            = QAccessible__Role(0x00000036)
	QAccessible__Equation             = QAccessible__Role(0x00000037)
	QAccessible__ButtonDropDown       = QAccessible__Role(0x00000038)
	QAccessible__ButtonMenu           = QAccessible__Role(0x00000039)
	QAccessible__ButtonDropGrid       = QAccessible__Role(0x0000003A)
	QAccessible__Whitespace           = QAccessible__Role(0x0000003B)
	QAccessible__PageTabList          = QAccessible__Role(0x0000003C)
	QAccessible__Clock                = QAccessible__Role(0x0000003D)
	QAccessible__Splitter             = QAccessible__Role(0x0000003E)
	QAccessible__LayeredPane          = QAccessible__Role(0x00000080)
	QAccessible__Terminal             = QAccessible__Role(0x00000081)
	QAccessible__Desktop              = QAccessible__Role(0x00000082)
	QAccessible__Paragraph            = QAccessible__Role(0x00000083)
	QAccessible__WebDocument          = QAccessible__Role(0x00000084)
	QAccessible__Section              = QAccessible__Role(0x00000085)
	QAccessible__ColorChooser         = QAccessible__Role(0x404)
	QAccessible__Footer               = QAccessible__Role(0x40E)
	QAccessible__Form                 = QAccessible__Role(0x410)
	QAccessible__Heading              = QAccessible__Role(0x414)
	QAccessible__Note                 = QAccessible__Role(0x41B)
	QAccessible__ComplementaryContent = QAccessible__Role(0x42C)
	QAccessible__UserRole             = QAccessible__Role(0x0000ffff)
)

//QAccessible::Text
type QAccessible__Text int64

const (
	QAccessible__Name             = QAccessible__Text(0)
	QAccessible__Description      = QAccessible__Text(1)
	QAccessible__Value            = QAccessible__Text(2)
	QAccessible__Help             = QAccessible__Text(3)
	QAccessible__Accelerator      = QAccessible__Text(4)
	QAccessible__DebugDescription = QAccessible__Text(5)
	QAccessible__UserText         = QAccessible__Text(0x0000ffff)
)

//QAccessible::TextBoundaryType
type QAccessible__TextBoundaryType int64

const (
	QAccessible__CharBoundary      = QAccessible__TextBoundaryType(0)
	QAccessible__WordBoundary      = QAccessible__TextBoundaryType(1)
	QAccessible__SentenceBoundary  = QAccessible__TextBoundaryType(2)
	QAccessible__ParagraphBoundary = QAccessible__TextBoundaryType(3)
	QAccessible__LineBoundary      = QAccessible__TextBoundaryType(4)
	QAccessible__NoBoundary        = QAccessible__TextBoundaryType(5)
)

type QAccessible struct {
	ptr unsafe.Pointer
}

type QAccessible_ITF interface {
	QAccessible_PTR() *QAccessible
}

func (p *QAccessible) QAccessible_PTR() *QAccessible {
	return p
}

func (p *QAccessible) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessible) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessible(ptr QAccessible_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessible_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleFromPointer(ptr unsafe.Pointer) *QAccessible {
	var n = new(QAccessible)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessible) DestroyQAccessible() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QAccessible_IsActive() bool {
	return C.QAccessible_QAccessible_IsActive() != 0
}

func (ptr *QAccessible) IsActive() bool {
	return C.QAccessible_QAccessible_IsActive() != 0
}

func QAccessible_QueryAccessibleInterface(object core.QObject_ITF) *QAccessibleInterface {
	return NewQAccessibleInterfaceFromPointer(C.QAccessible_QAccessible_QueryAccessibleInterface(core.PointerFromQObject(object)))
}

func (ptr *QAccessible) QueryAccessibleInterface(object core.QObject_ITF) *QAccessibleInterface {
	return NewQAccessibleInterfaceFromPointer(C.QAccessible_QAccessible_QueryAccessibleInterface(core.PointerFromQObject(object)))
}

func QAccessible_SetRootObject(object core.QObject_ITF) {
	C.QAccessible_QAccessible_SetRootObject(core.PointerFromQObject(object))
}

func (ptr *QAccessible) SetRootObject(object core.QObject_ITF) {
	C.QAccessible_QAccessible_SetRootObject(core.PointerFromQObject(object))
}

func QAccessible_UpdateAccessibility(event QAccessibleEvent_ITF) {
	C.QAccessible_QAccessible_UpdateAccessibility(PointerFromQAccessibleEvent(event))
}

func (ptr *QAccessible) UpdateAccessibility(event QAccessibleEvent_ITF) {
	C.QAccessible_QAccessible_UpdateAccessibility(PointerFromQAccessibleEvent(event))
}

type QAccessibleActionInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleActionInterface_ITF interface {
	QAccessibleActionInterface_PTR() *QAccessibleActionInterface
}

func (p *QAccessibleActionInterface) QAccessibleActionInterface_PTR() *QAccessibleActionInterface {
	return p
}

func (p *QAccessibleActionInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleActionInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleActionInterface(ptr QAccessibleActionInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleActionInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleActionInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleActionInterface {
	var n = new(QAccessibleActionInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleActionInterface_LocalizedActionDescription
func callbackQAccessibleActionInterface_LocalizedActionDescription(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleActionInterface::localizedActionDescription"); signal != nil {
		return C.CString(signal.(func(string) string)(cGoUnpackString(actionName)))
	}

	return C.CString(NewQAccessibleActionInterfaceFromPointer(ptr).LocalizedActionDescriptionDefault(cGoUnpackString(actionName)))
}

func (ptr *QAccessibleActionInterface) ConnectLocalizedActionDescription(f func(actionName string) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::localizedActionDescription", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectLocalizedActionDescription() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::localizedActionDescription")
	}
}

func (ptr *QAccessibleActionInterface) LocalizedActionDescription(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC = C.CString(actionName)
		defer C.free(unsafe.Pointer(actionNameC))
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionDescription(ptr.Pointer(), actionNameC))
	}
	return ""
}

func (ptr *QAccessibleActionInterface) LocalizedActionDescriptionDefault(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC = C.CString(actionName)
		defer C.free(unsafe.Pointer(actionNameC))
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionDescriptionDefault(ptr.Pointer(), actionNameC))
	}
	return ""
}

//export callbackQAccessibleActionInterface_LocalizedActionName
func callbackQAccessibleActionInterface_LocalizedActionName(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleActionInterface::localizedActionName"); signal != nil {
		return C.CString(signal.(func(string) string)(cGoUnpackString(actionName)))
	}

	return C.CString(NewQAccessibleActionInterfaceFromPointer(ptr).LocalizedActionNameDefault(cGoUnpackString(actionName)))
}

func (ptr *QAccessibleActionInterface) ConnectLocalizedActionName(f func(actionName string) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::localizedActionName", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectLocalizedActionName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::localizedActionName")
	}
}

func (ptr *QAccessibleActionInterface) LocalizedActionName(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC = C.CString(actionName)
		defer C.free(unsafe.Pointer(actionNameC))
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionName(ptr.Pointer(), actionNameC))
	}
	return ""
}

func (ptr *QAccessibleActionInterface) LocalizedActionNameDefault(actionName string) string {
	if ptr.Pointer() != nil {
		var actionNameC = C.CString(actionName)
		defer C.free(unsafe.Pointer(actionNameC))
		return cGoUnpackString(C.QAccessibleActionInterface_LocalizedActionNameDefault(ptr.Pointer(), actionNameC))
	}
	return ""
}

//export callbackQAccessibleActionInterface_ActionNames
func callbackQAccessibleActionInterface_ActionNames(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleActionInterface::actionNames"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QAccessibleActionInterface) ConnectActionNames(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::actionNames", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectActionNames() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::actionNames")
	}
}

func (ptr *QAccessibleActionInterface) ActionNames() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAccessibleActionInterface_ActionNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func QAccessibleActionInterface_DecreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction())
}

func (ptr *QAccessibleActionInterface) DecreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_DecreaseAction())
}

//export callbackQAccessibleActionInterface_DoAction
func callbackQAccessibleActionInterface_DoAction(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleActionInterface::doAction"); signal != nil {
		signal.(func(string))(cGoUnpackString(actionName))
	}

}

func (ptr *QAccessibleActionInterface) ConnectDoAction(f func(actionName string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::doAction", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectDoAction(actionName string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::doAction")
	}
}

func (ptr *QAccessibleActionInterface) DoAction(actionName string) {
	if ptr.Pointer() != nil {
		var actionNameC = C.CString(actionName)
		defer C.free(unsafe.Pointer(actionNameC))
		C.QAccessibleActionInterface_DoAction(ptr.Pointer(), actionNameC)
	}
}

func QAccessibleActionInterface_IncreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction())
}

func (ptr *QAccessibleActionInterface) IncreaseAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_IncreaseAction())
}

//export callbackQAccessibleActionInterface_KeyBindingsForAction
func callbackQAccessibleActionInterface_KeyBindingsForAction(ptr unsafe.Pointer, actionName C.struct_QtGui_PackedString) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleActionInterface::keyBindingsForAction"); signal != nil {
		return C.CString(strings.Join(signal.(func(string) []string)(cGoUnpackString(actionName)), "|"))
	}

	return C.CString(strings.Join(make([]string, 0), "|"))
}

func (ptr *QAccessibleActionInterface) ConnectKeyBindingsForAction(f func(actionName string) []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::keyBindingsForAction", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectKeyBindingsForAction(actionName string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::keyBindingsForAction")
	}
}

func (ptr *QAccessibleActionInterface) KeyBindingsForAction(actionName string) []string {
	if ptr.Pointer() != nil {
		var actionNameC = C.CString(actionName)
		defer C.free(unsafe.Pointer(actionNameC))
		return strings.Split(cGoUnpackString(C.QAccessibleActionInterface_KeyBindingsForAction(ptr.Pointer(), actionNameC)), "|")
	}
	return make([]string, 0)
}

func QAccessibleActionInterface_NextPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction())
}

func (ptr *QAccessibleActionInterface) NextPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_NextPageAction())
}

func QAccessibleActionInterface_PressAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PressAction())
}

func (ptr *QAccessibleActionInterface) PressAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PressAction())
}

func QAccessibleActionInterface_PreviousPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction())
}

func (ptr *QAccessibleActionInterface) PreviousPageAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_PreviousPageAction())
}

func QAccessibleActionInterface_ScrollDownAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction())
}

func (ptr *QAccessibleActionInterface) ScrollDownAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollDownAction())
}

func QAccessibleActionInterface_ScrollLeftAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction())
}

func (ptr *QAccessibleActionInterface) ScrollLeftAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollLeftAction())
}

func QAccessibleActionInterface_ScrollRightAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction())
}

func (ptr *QAccessibleActionInterface) ScrollRightAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollRightAction())
}

func QAccessibleActionInterface_ScrollUpAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction())
}

func (ptr *QAccessibleActionInterface) ScrollUpAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ScrollUpAction())
}

func QAccessibleActionInterface_SetFocusAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction())
}

func (ptr *QAccessibleActionInterface) SetFocusAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_SetFocusAction())
}

func QAccessibleActionInterface_ShowMenuAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction())
}

func (ptr *QAccessibleActionInterface) ShowMenuAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ShowMenuAction())
}

func QAccessibleActionInterface_ToggleAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction())
}

func (ptr *QAccessibleActionInterface) ToggleAction() string {
	return cGoUnpackString(C.QAccessibleActionInterface_QAccessibleActionInterface_ToggleAction())
}

//export callbackQAccessibleActionInterface_DestroyQAccessibleActionInterface
func callbackQAccessibleActionInterface_DestroyQAccessibleActionInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleActionInterface::~QAccessibleActionInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleActionInterfaceFromPointer(ptr).DestroyQAccessibleActionInterfaceDefault()
	}
}

func (ptr *QAccessibleActionInterface) ConnectDestroyQAccessibleActionInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::~QAccessibleActionInterface", f)
	}
}

func (ptr *QAccessibleActionInterface) DisconnectDestroyQAccessibleActionInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleActionInterface::~QAccessibleActionInterface")
	}
}

func (ptr *QAccessibleActionInterface) DestroyQAccessibleActionInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleActionInterface_DestroyQAccessibleActionInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleActionInterface) DestroyQAccessibleActionInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleActionInterface_DestroyQAccessibleActionInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QAccessibleEditableTextInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleEditableTextInterface_ITF interface {
	QAccessibleEditableTextInterface_PTR() *QAccessibleEditableTextInterface
}

func (p *QAccessibleEditableTextInterface) QAccessibleEditableTextInterface_PTR() *QAccessibleEditableTextInterface {
	return p
}

func (p *QAccessibleEditableTextInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleEditableTextInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleEditableTextInterface(ptr QAccessibleEditableTextInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEditableTextInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleEditableTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleEditableTextInterface {
	var n = new(QAccessibleEditableTextInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleEditableTextInterface_DeleteText
func callbackQAccessibleEditableTextInterface_DeleteText(ptr unsafe.Pointer, startOffset C.int, endOffset C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleEditableTextInterface::deleteText"); signal != nil {
		signal.(func(int, int))(int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectDeleteText(f func(startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::deleteText", f)
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectDeleteText(startOffset int, endOffset int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::deleteText")
	}
}

func (ptr *QAccessibleEditableTextInterface) DeleteText(startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DeleteText(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

//export callbackQAccessibleEditableTextInterface_InsertText
func callbackQAccessibleEditableTextInterface_InsertText(ptr unsafe.Pointer, offset C.int, text C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleEditableTextInterface::insertText"); signal != nil {
		signal.(func(int, string))(int(int32(offset)), cGoUnpackString(text))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectInsertText(f func(offset int, text string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::insertText", f)
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectInsertText(offset int, text string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::insertText")
	}
}

func (ptr *QAccessibleEditableTextInterface) InsertText(offset int, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QAccessibleEditableTextInterface_InsertText(ptr.Pointer(), C.int(int32(offset)), textC)
	}
}

//export callbackQAccessibleEditableTextInterface_ReplaceText
func callbackQAccessibleEditableTextInterface_ReplaceText(ptr unsafe.Pointer, startOffset C.int, endOffset C.int, text C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleEditableTextInterface::replaceText"); signal != nil {
		signal.(func(int, int, string))(int(int32(startOffset)), int(int32(endOffset)), cGoUnpackString(text))
	}

}

func (ptr *QAccessibleEditableTextInterface) ConnectReplaceText(f func(startOffset int, endOffset int, text string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::replaceText", f)
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectReplaceText(startOffset int, endOffset int, text string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::replaceText")
	}
}

func (ptr *QAccessibleEditableTextInterface) ReplaceText(startOffset int, endOffset int, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QAccessibleEditableTextInterface_ReplaceText(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset)), textC)
	}
}

//export callbackQAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface
func callbackQAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleEditableTextInterface::~QAccessibleEditableTextInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleEditableTextInterfaceFromPointer(ptr).DestroyQAccessibleEditableTextInterfaceDefault()
	}
}

func (ptr *QAccessibleEditableTextInterface) ConnectDestroyQAccessibleEditableTextInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::~QAccessibleEditableTextInterface", f)
	}
}

func (ptr *QAccessibleEditableTextInterface) DisconnectDestroyQAccessibleEditableTextInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEditableTextInterface::~QAccessibleEditableTextInterface")
	}
}

func (ptr *QAccessibleEditableTextInterface) DestroyQAccessibleEditableTextInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEditableTextInterface) DestroyQAccessibleEditableTextInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleEditableTextInterface_DestroyQAccessibleEditableTextInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QAccessibleEvent struct {
	ptr unsafe.Pointer
}

type QAccessibleEvent_ITF interface {
	QAccessibleEvent_PTR() *QAccessibleEvent
}

func (p *QAccessibleEvent) QAccessibleEvent_PTR() *QAccessibleEvent {
	return p
}

func (p *QAccessibleEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleEvent(ptr QAccessibleEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleEventFromPointer(ptr unsafe.Pointer) *QAccessibleEvent {
	var n = new(QAccessibleEvent)
	n.SetPointer(ptr)
	return n
}
func NewQAccessibleEvent2(interfa QAccessibleInterface_ITF, ty QAccessible__Event) *QAccessibleEvent {
	return NewQAccessibleEventFromPointer(C.QAccessibleEvent_NewQAccessibleEvent2(PointerFromQAccessibleInterface(interfa), C.longlong(ty)))
}

func NewQAccessibleEvent(object core.QObject_ITF, ty QAccessible__Event) *QAccessibleEvent {
	return NewQAccessibleEventFromPointer(C.QAccessibleEvent_NewQAccessibleEvent(core.PointerFromQObject(object), C.longlong(ty)))
}

//export callbackQAccessibleEvent_AccessibleInterface
func callbackQAccessibleEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleEvent) Child() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleEvent_Child(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleEvent) Object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleEvent_Object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleEvent) SetChild(child int) {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetChild(ptr.Pointer(), C.int(int32(child)))
	}
}

func (ptr *QAccessibleEvent) Type() QAccessible__Event {
	if ptr.Pointer() != nil {
		return QAccessible__Event(C.QAccessibleEvent_Type(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleEvent_DestroyQAccessibleEvent
func callbackQAccessibleEvent_DestroyQAccessibleEvent(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleEvent::~QAccessibleEvent"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleEventFromPointer(ptr).DestroyQAccessibleEventDefault()
	}
}

func (ptr *QAccessibleEvent) ConnectDestroyQAccessibleEvent(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEvent::~QAccessibleEvent", f)
	}
}

func (ptr *QAccessibleEvent) DisconnectDestroyQAccessibleEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleEvent::~QAccessibleEvent")
	}
}

func (ptr *QAccessibleEvent) DestroyQAccessibleEvent() {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_DestroyQAccessibleEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEvent) DestroyQAccessibleEventDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_DestroyQAccessibleEventDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleEvent) M_object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleEvent_M_object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleEvent) SetM_object(vqo core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetM_object(ptr.Pointer(), core.PointerFromQObject(vqo))
	}
}

func (ptr *QAccessibleEvent) M_type() QAccessible__Event {
	if ptr.Pointer() != nil {
		return QAccessible__Event(C.QAccessibleEvent_M_type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleEvent) SetM_type(vqa QAccessible__Event) {
	if ptr.Pointer() != nil {
		C.QAccessibleEvent_SetM_type(ptr.Pointer(), C.longlong(vqa))
	}
}

type QAccessibleInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleInterface_ITF interface {
	QAccessibleInterface_PTR() *QAccessibleInterface
}

func (p *QAccessibleInterface) QAccessibleInterface_PTR() *QAccessibleInterface {
	return p
}

func (p *QAccessibleInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleInterface(ptr QAccessibleInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleInterface {
	var n = new(QAccessibleInterface)
	n.SetPointer(ptr)
	return n
}
func (ptr *QAccessibleInterface) ActionInterface() *QAccessibleActionInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleActionInterfaceFromPointer(C.QAccessibleInterface_ActionInterface(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_BackgroundColor
func callbackQAccessibleInterface_BackgroundColor(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::backgroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleInterfaceFromPointer(ptr).BackgroundColorDefault())
}

func (ptr *QAccessibleInterface) ConnectBackgroundColor(f func() *QColor) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::backgroundColor", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectBackgroundColor() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::backgroundColor")
	}
}

func (ptr *QAccessibleInterface) BackgroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_BackgroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleInterface) BackgroundColorDefault() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_BackgroundColorDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_Child
func callbackQAccessibleInterface_Child(ptr unsafe.Pointer, index C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::child"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int) *QAccessibleInterface)(int(int32(index))))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectChild(f func(index int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::child", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectChild(index int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::child")
	}
}

func (ptr *QAccessibleInterface) Child(index int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_Child(ptr.Pointer(), C.int(int32(index))))
	}
	return nil
}

//export callbackQAccessibleInterface_ChildAt
func callbackQAccessibleInterface_ChildAt(ptr unsafe.Pointer, x C.int, y C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::childAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(int32(x)), int(int32(y))))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectChildAt(f func(x int, y int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::childAt", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectChildAt(x int, y int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::childAt")
	}
}

func (ptr *QAccessibleInterface) ChildAt(x int, y int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_ChildAt(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return nil
}

//export callbackQAccessibleInterface_ChildCount
func callbackQAccessibleInterface_ChildCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::childCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleInterface) ConnectChildCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::childCount", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectChildCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::childCount")
	}
}

func (ptr *QAccessibleInterface) ChildCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleInterface_ChildCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleInterface_FocusChild
func callbackQAccessibleInterface_FocusChild(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::focusChild"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleInterfaceFromPointer(ptr).FocusChildDefault())
}

func (ptr *QAccessibleInterface) ConnectFocusChild(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::focusChild", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectFocusChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::focusChild")
	}
}

func (ptr *QAccessibleInterface) FocusChild() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_FocusChild(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) FocusChildDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_FocusChildDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_ForegroundColor
func callbackQAccessibleInterface_ForegroundColor(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::foregroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleInterfaceFromPointer(ptr).ForegroundColorDefault())
}

func (ptr *QAccessibleInterface) ConnectForegroundColor(f func() *QColor) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::foregroundColor", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectForegroundColor() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::foregroundColor")
	}
}

func (ptr *QAccessibleInterface) ForegroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_ForegroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleInterface) ForegroundColorDefault() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleInterface_ForegroundColorDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_IndexOfChild
func callbackQAccessibleInterface_IndexOfChild(ptr unsafe.Pointer, child unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::indexOfChild"); signal != nil {
		return C.int(int32(signal.(func(*QAccessibleInterface) int)(NewQAccessibleInterfaceFromPointer(child))))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleInterface) ConnectIndexOfChild(f func(child *QAccessibleInterface) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::indexOfChild", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectIndexOfChild(child QAccessibleInterface_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::indexOfChild")
	}
}

func (ptr *QAccessibleInterface) IndexOfChild(child QAccessibleInterface_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleInterface_IndexOfChild(ptr.Pointer(), PointerFromQAccessibleInterface(child))))
	}
	return 0
}

//export callbackQAccessibleInterface_Interface_cast
func callbackQAccessibleInterface_Interface_cast(ptr unsafe.Pointer, ty C.longlong) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::interface_cast"); signal != nil {
		return signal.(func(QAccessible__InterfaceType) unsafe.Pointer)(QAccessible__InterfaceType(ty))
	}

	return NewQAccessibleInterfaceFromPointer(ptr).Interface_castDefault(QAccessible__InterfaceType(ty))
}

func (ptr *QAccessibleInterface) ConnectInterface_cast(f func(ty QAccessible__InterfaceType) unsafe.Pointer) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::interface_cast", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectInterface_cast() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::interface_cast")
	}
}

func (ptr *QAccessibleInterface) Interface_cast(ty QAccessible__InterfaceType) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleInterface_Interface_cast(ptr.Pointer(), C.longlong(ty)))
	}
	return nil
}

func (ptr *QAccessibleInterface) Interface_castDefault(ty QAccessible__InterfaceType) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleInterface_Interface_castDefault(ptr.Pointer(), C.longlong(ty)))
	}
	return nil
}

//export callbackQAccessibleInterface_IsValid
func callbackQAccessibleInterface_IsValid(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::isValid"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleInterface) ConnectIsValid(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::isValid", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectIsValid() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::isValid")
	}
}

func (ptr *QAccessibleInterface) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleInterface_IsValid(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleInterface_Object
func callbackQAccessibleInterface_Object(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::object"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(nil)
}

func (ptr *QAccessibleInterface) ConnectObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::object", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::object")
	}
}

func (ptr *QAccessibleInterface) Object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleInterface_Object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_Parent
func callbackQAccessibleInterface_Parent(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::parent"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleInterface) ConnectParent(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::parent", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::parent")
	}
}

func (ptr *QAccessibleInterface) Parent() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleInterface_Parent(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Rect
func callbackQAccessibleInterface_Rect(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::rect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(nil)
}

func (ptr *QAccessibleInterface) ConnectRect(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::rect", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::rect")
	}
}

func (ptr *QAccessibleInterface) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleInterface_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_Role
func callbackQAccessibleInterface_Role(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::role"); signal != nil {
		return C.longlong(signal.(func() QAccessible__Role)())
	}

	return C.longlong(0)
}

func (ptr *QAccessibleInterface) ConnectRole(f func() QAccessible__Role) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::role", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectRole() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::role")
	}
}

func (ptr *QAccessibleInterface) Role() QAccessible__Role {
	if ptr.Pointer() != nil {
		return QAccessible__Role(C.QAccessibleInterface_Role(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleInterface_SetText
func callbackQAccessibleInterface_SetText(ptr unsafe.Pointer, t C.longlong, text C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::setText"); signal != nil {
		signal.(func(QAccessible__Text, string))(QAccessible__Text(t), cGoUnpackString(text))
	}

}

func (ptr *QAccessibleInterface) ConnectSetText(f func(t QAccessible__Text, text string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::setText", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectSetText(t QAccessible__Text, text string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::setText")
	}
}

func (ptr *QAccessibleInterface) SetText(t QAccessible__Text, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QAccessibleInterface_SetText(ptr.Pointer(), C.longlong(t), textC)
	}
}

func (ptr *QAccessibleInterface) TableCellInterface() *QAccessibleTableCellInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleTableCellInterfaceFromPointer(C.QAccessibleInterface_TableCellInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) TableInterface() *QAccessibleTableInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleTableInterfaceFromPointer(C.QAccessibleInterface_TableInterface(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Text
func callbackQAccessibleInterface_Text(ptr unsafe.Pointer, t C.longlong) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::text"); signal != nil {
		return C.CString(signal.(func(QAccessible__Text) string)(QAccessible__Text(t)))
	}

	return C.CString("")
}

func (ptr *QAccessibleInterface) ConnectText(f func(t QAccessible__Text) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::text", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectText(t QAccessible__Text) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::text")
	}
}

func (ptr *QAccessibleInterface) Text(t QAccessible__Text) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleInterface_Text(ptr.Pointer(), C.longlong(t)))
	}
	return ""
}

func (ptr *QAccessibleInterface) TextInterface() *QAccessibleTextInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleTextInterfaceFromPointer(C.QAccessibleInterface_TextInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleInterface) ValueInterface() *QAccessibleValueInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleValueInterfaceFromPointer(C.QAccessibleInterface_ValueInterface(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleInterface_Window
func callbackQAccessibleInterface_Window(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::window"); signal != nil {
		return PointerFromQWindow(signal.(func() *QWindow)())
	}

	return PointerFromQWindow(NewQAccessibleInterfaceFromPointer(ptr).WindowDefault())
}

func (ptr *QAccessibleInterface) ConnectWindow(f func() *QWindow) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::window", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectWindow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::window")
	}
}

func (ptr *QAccessibleInterface) Window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QAccessibleInterface_Window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleInterface) WindowDefault() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QAccessibleInterface_WindowDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleInterface_DestroyQAccessibleInterface
func callbackQAccessibleInterface_DestroyQAccessibleInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleInterface::~QAccessibleInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleInterfaceFromPointer(ptr).DestroyQAccessibleInterfaceDefault()
	}
}

func (ptr *QAccessibleInterface) ConnectDestroyQAccessibleInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::~QAccessibleInterface", f)
	}
}

func (ptr *QAccessibleInterface) DisconnectDestroyQAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleInterface::~QAccessibleInterface")
	}
}

func (ptr *QAccessibleInterface) DestroyQAccessibleInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleInterface_DestroyQAccessibleInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleInterface) DestroyQAccessibleInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleInterface_DestroyQAccessibleInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QAccessibleObject struct {
	QAccessibleInterface
}

type QAccessibleObject_ITF interface {
	QAccessibleInterface_ITF
	QAccessibleObject_PTR() *QAccessibleObject
}

func (p *QAccessibleObject) QAccessibleObject_PTR() *QAccessibleObject {
	return p
}

func (p *QAccessibleObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleInterface_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleInterface_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleObject(ptr QAccessibleObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleObject_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleObjectFromPointer(ptr unsafe.Pointer) *QAccessibleObject {
	var n = new(QAccessibleObject)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleObject_ChildAt
func callbackQAccessibleObject_ChildAt(ptr unsafe.Pointer, x C.int, y C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::childAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(int32(x)), int(int32(y))))
	}

	return PointerFromQAccessibleInterface(NewQAccessibleObjectFromPointer(ptr).ChildAtDefault(int(int32(x)), int(int32(y))))
}

func (ptr *QAccessibleObject) ConnectChildAt(f func(x int, y int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::childAt", f)
	}
}

func (ptr *QAccessibleObject) DisconnectChildAt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::childAt")
	}
}

func (ptr *QAccessibleObject) ChildAt(x int, y int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ChildAt(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return nil
}

func (ptr *QAccessibleObject) ChildAtDefault(x int, y int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_ChildAtDefault(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
	}
	return nil
}

//export callbackQAccessibleObject_IsValid
func callbackQAccessibleObject_IsValid(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::isValid"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAccessibleObjectFromPointer(ptr).IsValidDefault())))
}

func (ptr *QAccessibleObject) ConnectIsValid(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::isValid", f)
	}
}

func (ptr *QAccessibleObject) DisconnectIsValid() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::isValid")
	}
}

func (ptr *QAccessibleObject) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleObject_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAccessibleObject) IsValidDefault() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleObject_IsValidDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleObject_Object
func callbackQAccessibleObject_Object(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::object"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQAccessibleObjectFromPointer(ptr).ObjectDefault())
}

func (ptr *QAccessibleObject) ConnectObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::object", f)
	}
}

func (ptr *QAccessibleObject) DisconnectObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::object")
	}
}

func (ptr *QAccessibleObject) Object() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleObject_Object(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleObject) ObjectDefault() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QAccessibleObject_ObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleObject_Rect
func callbackQAccessibleObject_Rect(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::rect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(NewQAccessibleObjectFromPointer(ptr).RectDefault())
}

func (ptr *QAccessibleObject) ConnectRect(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::rect", f)
	}
}

func (ptr *QAccessibleObject) DisconnectRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::rect")
	}
}

func (ptr *QAccessibleObject) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleObject_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleObject) RectDefault() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleObject_RectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleObject_SetText
func callbackQAccessibleObject_SetText(ptr unsafe.Pointer, t C.longlong, text C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::setText"); signal != nil {
		signal.(func(QAccessible__Text, string))(QAccessible__Text(t), cGoUnpackString(text))
	} else {
		NewQAccessibleObjectFromPointer(ptr).SetTextDefault(QAccessible__Text(t), cGoUnpackString(text))
	}
}

func (ptr *QAccessibleObject) ConnectSetText(f func(t QAccessible__Text, text string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::setText", f)
	}
}

func (ptr *QAccessibleObject) DisconnectSetText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::setText")
	}
}

func (ptr *QAccessibleObject) SetText(t QAccessible__Text, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QAccessibleObject_SetText(ptr.Pointer(), C.longlong(t), textC)
	}
}

func (ptr *QAccessibleObject) SetTextDefault(t QAccessible__Text, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QAccessibleObject_SetTextDefault(ptr.Pointer(), C.longlong(t), textC)
	}
}

//export callbackQAccessibleObject_DestroyQAccessibleObject
func callbackQAccessibleObject_DestroyQAccessibleObject(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::~QAccessibleObject"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleObjectFromPointer(ptr).DestroyQAccessibleObjectDefault()
	}
}

func (ptr *QAccessibleObject) ConnectDestroyQAccessibleObject(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::~QAccessibleObject", f)
	}
}

func (ptr *QAccessibleObject) DisconnectDestroyQAccessibleObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::~QAccessibleObject")
	}
}

func (ptr *QAccessibleObject) DestroyQAccessibleObject() {
	if ptr.Pointer() != nil {
		C.QAccessibleObject_DestroyQAccessibleObject(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleObject) DestroyQAccessibleObjectDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleObject_DestroyQAccessibleObjectDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessibleObject_BackgroundColor
func callbackQAccessibleObject_BackgroundColor(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::backgroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleObjectFromPointer(ptr).BackgroundColorDefault())
}

func (ptr *QAccessibleObject) ConnectBackgroundColor(f func() *QColor) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::backgroundColor", f)
	}
}

func (ptr *QAccessibleObject) DisconnectBackgroundColor() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::backgroundColor")
	}
}

func (ptr *QAccessibleObject) BackgroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleObject_BackgroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleObject) BackgroundColorDefault() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleObject_BackgroundColorDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleObject_Child
func callbackQAccessibleObject_Child(ptr unsafe.Pointer, index C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::child"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int) *QAccessibleInterface)(int(int32(index))))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleObject) ConnectChild(f func(index int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::child", f)
	}
}

func (ptr *QAccessibleObject) DisconnectChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::child")
	}
}

func (ptr *QAccessibleObject) Child(index int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_Child(ptr.Pointer(), C.int(int32(index))))
	}
	return nil
}

//export callbackQAccessibleObject_ChildCount
func callbackQAccessibleObject_ChildCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::childCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleObject) ConnectChildCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::childCount", f)
	}
}

func (ptr *QAccessibleObject) DisconnectChildCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::childCount")
	}
}

func (ptr *QAccessibleObject) ChildCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleObject_ChildCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleObject_FocusChild
func callbackQAccessibleObject_FocusChild(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::focusChild"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleObjectFromPointer(ptr).FocusChildDefault())
}

func (ptr *QAccessibleObject) ConnectFocusChild(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::focusChild", f)
	}
}

func (ptr *QAccessibleObject) DisconnectFocusChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::focusChild")
	}
}

func (ptr *QAccessibleObject) FocusChild() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_FocusChild(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleObject) FocusChildDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_FocusChildDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_ForegroundColor
func callbackQAccessibleObject_ForegroundColor(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::foregroundColor"); signal != nil {
		return PointerFromQColor(signal.(func() *QColor)())
	}

	return PointerFromQColor(NewQAccessibleObjectFromPointer(ptr).ForegroundColorDefault())
}

func (ptr *QAccessibleObject) ConnectForegroundColor(f func() *QColor) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::foregroundColor", f)
	}
}

func (ptr *QAccessibleObject) DisconnectForegroundColor() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::foregroundColor")
	}
}

func (ptr *QAccessibleObject) ForegroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleObject_ForegroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleObject) ForegroundColorDefault() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QAccessibleObject_ForegroundColorDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleObject_IndexOfChild
func callbackQAccessibleObject_IndexOfChild(ptr unsafe.Pointer, child unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::indexOfChild"); signal != nil {
		return C.int(int32(signal.(func(*QAccessibleInterface) int)(NewQAccessibleInterfaceFromPointer(child))))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleObject) ConnectIndexOfChild(f func(child *QAccessibleInterface) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::indexOfChild", f)
	}
}

func (ptr *QAccessibleObject) DisconnectIndexOfChild() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::indexOfChild")
	}
}

func (ptr *QAccessibleObject) IndexOfChild(child QAccessibleInterface_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleObject_IndexOfChild(ptr.Pointer(), PointerFromQAccessibleInterface(child))))
	}
	return 0
}

//export callbackQAccessibleObject_Interface_cast
func callbackQAccessibleObject_Interface_cast(ptr unsafe.Pointer, ty C.longlong) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::interface_cast"); signal != nil {
		return signal.(func(QAccessible__InterfaceType) unsafe.Pointer)(QAccessible__InterfaceType(ty))
	}

	return NewQAccessibleObjectFromPointer(ptr).Interface_castDefault(QAccessible__InterfaceType(ty))
}

func (ptr *QAccessibleObject) ConnectInterface_cast(f func(ty QAccessible__InterfaceType) unsafe.Pointer) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::interface_cast", f)
	}
}

func (ptr *QAccessibleObject) DisconnectInterface_cast() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::interface_cast")
	}
}

func (ptr *QAccessibleObject) Interface_cast(ty QAccessible__InterfaceType) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleObject_Interface_cast(ptr.Pointer(), C.longlong(ty)))
	}
	return nil
}

func (ptr *QAccessibleObject) Interface_castDefault(ty QAccessible__InterfaceType) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QAccessibleObject_Interface_castDefault(ptr.Pointer(), C.longlong(ty)))
	}
	return nil
}

//export callbackQAccessibleObject_Parent
func callbackQAccessibleObject_Parent(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::parent"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleObject) ConnectParent(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::parent", f)
	}
}

func (ptr *QAccessibleObject) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::parent")
	}
}

func (ptr *QAccessibleObject) Parent() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleObject_Parent(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleObject_Role
func callbackQAccessibleObject_Role(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::role"); signal != nil {
		return C.longlong(signal.(func() QAccessible__Role)())
	}

	return C.longlong(0)
}

func (ptr *QAccessibleObject) ConnectRole(f func() QAccessible__Role) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::role", f)
	}
}

func (ptr *QAccessibleObject) DisconnectRole() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::role")
	}
}

func (ptr *QAccessibleObject) Role() QAccessible__Role {
	if ptr.Pointer() != nil {
		return QAccessible__Role(C.QAccessibleObject_Role(ptr.Pointer()))
	}
	return 0
}

//export callbackQAccessibleObject_Text
func callbackQAccessibleObject_Text(ptr unsafe.Pointer, t C.longlong) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::text"); signal != nil {
		return C.CString(signal.(func(QAccessible__Text) string)(QAccessible__Text(t)))
	}

	return C.CString("")
}

func (ptr *QAccessibleObject) ConnectText(f func(t QAccessible__Text) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::text", f)
	}
}

func (ptr *QAccessibleObject) DisconnectText() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::text")
	}
}

func (ptr *QAccessibleObject) Text(t QAccessible__Text) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleObject_Text(ptr.Pointer(), C.longlong(t)))
	}
	return ""
}

//export callbackQAccessibleObject_Window
func callbackQAccessibleObject_Window(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleObject::window"); signal != nil {
		return PointerFromQWindow(signal.(func() *QWindow)())
	}

	return PointerFromQWindow(NewQAccessibleObjectFromPointer(ptr).WindowDefault())
}

func (ptr *QAccessibleObject) ConnectWindow(f func() *QWindow) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::window", f)
	}
}

func (ptr *QAccessibleObject) DisconnectWindow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleObject::window")
	}
}

func (ptr *QAccessibleObject) Window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QAccessibleObject_Window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleObject) WindowDefault() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QAccessibleObject_WindowDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

type QAccessiblePlugin struct {
	core.QObject
}

type QAccessiblePlugin_ITF interface {
	core.QObject_ITF
	QAccessiblePlugin_PTR() *QAccessiblePlugin
}

func (p *QAccessiblePlugin) QAccessiblePlugin_PTR() *QAccessiblePlugin {
	return p
}

func (p *QAccessiblePlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAccessiblePlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessiblePlugin(ptr QAccessiblePlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessiblePlugin_PTR().Pointer()
	}
	return nil
}

func NewQAccessiblePluginFromPointer(ptr unsafe.Pointer) *QAccessiblePlugin {
	var n = new(QAccessiblePlugin)
	n.SetPointer(ptr)
	return n
}
func NewQAccessiblePlugin(parent core.QObject_ITF) *QAccessiblePlugin {
	var tmpValue = NewQAccessiblePluginFromPointer(C.QAccessiblePlugin_NewQAccessiblePlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAccessiblePlugin_Create
func callbackQAccessiblePlugin_Create(ptr unsafe.Pointer, key C.struct_QtGui_PackedString, object unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::create"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(string, *core.QObject) *QAccessibleInterface)(cGoUnpackString(key), core.NewQObjectFromPointer(object)))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessiblePlugin) ConnectCreate(f func(key string, object *core.QObject) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::create", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectCreate(key string, object core.QObject_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::create")
	}
}

func (ptr *QAccessiblePlugin) Create(key string, object core.QObject_ITF) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return NewQAccessibleInterfaceFromPointer(C.QAccessiblePlugin_Create(ptr.Pointer(), keyC, core.PointerFromQObject(object)))
	}
	return nil
}

func (ptr *QAccessiblePlugin) DestroyQAccessiblePlugin() {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DestroyQAccessiblePlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessiblePlugin_TimerEvent
func callbackQAccessiblePlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::timerEvent", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::timerEvent")
	}
}

func (ptr *QAccessiblePlugin) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QAccessiblePlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQAccessiblePlugin_ChildEvent
func callbackQAccessiblePlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::childEvent", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::childEvent")
	}
}

func (ptr *QAccessiblePlugin) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QAccessiblePlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQAccessiblePlugin_ConnectNotify
func callbackQAccessiblePlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAccessiblePluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAccessiblePlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::connectNotify", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::connectNotify")
	}
}

func (ptr *QAccessiblePlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAccessiblePlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAccessiblePlugin_CustomEvent
func callbackQAccessiblePlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQAccessiblePluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QAccessiblePlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::customEvent", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::customEvent")
	}
}

func (ptr *QAccessiblePlugin) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QAccessiblePlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQAccessiblePlugin_DeleteLater
func callbackQAccessiblePlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessiblePluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAccessiblePlugin) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::deleteLater", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::deleteLater")
	}
}

func (ptr *QAccessiblePlugin) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessiblePlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAccessiblePlugin_DisconnectNotify
func callbackQAccessiblePlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQAccessiblePluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAccessiblePlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::disconnectNotify", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::disconnectNotify")
	}
}

func (ptr *QAccessiblePlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAccessiblePlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessiblePlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQAccessiblePlugin_Event
func callbackQAccessiblePlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAccessiblePluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QAccessiblePlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::event", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::event")
	}
}

func (ptr *QAccessiblePlugin) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAccessiblePlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAccessiblePlugin_EventFilter
func callbackQAccessiblePlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAccessiblePluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QAccessiblePlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::eventFilter", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::eventFilter")
	}
}

func (ptr *QAccessiblePlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAccessiblePlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAccessiblePlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAccessiblePlugin_MetaObject
func callbackQAccessiblePlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessiblePlugin::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQAccessiblePluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAccessiblePlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::metaObject", f)
	}
}

func (ptr *QAccessiblePlugin) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessiblePlugin::metaObject")
	}
}

func (ptr *QAccessiblePlugin) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAccessiblePlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessiblePlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QAccessiblePlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleStateChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleStateChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleStateChangeEvent_PTR() *QAccessibleStateChangeEvent
}

func (p *QAccessibleStateChangeEvent) QAccessibleStateChangeEvent_PTR() *QAccessibleStateChangeEvent {
	return p
}

func (p *QAccessibleStateChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleStateChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleStateChangeEvent(ptr QAccessibleStateChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleStateChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleStateChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleStateChangeEvent {
	var n = new(QAccessibleStateChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleStateChangeEvent) DestroyQAccessibleStateChangeEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//export callbackQAccessibleStateChangeEvent_AccessibleInterface
func callbackQAccessibleStateChangeEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleStateChangeEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleStateChangeEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleStateChangeEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleStateChangeEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleStateChangeEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleStateChangeEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleStateChangeEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleStateChangeEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleStateChangeEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleStateChangeEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTableCellInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTableCellInterface_ITF interface {
	QAccessibleTableCellInterface_PTR() *QAccessibleTableCellInterface
}

func (p *QAccessibleTableCellInterface) QAccessibleTableCellInterface_PTR() *QAccessibleTableCellInterface {
	return p
}

func (p *QAccessibleTableCellInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleTableCellInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleTableCellInterface(ptr QAccessibleTableCellInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableCellInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableCellInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableCellInterface {
	var n = new(QAccessibleTableCellInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleTableCellInterface_ColumnExtent
func callbackQAccessibleTableCellInterface_ColumnExtent(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableCellInterface::columnExtent"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectColumnExtent(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::columnExtent", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectColumnExtent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::columnExtent")
	}
}

func (ptr *QAccessibleTableCellInterface) ColumnExtent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_ColumnExtent(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_ColumnIndex
func callbackQAccessibleTableCellInterface_ColumnIndex(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableCellInterface::columnIndex"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectColumnIndex(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::columnIndex", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectColumnIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::columnIndex")
	}
}

func (ptr *QAccessibleTableCellInterface) ColumnIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_ColumnIndex(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_IsSelected
func callbackQAccessibleTableCellInterface_IsSelected(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableCellInterface::isSelected"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableCellInterface) ConnectIsSelected(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::isSelected", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectIsSelected() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::isSelected")
	}
}

func (ptr *QAccessibleTableCellInterface) IsSelected() bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableCellInterface_IsSelected(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAccessibleTableCellInterface_RowExtent
func callbackQAccessibleTableCellInterface_RowExtent(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableCellInterface::rowExtent"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectRowExtent(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::rowExtent", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectRowExtent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::rowExtent")
	}
}

func (ptr *QAccessibleTableCellInterface) RowExtent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_RowExtent(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_RowIndex
func callbackQAccessibleTableCellInterface_RowIndex(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableCellInterface::rowIndex"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableCellInterface) ConnectRowIndex(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::rowIndex", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectRowIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::rowIndex")
	}
}

func (ptr *QAccessibleTableCellInterface) RowIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableCellInterface_RowIndex(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableCellInterface_Table
func callbackQAccessibleTableCellInterface_Table(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableCellInterface::table"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableCellInterface) ConnectTable(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::table", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectTable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::table")
	}
}

func (ptr *QAccessibleTableCellInterface) Table() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableCellInterface_Table(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface
func callbackQAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableCellInterface::~QAccessibleTableCellInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleTableCellInterfaceFromPointer(ptr).DestroyQAccessibleTableCellInterfaceDefault()
	}
}

func (ptr *QAccessibleTableCellInterface) ConnectDestroyQAccessibleTableCellInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::~QAccessibleTableCellInterface", f)
	}
}

func (ptr *QAccessibleTableCellInterface) DisconnectDestroyQAccessibleTableCellInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableCellInterface::~QAccessibleTableCellInterface")
	}
}

func (ptr *QAccessibleTableCellInterface) DestroyQAccessibleTableCellInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableCellInterface) DestroyQAccessibleTableCellInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableCellInterface_DestroyQAccessibleTableCellInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableCellInterface) columnHeaderCells_atList(i int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableCellInterface_columnHeaderCells_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QAccessibleTableCellInterface) rowHeaderCells_atList(i int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableCellInterface_rowHeaderCells_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

type QAccessibleTableInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTableInterface_ITF interface {
	QAccessibleTableInterface_PTR() *QAccessibleTableInterface
}

func (p *QAccessibleTableInterface) QAccessibleTableInterface_PTR() *QAccessibleTableInterface {
	return p
}

func (p *QAccessibleTableInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleTableInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleTableInterface(ptr QAccessibleTableInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTableInterface {
	var n = new(QAccessibleTableInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleTableInterface_Caption
func callbackQAccessibleTableInterface_Caption(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::caption"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectCaption(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::caption", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectCaption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::caption")
	}
}

func (ptr *QAccessibleTableInterface) Caption() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_Caption(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableInterface_CellAt
func callbackQAccessibleTableInterface_CellAt(ptr unsafe.Pointer, row C.int, column C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::cellAt"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func(int, int) *QAccessibleInterface)(int(int32(row)), int(int32(column))))
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectCellAt(f func(row int, column int) *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::cellAt", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectCellAt(row int, column int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::cellAt")
	}
}

func (ptr *QAccessibleTableInterface) CellAt(row int, column int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_CellAt(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

//export callbackQAccessibleTableInterface_ColumnCount
func callbackQAccessibleTableInterface_ColumnCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::columnCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectColumnCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::columnCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::columnCount")
	}
}

func (ptr *QAccessibleTableInterface) ColumnCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_ColumnCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_ColumnDescription
func callbackQAccessibleTableInterface_ColumnDescription(ptr unsafe.Pointer, column C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::columnDescription"); signal != nil {
		return C.CString(signal.(func(int) string)(int(int32(column))))
	}

	return C.CString("")
}

func (ptr *QAccessibleTableInterface) ConnectColumnDescription(f func(column int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::columnDescription", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectColumnDescription(column int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::columnDescription")
	}
}

func (ptr *QAccessibleTableInterface) ColumnDescription(column int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTableInterface_ColumnDescription(ptr.Pointer(), C.int(int32(column))))
	}
	return ""
}

//export callbackQAccessibleTableInterface_IsColumnSelected
func callbackQAccessibleTableInterface_IsColumnSelected(ptr unsafe.Pointer, column C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::isColumnSelected"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(column))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectIsColumnSelected(f func(column int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::isColumnSelected", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectIsColumnSelected(column int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::isColumnSelected")
	}
}

func (ptr *QAccessibleTableInterface) IsColumnSelected(column int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_IsColumnSelected(ptr.Pointer(), C.int(int32(column))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_IsRowSelected
func callbackQAccessibleTableInterface_IsRowSelected(ptr unsafe.Pointer, row C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::isRowSelected"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(row))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectIsRowSelected(f func(row int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::isRowSelected", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectIsRowSelected(row int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::isRowSelected")
	}
}

func (ptr *QAccessibleTableInterface) IsRowSelected(row int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_IsRowSelected(ptr.Pointer(), C.int(int32(row))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_ModelChange
func callbackQAccessibleTableInterface_ModelChange(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::modelChange"); signal != nil {
		signal.(func(*QAccessibleTableModelChangeEvent))(NewQAccessibleTableModelChangeEventFromPointer(event))
	}

}

func (ptr *QAccessibleTableInterface) ConnectModelChange(f func(event *QAccessibleTableModelChangeEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::modelChange", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectModelChange(event QAccessibleTableModelChangeEvent_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::modelChange")
	}
}

func (ptr *QAccessibleTableInterface) ModelChange(event QAccessibleTableModelChangeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_ModelChange(ptr.Pointer(), PointerFromQAccessibleTableModelChangeEvent(event))
	}
}

//export callbackQAccessibleTableInterface_RowCount
func callbackQAccessibleTableInterface_RowCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::rowCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectRowCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::rowCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::rowCount")
	}
}

func (ptr *QAccessibleTableInterface) RowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_RowCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_RowDescription
func callbackQAccessibleTableInterface_RowDescription(ptr unsafe.Pointer, row C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::rowDescription"); signal != nil {
		return C.CString(signal.(func(int) string)(int(int32(row))))
	}

	return C.CString("")
}

func (ptr *QAccessibleTableInterface) ConnectRowDescription(f func(row int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::rowDescription", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectRowDescription(row int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::rowDescription")
	}
}

func (ptr *QAccessibleTableInterface) RowDescription(row int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTableInterface_RowDescription(ptr.Pointer(), C.int(int32(row))))
	}
	return ""
}

//export callbackQAccessibleTableInterface_SelectColumn
func callbackQAccessibleTableInterface_SelectColumn(ptr unsafe.Pointer, column C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::selectColumn"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(column))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectSelectColumn(f func(column int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectColumn", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectColumn(column int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectColumn")
	}
}

func (ptr *QAccessibleTableInterface) SelectColumn(column int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_SelectColumn(ptr.Pointer(), C.int(int32(column))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_SelectRow
func callbackQAccessibleTableInterface_SelectRow(ptr unsafe.Pointer, row C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::selectRow"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(row))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectSelectRow(f func(row int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectRow", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectRow(row int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectRow")
	}
}

func (ptr *QAccessibleTableInterface) SelectRow(row int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_SelectRow(ptr.Pointer(), C.int(int32(row))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_SelectedCellCount
func callbackQAccessibleTableInterface_SelectedCellCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::selectedCellCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectSelectedCellCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectedCellCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedCellCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectedCellCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedCellCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_SelectedCellCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_SelectedColumnCount
func callbackQAccessibleTableInterface_SelectedColumnCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::selectedColumnCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectSelectedColumnCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectedColumnCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectedColumnCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedColumnCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_SelectedColumnCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_SelectedRowCount
func callbackQAccessibleTableInterface_SelectedRowCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::selectedRowCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTableInterface) ConnectSelectedRowCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectedRowCount", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSelectedRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::selectedRowCount")
	}
}

func (ptr *QAccessibleTableInterface) SelectedRowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableInterface_SelectedRowCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTableInterface_Summary
func callbackQAccessibleTableInterface_Summary(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::summary"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(nil)
}

func (ptr *QAccessibleTableInterface) ConnectSummary(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::summary", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectSummary() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::summary")
	}
}

func (ptr *QAccessibleTableInterface) Summary() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_Summary(ptr.Pointer()))
	}
	return nil
}

//export callbackQAccessibleTableInterface_UnselectColumn
func callbackQAccessibleTableInterface_UnselectColumn(ptr unsafe.Pointer, column C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::unselectColumn"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(column))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectUnselectColumn(f func(column int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::unselectColumn", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectUnselectColumn(column int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::unselectColumn")
	}
}

func (ptr *QAccessibleTableInterface) UnselectColumn(column int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_UnselectColumn(ptr.Pointer(), C.int(int32(column))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_UnselectRow
func callbackQAccessibleTableInterface_UnselectRow(ptr unsafe.Pointer, row C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::unselectRow"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(row))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAccessibleTableInterface) ConnectUnselectRow(f func(row int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::unselectRow", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectUnselectRow(row int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::unselectRow")
	}
}

func (ptr *QAccessibleTableInterface) UnselectRow(row int) bool {
	if ptr.Pointer() != nil {
		return C.QAccessibleTableInterface_UnselectRow(ptr.Pointer(), C.int(int32(row))) != 0
	}
	return false
}

//export callbackQAccessibleTableInterface_DestroyQAccessibleTableInterface
func callbackQAccessibleTableInterface_DestroyQAccessibleTableInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableInterface::~QAccessibleTableInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleTableInterfaceFromPointer(ptr).DestroyQAccessibleTableInterfaceDefault()
	}
}

func (ptr *QAccessibleTableInterface) ConnectDestroyQAccessibleTableInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::~QAccessibleTableInterface", f)
	}
}

func (ptr *QAccessibleTableInterface) DisconnectDestroyQAccessibleTableInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableInterface::~QAccessibleTableInterface")
	}
}

func (ptr *QAccessibleTableInterface) DestroyQAccessibleTableInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_DestroyQAccessibleTableInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableInterface) DestroyQAccessibleTableInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleTableInterface_DestroyQAccessibleTableInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTableInterface) selectedCells_atList(i int) *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableInterface_selectedCells_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

//QAccessibleTableModelChangeEvent::ModelChangeType
type QAccessibleTableModelChangeEvent__ModelChangeType int64

const (
	QAccessibleTableModelChangeEvent__ModelReset      = QAccessibleTableModelChangeEvent__ModelChangeType(0)
	QAccessibleTableModelChangeEvent__DataChanged     = QAccessibleTableModelChangeEvent__ModelChangeType(1)
	QAccessibleTableModelChangeEvent__RowsInserted    = QAccessibleTableModelChangeEvent__ModelChangeType(2)
	QAccessibleTableModelChangeEvent__ColumnsInserted = QAccessibleTableModelChangeEvent__ModelChangeType(3)
	QAccessibleTableModelChangeEvent__RowsRemoved     = QAccessibleTableModelChangeEvent__ModelChangeType(4)
	QAccessibleTableModelChangeEvent__ColumnsRemoved  = QAccessibleTableModelChangeEvent__ModelChangeType(5)
)

type QAccessibleTableModelChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleTableModelChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleTableModelChangeEvent_PTR() *QAccessibleTableModelChangeEvent
}

func (p *QAccessibleTableModelChangeEvent) QAccessibleTableModelChangeEvent_PTR() *QAccessibleTableModelChangeEvent {
	return p
}

func (p *QAccessibleTableModelChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTableModelChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTableModelChangeEvent(ptr QAccessibleTableModelChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTableModelChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTableModelChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleTableModelChangeEvent {
	var n = new(QAccessibleTableModelChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTableModelChangeEvent) DestroyQAccessibleTableModelChangeEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAccessibleTableModelChangeEvent2(iface QAccessibleInterface_ITF, changeType QAccessibleTableModelChangeEvent__ModelChangeType) *QAccessibleTableModelChangeEvent {
	var tmpValue = NewQAccessibleTableModelChangeEventFromPointer(C.QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent2(PointerFromQAccessibleInterface(iface), C.longlong(changeType)))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTableModelChangeEvent).DestroyQAccessibleTableModelChangeEvent)
	return tmpValue
}

func NewQAccessibleTableModelChangeEvent(object core.QObject_ITF, changeType QAccessibleTableModelChangeEvent__ModelChangeType) *QAccessibleTableModelChangeEvent {
	var tmpValue = NewQAccessibleTableModelChangeEventFromPointer(C.QAccessibleTableModelChangeEvent_NewQAccessibleTableModelChangeEvent(core.PointerFromQObject(object), C.longlong(changeType)))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTableModelChangeEvent).DestroyQAccessibleTableModelChangeEvent)
	return tmpValue
}

func (ptr *QAccessibleTableModelChangeEvent) FirstColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_FirstColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) FirstRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_FirstRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) LastColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_LastColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) LastRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_LastRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) ModelChangeType() QAccessibleTableModelChangeEvent__ModelChangeType {
	if ptr.Pointer() != nil {
		return QAccessibleTableModelChangeEvent__ModelChangeType(C.QAccessibleTableModelChangeEvent_ModelChangeType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetFirstColumn(column int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetFirstColumn(ptr.Pointer(), C.int(int32(column)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetFirstRow(row int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetFirstRow(ptr.Pointer(), C.int(int32(row)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetLastColumn(column int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetLastColumn(ptr.Pointer(), C.int(int32(column)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetLastRow(row int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetLastRow(ptr.Pointer(), C.int(int32(row)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) SetModelChangeType(changeType QAccessibleTableModelChangeEvent__ModelChangeType) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetModelChangeType(ptr.Pointer(), C.longlong(changeType))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_firstColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_firstColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_firstColumn(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_firstColumn(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_firstRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_firstRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_firstRow(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_firstRow(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_lastColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_lastColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_lastColumn(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_lastColumn(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_lastRow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTableModelChangeEvent_M_lastRow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_lastRow(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_lastRow(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTableModelChangeEvent) M_modelChangeType() QAccessibleTableModelChangeEvent__ModelChangeType {
	if ptr.Pointer() != nil {
		return QAccessibleTableModelChangeEvent__ModelChangeType(C.QAccessibleTableModelChangeEvent_M_modelChangeType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAccessibleTableModelChangeEvent) SetM_modelChangeType(vmo QAccessibleTableModelChangeEvent__ModelChangeType) {
	if ptr.Pointer() != nil {
		C.QAccessibleTableModelChangeEvent_SetM_modelChangeType(ptr.Pointer(), C.longlong(vmo))
	}
}

//export callbackQAccessibleTableModelChangeEvent_AccessibleInterface
func callbackQAccessibleTableModelChangeEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTableModelChangeEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTableModelChangeEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTableModelChangeEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableModelChangeEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleTableModelChangeEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTableModelChangeEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleTableModelChangeEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableModelChangeEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTableModelChangeEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTableModelChangeEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextCursorEvent struct {
	QAccessibleEvent
}

type QAccessibleTextCursorEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleTextCursorEvent_PTR() *QAccessibleTextCursorEvent
}

func (p *QAccessibleTextCursorEvent) QAccessibleTextCursorEvent_PTR() *QAccessibleTextCursorEvent {
	return p
}

func (p *QAccessibleTextCursorEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextCursorEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextCursorEvent(ptr QAccessibleTextCursorEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextCursorEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextCursorEvent {
	var n = new(QAccessibleTextCursorEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextCursorEvent) DestroyQAccessibleTextCursorEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAccessibleTextCursorEvent2(iface QAccessibleInterface_ITF, cursorPos int) *QAccessibleTextCursorEvent {
	var tmpValue = NewQAccessibleTextCursorEventFromPointer(C.QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(cursorPos))))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextCursorEvent).DestroyQAccessibleTextCursorEvent)
	return tmpValue
}

func NewQAccessibleTextCursorEvent(object core.QObject_ITF, cursorPos int) *QAccessibleTextCursorEvent {
	var tmpValue = NewQAccessibleTextCursorEventFromPointer(C.QAccessibleTextCursorEvent_NewQAccessibleTextCursorEvent(core.PointerFromQObject(object), C.int(int32(cursorPos))))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextCursorEvent).DestroyQAccessibleTextCursorEvent)
	return tmpValue
}

func (ptr *QAccessibleTextCursorEvent) CursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextCursorEvent_CursorPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextCursorEvent) SetCursorPosition(position int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextCursorEvent_SetCursorPosition(ptr.Pointer(), C.int(int32(position)))
	}
}

func (ptr *QAccessibleTextCursorEvent) M_cursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextCursorEvent_M_cursorPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextCursorEvent) SetM_cursorPosition(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextCursorEvent_SetM_cursorPosition(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQAccessibleTextCursorEvent_AccessibleInterface
func callbackQAccessibleTextCursorEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextCursorEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextCursorEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextCursorEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextCursorEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextCursorEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextCursorEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleTextCursorEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextCursorEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextCursorEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextCursorEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextInsertEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextInsertEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextInsertEvent_PTR() *QAccessibleTextInsertEvent
}

func (p *QAccessibleTextInsertEvent) QAccessibleTextInsertEvent_PTR() *QAccessibleTextInsertEvent {
	return p
}

func (p *QAccessibleTextInsertEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextInsertEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextInsertEvent(ptr QAccessibleTextInsertEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextInsertEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextInsertEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextInsertEvent {
	var n = new(QAccessibleTextInsertEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextInsertEvent) DestroyQAccessibleTextInsertEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAccessibleTextInsertEvent2(iface QAccessibleInterface_ITF, position int, text string) *QAccessibleTextInsertEvent {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQAccessibleTextInsertEventFromPointer(C.QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(position)), textC))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextInsertEvent).DestroyQAccessibleTextInsertEvent)
	return tmpValue
}

func NewQAccessibleTextInsertEvent(object core.QObject_ITF, position int, text string) *QAccessibleTextInsertEvent {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQAccessibleTextInsertEventFromPointer(C.QAccessibleTextInsertEvent_NewQAccessibleTextInsertEvent(core.PointerFromQObject(object), C.int(int32(position)), textC))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextInsertEvent).DestroyQAccessibleTextInsertEvent)
	return tmpValue
}

func (ptr *QAccessibleTextInsertEvent) ChangePosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInsertEvent_ChangePosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextInsertEvent) TextInserted() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInsertEvent_TextInserted(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextInsertEvent) M_position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInsertEvent_M_position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextInsertEvent) SetM_position(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInsertEvent_SetM_position(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextInsertEvent) M_text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInsertEvent_M_text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextInsertEvent) SetM_text(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QAccessibleTextInsertEvent_SetM_text(ptr.Pointer(), vqsC)
	}
}

//export callbackQAccessibleTextInsertEvent_AccessibleInterface
func callbackQAccessibleTextInsertEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInsertEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextInsertEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextInsertEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInsertEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextInsertEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInsertEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleTextInsertEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextInsertEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextInsertEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextInsertEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleTextInterface_ITF interface {
	QAccessibleTextInterface_PTR() *QAccessibleTextInterface
}

func (p *QAccessibleTextInterface) QAccessibleTextInterface_PTR() *QAccessibleTextInterface {
	return p
}

func (p *QAccessibleTextInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleTextInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleTextInterface(ptr QAccessibleTextInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleTextInterface {
	var n = new(QAccessibleTextInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleTextInterface_AddSelection
func callbackQAccessibleTextInterface_AddSelection(ptr unsafe.Pointer, startOffset C.int, endOffset C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::addSelection"); signal != nil {
		signal.(func(int, int))(int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectAddSelection(f func(startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::addSelection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectAddSelection(startOffset int, endOffset int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::addSelection")
	}
}

func (ptr *QAccessibleTextInterface) AddSelection(startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_AddSelection(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

//export callbackQAccessibleTextInterface_Attributes
func callbackQAccessibleTextInterface_Attributes(ptr unsafe.Pointer, offset C.int, startOffset C.int, endOffset C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::attributes"); signal != nil {
		return C.CString(signal.(func(int, int, int) string)(int(int32(offset)), int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString("")
}

func (ptr *QAccessibleTextInterface) ConnectAttributes(f func(offset int, startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::attributes", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectAttributes(offset int, startOffset int, endOffset int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::attributes")
	}
}

func (ptr *QAccessibleTextInterface) Attributes(offset int, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_Attributes(ptr.Pointer(), C.int(int32(offset)), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_CharacterCount
func callbackQAccessibleTextInterface_CharacterCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::characterCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectCharacterCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::characterCount", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCharacterCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::characterCount")
	}
}

func (ptr *QAccessibleTextInterface) CharacterCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_CharacterCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTextInterface_CharacterRect
func callbackQAccessibleTextInterface_CharacterRect(ptr unsafe.Pointer, offset C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::characterRect"); signal != nil {
		return core.PointerFromQRect(signal.(func(int) *core.QRect)(int(int32(offset))))
	}

	return core.PointerFromQRect(nil)
}

func (ptr *QAccessibleTextInterface) ConnectCharacterRect(f func(offset int) *core.QRect) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::characterRect", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCharacterRect(offset int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::characterRect")
	}
}

func (ptr *QAccessibleTextInterface) CharacterRect(offset int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QAccessibleTextInterface_CharacterRect(ptr.Pointer(), C.int(int32(offset))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleTextInterface_CursorPosition
func callbackQAccessibleTextInterface_CursorPosition(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::cursorPosition"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectCursorPosition(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::cursorPosition", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectCursorPosition() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::cursorPosition")
	}
}

func (ptr *QAccessibleTextInterface) CursorPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_CursorPosition(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTextInterface_OffsetAtPoint
func callbackQAccessibleTextInterface_OffsetAtPoint(ptr unsafe.Pointer, point unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::offsetAtPoint"); signal != nil {
		return C.int(int32(signal.(func(*core.QPoint) int)(core.NewQPointFromPointer(point))))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectOffsetAtPoint(f func(point *core.QPoint) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::offsetAtPoint", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectOffsetAtPoint(point core.QPoint_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::offsetAtPoint")
	}
}

func (ptr *QAccessibleTextInterface) OffsetAtPoint(point core.QPoint_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_OffsetAtPoint(ptr.Pointer(), core.PointerFromQPoint(point))))
	}
	return 0
}

//export callbackQAccessibleTextInterface_RemoveSelection
func callbackQAccessibleTextInterface_RemoveSelection(ptr unsafe.Pointer, selectionIndex C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::removeSelection"); signal != nil {
		signal.(func(int))(int(int32(selectionIndex)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectRemoveSelection(f func(selectionIndex int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::removeSelection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectRemoveSelection(selectionIndex int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::removeSelection")
	}
}

func (ptr *QAccessibleTextInterface) RemoveSelection(selectionIndex int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_RemoveSelection(ptr.Pointer(), C.int(int32(selectionIndex)))
	}
}

//export callbackQAccessibleTextInterface_ScrollToSubstring
func callbackQAccessibleTextInterface_ScrollToSubstring(ptr unsafe.Pointer, startIndex C.int, endIndex C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::scrollToSubstring"); signal != nil {
		signal.(func(int, int))(int(int32(startIndex)), int(int32(endIndex)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectScrollToSubstring(f func(startIndex int, endIndex int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::scrollToSubstring", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectScrollToSubstring(startIndex int, endIndex int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::scrollToSubstring")
	}
}

func (ptr *QAccessibleTextInterface) ScrollToSubstring(startIndex int, endIndex int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_ScrollToSubstring(ptr.Pointer(), C.int(int32(startIndex)), C.int(int32(endIndex)))
	}
}

//export callbackQAccessibleTextInterface_Selection
func callbackQAccessibleTextInterface_Selection(ptr unsafe.Pointer, selectionIndex C.int, startOffset C.int, endOffset C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::selection"); signal != nil {
		signal.(func(int, int, int))(int(int32(selectionIndex)), int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSelection(f func(selectionIndex int, startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::selection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSelection(selectionIndex int, startOffset int, endOffset int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::selection")
	}
}

func (ptr *QAccessibleTextInterface) Selection(selectionIndex int, startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_Selection(ptr.Pointer(), C.int(int32(selectionIndex)), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

//export callbackQAccessibleTextInterface_SelectionCount
func callbackQAccessibleTextInterface_SelectionCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::selectionCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAccessibleTextInterface) ConnectSelectionCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::selectionCount", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSelectionCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::selectionCount")
	}
}

func (ptr *QAccessibleTextInterface) SelectionCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextInterface_SelectionCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAccessibleTextInterface_SetCursorPosition
func callbackQAccessibleTextInterface_SetCursorPosition(ptr unsafe.Pointer, position C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::setCursorPosition"); signal != nil {
		signal.(func(int))(int(int32(position)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSetCursorPosition(f func(position int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::setCursorPosition", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSetCursorPosition(position int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::setCursorPosition")
	}
}

func (ptr *QAccessibleTextInterface) SetCursorPosition(position int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_SetCursorPosition(ptr.Pointer(), C.int(int32(position)))
	}
}

//export callbackQAccessibleTextInterface_SetSelection
func callbackQAccessibleTextInterface_SetSelection(ptr unsafe.Pointer, selectionIndex C.int, startOffset C.int, endOffset C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::setSelection"); signal != nil {
		signal.(func(int, int, int))(int(int32(selectionIndex)), int(int32(startOffset)), int(int32(endOffset)))
	}

}

func (ptr *QAccessibleTextInterface) ConnectSetSelection(f func(selectionIndex int, startOffset int, endOffset int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::setSelection", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectSetSelection(selectionIndex int, startOffset int, endOffset int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::setSelection")
	}
}

func (ptr *QAccessibleTextInterface) SetSelection(selectionIndex int, startOffset int, endOffset int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_SetSelection(ptr.Pointer(), C.int(int32(selectionIndex)), C.int(int32(startOffset)), C.int(int32(endOffset)))
	}
}

//export callbackQAccessibleTextInterface_Text
func callbackQAccessibleTextInterface_Text(ptr unsafe.Pointer, startOffset C.int, endOffset C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::text"); signal != nil {
		return C.CString(signal.(func(int, int) string)(int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString("")
}

func (ptr *QAccessibleTextInterface) ConnectText(f func(startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::text", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectText(startOffset int, endOffset int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::text")
	}
}

func (ptr *QAccessibleTextInterface) Text(startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_Text(ptr.Pointer(), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextAfterOffset
func callbackQAccessibleTextInterface_TextAfterOffset(ptr unsafe.Pointer, offset C.int, boundaryType C.longlong, startOffset C.int, endOffset C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::textAfterOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextAfterOffsetDefault(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
}

func (ptr *QAccessibleTextInterface) ConnectTextAfterOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::textAfterOffset", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextAfterOffset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::textAfterOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextAfterOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAfterOffset(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextAfterOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAfterOffsetDefault(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextAtOffset
func callbackQAccessibleTextInterface_TextAtOffset(ptr unsafe.Pointer, offset C.int, boundaryType C.longlong, startOffset C.int, endOffset C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::textAtOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextAtOffsetDefault(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
}

func (ptr *QAccessibleTextInterface) ConnectTextAtOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::textAtOffset", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextAtOffset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::textAtOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextAtOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAtOffset(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextAtOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextAtOffsetDefault(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_TextBeforeOffset
func callbackQAccessibleTextInterface_TextBeforeOffset(ptr unsafe.Pointer, offset C.int, boundaryType C.longlong, startOffset C.int, endOffset C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::textBeforeOffset"); signal != nil {
		return C.CString(signal.(func(int, QAccessible__TextBoundaryType, int, int) string)(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
	}

	return C.CString(NewQAccessibleTextInterfaceFromPointer(ptr).TextBeforeOffsetDefault(int(int32(offset)), QAccessible__TextBoundaryType(boundaryType), int(int32(startOffset)), int(int32(endOffset))))
}

func (ptr *QAccessibleTextInterface) ConnectTextBeforeOffset(f func(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::textBeforeOffset", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectTextBeforeOffset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::textBeforeOffset")
	}
}

func (ptr *QAccessibleTextInterface) TextBeforeOffset(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextBeforeOffset(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

func (ptr *QAccessibleTextInterface) TextBeforeOffsetDefault(offset int, boundaryType QAccessible__TextBoundaryType, startOffset int, endOffset int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextInterface_TextBeforeOffsetDefault(ptr.Pointer(), C.int(int32(offset)), C.longlong(boundaryType), C.int(int32(startOffset)), C.int(int32(endOffset))))
	}
	return ""
}

//export callbackQAccessibleTextInterface_DestroyQAccessibleTextInterface
func callbackQAccessibleTextInterface_DestroyQAccessibleTextInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextInterface::~QAccessibleTextInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleTextInterfaceFromPointer(ptr).DestroyQAccessibleTextInterfaceDefault()
	}
}

func (ptr *QAccessibleTextInterface) ConnectDestroyQAccessibleTextInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::~QAccessibleTextInterface", f)
	}
}

func (ptr *QAccessibleTextInterface) DisconnectDestroyQAccessibleTextInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextInterface::~QAccessibleTextInterface")
	}
}

func (ptr *QAccessibleTextInterface) DestroyQAccessibleTextInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_DestroyQAccessibleTextInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleTextInterface) DestroyQAccessibleTextInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleTextInterface_DestroyQAccessibleTextInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QAccessibleTextRemoveEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextRemoveEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextRemoveEvent_PTR() *QAccessibleTextRemoveEvent
}

func (p *QAccessibleTextRemoveEvent) QAccessibleTextRemoveEvent_PTR() *QAccessibleTextRemoveEvent {
	return p
}

func (p *QAccessibleTextRemoveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextRemoveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextRemoveEvent(ptr QAccessibleTextRemoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextRemoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextRemoveEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextRemoveEvent {
	var n = new(QAccessibleTextRemoveEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextRemoveEvent) DestroyQAccessibleTextRemoveEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAccessibleTextRemoveEvent2(iface QAccessibleInterface_ITF, position int, text string) *QAccessibleTextRemoveEvent {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQAccessibleTextRemoveEventFromPointer(C.QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(position)), textC))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextRemoveEvent).DestroyQAccessibleTextRemoveEvent)
	return tmpValue
}

func NewQAccessibleTextRemoveEvent(object core.QObject_ITF, position int, text string) *QAccessibleTextRemoveEvent {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQAccessibleTextRemoveEventFromPointer(C.QAccessibleTextRemoveEvent_NewQAccessibleTextRemoveEvent(core.PointerFromQObject(object), C.int(int32(position)), textC))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextRemoveEvent).DestroyQAccessibleTextRemoveEvent)
	return tmpValue
}

func (ptr *QAccessibleTextRemoveEvent) ChangePosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextRemoveEvent_ChangePosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextRemoveEvent) TextRemoved() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextRemoveEvent_TextRemoved(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextRemoveEvent) M_position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextRemoveEvent_M_position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextRemoveEvent) SetM_position(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextRemoveEvent_SetM_position(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextRemoveEvent) M_text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextRemoveEvent_M_text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextRemoveEvent) SetM_text(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QAccessibleTextRemoveEvent_SetM_text(ptr.Pointer(), vqsC)
	}
}

//export callbackQAccessibleTextRemoveEvent_AccessibleInterface
func callbackQAccessibleTextRemoveEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextRemoveEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextRemoveEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextRemoveEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextRemoveEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextRemoveEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextRemoveEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleTextRemoveEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextRemoveEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextRemoveEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextRemoveEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextSelectionEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextSelectionEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextSelectionEvent_PTR() *QAccessibleTextSelectionEvent
}

func (p *QAccessibleTextSelectionEvent) QAccessibleTextSelectionEvent_PTR() *QAccessibleTextSelectionEvent {
	return p
}

func (p *QAccessibleTextSelectionEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextSelectionEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextSelectionEvent(ptr QAccessibleTextSelectionEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextSelectionEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextSelectionEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextSelectionEvent {
	var n = new(QAccessibleTextSelectionEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextSelectionEvent) DestroyQAccessibleTextSelectionEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAccessibleTextSelectionEvent2(iface QAccessibleInterface_ITF, start int, end int) *QAccessibleTextSelectionEvent {
	var tmpValue = NewQAccessibleTextSelectionEventFromPointer(C.QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(start)), C.int(int32(end))))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextSelectionEvent).DestroyQAccessibleTextSelectionEvent)
	return tmpValue
}

func NewQAccessibleTextSelectionEvent(object core.QObject_ITF, start int, end int) *QAccessibleTextSelectionEvent {
	var tmpValue = NewQAccessibleTextSelectionEventFromPointer(C.QAccessibleTextSelectionEvent_NewQAccessibleTextSelectionEvent(core.PointerFromQObject(object), C.int(int32(start)), C.int(int32(end))))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextSelectionEvent).DestroyQAccessibleTextSelectionEvent)
	return tmpValue
}

func (ptr *QAccessibleTextSelectionEvent) SelectionEnd() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_SelectionEnd(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SelectionStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_SelectionStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SetSelection(start int, end int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextSelectionEvent_SetSelection(ptr.Pointer(), C.int(int32(start)), C.int(int32(end)))
	}
}

func (ptr *QAccessibleTextSelectionEvent) M_selectionEnd() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_M_selectionEnd(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SetM_selectionEnd(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextSelectionEvent_SetM_selectionEnd(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextSelectionEvent) M_selectionStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextSelectionEvent_M_selectionStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextSelectionEvent) SetM_selectionStart(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextSelectionEvent_SetM_selectionStart(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQAccessibleTextSelectionEvent_AccessibleInterface
func callbackQAccessibleTextSelectionEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextSelectionEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextSelectionEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextSelectionEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextSelectionEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextSelectionEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextSelectionEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleTextSelectionEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextSelectionEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextSelectionEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextSelectionEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleTextUpdateEvent struct {
	QAccessibleTextCursorEvent
}

type QAccessibleTextUpdateEvent_ITF interface {
	QAccessibleTextCursorEvent_ITF
	QAccessibleTextUpdateEvent_PTR() *QAccessibleTextUpdateEvent
}

func (p *QAccessibleTextUpdateEvent) QAccessibleTextUpdateEvent_PTR() *QAccessibleTextUpdateEvent {
	return p
}

func (p *QAccessibleTextUpdateEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleTextCursorEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleTextUpdateEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleTextCursorEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleTextUpdateEvent(ptr QAccessibleTextUpdateEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleTextUpdateEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleTextUpdateEventFromPointer(ptr unsafe.Pointer) *QAccessibleTextUpdateEvent {
	var n = new(QAccessibleTextUpdateEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleTextUpdateEvent) DestroyQAccessibleTextUpdateEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAccessibleTextUpdateEvent2(iface QAccessibleInterface_ITF, position int, oldText string, text string) *QAccessibleTextUpdateEvent {
	var oldTextC = C.CString(oldText)
	defer C.free(unsafe.Pointer(oldTextC))
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQAccessibleTextUpdateEventFromPointer(C.QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent2(PointerFromQAccessibleInterface(iface), C.int(int32(position)), oldTextC, textC))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextUpdateEvent).DestroyQAccessibleTextUpdateEvent)
	return tmpValue
}

func NewQAccessibleTextUpdateEvent(object core.QObject_ITF, position int, oldText string, text string) *QAccessibleTextUpdateEvent {
	var oldTextC = C.CString(oldText)
	defer C.free(unsafe.Pointer(oldTextC))
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQAccessibleTextUpdateEventFromPointer(C.QAccessibleTextUpdateEvent_NewQAccessibleTextUpdateEvent(core.PointerFromQObject(object), C.int(int32(position)), oldTextC, textC))
	runtime.SetFinalizer(tmpValue, (*QAccessibleTextUpdateEvent).DestroyQAccessibleTextUpdateEvent)
	return tmpValue
}

func (ptr *QAccessibleTextUpdateEvent) ChangePosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextUpdateEvent_ChangePosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextUpdateEvent) TextInserted() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_TextInserted(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) TextRemoved() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_TextRemoved(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) M_oldText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_M_oldText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) SetM_oldText(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QAccessibleTextUpdateEvent_SetM_oldText(ptr.Pointer(), vqsC)
	}
}

func (ptr *QAccessibleTextUpdateEvent) M_position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAccessibleTextUpdateEvent_M_position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAccessibleTextUpdateEvent) SetM_position(vin int) {
	if ptr.Pointer() != nil {
		C.QAccessibleTextUpdateEvent_SetM_position(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QAccessibleTextUpdateEvent) M_text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QAccessibleTextUpdateEvent_M_text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QAccessibleTextUpdateEvent) SetM_text(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QAccessibleTextUpdateEvent_SetM_text(ptr.Pointer(), vqsC)
	}
}

//export callbackQAccessibleTextUpdateEvent_AccessibleInterface
func callbackQAccessibleTextUpdateEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleTextUpdateEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleTextUpdateEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleTextUpdateEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextUpdateEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleTextUpdateEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleTextUpdateEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleTextUpdateEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextUpdateEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleTextUpdateEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleTextUpdateEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleValueChangeEvent struct {
	QAccessibleEvent
}

type QAccessibleValueChangeEvent_ITF interface {
	QAccessibleEvent_ITF
	QAccessibleValueChangeEvent_PTR() *QAccessibleValueChangeEvent
}

func (p *QAccessibleValueChangeEvent) QAccessibleValueChangeEvent_PTR() *QAccessibleValueChangeEvent {
	return p
}

func (p *QAccessibleValueChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAccessibleEvent_PTR().Pointer()
	}
	return nil
}

func (p *QAccessibleValueChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAccessibleEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQAccessibleValueChangeEvent(ptr QAccessibleValueChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleValueChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleValueChangeEventFromPointer(ptr unsafe.Pointer) *QAccessibleValueChangeEvent {
	var n = new(QAccessibleValueChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAccessibleValueChangeEvent) DestroyQAccessibleValueChangeEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQAccessibleValueChangeEvent2(iface QAccessibleInterface_ITF, val core.QVariant_ITF) *QAccessibleValueChangeEvent {
	var tmpValue = NewQAccessibleValueChangeEventFromPointer(C.QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent2(PointerFromQAccessibleInterface(iface), core.PointerFromQVariant(val)))
	runtime.SetFinalizer(tmpValue, (*QAccessibleValueChangeEvent).DestroyQAccessibleValueChangeEvent)
	return tmpValue
}

func NewQAccessibleValueChangeEvent(object core.QObject_ITF, value core.QVariant_ITF) *QAccessibleValueChangeEvent {
	var tmpValue = NewQAccessibleValueChangeEventFromPointer(C.QAccessibleValueChangeEvent_NewQAccessibleValueChangeEvent(core.PointerFromQObject(object), core.PointerFromQVariant(value)))
	runtime.SetFinalizer(tmpValue, (*QAccessibleValueChangeEvent).DestroyQAccessibleValueChangeEvent)
	return tmpValue
}

func (ptr *QAccessibleValueChangeEvent) SetValue(value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleValueChangeEvent_SetValue(ptr.Pointer(), core.PointerFromQVariant(value))
	}
}

func (ptr *QAccessibleValueChangeEvent) Value() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueChangeEvent_Value(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleValueChangeEvent) M_value() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueChangeEvent_M_value(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAccessibleValueChangeEvent) SetM_value(vqv core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleValueChangeEvent_SetM_value(ptr.Pointer(), core.PointerFromQVariant(vqv))
	}
}

//export callbackQAccessibleValueChangeEvent_AccessibleInterface
func callbackQAccessibleValueChangeEvent_AccessibleInterface(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleValueChangeEvent::accessibleInterface"); signal != nil {
		return PointerFromQAccessibleInterface(signal.(func() *QAccessibleInterface)())
	}

	return PointerFromQAccessibleInterface(NewQAccessibleValueChangeEventFromPointer(ptr).AccessibleInterfaceDefault())
}

func (ptr *QAccessibleValueChangeEvent) ConnectAccessibleInterface(f func() *QAccessibleInterface) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueChangeEvent::accessibleInterface", f)
	}
}

func (ptr *QAccessibleValueChangeEvent) DisconnectAccessibleInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueChangeEvent::accessibleInterface")
	}
}

func (ptr *QAccessibleValueChangeEvent) AccessibleInterface() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleValueChangeEvent_AccessibleInterface(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAccessibleValueChangeEvent) AccessibleInterfaceDefault() *QAccessibleInterface {
	if ptr.Pointer() != nil {
		return NewQAccessibleInterfaceFromPointer(C.QAccessibleValueChangeEvent_AccessibleInterfaceDefault(ptr.Pointer()))
	}
	return nil
}

type QAccessibleValueInterface struct {
	ptr unsafe.Pointer
}

type QAccessibleValueInterface_ITF interface {
	QAccessibleValueInterface_PTR() *QAccessibleValueInterface
}

func (p *QAccessibleValueInterface) QAccessibleValueInterface_PTR() *QAccessibleValueInterface {
	return p
}

func (p *QAccessibleValueInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAccessibleValueInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAccessibleValueInterface(ptr QAccessibleValueInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAccessibleValueInterface_PTR().Pointer()
	}
	return nil
}

func NewQAccessibleValueInterfaceFromPointer(ptr unsafe.Pointer) *QAccessibleValueInterface {
	var n = new(QAccessibleValueInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQAccessibleValueInterface_CurrentValue
func callbackQAccessibleValueInterface_CurrentValue(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleValueInterface::currentValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectCurrentValue(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::currentValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectCurrentValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::currentValue")
	}
}

func (ptr *QAccessibleValueInterface) CurrentValue() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_CurrentValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleValueInterface_MaximumValue
func callbackQAccessibleValueInterface_MaximumValue(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleValueInterface::maximumValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectMaximumValue(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::maximumValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMaximumValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::maximumValue")
	}
}

func (ptr *QAccessibleValueInterface) MaximumValue() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_MaximumValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleValueInterface_MinimumStepSize
func callbackQAccessibleValueInterface_MinimumStepSize(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleValueInterface::minimumStepSize"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectMinimumStepSize(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::minimumStepSize", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMinimumStepSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::minimumStepSize")
	}
}

func (ptr *QAccessibleValueInterface) MinimumStepSize() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_MinimumStepSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleValueInterface_MinimumValue
func callbackQAccessibleValueInterface_MinimumValue(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleValueInterface::minimumValue"); signal != nil {
		return core.PointerFromQVariant(signal.(func() *core.QVariant)())
	}

	return core.PointerFromQVariant(nil)
}

func (ptr *QAccessibleValueInterface) ConnectMinimumValue(f func() *core.QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::minimumValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectMinimumValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::minimumValue")
	}
}

func (ptr *QAccessibleValueInterface) MinimumValue() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QAccessibleValueInterface_MinimumValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAccessibleValueInterface_SetCurrentValue
func callbackQAccessibleValueInterface_SetCurrentValue(ptr unsafe.Pointer, value unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleValueInterface::setCurrentValue"); signal != nil {
		signal.(func(*core.QVariant))(core.NewQVariantFromPointer(value))
	}

}

func (ptr *QAccessibleValueInterface) ConnectSetCurrentValue(f func(value *core.QVariant)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::setCurrentValue", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectSetCurrentValue(value core.QVariant_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::setCurrentValue")
	}
}

func (ptr *QAccessibleValueInterface) SetCurrentValue(value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_SetCurrentValue(ptr.Pointer(), core.PointerFromQVariant(value))
	}
}

//export callbackQAccessibleValueInterface_DestroyQAccessibleValueInterface
func callbackQAccessibleValueInterface_DestroyQAccessibleValueInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAccessibleValueInterface::~QAccessibleValueInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQAccessibleValueInterfaceFromPointer(ptr).DestroyQAccessibleValueInterfaceDefault()
	}
}

func (ptr *QAccessibleValueInterface) ConnectDestroyQAccessibleValueInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::~QAccessibleValueInterface", f)
	}
}

func (ptr *QAccessibleValueInterface) DisconnectDestroyQAccessibleValueInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAccessibleValueInterface::~QAccessibleValueInterface")
	}
}

func (ptr *QAccessibleValueInterface) DestroyQAccessibleValueInterface() {
	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_DestroyQAccessibleValueInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAccessibleValueInterface) DestroyQAccessibleValueInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QAccessibleValueInterface_DestroyQAccessibleValueInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QActionEvent struct {
	core.QEvent
}

type QActionEvent_ITF interface {
	core.QEvent_ITF
	QActionEvent_PTR() *QActionEvent
}

func (p *QActionEvent) QActionEvent_PTR() *QActionEvent {
	return p
}

func (p *QActionEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QActionEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQActionEvent(ptr QActionEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QActionEvent_PTR().Pointer()
	}
	return nil
}

func NewQActionEventFromPointer(ptr unsafe.Pointer) *QActionEvent {
	var n = new(QActionEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QActionEvent) DestroyQActionEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQActionEvent(ty int, action unsafe.Pointer, before unsafe.Pointer) *QActionEvent {
	var tmpValue = NewQActionEventFromPointer(C.QActionEvent_NewQActionEvent(C.int(int32(ty)), action, before))
	runtime.SetFinalizer(tmpValue, (*QActionEvent).DestroyQActionEvent)
	return tmpValue
}

func (ptr *QActionEvent) Action() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QActionEvent_Action(ptr.Pointer()))
	}
	return nil
}

func (ptr *QActionEvent) Before() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QActionEvent_Before(ptr.Pointer()))
	}
	return nil
}

type QBackingStore struct {
	ptr unsafe.Pointer
}

type QBackingStore_ITF interface {
	QBackingStore_PTR() *QBackingStore
}

func (p *QBackingStore) QBackingStore_PTR() *QBackingStore {
	return p
}

func (p *QBackingStore) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QBackingStore) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQBackingStore(ptr QBackingStore_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBackingStore_PTR().Pointer()
	}
	return nil
}

func NewQBackingStoreFromPointer(ptr unsafe.Pointer) *QBackingStore {
	var n = new(QBackingStore)
	n.SetPointer(ptr)
	return n
}
func (ptr *QBackingStore) PaintDevice() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QBackingStore_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func NewQBackingStore(window QWindow_ITF) *QBackingStore {
	var tmpValue = NewQBackingStoreFromPointer(C.QBackingStore_NewQBackingStore(PointerFromQWindow(window)))
	runtime.SetFinalizer(tmpValue, (*QBackingStore).DestroyQBackingStore)
	return tmpValue
}

func (ptr *QBackingStore) BeginPaint(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_BeginPaint(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QBackingStore) EndPaint() {
	if ptr.Pointer() != nil {
		C.QBackingStore_EndPaint(ptr.Pointer())
	}
}

func (ptr *QBackingStore) Flush(region QRegion_ITF, win QWindow_ITF, offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_Flush(ptr.Pointer(), PointerFromQRegion(region), PointerFromQWindow(win), core.PointerFromQPoint(offset))
	}
}

func (ptr *QBackingStore) HasStaticContents() bool {
	if ptr.Pointer() != nil {
		return C.QBackingStore_HasStaticContents(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBackingStore) Resize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_Resize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QBackingStore) Scroll(area QRegion_ITF, dx int, dy int) bool {
	if ptr.Pointer() != nil {
		return C.QBackingStore_Scroll(ptr.Pointer(), PointerFromQRegion(area), C.int(int32(dx)), C.int(int32(dy))) != 0
	}
	return false
}

func (ptr *QBackingStore) SetStaticContents(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QBackingStore_SetStaticContents(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QBackingStore) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QBackingStore_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QBackingStore) StaticContents() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QBackingStore_StaticContents(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QBackingStore) Window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QBackingStore_Window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QBackingStore) DestroyQBackingStore() {
	if ptr.Pointer() != nil {
		C.QBackingStore_DestroyQBackingStore(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QBitmap struct {
	QPixmap
}

type QBitmap_ITF interface {
	QPixmap_ITF
	QBitmap_PTR() *QBitmap
}

func (p *QBitmap) QBitmap_PTR() *QBitmap {
	return p
}

func (p *QBitmap) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPixmap_PTR().Pointer()
	}
	return nil
}

func (p *QBitmap) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPixmap_PTR().SetPointer(ptr)
	}
}

func PointerFromQBitmap(ptr QBitmap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBitmap_PTR().Pointer()
	}
	return nil
}

func NewQBitmapFromPointer(ptr unsafe.Pointer) *QBitmap {
	var n = new(QBitmap)
	n.SetPointer(ptr)
	return n
}
func NewQBitmap3(width int, height int) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_NewQBitmap3(C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func NewQBitmap() *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_NewQBitmap())
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func NewQBitmap6(other QBitmap_ITF) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_NewQBitmap6(PointerFromQBitmap(other)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func NewQBitmap2(pixmap QPixmap_ITF) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_NewQBitmap2(PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func NewQBitmap4(size core.QSize_ITF) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_NewQBitmap4(core.PointerFromQSize(size)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func NewQBitmap5(fileName string, format string) *QBitmap {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_NewQBitmap5(fileNameC, formatC))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func (ptr *QBitmap) Clear() {
	if ptr.Pointer() != nil {
		C.QBitmap_Clear(ptr.Pointer())
	}
}

func QBitmap_FromData(size core.QSize_ITF, bits string, monoFormat QImage__Format) *QBitmap {
	var bitsC = C.CString(bits)
	defer C.free(unsafe.Pointer(bitsC))
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromData(core.PointerFromQSize(size), bitsC, C.longlong(monoFormat)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func (ptr *QBitmap) FromData(size core.QSize_ITF, bits string, monoFormat QImage__Format) *QBitmap {
	var bitsC = C.CString(bits)
	defer C.free(unsafe.Pointer(bitsC))
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromData(core.PointerFromQSize(size), bitsC, C.longlong(monoFormat)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func QBitmap_FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func (ptr *QBitmap) FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QBitmap {
	var tmpValue = NewQBitmapFromPointer(C.QBitmap_QBitmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
	return tmpValue
}

func (ptr *QBitmap) Swap(other QBitmap_ITF) {
	if ptr.Pointer() != nil {
		C.QBitmap_Swap(ptr.Pointer(), PointerFromQBitmap(other))
	}
}

func (ptr *QBitmap) Transformed(matrix QTransform_ITF) *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QBitmap_Transformed(ptr.Pointer(), PointerFromQTransform(matrix)))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

func (ptr *QBitmap) DestroyQBitmap() {
	if ptr.Pointer() != nil {
		C.QBitmap_DestroyQBitmap(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQBitmap_Metric
func callbackQBitmap_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBitmap::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQBitmapFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QBitmap) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBitmap::metric", f)
	}
}

func (ptr *QBitmap) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBitmap::metric")
	}
}

func (ptr *QBitmap) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QBitmap_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QBitmap) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QBitmap_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQBitmap_PaintEngine
func callbackQBitmap_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBitmap::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQBitmapFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QBitmap) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBitmap::paintEngine", f)
	}
}

func (ptr *QBitmap) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBitmap::paintEngine")
	}
}

func (ptr *QBitmap) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QBitmap_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBitmap) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QBitmap_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

type QBrush struct {
	ptr unsafe.Pointer
}

type QBrush_ITF interface {
	QBrush_PTR() *QBrush
}

func (p *QBrush) QBrush_PTR() *QBrush {
	return p
}

func (p *QBrush) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QBrush) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQBrush(ptr QBrush_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBrush_PTR().Pointer()
	}
	return nil
}

func NewQBrushFromPointer(ptr unsafe.Pointer) *QBrush {
	var n = new(QBrush)
	n.SetPointer(ptr)
	return n
}
func NewQBrush4(color core.Qt__GlobalColor, style core.Qt__BrushStyle) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush4(C.longlong(color), C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func (ptr *QBrush) SetColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QBrush) Texture() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QBrush_Texture(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func NewQBrush() *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush())
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush2(style core.Qt__BrushStyle) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush2(C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush6(color core.Qt__GlobalColor, pixmap QPixmap_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush6(C.longlong(color), PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush9(other QBrush_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush9(PointerFromQBrush(other)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush3(color QColor_ITF, style core.Qt__BrushStyle) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush3(PointerFromQColor(color), C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush5(color QColor_ITF, pixmap QPixmap_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush5(PointerFromQColor(color), PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush10(gradient QGradient_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush10(PointerFromQGradient(gradient)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush8(image QImage_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush8(PointerFromQImage(image)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func NewQBrush7(pixmap QPixmap_ITF) *QBrush {
	var tmpValue = NewQBrushFromPointer(C.QBrush_NewQBrush7(PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
	return tmpValue
}

func (ptr *QBrush) Color() *QColor {
	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QBrush_Color(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBrush) Gradient() *QGradient {
	if ptr.Pointer() != nil {
		return NewQGradientFromPointer(C.QBrush_Gradient(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBrush) IsOpaque() bool {
	if ptr.Pointer() != nil {
		return C.QBrush_IsOpaque(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBrush) SetColor2(color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QBrush_SetColor2(ptr.Pointer(), C.longlong(color))
	}
}

func (ptr *QBrush) SetStyle(style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QBrush_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QBrush) SetTexture(pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetTexture(ptr.Pointer(), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QBrush) SetTextureImage(image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetTextureImage(ptr.Pointer(), PointerFromQImage(image))
	}
}

func (ptr *QBrush) SetTransform(matrix QTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_SetTransform(ptr.Pointer(), PointerFromQTransform(matrix))
	}
}

func (ptr *QBrush) Style() core.Qt__BrushStyle {
	if ptr.Pointer() != nil {
		return core.Qt__BrushStyle(C.QBrush_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QBrush) Swap(other QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QBrush_Swap(ptr.Pointer(), PointerFromQBrush(other))
	}
}

func (ptr *QBrush) TextureImage() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QBrush_TextureImage(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QBrush) Transform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QBrush_Transform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QBrush) DestroyQBrush() {
	if ptr.Pointer() != nil {
		C.QBrush_DestroyQBrush(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QClipboard::Mode
type QClipboard__Mode int64

const (
	QClipboard__Clipboard  = QClipboard__Mode(0)
	QClipboard__Selection  = QClipboard__Mode(1)
	QClipboard__FindBuffer = QClipboard__Mode(2)
	QClipboard__LastMode   = QClipboard__Mode(QClipboard__FindBuffer)
)

type QClipboard struct {
	core.QObject
}

type QClipboard_ITF interface {
	core.QObject_ITF
	QClipboard_PTR() *QClipboard
}

func (p *QClipboard) QClipboard_PTR() *QClipboard {
	return p
}

func (p *QClipboard) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QClipboard) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQClipboard(ptr QClipboard_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QClipboard_PTR().Pointer()
	}
	return nil
}

func NewQClipboardFromPointer(ptr unsafe.Pointer) *QClipboard {
	var n = new(QClipboard)
	n.SetPointer(ptr)
	return n
}

func (ptr *QClipboard) DestroyQClipboard() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QClipboard) Clear(mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_Clear(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QClipboard) MimeData(mode QClipboard__Mode) *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QClipboard_MimeData(ptr.Pointer(), C.longlong(mode)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) SetMimeData(src core.QMimeData_ITF, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_SetMimeData(ptr.Pointer(), core.PointerFromQMimeData(src), C.longlong(mode))
	}
}

//export callbackQClipboard_Changed
func callbackQClipboard_Changed(ptr unsafe.Pointer, mode C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::changed"); signal != nil {
		signal.(func(QClipboard__Mode))(QClipboard__Mode(mode))
	}

}

func (ptr *QClipboard) ConnectChanged(f func(mode QClipboard__Mode)) {
	if ptr.Pointer() != nil {
		C.QClipboard_ConnectChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::changed", f)
	}
}

func (ptr *QClipboard) DisconnectChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::changed")
	}
}

func (ptr *QClipboard) Changed(mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_Changed(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQClipboard_DataChanged
func callbackQClipboard_DataChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::dataChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectDataChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QClipboard_ConnectDataChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::dataChanged", f)
	}
}

func (ptr *QClipboard) DisconnectDataChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectDataChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::dataChanged")
	}
}

func (ptr *QClipboard) DataChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DataChanged(ptr.Pointer())
	}
}

//export callbackQClipboard_FindBufferChanged
func callbackQClipboard_FindBufferChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::findBufferChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectFindBufferChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QClipboard_ConnectFindBufferChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::findBufferChanged", f)
	}
}

func (ptr *QClipboard) DisconnectFindBufferChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectFindBufferChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::findBufferChanged")
	}
}

func (ptr *QClipboard) FindBufferChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_FindBufferChanged(ptr.Pointer())
	}
}

func (ptr *QClipboard) Image(mode QClipboard__Mode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QClipboard_Image(ptr.Pointer(), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QClipboard) OwnsClipboard() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsClipboard(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) OwnsFindBuffer() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsFindBuffer(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) OwnsSelection() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_OwnsSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) Pixmap(mode QClipboard__Mode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QClipboard_Pixmap(ptr.Pointer(), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

//export callbackQClipboard_SelectionChanged
func callbackQClipboard_SelectionChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::selectionChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QClipboard) ConnectSelectionChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QClipboard_ConnectSelectionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::selectionChanged", f)
	}
}

func (ptr *QClipboard) DisconnectSelectionChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectSelectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::selectionChanged")
	}
}

func (ptr *QClipboard) SelectionChanged() {
	if ptr.Pointer() != nil {
		C.QClipboard_SelectionChanged(ptr.Pointer())
	}
}

func (ptr *QClipboard) SetImage(image QImage_ITF, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_SetImage(ptr.Pointer(), PointerFromQImage(image), C.longlong(mode))
	}
}

func (ptr *QClipboard) SetPixmap(pixmap QPixmap_ITF, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		C.QClipboard_SetPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode))
	}
}

func (ptr *QClipboard) SetText(text string, mode QClipboard__Mode) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QClipboard_SetText(ptr.Pointer(), textC, C.longlong(mode))
	}
}

func (ptr *QClipboard) SupportsFindBuffer() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_SupportsFindBuffer(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) SupportsSelection() bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_SupportsSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QClipboard) Text(mode QClipboard__Mode) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QClipboard_Text(ptr.Pointer(), C.longlong(mode)))
	}
	return ""
}

func (ptr *QClipboard) Text2(subtype string, mode QClipboard__Mode) string {
	if ptr.Pointer() != nil {
		var subtypeC = C.CString(subtype)
		defer C.free(unsafe.Pointer(subtypeC))
		return cGoUnpackString(C.QClipboard_Text2(ptr.Pointer(), subtypeC, C.longlong(mode)))
	}
	return ""
}

//export callbackQClipboard_TimerEvent
func callbackQClipboard_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QClipboard) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::timerEvent", f)
	}
}

func (ptr *QClipboard) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::timerEvent")
	}
}

func (ptr *QClipboard) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QClipboard) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQClipboard_ChildEvent
func callbackQClipboard_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QClipboard) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::childEvent", f)
	}
}

func (ptr *QClipboard) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::childEvent")
	}
}

func (ptr *QClipboard) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QClipboard) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQClipboard_ConnectNotify
func callbackQClipboard_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQClipboardFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QClipboard) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::connectNotify", f)
	}
}

func (ptr *QClipboard) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::connectNotify")
	}
}

func (ptr *QClipboard) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QClipboard) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQClipboard_CustomEvent
func callbackQClipboard_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQClipboardFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QClipboard) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::customEvent", f)
	}
}

func (ptr *QClipboard) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::customEvent")
	}
}

func (ptr *QClipboard) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QClipboard) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQClipboard_DeleteLater
func callbackQClipboard_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQClipboardFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QClipboard) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::deleteLater", f)
	}
}

func (ptr *QClipboard) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::deleteLater")
	}
}

func (ptr *QClipboard) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QClipboard_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QClipboard) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QClipboard_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQClipboard_DisconnectNotify
func callbackQClipboard_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQClipboardFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QClipboard) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::disconnectNotify", f)
	}
}

func (ptr *QClipboard) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::disconnectNotify")
	}
}

func (ptr *QClipboard) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QClipboard) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QClipboard_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQClipboard_Event
func callbackQClipboard_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQClipboardFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QClipboard) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::event", f)
	}
}

func (ptr *QClipboard) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::event")
	}
}

func (ptr *QClipboard) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QClipboard) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQClipboard_EventFilter
func callbackQClipboard_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQClipboardFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QClipboard) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::eventFilter", f)
	}
}

func (ptr *QClipboard) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::eventFilter")
	}
}

func (ptr *QClipboard) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QClipboard) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QClipboard_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQClipboard_MetaObject
func callbackQClipboard_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QClipboard::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQClipboardFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QClipboard) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::metaObject", f)
	}
}

func (ptr *QClipboard) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QClipboard::metaObject")
	}
}

func (ptr *QClipboard) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QClipboard_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QClipboard) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QClipboard_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QCloseEvent struct {
	core.QEvent
}

type QCloseEvent_ITF interface {
	core.QEvent_ITF
	QCloseEvent_PTR() *QCloseEvent
}

func (p *QCloseEvent) QCloseEvent_PTR() *QCloseEvent {
	return p
}

func (p *QCloseEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QCloseEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQCloseEvent(ptr QCloseEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCloseEvent_PTR().Pointer()
	}
	return nil
}

func NewQCloseEventFromPointer(ptr unsafe.Pointer) *QCloseEvent {
	var n = new(QCloseEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QCloseEvent) DestroyQCloseEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQCloseEvent() *QCloseEvent {
	var tmpValue = NewQCloseEventFromPointer(C.QCloseEvent_NewQCloseEvent())
	runtime.SetFinalizer(tmpValue, (*QCloseEvent).DestroyQCloseEvent)
	return tmpValue
}

//QColor::NameFormat
type QColor__NameFormat int64

const (
	QColor__HexRgb  = QColor__NameFormat(0)
	QColor__HexArgb = QColor__NameFormat(1)
)

//QColor::Spec
type QColor__Spec int64

const (
	QColor__Invalid = QColor__Spec(0)
	QColor__Rgb     = QColor__Spec(1)
	QColor__Hsv     = QColor__Spec(2)
	QColor__Cmyk    = QColor__Spec(3)
	QColor__Hsl     = QColor__Spec(4)
)

type QColor struct {
	ptr unsafe.Pointer
}

type QColor_ITF interface {
	QColor_PTR() *QColor
}

func (p *QColor) QColor_PTR() *QColor {
	return p
}

func (p *QColor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QColor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQColor(ptr QColor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QColor_PTR().Pointer()
	}
	return nil
}

func NewQColorFromPointer(ptr unsafe.Pointer) *QColor {
	var n = new(QColor)
	n.SetPointer(ptr)
	return n
}

func (ptr *QColor) DestroyQColor() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QColor) ConvertTo(colorSpec QColor__Spec) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ConvertTo(ptr.Pointer(), C.longlong(colorSpec)))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) SetRgbF(r float64, g float64, b float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetRgbF(ptr.Pointer(), C.double(r), C.double(g), C.double(b), C.double(a))
	}
}

func NewQColor() *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor())
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor10(other QColor_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor10(PointerFromQColor(other)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor5(rgba64 QRgba64_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor5(PointerFromQRgba64(rgba64)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor2(color core.Qt__GlobalColor) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor2(C.longlong(color)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor9(color QColor_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor9(PointerFromQColor(color)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor6(name string) *QColor {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor6(nameC))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor7(name string) *QColor {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor7(nameC))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func NewQColor3(r int, g int, b int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_NewQColor3(C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) Alpha() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Alpha(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) AlphaF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_AlphaF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Black() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Black(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) BlackF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_BlackF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Blue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Blue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) BlueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_BlueF(ptr.Pointer()))
	}
	return 0
}

func QColor_ColorNames() []string {
	return strings.Split(cGoUnpackString(C.QColor_QColor_ColorNames()), "|")
}

func (ptr *QColor) ColorNames() []string {
	return strings.Split(cGoUnpackString(C.QColor_QColor_ColorNames()), "|")
}

func (ptr *QColor) Cyan() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Cyan(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) CyanF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_CyanF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Darker(factor int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_Darker(ptr.Pointer(), C.int(int32(factor))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func QColor_FromCmyk(c int, m int, y int, k int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmyk(C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromCmyk(c int, m int, y int, k int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmyk(C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromCmykF(c float64, m float64, y float64, k float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmykF(C.double(c), C.double(m), C.double(y), C.double(k), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromCmykF(c float64, m float64, y float64, k float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromCmykF(C.double(c), C.double(m), C.double(y), C.double(k), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromHsl(h int, s int, l int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsl(C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHsl(h int, s int, l int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsl(C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromHslF(h float64, s float64, l float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHslF(C.double(h), C.double(s), C.double(l), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHslF(h float64, s float64, l float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHslF(C.double(h), C.double(s), C.double(l), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromHsv(h int, s int, v int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsv(C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHsv(h int, s int, v int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsv(C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromHsvF(h float64, s float64, v float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsvF(C.double(h), C.double(s), C.double(v), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromHsvF(h float64, s float64, v float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromHsvF(C.double(h), C.double(s), C.double(v), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgb2(r int, g int, b int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgb2(C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgb2(r int, g int, b int, a int) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgb2(C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a))))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgbF(r float64, g float64, b float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgbF(C.double(r), C.double(g), C.double(b), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgbF(r float64, g float64, b float64, a float64) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgbF(C.double(r), C.double(g), C.double(b), C.double(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgba642(rgba64 QRgba64_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba642(PointerFromQRgba64(rgba64)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgba642(rgba64 QRgba64_ITF) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba642(PointerFromQRgba64(rgba64)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func QColor_FromRgba64(r uint16, g uint16, b uint16, a uint16) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba64(C.ushort(r), C.ushort(g), C.ushort(b), C.ushort(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) FromRgba64(r uint16, g uint16, b uint16, a uint16) *QColor {
	var tmpValue = NewQColorFromPointer(C.QColor_QColor_FromRgba64(C.ushort(r), C.ushort(g), C.ushort(b), C.ushort(a)))
	runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
	return tmpValue
}

func (ptr *QColor) GetCmyk(c int, m int, y int, k int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetCmyk(ptr.Pointer(), C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetCmykF(c float64, m float64, y float64, k float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetCmykF(ptr.Pointer(), C.double(c), C.double(m), C.double(y), C.double(k), C.double(a))
	}
}

func (ptr *QColor) GetHsl(h int, s int, l int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetHsl(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetHslF(h float64, s float64, l float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetHslF(ptr.Pointer(), C.double(h), C.double(s), C.double(l), C.double(a))
	}
}

func (ptr *QColor) GetHsv(h int, s int, v int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetHsv(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetHsvF(h float64, s float64, v float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetHsvF(ptr.Pointer(), C.double(h), C.double(s), C.double(v), C.double(a))
	}
}

func (ptr *QColor) GetRgb(r int, g int, b int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_GetRgb(ptr.Pointer(), C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a)))
	}
}

func (ptr *QColor) GetRgbF(r float64, g float64, b float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_GetRgbF(ptr.Pointer(), C.double(r), C.double(g), C.double(b), C.double(a))
	}
}

func (ptr *QColor) Green() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Green(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) GreenF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_GreenF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslHue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HslHue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HslHueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HslHueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HslSaturation() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HslSaturation(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HslSaturationF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HslSaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvHue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HsvHue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HsvHueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HsvHueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) HsvSaturation() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_HsvSaturation(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HsvSaturationF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HsvSaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Hue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Hue(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) HueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_HueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QColor_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QColor_IsValidColor(name string) bool {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	return C.QColor_QColor_IsValidColor(nameC) != 0
}

func (ptr *QColor) IsValidColor(name string) bool {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	return C.QColor_QColor_IsValidColor(nameC) != 0
}

func (ptr *QColor) Lighter(factor int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_Lighter(ptr.Pointer(), C.int(int32(factor))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) Lightness() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Lightness(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) LightnessF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_LightnessF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Magenta() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Magenta(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) MagentaF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_MagentaF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QColor_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QColor) Name2(format QColor__NameFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QColor_Name2(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QColor) Red() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Red(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) RedF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_RedF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Saturation() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Saturation(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) SaturationF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_SaturationF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) SetAlpha(alpha int) {
	if ptr.Pointer() != nil {
		C.QColor_SetAlpha(ptr.Pointer(), C.int(int32(alpha)))
	}
}

func (ptr *QColor) SetAlphaF(alpha float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetAlphaF(ptr.Pointer(), C.double(alpha))
	}
}

func (ptr *QColor) SetBlue(blue int) {
	if ptr.Pointer() != nil {
		C.QColor_SetBlue(ptr.Pointer(), C.int(int32(blue)))
	}
}

func (ptr *QColor) SetBlueF(blue float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetBlueF(ptr.Pointer(), C.double(blue))
	}
}

func (ptr *QColor) SetCmyk(c int, m int, y int, k int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetCmyk(ptr.Pointer(), C.int(int32(c)), C.int(int32(m)), C.int(int32(y)), C.int(int32(k)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetCmykF(c float64, m float64, y float64, k float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetCmykF(ptr.Pointer(), C.double(c), C.double(m), C.double(y), C.double(k), C.double(a))
	}
}

func (ptr *QColor) SetGreen(green int) {
	if ptr.Pointer() != nil {
		C.QColor_SetGreen(ptr.Pointer(), C.int(int32(green)))
	}
}

func (ptr *QColor) SetGreenF(green float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetGreenF(ptr.Pointer(), C.double(green))
	}
}

func (ptr *QColor) SetHsl(h int, s int, l int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetHsl(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(l)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetHslF(h float64, s float64, l float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetHslF(ptr.Pointer(), C.double(h), C.double(s), C.double(l), C.double(a))
	}
}

func (ptr *QColor) SetHsv(h int, s int, v int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetHsv(ptr.Pointer(), C.int(int32(h)), C.int(int32(s)), C.int(int32(v)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetHsvF(h float64, s float64, v float64, a float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetHsvF(ptr.Pointer(), C.double(h), C.double(s), C.double(v), C.double(a))
	}
}

func (ptr *QColor) SetNamedColor(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QColor_SetNamedColor(ptr.Pointer(), nameC)
	}
}

func (ptr *QColor) SetRed(red int) {
	if ptr.Pointer() != nil {
		C.QColor_SetRed(ptr.Pointer(), C.int(int32(red)))
	}
}

func (ptr *QColor) SetRedF(red float64) {
	if ptr.Pointer() != nil {
		C.QColor_SetRedF(ptr.Pointer(), C.double(red))
	}
}

func (ptr *QColor) SetRgb(r int, g int, b int, a int) {
	if ptr.Pointer() != nil {
		C.QColor_SetRgb(ptr.Pointer(), C.int(int32(r)), C.int(int32(g)), C.int(int32(b)), C.int(int32(a)))
	}
}

func (ptr *QColor) SetRgba64(rgba QRgba64_ITF) {
	if ptr.Pointer() != nil {
		C.QColor_SetRgba64(ptr.Pointer(), PointerFromQRgba64(rgba))
	}
}

func (ptr *QColor) Spec() QColor__Spec {
	if ptr.Pointer() != nil {
		return QColor__Spec(C.QColor_Spec(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) ToCmyk() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToCmyk(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) ToHsl() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToHsl(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) ToHsv() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToHsv(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) ToRgb() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QColor_ToRgb(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QColor) Value() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Value(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) ValueF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_ValueF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) Yellow() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QColor_Yellow(ptr.Pointer())))
	}
	return 0
}

func (ptr *QColor) YellowF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QColor_YellowF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QColor) ToVariant() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QColor_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

type QConicalGradient struct {
	QGradient
}

type QConicalGradient_ITF interface {
	QGradient_ITF
	QConicalGradient_PTR() *QConicalGradient
}

func (p *QConicalGradient) QConicalGradient_PTR() *QConicalGradient {
	return p
}

func (p *QConicalGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGradient_PTR().Pointer()
	}
	return nil
}

func (p *QConicalGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGradient_PTR().SetPointer(ptr)
	}
}

func PointerFromQConicalGradient(ptr QConicalGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QConicalGradient_PTR().Pointer()
	}
	return nil
}

func NewQConicalGradientFromPointer(ptr unsafe.Pointer) *QConicalGradient {
	var n = new(QConicalGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QConicalGradient) DestroyQConicalGradient() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQConicalGradient() *QConicalGradient {
	var tmpValue = NewQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient())
	runtime.SetFinalizer(tmpValue, (*QConicalGradient).DestroyQConicalGradient)
	return tmpValue
}

func NewQConicalGradient2(center core.QPointF_ITF, angle float64) *QConicalGradient {
	var tmpValue = NewQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient2(core.PointerFromQPointF(center), C.double(angle)))
	runtime.SetFinalizer(tmpValue, (*QConicalGradient).DestroyQConicalGradient)
	return tmpValue
}

func NewQConicalGradient3(cx float64, cy float64, angle float64) *QConicalGradient {
	var tmpValue = NewQConicalGradientFromPointer(C.QConicalGradient_NewQConicalGradient3(C.double(cx), C.double(cy), C.double(angle)))
	runtime.SetFinalizer(tmpValue, (*QConicalGradient).DestroyQConicalGradient)
	return tmpValue
}

func (ptr *QConicalGradient) Angle() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QConicalGradient_Angle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QConicalGradient) Center() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QConicalGradient_Center(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QConicalGradient) SetAngle(angle float64) {
	if ptr.Pointer() != nil {
		C.QConicalGradient_SetAngle(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QConicalGradient) SetCenter(center core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QConicalGradient_SetCenter(ptr.Pointer(), core.PointerFromQPointF(center))
	}
}

func (ptr *QConicalGradient) SetCenter2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QConicalGradient_SetCenter2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

//QContextMenuEvent::Reason
type QContextMenuEvent__Reason int64

const (
	QContextMenuEvent__Mouse    = QContextMenuEvent__Reason(0)
	QContextMenuEvent__Keyboard = QContextMenuEvent__Reason(1)
	QContextMenuEvent__Other    = QContextMenuEvent__Reason(2)
)

type QContextMenuEvent struct {
	QInputEvent
}

type QContextMenuEvent_ITF interface {
	QInputEvent_ITF
	QContextMenuEvent_PTR() *QContextMenuEvent
}

func (p *QContextMenuEvent) QContextMenuEvent_PTR() *QContextMenuEvent {
	return p
}

func (p *QContextMenuEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QContextMenuEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQContextMenuEvent(ptr QContextMenuEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QContextMenuEvent_PTR().Pointer()
	}
	return nil
}

func NewQContextMenuEventFromPointer(ptr unsafe.Pointer) *QContextMenuEvent {
	var n = new(QContextMenuEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QContextMenuEvent) DestroyQContextMenuEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQContextMenuEvent3(reason QContextMenuEvent__Reason, pos core.QPoint_ITF) *QContextMenuEvent {
	var tmpValue = NewQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent3(C.longlong(reason), core.PointerFromQPoint(pos)))
	runtime.SetFinalizer(tmpValue, (*QContextMenuEvent).DestroyQContextMenuEvent)
	return tmpValue
}

func NewQContextMenuEvent2(reason QContextMenuEvent__Reason, pos core.QPoint_ITF, globalPos core.QPoint_ITF) *QContextMenuEvent {
	var tmpValue = NewQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent2(C.longlong(reason), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos)))
	runtime.SetFinalizer(tmpValue, (*QContextMenuEvent).DestroyQContextMenuEvent)
	return tmpValue
}

func NewQContextMenuEvent(reason QContextMenuEvent__Reason, pos core.QPoint_ITF, globalPos core.QPoint_ITF, modifiers core.Qt__KeyboardModifier) *QContextMenuEvent {
	var tmpValue = NewQContextMenuEventFromPointer(C.QContextMenuEvent_NewQContextMenuEvent(C.longlong(reason), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos), C.longlong(modifiers)))
	runtime.SetFinalizer(tmpValue, (*QContextMenuEvent).DestroyQContextMenuEvent)
	return tmpValue
}

func (ptr *QContextMenuEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QContextMenuEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QContextMenuEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QContextMenuEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QContextMenuEvent) Reason() QContextMenuEvent__Reason {
	if ptr.Pointer() != nil {
		return QContextMenuEvent__Reason(C.QContextMenuEvent_Reason(ptr.Pointer()))
	}
	return 0
}

func (ptr *QContextMenuEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QContextMenuEvent_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QContextMenuEvent) Gp() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QContextMenuEvent_Gp(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QContextMenuEvent) SetGp(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QContextMenuEvent_SetGp(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

func (ptr *QContextMenuEvent) P() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QContextMenuEvent_P(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QContextMenuEvent) SetP(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QContextMenuEvent_SetP(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

type QCursor struct {
	ptr unsafe.Pointer
}

type QCursor_ITF interface {
	QCursor_PTR() *QCursor
}

func (p *QCursor) QCursor_PTR() *QCursor {
	return p
}

func (p *QCursor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCursor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCursor(ptr QCursor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCursor_PTR().Pointer()
	}
	return nil
}

func NewQCursorFromPointer(ptr unsafe.Pointer) *QCursor {
	var n = new(QCursor)
	n.SetPointer(ptr)
	return n
}
func QCursor_Pos() *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos())
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func (ptr *QCursor) Pos() *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos())
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func QCursor_Pos2(screen QScreen_ITF) *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos2(PointerFromQScreen(screen)))
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func (ptr *QCursor) Pos2(screen QScreen_ITF) *core.QPoint {
	var tmpValue = core.NewQPointFromPointer(C.QCursor_QCursor_Pos2(PointerFromQScreen(screen)))
	runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
	return tmpValue
}

func QCursor_SetPos2(screen QScreen_ITF, x int, y int) {
	C.QCursor_QCursor_SetPos2(PointerFromQScreen(screen), C.int(int32(x)), C.int(int32(y)))
}

func (ptr *QCursor) SetPos2(screen QScreen_ITF, x int, y int) {
	C.QCursor_QCursor_SetPos2(PointerFromQScreen(screen), C.int(int32(x)), C.int(int32(y)))
}

func QCursor_SetPos(x int, y int) {
	C.QCursor_QCursor_SetPos(C.int(int32(x)), C.int(int32(y)))
}

func (ptr *QCursor) SetPos(x int, y int) {
	C.QCursor_QCursor_SetPos(C.int(int32(x)), C.int(int32(y)))
}

func NewQCursor() *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor())
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor6(other QCursor_ITF) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor6(PointerFromQCursor(other)))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor2(shape core.Qt__CursorShape) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor2(C.longlong(shape)))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor3(bitmap QBitmap_ITF, mask QBitmap_ITF, hotX int, hotY int) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor3(PointerFromQBitmap(bitmap), PointerFromQBitmap(mask), C.int(int32(hotX)), C.int(int32(hotY))))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor5(c QCursor_ITF) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor5(PointerFromQCursor(c)))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func NewQCursor4(pixmap QPixmap_ITF, hotX int, hotY int) *QCursor {
	var tmpValue = NewQCursorFromPointer(C.QCursor_NewQCursor4(PointerFromQPixmap(pixmap), C.int(int32(hotX)), C.int(int32(hotY))))
	runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
	return tmpValue
}

func (ptr *QCursor) Bitmap() *QBitmap {
	if ptr.Pointer() != nil {
		return NewQBitmapFromPointer(C.QCursor_Bitmap(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCursor) HotSpot() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QCursor_HotSpot(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QCursor) Mask() *QBitmap {
	if ptr.Pointer() != nil {
		return NewQBitmapFromPointer(C.QCursor_Mask(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCursor) Pixmap() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QCursor_Pixmap(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func QCursor_SetPos4(screen QScreen_ITF, p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos4(PointerFromQScreen(screen), core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetPos4(screen QScreen_ITF, p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos4(PointerFromQScreen(screen), core.PointerFromQPoint(p))
}

func QCursor_SetPos3(p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos3(core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetPos3(p core.QPoint_ITF) {
	C.QCursor_QCursor_SetPos3(core.PointerFromQPoint(p))
}

func (ptr *QCursor) SetShape(shape core.Qt__CursorShape) {
	if ptr.Pointer() != nil {
		C.QCursor_SetShape(ptr.Pointer(), C.longlong(shape))
	}
}

func (ptr *QCursor) Shape() core.Qt__CursorShape {
	if ptr.Pointer() != nil {
		return core.Qt__CursorShape(C.QCursor_Shape(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCursor) Swap(other QCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QCursor_Swap(ptr.Pointer(), PointerFromQCursor(other))
	}
}

func (ptr *QCursor) DestroyQCursor() {
	if ptr.Pointer() != nil {
		C.QCursor_DestroyQCursor(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QDesktopServices struct {
	ptr unsafe.Pointer
}

type QDesktopServices_ITF interface {
	QDesktopServices_PTR() *QDesktopServices
}

func (p *QDesktopServices) QDesktopServices_PTR() *QDesktopServices {
	return p
}

func (p *QDesktopServices) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDesktopServices) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDesktopServices(ptr QDesktopServices_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDesktopServices_PTR().Pointer()
	}
	return nil
}

func NewQDesktopServicesFromPointer(ptr unsafe.Pointer) *QDesktopServices {
	var n = new(QDesktopServices)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDesktopServices) DestroyQDesktopServices() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QDesktopServices_OpenUrl(url core.QUrl_ITF) bool {
	return C.QDesktopServices_QDesktopServices_OpenUrl(core.PointerFromQUrl(url)) != 0
}

func (ptr *QDesktopServices) OpenUrl(url core.QUrl_ITF) bool {
	return C.QDesktopServices_QDesktopServices_OpenUrl(core.PointerFromQUrl(url)) != 0
}

func QDesktopServices_SetUrlHandler(scheme string, receiver core.QObject_ITF, method string) {
	var schemeC = C.CString(scheme)
	defer C.free(unsafe.Pointer(schemeC))
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	C.QDesktopServices_QDesktopServices_SetUrlHandler(schemeC, core.PointerFromQObject(receiver), methodC)
}

func (ptr *QDesktopServices) SetUrlHandler(scheme string, receiver core.QObject_ITF, method string) {
	var schemeC = C.CString(scheme)
	defer C.free(unsafe.Pointer(schemeC))
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	C.QDesktopServices_QDesktopServices_SetUrlHandler(schemeC, core.PointerFromQObject(receiver), methodC)
}

func QDesktopServices_UnsetUrlHandler(scheme string) {
	var schemeC = C.CString(scheme)
	defer C.free(unsafe.Pointer(schemeC))
	C.QDesktopServices_QDesktopServices_UnsetUrlHandler(schemeC)
}

func (ptr *QDesktopServices) UnsetUrlHandler(scheme string) {
	var schemeC = C.CString(scheme)
	defer C.free(unsafe.Pointer(schemeC))
	C.QDesktopServices_QDesktopServices_UnsetUrlHandler(schemeC)
}

//QDoubleValidator::Notation
type QDoubleValidator__Notation int64

const (
	QDoubleValidator__StandardNotation   = QDoubleValidator__Notation(0)
	QDoubleValidator__ScientificNotation = QDoubleValidator__Notation(1)
)

type QDoubleValidator struct {
	QValidator
}

type QDoubleValidator_ITF interface {
	QValidator_ITF
	QDoubleValidator_PTR() *QDoubleValidator
}

func (p *QDoubleValidator) QDoubleValidator_PTR() *QDoubleValidator {
	return p
}

func (p *QDoubleValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QDoubleValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQDoubleValidator(ptr QDoubleValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDoubleValidator_PTR().Pointer()
	}
	return nil
}

func NewQDoubleValidatorFromPointer(ptr unsafe.Pointer) *QDoubleValidator {
	var n = new(QDoubleValidator)
	n.SetPointer(ptr)
	return n
}
func (ptr *QDoubleValidator) Notation() QDoubleValidator__Notation {
	if ptr.Pointer() != nil {
		return QDoubleValidator__Notation(C.QDoubleValidator_Notation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDoubleValidator) SetBottom(vdo float64) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetBottom(ptr.Pointer(), C.double(vdo))
	}
}

func (ptr *QDoubleValidator) SetDecimals(vin int) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetDecimals(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QDoubleValidator) SetNotation(vno QDoubleValidator__Notation) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetNotation(ptr.Pointer(), C.longlong(vno))
	}
}

func (ptr *QDoubleValidator) SetTop(vdo float64) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetTop(ptr.Pointer(), C.double(vdo))
	}
}

//export callbackQDoubleValidator_Validate
func callbackQDoubleValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQDoubleValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QDoubleValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::validate", f)
	}
}

func (ptr *QDoubleValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::validate")
	}
}

func (ptr *QDoubleValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QDoubleValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QDoubleValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QDoubleValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func NewQDoubleValidator(parent core.QObject_ITF) *QDoubleValidator {
	var tmpValue = NewQDoubleValidatorFromPointer(C.QDoubleValidator_NewQDoubleValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQDoubleValidator2(bottom float64, top float64, decimals int, parent core.QObject_ITF) *QDoubleValidator {
	var tmpValue = NewQDoubleValidatorFromPointer(C.QDoubleValidator_NewQDoubleValidator2(C.double(bottom), C.double(top), C.int(int32(decimals)), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QDoubleValidator) Bottom() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QDoubleValidator_Bottom(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDoubleValidator) Decimals() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDoubleValidator_Decimals(ptr.Pointer())))
	}
	return 0
}

//export callbackQDoubleValidator_SetRange
func callbackQDoubleValidator_SetRange(ptr unsafe.Pointer, minimum C.double, maximum C.double, decimals C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::setRange"); signal != nil {
		signal.(func(float64, float64, int))(float64(minimum), float64(maximum), int(int32(decimals)))
	} else {
		NewQDoubleValidatorFromPointer(ptr).SetRangeDefault(float64(minimum), float64(maximum), int(int32(decimals)))
	}
}

func (ptr *QDoubleValidator) ConnectSetRange(f func(minimum float64, maximum float64, decimals int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::setRange", f)
	}
}

func (ptr *QDoubleValidator) DisconnectSetRange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::setRange")
	}
}

func (ptr *QDoubleValidator) SetRange(minimum float64, maximum float64, decimals int) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetRange(ptr.Pointer(), C.double(minimum), C.double(maximum), C.int(int32(decimals)))
	}
}

func (ptr *QDoubleValidator) SetRangeDefault(minimum float64, maximum float64, decimals int) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_SetRangeDefault(ptr.Pointer(), C.double(minimum), C.double(maximum), C.int(int32(decimals)))
	}
}

func (ptr *QDoubleValidator) Top() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QDoubleValidator_Top(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDoubleValidator) DestroyQDoubleValidator() {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_DestroyQDoubleValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQDoubleValidator_Fixup
func callbackQDoubleValidator_Fixup(ptr unsafe.Pointer, input C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::fixup"); signal != nil {
		signal.(func(string))(cGoUnpackString(input))
	} else {
		NewQDoubleValidatorFromPointer(ptr).FixupDefault(cGoUnpackString(input))
	}
}

func (ptr *QDoubleValidator) ConnectFixup(f func(input string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::fixup", f)
	}
}

func (ptr *QDoubleValidator) DisconnectFixup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::fixup")
	}
}

func (ptr *QDoubleValidator) Fixup(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QDoubleValidator_Fixup(ptr.Pointer(), inputC)
	}
}

func (ptr *QDoubleValidator) FixupDefault(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QDoubleValidator_FixupDefault(ptr.Pointer(), inputC)
	}
}

//export callbackQDoubleValidator_TimerEvent
func callbackQDoubleValidator_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQDoubleValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QDoubleValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::timerEvent", f)
	}
}

func (ptr *QDoubleValidator) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::timerEvent")
	}
}

func (ptr *QDoubleValidator) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QDoubleValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQDoubleValidator_ChildEvent
func callbackQDoubleValidator_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQDoubleValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QDoubleValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::childEvent", f)
	}
}

func (ptr *QDoubleValidator) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::childEvent")
	}
}

func (ptr *QDoubleValidator) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QDoubleValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQDoubleValidator_ConnectNotify
func callbackQDoubleValidator_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDoubleValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDoubleValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::connectNotify", f)
	}
}

func (ptr *QDoubleValidator) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::connectNotify")
	}
}

func (ptr *QDoubleValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDoubleValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDoubleValidator_CustomEvent
func callbackQDoubleValidator_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQDoubleValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QDoubleValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::customEvent", f)
	}
}

func (ptr *QDoubleValidator) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::customEvent")
	}
}

func (ptr *QDoubleValidator) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QDoubleValidator) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQDoubleValidator_DeleteLater
func callbackQDoubleValidator_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQDoubleValidatorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QDoubleValidator) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::deleteLater", f)
	}
}

func (ptr *QDoubleValidator) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::deleteLater")
	}
}

func (ptr *QDoubleValidator) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QDoubleValidator) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQDoubleValidator_DisconnectNotify
func callbackQDoubleValidator_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDoubleValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDoubleValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::disconnectNotify", f)
	}
}

func (ptr *QDoubleValidator) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::disconnectNotify")
	}
}

func (ptr *QDoubleValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDoubleValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDoubleValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDoubleValidator_Event
func callbackQDoubleValidator_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQDoubleValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QDoubleValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::event", f)
	}
}

func (ptr *QDoubleValidator) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::event")
	}
}

func (ptr *QDoubleValidator) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDoubleValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QDoubleValidator) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDoubleValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQDoubleValidator_EventFilter
func callbackQDoubleValidator_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQDoubleValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QDoubleValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::eventFilter", f)
	}
}

func (ptr *QDoubleValidator) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::eventFilter")
	}
}

func (ptr *QDoubleValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDoubleValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QDoubleValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDoubleValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQDoubleValidator_MetaObject
func callbackQDoubleValidator_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDoubleValidator::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQDoubleValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QDoubleValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::metaObject", f)
	}
}

func (ptr *QDoubleValidator) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDoubleValidator::metaObject")
	}
}

func (ptr *QDoubleValidator) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDoubleValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDoubleValidator) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDoubleValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QDrag struct {
	core.QObject
}

type QDrag_ITF interface {
	core.QObject_ITF
	QDrag_PTR() *QDrag
}

func (p *QDrag) QDrag_PTR() *QDrag {
	return p
}

func (p *QDrag) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QDrag) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQDrag(ptr QDrag_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDrag_PTR().Pointer()
	}
	return nil
}

func NewQDragFromPointer(ptr unsafe.Pointer) *QDrag {
	var n = new(QDrag)
	n.SetPointer(ptr)
	return n
}
func NewQDrag(dragSource core.QObject_ITF) *QDrag {
	var tmpValue = NewQDragFromPointer(C.QDrag_NewQDrag(core.PointerFromQObject(dragSource)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQDrag_ActionChanged
func callbackQDrag_ActionChanged(ptr unsafe.Pointer, action C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::actionChanged"); signal != nil {
		signal.(func(core.Qt__DropAction))(core.Qt__DropAction(action))
	}

}

func (ptr *QDrag) ConnectActionChanged(f func(action core.Qt__DropAction)) {
	if ptr.Pointer() != nil {
		C.QDrag_ConnectActionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::actionChanged", f)
	}
}

func (ptr *QDrag) DisconnectActionChanged() {
	if ptr.Pointer() != nil {
		C.QDrag_DisconnectActionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::actionChanged")
	}
}

func (ptr *QDrag) ActionChanged(action core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDrag_ActionChanged(ptr.Pointer(), C.longlong(action))
	}
}

func QDrag_Cancel() {
	C.QDrag_QDrag_Cancel()
}

func (ptr *QDrag) Cancel() {
	C.QDrag_QDrag_Cancel()
}

func (ptr *QDrag) DefaultAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_DefaultAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDrag) DragCursor(action core.Qt__DropAction) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QDrag_DragCursor(ptr.Pointer(), C.longlong(action)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) Exec(supportedActions core.Qt__DropAction) core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_Exec(ptr.Pointer(), C.longlong(supportedActions)))
	}
	return 0
}

func (ptr *QDrag) Exec2(supportedActions core.Qt__DropAction, defaultDropAction core.Qt__DropAction) core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_Exec2(ptr.Pointer(), C.longlong(supportedActions), C.longlong(defaultDropAction)))
	}
	return 0
}

func (ptr *QDrag) HotSpot() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QDrag_HotSpot(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) MimeData() *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QDrag_MimeData(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) Pixmap() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QDrag_Pixmap(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) SetDragCursor(cursor QPixmap_ITF, action core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDrag_SetDragCursor(ptr.Pointer(), PointerFromQPixmap(cursor), C.longlong(action))
	}
}

func (ptr *QDrag) SetHotSpot(hotspot core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_SetHotSpot(ptr.Pointer(), core.PointerFromQPoint(hotspot))
	}
}

func (ptr *QDrag) SetMimeData(data core.QMimeData_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_SetMimeData(ptr.Pointer(), core.PointerFromQMimeData(data))
	}
}

func (ptr *QDrag) SetPixmap(pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_SetPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QDrag) Source() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag_Source(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDrag) SupportedActions() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDrag_SupportedActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDrag) Target() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDrag_Target(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQDrag_TargetChanged
func callbackQDrag_TargetChanged(ptr unsafe.Pointer, newTarget unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::targetChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(newTarget))
	}

}

func (ptr *QDrag) ConnectTargetChanged(f func(newTarget *core.QObject)) {
	if ptr.Pointer() != nil {
		C.QDrag_ConnectTargetChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::targetChanged", f)
	}
}

func (ptr *QDrag) DisconnectTargetChanged() {
	if ptr.Pointer() != nil {
		C.QDrag_DisconnectTargetChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::targetChanged")
	}
}

func (ptr *QDrag) TargetChanged(newTarget core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_TargetChanged(ptr.Pointer(), core.PointerFromQObject(newTarget))
	}
}

func (ptr *QDrag) DestroyQDrag() {
	if ptr.Pointer() != nil {
		C.QDrag_DestroyQDrag(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQDrag_TimerEvent
func callbackQDrag_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QDrag) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::timerEvent", f)
	}
}

func (ptr *QDrag) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::timerEvent")
	}
}

func (ptr *QDrag) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QDrag) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQDrag_ChildEvent
func callbackQDrag_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QDrag) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::childEvent", f)
	}
}

func (ptr *QDrag) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::childEvent")
	}
}

func (ptr *QDrag) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QDrag) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQDrag_ConnectNotify
func callbackQDrag_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDragFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDrag) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::connectNotify", f)
	}
}

func (ptr *QDrag) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::connectNotify")
	}
}

func (ptr *QDrag) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDrag) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDrag_CustomEvent
func callbackQDrag_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQDragFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QDrag) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::customEvent", f)
	}
}

func (ptr *QDrag) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::customEvent")
	}
}

func (ptr *QDrag) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QDrag) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQDrag_DeleteLater
func callbackQDrag_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQDragFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QDrag) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::deleteLater", f)
	}
}

func (ptr *QDrag) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::deleteLater")
	}
}

func (ptr *QDrag) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QDrag_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QDrag) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QDrag_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQDrag_DisconnectNotify
func callbackQDrag_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQDragFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QDrag) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::disconnectNotify", f)
	}
}

func (ptr *QDrag) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::disconnectNotify")
	}
}

func (ptr *QDrag) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QDrag) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QDrag_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQDrag_Event
func callbackQDrag_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQDragFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QDrag) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::event", f)
	}
}

func (ptr *QDrag) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::event")
	}
}

func (ptr *QDrag) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDrag_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QDrag) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDrag_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQDrag_EventFilter
func callbackQDrag_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQDragFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QDrag) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::eventFilter", f)
	}
}

func (ptr *QDrag) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::eventFilter")
	}
}

func (ptr *QDrag) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDrag_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QDrag) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QDrag_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQDrag_MetaObject
func callbackQDrag_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QDrag::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQDragFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QDrag) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::metaObject", f)
	}
}

func (ptr *QDrag) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QDrag::metaObject")
	}
}

func (ptr *QDrag) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDrag_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDrag) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QDrag_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QDragEnterEvent struct {
	QDragMoveEvent
}

type QDragEnterEvent_ITF interface {
	QDragMoveEvent_ITF
	QDragEnterEvent_PTR() *QDragEnterEvent
}

func (p *QDragEnterEvent) QDragEnterEvent_PTR() *QDragEnterEvent {
	return p
}

func (p *QDragEnterEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QDragMoveEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDragEnterEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QDragMoveEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDragEnterEvent(ptr QDragEnterEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragEnterEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragEnterEventFromPointer(ptr unsafe.Pointer) *QDragEnterEvent {
	var n = new(QDragEnterEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDragEnterEvent) DestroyQDragEnterEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQDragEnterEvent(point core.QPoint_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QDragEnterEvent {
	var tmpValue = NewQDragEnterEventFromPointer(C.QDragEnterEvent_NewQDragEnterEvent(core.PointerFromQPoint(point), C.longlong(actions), core.PointerFromQMimeData(data), C.longlong(buttons), C.longlong(modifiers)))
	runtime.SetFinalizer(tmpValue, (*QDragEnterEvent).DestroyQDragEnterEvent)
	return tmpValue
}

type QDragLeaveEvent struct {
	core.QEvent
}

type QDragLeaveEvent_ITF interface {
	core.QEvent_ITF
	QDragLeaveEvent_PTR() *QDragLeaveEvent
}

func (p *QDragLeaveEvent) QDragLeaveEvent_PTR() *QDragLeaveEvent {
	return p
}

func (p *QDragLeaveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDragLeaveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDragLeaveEvent(ptr QDragLeaveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragLeaveEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragLeaveEventFromPointer(ptr unsafe.Pointer) *QDragLeaveEvent {
	var n = new(QDragLeaveEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDragLeaveEvent) DestroyQDragLeaveEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQDragLeaveEvent() *QDragLeaveEvent {
	var tmpValue = NewQDragLeaveEventFromPointer(C.QDragLeaveEvent_NewQDragLeaveEvent())
	runtime.SetFinalizer(tmpValue, (*QDragLeaveEvent).DestroyQDragLeaveEvent)
	return tmpValue
}

type QDragMoveEvent struct {
	QDropEvent
}

type QDragMoveEvent_ITF interface {
	QDropEvent_ITF
	QDragMoveEvent_PTR() *QDragMoveEvent
}

func (p *QDragMoveEvent) QDragMoveEvent_PTR() *QDragMoveEvent {
	return p
}

func (p *QDragMoveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QDropEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDragMoveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QDropEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDragMoveEvent(ptr QDragMoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDragMoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQDragMoveEventFromPointer(ptr unsafe.Pointer) *QDragMoveEvent {
	var n = new(QDragMoveEvent)
	n.SetPointer(ptr)
	return n
}
func NewQDragMoveEvent(pos core.QPoint_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, ty core.QEvent__Type) *QDragMoveEvent {
	var tmpValue = NewQDragMoveEventFromPointer(C.QDragMoveEvent_NewQDragMoveEvent(core.PointerFromQPoint(pos), C.longlong(actions), core.PointerFromQMimeData(data), C.longlong(buttons), C.longlong(modifiers), C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QDragMoveEvent).DestroyQDragMoveEvent)
	return tmpValue
}

func (ptr *QDragMoveEvent) Accept2() {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Accept2(ptr.Pointer())
	}
}

func (ptr *QDragMoveEvent) Accept(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Accept(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QDragMoveEvent) AnswerRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QDragMoveEvent_AnswerRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDragMoveEvent) Ignore2() {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Ignore2(ptr.Pointer())
	}
}

func (ptr *QDragMoveEvent) Ignore(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_Ignore(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QDragMoveEvent) DestroyQDragMoveEvent() {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_DestroyQDragMoveEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QDragMoveEvent) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QDragMoveEvent_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QDragMoveEvent) SetRect(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QDragMoveEvent_SetRect(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

type QDropEvent struct {
	core.QEvent
}

type QDropEvent_ITF interface {
	core.QEvent_ITF
	QDropEvent_PTR() *QDropEvent
}

func (p *QDropEvent) QDropEvent_PTR() *QDropEvent {
	return p
}

func (p *QDropEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDropEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDropEvent(ptr QDropEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDropEvent_PTR().Pointer()
	}
	return nil
}

func NewQDropEventFromPointer(ptr unsafe.Pointer) *QDropEvent {
	var n = new(QDropEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDropEvent) DestroyQDropEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QDropEvent) SetDropAction(action core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetDropAction(ptr.Pointer(), C.longlong(action))
	}
}

func NewQDropEvent(pos core.QPointF_ITF, actions core.Qt__DropAction, data core.QMimeData_ITF, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, ty core.QEvent__Type) *QDropEvent {
	var tmpValue = NewQDropEventFromPointer(C.QDropEvent_NewQDropEvent(core.PointerFromQPointF(pos), C.longlong(actions), core.PointerFromQMimeData(data), C.longlong(buttons), C.longlong(modifiers), C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QDropEvent).DestroyQDropEvent)
	return tmpValue
}

func (ptr *QDropEvent) AcceptProposedAction() {
	if ptr.Pointer() != nil {
		C.QDropEvent_AcceptProposedAction(ptr.Pointer())
	}
}

func (ptr *QDropEvent) DropAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_DropAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) KeyboardModifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QDropEvent_KeyboardModifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) MimeData() *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QDropEvent_MimeData(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) MouseButtons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QDropEvent_MouseButtons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QDropEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QDropEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QDropEvent) PossibleActions() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_PossibleActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) ProposedAction() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_ProposedAction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) Source() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QDropEvent_Source(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) Act() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_Act(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetAct(vqt core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetAct(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) Default_action() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_Default_action(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetDefault_action(vqt core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetDefault_action(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) Drop_action() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QDropEvent_Drop_action(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetDrop_action(vqt core.Qt__DropAction) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetDrop_action(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) Mdata() *core.QMimeData {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMimeDataFromPointer(C.QDropEvent_Mdata(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) ModState() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QDropEvent_ModState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetModState(vqt core.Qt__KeyboardModifier) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetModState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) MouseState() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QDropEvent_MouseState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDropEvent) SetMouseState(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetMouseState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QDropEvent) P() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QDropEvent_P(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QDropEvent) SetP(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QDropEvent_SetP(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

type QEnterEvent struct {
	core.QEvent
}

type QEnterEvent_ITF interface {
	core.QEvent_ITF
	QEnterEvent_PTR() *QEnterEvent
}

func (p *QEnterEvent) QEnterEvent_PTR() *QEnterEvent {
	return p
}

func (p *QEnterEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QEnterEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQEnterEvent(ptr QEnterEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEnterEvent_PTR().Pointer()
	}
	return nil
}

func NewQEnterEventFromPointer(ptr unsafe.Pointer) *QEnterEvent {
	var n = new(QEnterEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QEnterEvent) DestroyQEnterEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQEnterEvent(localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF) *QEnterEvent {
	var tmpValue = NewQEnterEventFromPointer(C.QEnterEvent_NewQEnterEvent(core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos)))
	runtime.SetFinalizer(tmpValue, (*QEnterEvent).DestroyQEnterEvent)
	return tmpValue
}

func (ptr *QEnterEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QEnterEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QEnterEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QEnterEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QEnterEvent) LocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QEnterEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QEnterEvent) ScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) WindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QEnterEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEnterEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QEnterEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEnterEvent_Y(ptr.Pointer())))
	}
	return 0
}

type QExposeEvent struct {
	core.QEvent
}

type QExposeEvent_ITF interface {
	core.QEvent_ITF
	QExposeEvent_PTR() *QExposeEvent
}

func (p *QExposeEvent) QExposeEvent_PTR() *QExposeEvent {
	return p
}

func (p *QExposeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QExposeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQExposeEvent(ptr QExposeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QExposeEvent_PTR().Pointer()
	}
	return nil
}

func NewQExposeEventFromPointer(ptr unsafe.Pointer) *QExposeEvent {
	var n = new(QExposeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QExposeEvent) DestroyQExposeEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQExposeEvent(exposeRegion QRegion_ITF) *QExposeEvent {
	var tmpValue = NewQExposeEventFromPointer(C.QExposeEvent_NewQExposeEvent(PointerFromQRegion(exposeRegion)))
	runtime.SetFinalizer(tmpValue, (*QExposeEvent).DestroyQExposeEvent)
	return tmpValue
}

func (ptr *QExposeEvent) Region() *QRegion {
	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QExposeEvent_Region(ptr.Pointer()))
	}
	return nil
}

func (ptr *QExposeEvent) Rgn() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QExposeEvent_Rgn(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QExposeEvent) SetRgn(vqr QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QExposeEvent_SetRgn(ptr.Pointer(), PointerFromQRegion(vqr))
	}
}

type QFileOpenEvent struct {
	core.QEvent
}

type QFileOpenEvent_ITF interface {
	core.QEvent_ITF
	QFileOpenEvent_PTR() *QFileOpenEvent
}

func (p *QFileOpenEvent) QFileOpenEvent_PTR() *QFileOpenEvent {
	return p
}

func (p *QFileOpenEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QFileOpenEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQFileOpenEvent(ptr QFileOpenEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFileOpenEvent_PTR().Pointer()
	}
	return nil
}

func NewQFileOpenEventFromPointer(ptr unsafe.Pointer) *QFileOpenEvent {
	var n = new(QFileOpenEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFileOpenEvent) DestroyQFileOpenEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QFileOpenEvent) OpenFile(file core.QFile_ITF, flags core.QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QFileOpenEvent_OpenFile(ptr.Pointer(), core.PointerFromQFile(file), C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QFileOpenEvent) File() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileOpenEvent_File(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileOpenEvent) Url() *core.QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QFileOpenEvent_Url(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

type QFocusEvent struct {
	core.QEvent
}

type QFocusEvent_ITF interface {
	core.QEvent_ITF
	QFocusEvent_PTR() *QFocusEvent
}

func (p *QFocusEvent) QFocusEvent_PTR() *QFocusEvent {
	return p
}

func (p *QFocusEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QFocusEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQFocusEvent(ptr QFocusEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFocusEvent_PTR().Pointer()
	}
	return nil
}

func NewQFocusEventFromPointer(ptr unsafe.Pointer) *QFocusEvent {
	var n = new(QFocusEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFocusEvent) DestroyQFocusEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQFocusEvent(ty core.QEvent__Type, reason core.Qt__FocusReason) *QFocusEvent {
	var tmpValue = NewQFocusEventFromPointer(C.QFocusEvent_NewQFocusEvent(C.longlong(ty), C.longlong(reason)))
	runtime.SetFinalizer(tmpValue, (*QFocusEvent).DestroyQFocusEvent)
	return tmpValue
}

func (ptr *QFocusEvent) GotFocus() bool {
	if ptr.Pointer() != nil {
		return C.QFocusEvent_GotFocus(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFocusEvent) LostFocus() bool {
	if ptr.Pointer() != nil {
		return C.QFocusEvent_LostFocus(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFocusEvent) Reason() core.Qt__FocusReason {
	if ptr.Pointer() != nil {
		return core.Qt__FocusReason(C.QFocusEvent_Reason(ptr.Pointer()))
	}
	return 0
}

//QFont::Capitalization
type QFont__Capitalization int64

const (
	QFont__MixedCase    = QFont__Capitalization(0)
	QFont__AllUppercase = QFont__Capitalization(1)
	QFont__AllLowercase = QFont__Capitalization(2)
	QFont__SmallCaps    = QFont__Capitalization(3)
	QFont__Capitalize   = QFont__Capitalization(4)
)

//QFont::HintingPreference
type QFont__HintingPreference int64

const (
	QFont__PreferDefaultHinting  = QFont__HintingPreference(0)
	QFont__PreferNoHinting       = QFont__HintingPreference(1)
	QFont__PreferVerticalHinting = QFont__HintingPreference(2)
	QFont__PreferFullHinting     = QFont__HintingPreference(3)
)

//QFont::SpacingType
type QFont__SpacingType int64

const (
	QFont__PercentageSpacing = QFont__SpacingType(0)
	QFont__AbsoluteSpacing   = QFont__SpacingType(1)
)

//QFont::Stretch
type QFont__Stretch int64

const (
	QFont__UltraCondensed = QFont__Stretch(50)
	QFont__ExtraCondensed = QFont__Stretch(62)
	QFont__Condensed      = QFont__Stretch(75)
	QFont__SemiCondensed  = QFont__Stretch(87)
	QFont__Unstretched    = QFont__Stretch(100)
	QFont__SemiExpanded   = QFont__Stretch(112)
	QFont__Expanded       = QFont__Stretch(125)
	QFont__ExtraExpanded  = QFont__Stretch(150)
	QFont__UltraExpanded  = QFont__Stretch(200)
)

//QFont::Style
type QFont__Style int64

var (
	QFont__StyleNormal  = QFont__Style(0)
	QFont__StyleItalic  = QFont__Style(1)
	QFont__StyleOblique = QFont__Style(2)
)

//QFont::StyleHint
type QFont__StyleHint int64

var (
	QFont__Helvetica  = QFont__StyleHint(0)
	QFont__SansSerif  = QFont__StyleHint(QFont__Helvetica)
	QFont__Times      = QFont__StyleHint(C.QFont_Times_Type())
	QFont__Serif      = QFont__StyleHint(QFont__Times)
	QFont__Courier    = QFont__StyleHint(C.QFont_Courier_Type())
	QFont__TypeWriter = QFont__StyleHint(QFont__Courier)
	QFont__OldEnglish = QFont__StyleHint(C.QFont_OldEnglish_Type())
	QFont__Decorative = QFont__StyleHint(QFont__OldEnglish)
	QFont__System     = QFont__StyleHint(C.QFont_System_Type())
	QFont__AnyStyle   = QFont__StyleHint(C.QFont_AnyStyle_Type())
	QFont__Cursive    = QFont__StyleHint(C.QFont_Cursive_Type())
	QFont__Monospace  = QFont__StyleHint(C.QFont_Monospace_Type())
	QFont__Fantasy    = QFont__StyleHint(C.QFont_Fantasy_Type())
)

//QFont::StyleStrategy
type QFont__StyleStrategy int64

var (
	QFont__PreferDefault       = QFont__StyleStrategy(0x0001)
	QFont__PreferBitmap        = QFont__StyleStrategy(0x0002)
	QFont__PreferDevice        = QFont__StyleStrategy(0x0004)
	QFont__PreferOutline       = QFont__StyleStrategy(0x0008)
	QFont__ForceOutline        = QFont__StyleStrategy(0x0010)
	QFont__PreferMatch         = QFont__StyleStrategy(0x0020)
	QFont__PreferQuality       = QFont__StyleStrategy(0x0040)
	QFont__PreferAntialias     = QFont__StyleStrategy(0x0080)
	QFont__NoAntialias         = QFont__StyleStrategy(0x0100)
	QFont__OpenGLCompatible    = QFont__StyleStrategy(0x0200)
	QFont__ForceIntegerMetrics = QFont__StyleStrategy(0x0400)
	QFont__NoSubpixelAntialias = QFont__StyleStrategy(0x0800)
	QFont__NoFontMerging       = QFont__StyleStrategy(0x8000)
)

//QFont::Weight
type QFont__Weight int64

const (
	QFont__Thin       = QFont__Weight(0)
	QFont__ExtraLight = QFont__Weight(12)
	QFont__Light      = QFont__Weight(25)
	QFont__Normal     = QFont__Weight(50)
	QFont__Medium     = QFont__Weight(57)
	QFont__DemiBold   = QFont__Weight(63)
	QFont__Bold       = QFont__Weight(75)
	QFont__ExtraBold  = QFont__Weight(81)
	QFont__Black      = QFont__Weight(87)
)

type QFont struct {
	ptr unsafe.Pointer
}

type QFont_ITF interface {
	QFont_PTR() *QFont
}

func (p *QFont) QFont_PTR() *QFont {
	return p
}

func (p *QFont) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFont) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFont(ptr QFont_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFont_PTR().Pointer()
	}
	return nil
}

func NewQFontFromPointer(ptr unsafe.Pointer) *QFont {
	var n = new(QFont)
	n.SetPointer(ptr)
	return n
}
func (ptr *QFont) DefaultFamily() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_DefaultFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LastResortFamily() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_LastResortFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LastResortFont() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_LastResortFont(ptr.Pointer()))
	}
	return ""
}

func NewQFont() *QFont {
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont())
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQFont4(font QFont_ITF) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont4(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQFont3(font QFont_ITF, pd QPaintDevice_ITF) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont3(PointerFromQFont(font), PointerFromQPaintDevice(pd)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func NewQFont2(family string, pointSize int, weight int, italic bool) *QFont {
	var familyC = C.CString(family)
	defer C.free(unsafe.Pointer(familyC))
	var tmpValue = NewQFontFromPointer(C.QFont_NewQFont2(familyC, C.int(int32(pointSize)), C.int(int32(weight)), C.char(int8(qt.GoBoolToInt(italic)))))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QFont) Bold() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Bold(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Capitalization() QFont__Capitalization {
	if ptr.Pointer() != nil {
		return QFont__Capitalization(C.QFont_Capitalization(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) ExactMatch() bool {
	if ptr.Pointer() != nil {
		return C.QFont_ExactMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Family() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_Family(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) FixedPitch() bool {
	if ptr.Pointer() != nil {
		return C.QFont_FixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) FromString(descrip string) bool {
	if ptr.Pointer() != nil {
		var descripC = C.CString(descrip)
		defer C.free(unsafe.Pointer(descripC))
		return C.QFont_FromString(ptr.Pointer(), descripC) != 0
	}
	return false
}

func (ptr *QFont) HintingPreference() QFont__HintingPreference {
	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QFont_HintingPreference(ptr.Pointer()))
	}
	return 0
}

func QFont_InsertSubstitution(familyName string, substituteName string) {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	var substituteNameC = C.CString(substituteName)
	defer C.free(unsafe.Pointer(substituteNameC))
	C.QFont_QFont_InsertSubstitution(familyNameC, substituteNameC)
}

func (ptr *QFont) InsertSubstitution(familyName string, substituteName string) {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	var substituteNameC = C.CString(substituteName)
	defer C.free(unsafe.Pointer(substituteNameC))
	C.QFont_QFont_InsertSubstitution(familyNameC, substituteNameC)
}

func QFont_InsertSubstitutions(familyName string, substituteNames []string) {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	var substituteNamesC = C.CString(strings.Join(substituteNames, "|"))
	defer C.free(unsafe.Pointer(substituteNamesC))
	C.QFont_QFont_InsertSubstitutions(familyNameC, substituteNamesC)
}

func (ptr *QFont) InsertSubstitutions(familyName string, substituteNames []string) {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	var substituteNamesC = C.CString(strings.Join(substituteNames, "|"))
	defer C.free(unsafe.Pointer(substituteNamesC))
	C.QFont_QFont_InsertSubstitutions(familyNameC, substituteNamesC)
}

func (ptr *QFont) IsCopyOf(f QFont_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFont_IsCopyOf(ptr.Pointer(), PointerFromQFont(f)) != 0
	}
	return false
}

func (ptr *QFont) Italic() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Italic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Kerning() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Kerning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) LetterSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFont_LetterSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) LetterSpacingType() QFont__SpacingType {
	if ptr.Pointer() != nil {
		return QFont__SpacingType(C.QFont_LetterSpacingType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) Overline() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Overline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) PixelSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_PixelSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) PointSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_PointSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) PointSizeF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFont_PointSizeF(ptr.Pointer()))
	}
	return 0
}

func QFont_RemoveSubstitutions(familyName string) {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	C.QFont_QFont_RemoveSubstitutions(familyNameC)
}

func (ptr *QFont) RemoveSubstitutions(familyName string) {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	C.QFont_QFont_RemoveSubstitutions(familyNameC)
}

func (ptr *QFont) Resolve(other QFont_ITF) *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QFont_Resolve(ptr.Pointer(), PointerFromQFont(other)))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QFont) SetBold(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetBold(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetCapitalization(caps QFont__Capitalization) {
	if ptr.Pointer() != nil {
		C.QFont_SetCapitalization(ptr.Pointer(), C.longlong(caps))
	}
}

func (ptr *QFont) SetFamily(family string) {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		C.QFont_SetFamily(ptr.Pointer(), familyC)
	}
}

func (ptr *QFont) SetFixedPitch(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetFixedPitch(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetHintingPreference(hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		C.QFont_SetHintingPreference(ptr.Pointer(), C.longlong(hintingPreference))
	}
}

func (ptr *QFont) SetItalic(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetItalic(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetKerning(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetKerning(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetLetterSpacing(ty QFont__SpacingType, spacing float64) {
	if ptr.Pointer() != nil {
		C.QFont_SetLetterSpacing(ptr.Pointer(), C.longlong(ty), C.double(spacing))
	}
}

func (ptr *QFont) SetOverline(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetOverline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetPixelSize(pixelSize int) {
	if ptr.Pointer() != nil {
		C.QFont_SetPixelSize(ptr.Pointer(), C.int(int32(pixelSize)))
	}
}

func (ptr *QFont) SetPointSize(pointSize int) {
	if ptr.Pointer() != nil {
		C.QFont_SetPointSize(ptr.Pointer(), C.int(int32(pointSize)))
	}
}

func (ptr *QFont) SetPointSizeF(pointSize float64) {
	if ptr.Pointer() != nil {
		C.QFont_SetPointSizeF(ptr.Pointer(), C.double(pointSize))
	}
}

func (ptr *QFont) SetStretch(factor int) {
	if ptr.Pointer() != nil {
		C.QFont_SetStretch(ptr.Pointer(), C.int(int32(factor)))
	}
}

func (ptr *QFont) SetStrikeOut(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetStrikeOut(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetStyle(style QFont__Style) {
	if ptr.Pointer() != nil {
		C.QFont_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QFont) SetStyleHint(hint QFont__StyleHint, strategy QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QFont_SetStyleHint(ptr.Pointer(), C.longlong(hint), C.longlong(strategy))
	}
}

func (ptr *QFont) SetStyleName(styleName string) {
	if ptr.Pointer() != nil {
		var styleNameC = C.CString(styleName)
		defer C.free(unsafe.Pointer(styleNameC))
		C.QFont_SetStyleName(ptr.Pointer(), styleNameC)
	}
}

func (ptr *QFont) SetStyleStrategy(s QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QFont_SetStyleStrategy(ptr.Pointer(), C.longlong(s))
	}
}

func (ptr *QFont) SetUnderline(enable bool) {
	if ptr.Pointer() != nil {
		C.QFont_SetUnderline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFont) SetWeight(weight int) {
	if ptr.Pointer() != nil {
		C.QFont_SetWeight(ptr.Pointer(), C.int(int32(weight)))
	}
}

func (ptr *QFont) SetWordSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QFont_SetWordSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QFont) Stretch() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_Stretch(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) StrikeOut() bool {
	if ptr.Pointer() != nil {
		return C.QFont_StrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Style() QFont__Style {
	if ptr.Pointer() != nil {
		return QFont__Style(C.QFont_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) StyleHint() QFont__StyleHint {
	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QFont_StyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) StyleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) StyleStrategy() QFont__StyleStrategy {
	if ptr.Pointer() != nil {
		return QFont__StyleStrategy(C.QFont_StyleStrategy(ptr.Pointer()))
	}
	return 0
}

func QFont_Substitute(familyName string) string {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	return cGoUnpackString(C.QFont_QFont_Substitute(familyNameC))
}

func (ptr *QFont) Substitute(familyName string) string {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	return cGoUnpackString(C.QFont_QFont_Substitute(familyNameC))
}

func QFont_Substitutes(familyName string) []string {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutes(familyNameC)), "|")
}

func (ptr *QFont) Substitutes(familyName string) []string {
	var familyNameC = C.CString(familyName)
	defer C.free(unsafe.Pointer(familyNameC))
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutes(familyNameC)), "|")
}

func QFont_Substitutions() []string {
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutions()), "|")
}

func (ptr *QFont) Substitutions() []string {
	return strings.Split(cGoUnpackString(C.QFont_QFont_Substitutions()), "|")
}

func (ptr *QFont) Swap(other QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QFont_Swap(ptr.Pointer(), PointerFromQFont(other))
	}
}

func (ptr *QFont) ToString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFont_ToString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFont) Underline() bool {
	if ptr.Pointer() != nil {
		return C.QFont_Underline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFont) Weight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFont_Weight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFont) WordSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFont_WordSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFont) DestroyQFont() {
	if ptr.Pointer() != nil {
		C.QFont_DestroyQFont(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QFont) ToVariant() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QFont_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//QFontDatabase::SystemFont
type QFontDatabase__SystemFont int64

const (
	QFontDatabase__GeneralFont          = QFontDatabase__SystemFont(0)
	QFontDatabase__FixedFont            = QFontDatabase__SystemFont(1)
	QFontDatabase__TitleFont            = QFontDatabase__SystemFont(2)
	QFontDatabase__SmallestReadableFont = QFontDatabase__SystemFont(3)
)

//QFontDatabase::WritingSystem
type QFontDatabase__WritingSystem int64

var (
	QFontDatabase__Any                 = QFontDatabase__WritingSystem(0)
	QFontDatabase__Latin               = QFontDatabase__WritingSystem(1)
	QFontDatabase__Greek               = QFontDatabase__WritingSystem(2)
	QFontDatabase__Cyrillic            = QFontDatabase__WritingSystem(3)
	QFontDatabase__Armenian            = QFontDatabase__WritingSystem(4)
	QFontDatabase__Hebrew              = QFontDatabase__WritingSystem(5)
	QFontDatabase__Arabic              = QFontDatabase__WritingSystem(6)
	QFontDatabase__Syriac              = QFontDatabase__WritingSystem(7)
	QFontDatabase__Thaana              = QFontDatabase__WritingSystem(8)
	QFontDatabase__Devanagari          = QFontDatabase__WritingSystem(9)
	QFontDatabase__Bengali             = QFontDatabase__WritingSystem(10)
	QFontDatabase__Gurmukhi            = QFontDatabase__WritingSystem(11)
	QFontDatabase__Gujarati            = QFontDatabase__WritingSystem(12)
	QFontDatabase__Oriya               = QFontDatabase__WritingSystem(13)
	QFontDatabase__Tamil               = QFontDatabase__WritingSystem(14)
	QFontDatabase__Telugu              = QFontDatabase__WritingSystem(15)
	QFontDatabase__Kannada             = QFontDatabase__WritingSystem(16)
	QFontDatabase__Malayalam           = QFontDatabase__WritingSystem(17)
	QFontDatabase__Sinhala             = QFontDatabase__WritingSystem(18)
	QFontDatabase__Thai                = QFontDatabase__WritingSystem(19)
	QFontDatabase__Lao                 = QFontDatabase__WritingSystem(20)
	QFontDatabase__Tibetan             = QFontDatabase__WritingSystem(21)
	QFontDatabase__Myanmar             = QFontDatabase__WritingSystem(22)
	QFontDatabase__Georgian            = QFontDatabase__WritingSystem(23)
	QFontDatabase__Khmer               = QFontDatabase__WritingSystem(24)
	QFontDatabase__SimplifiedChinese   = QFontDatabase__WritingSystem(25)
	QFontDatabase__TraditionalChinese  = QFontDatabase__WritingSystem(26)
	QFontDatabase__Japanese            = QFontDatabase__WritingSystem(27)
	QFontDatabase__Korean              = QFontDatabase__WritingSystem(28)
	QFontDatabase__Vietnamese          = QFontDatabase__WritingSystem(29)
	QFontDatabase__Symbol              = QFontDatabase__WritingSystem(30)
	QFontDatabase__Other               = QFontDatabase__WritingSystem(QFontDatabase__Symbol)
	QFontDatabase__Ogham               = QFontDatabase__WritingSystem(C.QFontDatabase_Ogham_Type())
	QFontDatabase__Runic               = QFontDatabase__WritingSystem(C.QFontDatabase_Runic_Type())
	QFontDatabase__Nko                 = QFontDatabase__WritingSystem(C.QFontDatabase_Nko_Type())
	QFontDatabase__WritingSystemsCount = QFontDatabase__WritingSystem(C.QFontDatabase_WritingSystemsCount_Type())
)

type QFontDatabase struct {
	ptr unsafe.Pointer
}

type QFontDatabase_ITF interface {
	QFontDatabase_PTR() *QFontDatabase
}

func (p *QFontDatabase) QFontDatabase_PTR() *QFontDatabase {
	return p
}

func (p *QFontDatabase) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontDatabase) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontDatabase(ptr QFontDatabase_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontDatabase_PTR().Pointer()
	}
	return nil
}

func NewQFontDatabaseFromPointer(ptr unsafe.Pointer) *QFontDatabase {
	var n = new(QFontDatabase)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFontDatabase) DestroyQFontDatabase() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QFontDatabase_RemoveAllApplicationFonts() bool {
	return C.QFontDatabase_QFontDatabase_RemoveAllApplicationFonts() != 0
}

func (ptr *QFontDatabase) RemoveAllApplicationFonts() bool {
	return C.QFontDatabase_QFontDatabase_RemoveAllApplicationFonts() != 0
}

func QFontDatabase_RemoveApplicationFont(id int) bool {
	return C.QFontDatabase_QFontDatabase_RemoveApplicationFont(C.int(int32(id))) != 0
}

func (ptr *QFontDatabase) RemoveApplicationFont(id int) bool {
	return C.QFontDatabase_QFontDatabase_RemoveApplicationFont(C.int(int32(id))) != 0
}

func NewQFontDatabase() *QFontDatabase {
	var tmpValue = NewQFontDatabaseFromPointer(C.QFontDatabase_NewQFontDatabase())
	runtime.SetFinalizer(tmpValue, (*QFontDatabase).DestroyQFontDatabase)
	return tmpValue
}

func QFontDatabase_AddApplicationFont(fileName string) int {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFont(fileNameC)))
}

func (ptr *QFontDatabase) AddApplicationFont(fileName string) int {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFont(fileNameC)))
}

func QFontDatabase_AddApplicationFontFromData(fontData core.QByteArray_ITF) int {
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFontFromData(core.PointerFromQByteArray(fontData))))
}

func (ptr *QFontDatabase) AddApplicationFontFromData(fontData core.QByteArray_ITF) int {
	return int(int32(C.QFontDatabase_QFontDatabase_AddApplicationFontFromData(core.PointerFromQByteArray(fontData))))
}

func QFontDatabase_ApplicationFontFamilies(id int) []string {
	return strings.Split(cGoUnpackString(C.QFontDatabase_QFontDatabase_ApplicationFontFamilies(C.int(int32(id)))), "|")
}

func (ptr *QFontDatabase) ApplicationFontFamilies(id int) []string {
	return strings.Split(cGoUnpackString(C.QFontDatabase_QFontDatabase_ApplicationFontFamilies(C.int(int32(id)))), "|")
}

func (ptr *QFontDatabase) Bold(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		return C.QFontDatabase_Bold(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) Families(writingSystem QFontDatabase__WritingSystem) []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QFontDatabase_Families(ptr.Pointer(), C.longlong(writingSystem))), "|")
	}
	return make([]string, 0)
}

func (ptr *QFontDatabase) Font(family string, style string, pointSize int) *QFont {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		var tmpValue = NewQFontFromPointer(C.QFontDatabase_Font(ptr.Pointer(), familyC, styleC, C.int(int32(pointSize))))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QFontDatabase) IsBitmapScalable(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		return C.QFontDatabase_IsBitmapScalable(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsFixedPitch(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		return C.QFontDatabase_IsFixedPitch(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsPrivateFamily(family string) bool {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		return C.QFontDatabase_IsPrivateFamily(ptr.Pointer(), familyC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsScalable(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		return C.QFontDatabase_IsScalable(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) IsSmoothlyScalable(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		return C.QFontDatabase_IsSmoothlyScalable(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) Italic(family string, style string) bool {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		return C.QFontDatabase_Italic(ptr.Pointer(), familyC, styleC) != 0
	}
	return false
}

func (ptr *QFontDatabase) StyleString(font QFont_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontDatabase_StyleString(ptr.Pointer(), PointerFromQFont(font)))
	}
	return ""
}

func (ptr *QFontDatabase) StyleString2(fontInfo QFontInfo_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontDatabase_StyleString2(ptr.Pointer(), PointerFromQFontInfo(fontInfo)))
	}
	return ""
}

func (ptr *QFontDatabase) Styles(family string) []string {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		return strings.Split(cGoUnpackString(C.QFontDatabase_Styles(ptr.Pointer(), familyC)), "|")
	}
	return make([]string, 0)
}

func QFontDatabase_SystemFont(ty QFontDatabase__SystemFont) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFontDatabase_QFontDatabase_SystemFont(C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QFontDatabase) SystemFont(ty QFontDatabase__SystemFont) *QFont {
	var tmpValue = NewQFontFromPointer(C.QFontDatabase_QFontDatabase_SystemFont(C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QFontDatabase) Weight(family string, style string) int {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		var styleC = C.CString(style)
		defer C.free(unsafe.Pointer(styleC))
		return int(int32(C.QFontDatabase_Weight(ptr.Pointer(), familyC, styleC)))
	}
	return 0
}

func QFontDatabase_WritingSystemName(writingSystem QFontDatabase__WritingSystem) string {
	return cGoUnpackString(C.QFontDatabase_QFontDatabase_WritingSystemName(C.longlong(writingSystem)))
}

func (ptr *QFontDatabase) WritingSystemName(writingSystem QFontDatabase__WritingSystem) string {
	return cGoUnpackString(C.QFontDatabase_QFontDatabase_WritingSystemName(C.longlong(writingSystem)))
}

func QFontDatabase_WritingSystemSample(writingSystem QFontDatabase__WritingSystem) string {
	return cGoUnpackString(C.QFontDatabase_QFontDatabase_WritingSystemSample(C.longlong(writingSystem)))
}

func (ptr *QFontDatabase) WritingSystemSample(writingSystem QFontDatabase__WritingSystem) string {
	return cGoUnpackString(C.QFontDatabase_QFontDatabase_WritingSystemSample(C.longlong(writingSystem)))
}

type QFontInfo struct {
	ptr unsafe.Pointer
}

type QFontInfo_ITF interface {
	QFontInfo_PTR() *QFontInfo
}

func (p *QFontInfo) QFontInfo_PTR() *QFontInfo {
	return p
}

func (p *QFontInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontInfo(ptr QFontInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontInfo_PTR().Pointer()
	}
	return nil
}

func NewQFontInfoFromPointer(ptr unsafe.Pointer) *QFontInfo {
	var n = new(QFontInfo)
	n.SetPointer(ptr)
	return n
}
func NewQFontInfo(font QFont_ITF) *QFontInfo {
	var tmpValue = NewQFontInfoFromPointer(C.QFontInfo_NewQFontInfo(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFontInfo).DestroyQFontInfo)
	return tmpValue
}

func NewQFontInfo2(fi QFontInfo_ITF) *QFontInfo {
	var tmpValue = NewQFontInfoFromPointer(C.QFontInfo_NewQFontInfo2(PointerFromQFontInfo(fi)))
	runtime.SetFinalizer(tmpValue, (*QFontInfo).DestroyQFontInfo)
	return tmpValue
}

func (ptr *QFontInfo) Bold() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_Bold(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) ExactMatch() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_ExactMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) Family() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontInfo_Family(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFontInfo) FixedPitch() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_FixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) Italic() bool {
	if ptr.Pointer() != nil {
		return C.QFontInfo_Italic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFontInfo) PixelSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontInfo_PixelSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontInfo) PointSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontInfo_PointSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontInfo) PointSizeF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontInfo_PointSizeF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) Style() QFont__Style {
	if ptr.Pointer() != nil {
		return QFont__Style(C.QFontInfo_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) StyleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFontInfo_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFontInfo) Swap(other QFontInfo_ITF) {
	if ptr.Pointer() != nil {
		C.QFontInfo_Swap(ptr.Pointer(), PointerFromQFontInfo(other))
	}
}

func (ptr *QFontInfo) StyleHint() QFont__StyleHint {
	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QFontInfo_StyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontInfo) Weight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontInfo_Weight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontInfo) DestroyQFontInfo() {
	if ptr.Pointer() != nil {
		C.QFontInfo_DestroyQFontInfo(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QFontMetrics struct {
	ptr unsafe.Pointer
}

type QFontMetrics_ITF interface {
	QFontMetrics_PTR() *QFontMetrics
}

func (p *QFontMetrics) QFontMetrics_PTR() *QFontMetrics {
	return p
}

func (p *QFontMetrics) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontMetrics) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontMetrics(ptr QFontMetrics_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontMetrics_PTR().Pointer()
	}
	return nil
}

func NewQFontMetricsFromPointer(ptr unsafe.Pointer) *QFontMetrics {
	var n = new(QFontMetrics)
	n.SetPointer(ptr)
	return n
}
func NewQFontMetrics(font QFont_ITF) *QFontMetrics {
	var tmpValue = NewQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func NewQFontMetrics2(font QFont_ITF, paintdevice QPaintDevice_ITF) *QFontMetrics {
	var tmpValue = NewQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics2(PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
	runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func NewQFontMetrics3(fm QFontMetrics_ITF) *QFontMetrics {
	var tmpValue = NewQFontMetricsFromPointer(C.QFontMetrics_NewQFontMetrics3(PointerFromQFontMetrics(fm)))
	runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
	return tmpValue
}

func (ptr *QFontMetrics) Ascent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Ascent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) AverageCharWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_AverageCharWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) BoundingRect(ch core.QChar_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect(ptr.Pointer(), core.PointerFromQChar(ch)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect3(rect core.QRect_ITF, flags int, text string, tabStops int, tabArray int) *core.QRect {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect3(ptr.Pointer(), core.PointerFromQRect(rect), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect2(text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect2(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) BoundingRect4(x int, y int, width int, height int, flags int, text string, tabStops int, tabArray int) *core.QRect {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_BoundingRect4(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) Descent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Descent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) ElidedText(text string, mode core.Qt__TextElideMode, width int, flags int) string {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		return cGoUnpackString(C.QFontMetrics_ElidedText(ptr.Pointer(), textC, C.longlong(mode), C.int(int32(width)), C.int(int32(flags))))
	}
	return ""
}

func (ptr *QFontMetrics) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) InFont(ch core.QChar_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetrics_InFont(ptr.Pointer(), core.PointerFromQChar(ch)) != 0
	}
	return false
}

func (ptr *QFontMetrics) InFontUcs4(ucs4 uint) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetrics_InFontUcs4(ptr.Pointer(), C.uint(uint32(ucs4))) != 0
	}
	return false
}

func (ptr *QFontMetrics) Leading() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Leading(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) LeftBearing(ch core.QChar_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_LeftBearing(ptr.Pointer(), core.PointerFromQChar(ch))))
	}
	return 0
}

func (ptr *QFontMetrics) LineSpacing() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_LineSpacing(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) LineWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_LineWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) MaxWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_MaxWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) MinLeftBearing() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_MinLeftBearing(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) MinRightBearing() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_MinRightBearing(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) OverlinePos() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_OverlinePos(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) RightBearing(ch core.QChar_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_RightBearing(ptr.Pointer(), core.PointerFromQChar(ch))))
	}
	return 0
}

func (ptr *QFontMetrics) Size(flags int, text string, tabStops int, tabArray int) *core.QSize {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQSizeFromPointer(C.QFontMetrics_Size(ptr.Pointer(), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) StrikeOutPos() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_StrikeOutPos(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) Swap(other QFontMetrics_ITF) {
	if ptr.Pointer() != nil {
		C.QFontMetrics_Swap(ptr.Pointer(), PointerFromQFontMetrics(other))
	}
}

func (ptr *QFontMetrics) TightBoundingRect(text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFromPointer(C.QFontMetrics_TightBoundingRect(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetrics) UnderlinePos() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_UnderlinePos(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) Width3(ch core.QChar_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_Width3(ptr.Pointer(), core.PointerFromQChar(ch))))
	}
	return 0
}

func (ptr *QFontMetrics) Width(text string, len int) int {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		return int(int32(C.QFontMetrics_Width(ptr.Pointer(), textC, C.int(int32(len)))))
	}
	return 0
}

func (ptr *QFontMetrics) XHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFontMetrics_XHeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFontMetrics) DestroyQFontMetrics() {
	if ptr.Pointer() != nil {
		C.QFontMetrics_DestroyQFontMetrics(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QFontMetricsF struct {
	ptr unsafe.Pointer
}

type QFontMetricsF_ITF interface {
	QFontMetricsF_PTR() *QFontMetricsF
}

func (p *QFontMetricsF) QFontMetricsF_PTR() *QFontMetricsF {
	return p
}

func (p *QFontMetricsF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFontMetricsF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFontMetricsF(ptr QFontMetricsF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFontMetricsF_PTR().Pointer()
	}
	return nil
}

func NewQFontMetricsFFromPointer(ptr unsafe.Pointer) *QFontMetricsF {
	var n = new(QFontMetricsF)
	n.SetPointer(ptr)
	return n
}
func (ptr *QFontMetricsF) InFontUcs4(ch uint) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetricsF_InFontUcs4(ptr.Pointer(), C.uint(uint32(ch))) != 0
	}
	return false
}

func NewQFontMetricsF(font QFont_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF(PointerFromQFont(font)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func NewQFontMetricsF2(font QFont_ITF, paintdevice QPaintDevice_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF2(PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func NewQFontMetricsF3(fontMetrics QFontMetrics_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF3(PointerFromQFontMetrics(fontMetrics)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func NewQFontMetricsF4(fm QFontMetricsF_ITF) *QFontMetricsF {
	var tmpValue = NewQFontMetricsFFromPointer(C.QFontMetricsF_NewQFontMetricsF4(PointerFromQFontMetricsF(fm)))
	runtime.SetFinalizer(tmpValue, (*QFontMetricsF).DestroyQFontMetricsF)
	return tmpValue
}

func (ptr *QFontMetricsF) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) AverageCharWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_AverageCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) BoundingRect2(ch core.QChar_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect2(ptr.Pointer(), core.PointerFromQChar(ch)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) BoundingRect3(rect core.QRectF_ITF, flags int, text string, tabStops int, tabArray int) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect3(ptr.Pointer(), core.PointerFromQRectF(rect), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) BoundingRect(text string) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_BoundingRect(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) ElidedText(text string, mode core.Qt__TextElideMode, width float64, flags int) string {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		return cGoUnpackString(C.QFontMetricsF_ElidedText(ptr.Pointer(), textC, C.longlong(mode), C.double(width), C.int(int32(flags))))
	}
	return ""
}

func (ptr *QFontMetricsF) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) InFont(ch core.QChar_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFontMetricsF_InFont(ptr.Pointer(), core.PointerFromQChar(ch)) != 0
	}
	return false
}

func (ptr *QFontMetricsF) Leading() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) LeftBearing(ch core.QChar_ITF) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LeftBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) LineSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LineSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) LineWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_LineWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MaxWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MaxWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MinLeftBearing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MinLeftBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) MinRightBearing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_MinRightBearing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) OverlinePos() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_OverlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) RightBearing(ch core.QChar_ITF) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_RightBearing(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) Size(flags int, text string, tabStops int, tabArray int) *core.QSizeF {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQSizeFFromPointer(C.QFontMetricsF_Size(ptr.Pointer(), C.int(int32(flags)), textC, C.int(int32(tabStops)), C.int(int32(tabArray))))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) StrikeOutPos() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_StrikeOutPos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Swap(other QFontMetricsF_ITF) {
	if ptr.Pointer() != nil {
		C.QFontMetricsF_Swap(ptr.Pointer(), PointerFromQFontMetricsF(other))
	}
}

func (ptr *QFontMetricsF) TightBoundingRect(text string) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFFromPointer(C.QFontMetricsF_TightBoundingRect(ptr.Pointer(), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QFontMetricsF) UnderlinePos() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_UnderlinePos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) Width2(ch core.QChar_ITF) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_Width2(ptr.Pointer(), core.PointerFromQChar(ch)))
	}
	return 0
}

func (ptr *QFontMetricsF) Width(text string) float64 {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		return float64(C.QFontMetricsF_Width(ptr.Pointer(), textC))
	}
	return 0
}

func (ptr *QFontMetricsF) XHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QFontMetricsF_XHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFontMetricsF) DestroyQFontMetricsF() {
	if ptr.Pointer() != nil {
		C.QFontMetricsF_DestroyQFontMetricsF(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QGenericMatrix struct {
	ptr unsafe.Pointer
}

type QGenericMatrix_ITF interface {
	QGenericMatrix_PTR() *QGenericMatrix
}

func (p *QGenericMatrix) QGenericMatrix_PTR() *QGenericMatrix {
	return p
}

func (p *QGenericMatrix) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGenericMatrix) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGenericMatrix(ptr QGenericMatrix_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericMatrix_PTR().Pointer()
	}
	return nil
}

func NewQGenericMatrixFromPointer(ptr unsafe.Pointer) *QGenericMatrix {
	var n = new(QGenericMatrix)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGenericMatrix) DestroyQGenericMatrix() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QGenericPlugin struct {
	core.QObject
}

type QGenericPlugin_ITF interface {
	core.QObject_ITF
	QGenericPlugin_PTR() *QGenericPlugin
}

func (p *QGenericPlugin) QGenericPlugin_PTR() *QGenericPlugin {
	return p
}

func (p *QGenericPlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QGenericPlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQGenericPlugin(ptr QGenericPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericPlugin_PTR().Pointer()
	}
	return nil
}

func NewQGenericPluginFromPointer(ptr unsafe.Pointer) *QGenericPlugin {
	var n = new(QGenericPlugin)
	n.SetPointer(ptr)
	return n
}
func NewQGenericPlugin(parent core.QObject_ITF) *QGenericPlugin {
	var tmpValue = NewQGenericPluginFromPointer(C.QGenericPlugin_NewQGenericPlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQGenericPlugin_Create
func callbackQGenericPlugin_Create(ptr unsafe.Pointer, key C.struct_QtGui_PackedString, specification C.struct_QtGui_PackedString) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::create"); signal != nil {
		return core.PointerFromQObject(signal.(func(string, string) *core.QObject)(cGoUnpackString(key), cGoUnpackString(specification)))
	}

	return core.PointerFromQObject(nil)
}

func (ptr *QGenericPlugin) ConnectCreate(f func(key string, specification string) *core.QObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::create", f)
	}
}

func (ptr *QGenericPlugin) DisconnectCreate(key string, specification string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::create")
	}
}

func (ptr *QGenericPlugin) Create(key string, specification string) *core.QObject {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var specificationC = C.CString(specification)
		defer C.free(unsafe.Pointer(specificationC))
		var tmpValue = core.NewQObjectFromPointer(C.QGenericPlugin_Create(ptr.Pointer(), keyC, specificationC))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QGenericPlugin) DestroyQGenericPlugin() {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DestroyQGenericPlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQGenericPlugin_TimerEvent
func callbackQGenericPlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::timerEvent", f)
	}
}

func (ptr *QGenericPlugin) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::timerEvent")
	}
}

func (ptr *QGenericPlugin) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QGenericPlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGenericPlugin_ChildEvent
func callbackQGenericPlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::childEvent", f)
	}
}

func (ptr *QGenericPlugin) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::childEvent")
	}
}

func (ptr *QGenericPlugin) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QGenericPlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGenericPlugin_ConnectNotify
func callbackQGenericPlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGenericPluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGenericPlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::connectNotify", f)
	}
}

func (ptr *QGenericPlugin) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::connectNotify")
	}
}

func (ptr *QGenericPlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGenericPlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGenericPlugin_CustomEvent
func callbackQGenericPlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQGenericPluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGenericPlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::customEvent", f)
	}
}

func (ptr *QGenericPlugin) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::customEvent")
	}
}

func (ptr *QGenericPlugin) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGenericPlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGenericPlugin_DeleteLater
func callbackQGenericPlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQGenericPluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGenericPlugin) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::deleteLater", f)
	}
}

func (ptr *QGenericPlugin) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::deleteLater")
	}
}

func (ptr *QGenericPlugin) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGenericPlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQGenericPlugin_DisconnectNotify
func callbackQGenericPlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGenericPluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGenericPlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::disconnectNotify", f)
	}
}

func (ptr *QGenericPlugin) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::disconnectNotify")
	}
}

func (ptr *QGenericPlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGenericPlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGenericPlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGenericPlugin_Event
func callbackQGenericPlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGenericPluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QGenericPlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::event", f)
	}
}

func (ptr *QGenericPlugin) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::event")
	}
}

func (ptr *QGenericPlugin) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGenericPlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QGenericPlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQGenericPlugin_EventFilter
func callbackQGenericPlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGenericPluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGenericPlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::eventFilter", f)
	}
}

func (ptr *QGenericPlugin) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::eventFilter")
	}
}

func (ptr *QGenericPlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QGenericPlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGenericPlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGenericPlugin_MetaObject
func callbackQGenericPlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGenericPlugin::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQGenericPluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGenericPlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::metaObject", f)
	}
}

func (ptr *QGenericPlugin) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGenericPlugin::metaObject")
	}
}

func (ptr *QGenericPlugin) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGenericPlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGenericPlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGenericPlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QGenericPluginFactory struct {
	ptr unsafe.Pointer
}

type QGenericPluginFactory_ITF interface {
	QGenericPluginFactory_PTR() *QGenericPluginFactory
}

func (p *QGenericPluginFactory) QGenericPluginFactory_PTR() *QGenericPluginFactory {
	return p
}

func (p *QGenericPluginFactory) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGenericPluginFactory) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGenericPluginFactory(ptr QGenericPluginFactory_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericPluginFactory_PTR().Pointer()
	}
	return nil
}

func NewQGenericPluginFactoryFromPointer(ptr unsafe.Pointer) *QGenericPluginFactory {
	var n = new(QGenericPluginFactory)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGenericPluginFactory) DestroyQGenericPluginFactory() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QGenericPluginFactory_Create(key string, specification string) *core.QObject {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	var specificationC = C.CString(specification)
	defer C.free(unsafe.Pointer(specificationC))
	var tmpValue = core.NewQObjectFromPointer(C.QGenericPluginFactory_QGenericPluginFactory_Create(keyC, specificationC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGenericPluginFactory) Create(key string, specification string) *core.QObject {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	var specificationC = C.CString(specification)
	defer C.free(unsafe.Pointer(specificationC))
	var tmpValue = core.NewQObjectFromPointer(C.QGenericPluginFactory_QGenericPluginFactory_Create(keyC, specificationC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGenericPluginFactory_Keys() []string {
	return strings.Split(cGoUnpackString(C.QGenericPluginFactory_QGenericPluginFactory_Keys()), "|")
}

func (ptr *QGenericPluginFactory) Keys() []string {
	return strings.Split(cGoUnpackString(C.QGenericPluginFactory_QGenericPluginFactory_Keys()), "|")
}

//QGlyphRun::GlyphRunFlag
type QGlyphRun__GlyphRunFlag int64

const (
	QGlyphRun__Overline      = QGlyphRun__GlyphRunFlag(0x01)
	QGlyphRun__Underline     = QGlyphRun__GlyphRunFlag(0x02)
	QGlyphRun__StrikeOut     = QGlyphRun__GlyphRunFlag(0x04)
	QGlyphRun__RightToLeft   = QGlyphRun__GlyphRunFlag(0x08)
	QGlyphRun__SplitLigature = QGlyphRun__GlyphRunFlag(0x10)
)

type QGlyphRun struct {
	ptr unsafe.Pointer
}

type QGlyphRun_ITF interface {
	QGlyphRun_PTR() *QGlyphRun
}

func (p *QGlyphRun) QGlyphRun_PTR() *QGlyphRun {
	return p
}

func (p *QGlyphRun) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGlyphRun) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGlyphRun(ptr QGlyphRun_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGlyphRun_PTR().Pointer()
	}
	return nil
}

func NewQGlyphRunFromPointer(ptr unsafe.Pointer) *QGlyphRun {
	var n = new(QGlyphRun)
	n.SetPointer(ptr)
	return n
}
func NewQGlyphRun() *QGlyphRun {
	var tmpValue = NewQGlyphRunFromPointer(C.QGlyphRun_NewQGlyphRun())
	runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
	return tmpValue
}

func NewQGlyphRun2(other QGlyphRun_ITF) *QGlyphRun {
	var tmpValue = NewQGlyphRunFromPointer(C.QGlyphRun_NewQGlyphRun2(PointerFromQGlyphRun(other)))
	runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
	return tmpValue
}

func (ptr *QGlyphRun) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QGlyphRun_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QGlyphRun) Clear() {
	if ptr.Pointer() != nil {
		C.QGlyphRun_Clear(ptr.Pointer())
	}
}

func (ptr *QGlyphRun) Flags() QGlyphRun__GlyphRunFlag {
	if ptr.Pointer() != nil {
		return QGlyphRun__GlyphRunFlag(C.QGlyphRun_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGlyphRun) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) IsRightToLeft() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_IsRightToLeft(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) Overline() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_Overline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) Positions() []*core.QPointF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QPointF {
			var out = make([]*core.QPointF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQGlyphRunFromPointer(l.data).positions_atList(i)
			}
			return out
		}(C.QGlyphRun_Positions(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGlyphRun) RawFont() *QRawFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRawFontFromPointer(C.QGlyphRun_RawFont(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
		return tmpValue
	}
	return nil
}

func (ptr *QGlyphRun) SetBoundingRect(boundingRect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetBoundingRect(ptr.Pointer(), core.PointerFromQRectF(boundingRect))
	}
}

func (ptr *QGlyphRun) SetFlag(flag QGlyphRun__GlyphRunFlag, enabled bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetFlag(ptr.Pointer(), C.longlong(flag), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QGlyphRun) SetFlags(flags QGlyphRun__GlyphRunFlag) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QGlyphRun) SetOverline(overline bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetOverline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(overline))))
	}
}

func (ptr *QGlyphRun) SetRawData(glyphIndexArray uint, glyphPositionArray core.QPointF_ITF, size int) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRawData(ptr.Pointer(), C.uint(uint32(glyphIndexArray)), core.PointerFromQPointF(glyphPositionArray), C.int(int32(size)))
	}
}

func (ptr *QGlyphRun) SetRawFont(rawFont QRawFont_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRawFont(ptr.Pointer(), PointerFromQRawFont(rawFont))
	}
}

func (ptr *QGlyphRun) SetRightToLeft(rightToLeft bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetRightToLeft(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(rightToLeft))))
	}
}

func (ptr *QGlyphRun) SetStrikeOut(strikeOut bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetStrikeOut(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(strikeOut))))
	}
}

func (ptr *QGlyphRun) SetUnderline(underline bool) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_SetUnderline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(underline))))
	}
}

func (ptr *QGlyphRun) StrikeOut() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_StrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) Swap(other QGlyphRun_ITF) {
	if ptr.Pointer() != nil {
		C.QGlyphRun_Swap(ptr.Pointer(), PointerFromQGlyphRun(other))
	}
}

func (ptr *QGlyphRun) Underline() bool {
	if ptr.Pointer() != nil {
		return C.QGlyphRun_Underline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGlyphRun) DestroyQGlyphRun() {
	if ptr.Pointer() != nil {
		C.QGlyphRun_DestroyQGlyphRun(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QGlyphRun) positions_atList(i int) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QGlyphRun_positions_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

//QGradient::CoordinateMode
type QGradient__CoordinateMode int64

const (
	QGradient__LogicalMode         = QGradient__CoordinateMode(0)
	QGradient__StretchToDeviceMode = QGradient__CoordinateMode(1)
	QGradient__ObjectBoundingMode  = QGradient__CoordinateMode(2)
)

//QGradient::Spread
type QGradient__Spread int64

const (
	QGradient__PadSpread     = QGradient__Spread(0)
	QGradient__ReflectSpread = QGradient__Spread(1)
	QGradient__RepeatSpread  = QGradient__Spread(2)
)

//QGradient::Type
type QGradient__Type int64

const (
	QGradient__LinearGradient  = QGradient__Type(0)
	QGradient__RadialGradient  = QGradient__Type(1)
	QGradient__ConicalGradient = QGradient__Type(2)
	QGradient__NoGradient      = QGradient__Type(3)
)

type QGradient struct {
	ptr unsafe.Pointer
}

type QGradient_ITF interface {
	QGradient_PTR() *QGradient
}

func (p *QGradient) QGradient_PTR() *QGradient {
	return p
}

func (p *QGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGradient(ptr QGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGradient_PTR().Pointer()
	}
	return nil
}

func NewQGradientFromPointer(ptr unsafe.Pointer) *QGradient {
	var n = new(QGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGradient) DestroyQGradient() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QGradient) SetColorAt(position float64, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QGradient_SetColorAt(ptr.Pointer(), C.double(position), PointerFromQColor(color))
	}
}

func (ptr *QGradient) CoordinateMode() QGradient__CoordinateMode {
	if ptr.Pointer() != nil {
		return QGradient__CoordinateMode(C.QGradient_CoordinateMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGradient) SetCoordinateMode(mode QGradient__CoordinateMode) {
	if ptr.Pointer() != nil {
		C.QGradient_SetCoordinateMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QGradient) SetSpread(method QGradient__Spread) {
	if ptr.Pointer() != nil {
		C.QGradient_SetSpread(ptr.Pointer(), C.longlong(method))
	}
}

func (ptr *QGradient) Spread() QGradient__Spread {
	if ptr.Pointer() != nil {
		return QGradient__Spread(C.QGradient_Spread(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGradient) Type() QGradient__Type {
	if ptr.Pointer() != nil {
		return QGradient__Type(C.QGradient_Type(ptr.Pointer()))
	}
	return 0
}

type QGuiApplication struct {
	core.QCoreApplication
}

type QGuiApplication_ITF interface {
	core.QCoreApplication_ITF
	QGuiApplication_PTR() *QGuiApplication
}

func (p *QGuiApplication) QGuiApplication_PTR() *QGuiApplication {
	return p
}

func (p *QGuiApplication) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QCoreApplication_PTR().Pointer()
	}
	return nil
}

func (p *QGuiApplication) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QCoreApplication_PTR().SetPointer(ptr)
	}
}

func PointerFromQGuiApplication(ptr QGuiApplication_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGuiApplication_PTR().Pointer()
	}
	return nil
}

func NewQGuiApplicationFromPointer(ptr unsafe.Pointer) *QGuiApplication {
	var n = new(QGuiApplication)
	n.SetPointer(ptr)
	return n
}
func QGuiApplication_ApplicationDisplayName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_ApplicationDisplayName())
}

func (ptr *QGuiApplication) ApplicationDisplayName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_ApplicationDisplayName())
}

func QGuiApplication_ApplicationState() core.Qt__ApplicationState {
	return core.Qt__ApplicationState(C.QGuiApplication_QGuiApplication_ApplicationState())
}

func (ptr *QGuiApplication) ApplicationState() core.Qt__ApplicationState {
	return core.Qt__ApplicationState(C.QGuiApplication_QGuiApplication_ApplicationState())
}

func QGuiApplication_DesktopFileName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_DesktopFileName())
}

func (ptr *QGuiApplication) DesktopFileName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_DesktopFileName())
}

func (ptr *QGuiApplication) IsSavingSession() bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_IsSavingSession(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QGuiApplication) IsSessionRestored() bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_IsSessionRestored(ptr.Pointer()) != 0
	}
	return false
}

func QGuiApplication_LayoutDirection() core.Qt__LayoutDirection {
	return core.Qt__LayoutDirection(C.QGuiApplication_QGuiApplication_LayoutDirection())
}

func (ptr *QGuiApplication) LayoutDirection() core.Qt__LayoutDirection {
	return core.Qt__LayoutDirection(C.QGuiApplication_QGuiApplication_LayoutDirection())
}

func QGuiApplication_OverrideCursor() *QCursor {
	return NewQCursorFromPointer(C.QGuiApplication_QGuiApplication_OverrideCursor())
}

func (ptr *QGuiApplication) OverrideCursor() *QCursor {
	return NewQCursorFromPointer(C.QGuiApplication_QGuiApplication_OverrideCursor())
}

func QGuiApplication_PlatformName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_PlatformName())
}

func (ptr *QGuiApplication) PlatformName() string {
	return cGoUnpackString(C.QGuiApplication_QGuiApplication_PlatformName())
}

func QGuiApplication_PrimaryScreen() *QScreen {
	var tmpValue = NewQScreenFromPointer(C.QGuiApplication_QGuiApplication_PrimaryScreen())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) PrimaryScreen() *QScreen {
	var tmpValue = NewQScreenFromPointer(C.QGuiApplication_QGuiApplication_PrimaryScreen())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_QueryKeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_QueryKeyboardModifiers())
}

func (ptr *QGuiApplication) QueryKeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_QueryKeyboardModifiers())
}

func QGuiApplication_QuitOnLastWindowClosed() bool {
	return C.QGuiApplication_QGuiApplication_QuitOnLastWindowClosed() != 0
}

func (ptr *QGuiApplication) QuitOnLastWindowClosed() bool {
	return C.QGuiApplication_QGuiApplication_QuitOnLastWindowClosed() != 0
}

func QGuiApplication_RestoreOverrideCursor() {
	C.QGuiApplication_QGuiApplication_RestoreOverrideCursor()
}

func (ptr *QGuiApplication) RestoreOverrideCursor() {
	C.QGuiApplication_QGuiApplication_RestoreOverrideCursor()
}

func (ptr *QGuiApplication) SessionId() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGuiApplication_SessionId(ptr.Pointer()))
	}
	return ""
}

func (ptr *QGuiApplication) SessionKey() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGuiApplication_SessionKey(ptr.Pointer()))
	}
	return ""
}

func QGuiApplication_SetApplicationDisplayName(name string) {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	C.QGuiApplication_QGuiApplication_SetApplicationDisplayName(nameC)
}

func (ptr *QGuiApplication) SetApplicationDisplayName(name string) {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	C.QGuiApplication_QGuiApplication_SetApplicationDisplayName(nameC)
}

func QGuiApplication_SetDesktopFileName(name string) {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	C.QGuiApplication_QGuiApplication_SetDesktopFileName(nameC)
}

func (ptr *QGuiApplication) SetDesktopFileName(name string) {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	C.QGuiApplication_QGuiApplication_SetDesktopFileName(nameC)
}

func QGuiApplication_SetLayoutDirection(direction core.Qt__LayoutDirection) {
	C.QGuiApplication_QGuiApplication_SetLayoutDirection(C.longlong(direction))
}

func (ptr *QGuiApplication) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	C.QGuiApplication_QGuiApplication_SetLayoutDirection(C.longlong(direction))
}

func QGuiApplication_SetOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_SetOverrideCursor(PointerFromQCursor(cursor))
}

func (ptr *QGuiApplication) SetOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_SetOverrideCursor(PointerFromQCursor(cursor))
}

func QGuiApplication_SetQuitOnLastWindowClosed(quit bool) {
	C.QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(C.char(int8(qt.GoBoolToInt(quit))))
}

func (ptr *QGuiApplication) SetQuitOnLastWindowClosed(quit bool) {
	C.QGuiApplication_QGuiApplication_SetQuitOnLastWindowClosed(C.char(int8(qt.GoBoolToInt(quit))))
}

func QGuiApplication_SetWindowIcon(icon QIcon_ITF) {
	C.QGuiApplication_QGuiApplication_SetWindowIcon(PointerFromQIcon(icon))
}

func (ptr *QGuiApplication) SetWindowIcon(icon QIcon_ITF) {
	C.QGuiApplication_QGuiApplication_SetWindowIcon(PointerFromQIcon(icon))
}

func QGuiApplication_WindowIcon() *QIcon {
	var tmpValue = NewQIconFromPointer(C.QGuiApplication_QGuiApplication_WindowIcon())
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QGuiApplication) WindowIcon() *QIcon {
	var tmpValue = NewQIconFromPointer(C.QGuiApplication_QGuiApplication_WindowIcon())
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQGuiApplication(argc int, argv []string) *QGuiApplication {
	var argvC = C.CString(strings.Join(argv, "|"))
	defer C.free(unsafe.Pointer(argvC))
	var tmpValue = NewQGuiApplicationFromPointer(C.QGuiApplication_NewQGuiApplication(C.int(int32(argc)), argvC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQGuiApplication_ApplicationStateChanged
func callbackQGuiApplication_ApplicationStateChanged(ptr unsafe.Pointer, state C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::applicationStateChanged"); signal != nil {
		signal.(func(core.Qt__ApplicationState))(core.Qt__ApplicationState(state))
	}

}

func (ptr *QGuiApplication) ConnectApplicationStateChanged(f func(state core.Qt__ApplicationState)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectApplicationStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::applicationStateChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectApplicationStateChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectApplicationStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::applicationStateChanged")
	}
}

func (ptr *QGuiApplication) ApplicationStateChanged(state core.Qt__ApplicationState) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ApplicationStateChanged(ptr.Pointer(), C.longlong(state))
	}
}

func QGuiApplication_ChangeOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_ChangeOverrideCursor(PointerFromQCursor(cursor))
}

func (ptr *QGuiApplication) ChangeOverrideCursor(cursor QCursor_ITF) {
	C.QGuiApplication_QGuiApplication_ChangeOverrideCursor(PointerFromQCursor(cursor))
}

func QGuiApplication_Clipboard() *QClipboard {
	var tmpValue = NewQClipboardFromPointer(C.QGuiApplication_QGuiApplication_Clipboard())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) Clipboard() *QClipboard {
	var tmpValue = NewQClipboardFromPointer(C.QGuiApplication_QGuiApplication_Clipboard())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_DesktopSettingsAware() bool {
	return C.QGuiApplication_QGuiApplication_DesktopSettingsAware() != 0
}

func (ptr *QGuiApplication) DesktopSettingsAware() bool {
	return C.QGuiApplication_QGuiApplication_DesktopSettingsAware() != 0
}

func (ptr *QGuiApplication) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QGuiApplication_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QGuiApplication) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func QGuiApplication_Exec() int {
	return int(int32(C.QGuiApplication_QGuiApplication_Exec()))
}

func (ptr *QGuiApplication) Exec() int {
	return int(int32(C.QGuiApplication_QGuiApplication_Exec()))
}

func QGuiApplication_FocusObject() *core.QObject {
	var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication_QGuiApplication_FocusObject())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) FocusObject() *core.QObject {
	var tmpValue = core.NewQObjectFromPointer(C.QGuiApplication_QGuiApplication_FocusObject())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQGuiApplication_FocusObjectChanged
func callbackQGuiApplication_FocusObjectChanged(ptr unsafe.Pointer, focusObject unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::focusObjectChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(focusObject))
	}

}

func (ptr *QGuiApplication) ConnectFocusObjectChanged(f func(focusObject *core.QObject)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectFocusObjectChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::focusObjectChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectFocusObjectChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFocusObjectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::focusObjectChanged")
	}
}

func (ptr *QGuiApplication) FocusObjectChanged(focusObject core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_FocusObjectChanged(ptr.Pointer(), core.PointerFromQObject(focusObject))
	}
}

func QGuiApplication_FocusWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_FocusWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) FocusWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_FocusWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQGuiApplication_FocusWindowChanged
func callbackQGuiApplication_FocusWindowChanged(ptr unsafe.Pointer, focusWindow unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::focusWindowChanged"); signal != nil {
		signal.(func(*QWindow))(NewQWindowFromPointer(focusWindow))
	}

}

func (ptr *QGuiApplication) ConnectFocusWindowChanged(f func(focusWindow *QWindow)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectFocusWindowChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::focusWindowChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectFocusWindowChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFocusWindowChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::focusWindowChanged")
	}
}

func (ptr *QGuiApplication) FocusWindowChanged(focusWindow QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_FocusWindowChanged(ptr.Pointer(), PointerFromQWindow(focusWindow))
	}
}

func QGuiApplication_Font() *QFont {
	var tmpValue = NewQFontFromPointer(C.QGuiApplication_QGuiApplication_Font())
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

func (ptr *QGuiApplication) Font() *QFont {
	var tmpValue = NewQFontFromPointer(C.QGuiApplication_QGuiApplication_Font())
	runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
	return tmpValue
}

//export callbackQGuiApplication_FontDatabaseChanged
func callbackQGuiApplication_FontDatabaseChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::fontDatabaseChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectFontDatabaseChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectFontDatabaseChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::fontDatabaseChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectFontDatabaseChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectFontDatabaseChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::fontDatabaseChanged")
	}
}

func (ptr *QGuiApplication) FontDatabaseChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_FontDatabaseChanged(ptr.Pointer())
	}
}

func QGuiApplication_InputMethod() *QInputMethod {
	var tmpValue = NewQInputMethodFromPointer(C.QGuiApplication_QGuiApplication_InputMethod())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) InputMethod() *QInputMethod {
	var tmpValue = NewQInputMethodFromPointer(C.QGuiApplication_QGuiApplication_InputMethod())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_IsFallbackSessionManagementEnabled() bool {
	return C.QGuiApplication_QGuiApplication_IsFallbackSessionManagementEnabled() != 0
}

func (ptr *QGuiApplication) IsFallbackSessionManagementEnabled() bool {
	return C.QGuiApplication_QGuiApplication_IsFallbackSessionManagementEnabled() != 0
}

func QGuiApplication_IsLeftToRight() bool {
	return C.QGuiApplication_QGuiApplication_IsLeftToRight() != 0
}

func (ptr *QGuiApplication) IsLeftToRight() bool {
	return C.QGuiApplication_QGuiApplication_IsLeftToRight() != 0
}

func QGuiApplication_IsRightToLeft() bool {
	return C.QGuiApplication_QGuiApplication_IsRightToLeft() != 0
}

func (ptr *QGuiApplication) IsRightToLeft() bool {
	return C.QGuiApplication_QGuiApplication_IsRightToLeft() != 0
}

func QGuiApplication_KeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_KeyboardModifiers())
}

func (ptr *QGuiApplication) KeyboardModifiers() core.Qt__KeyboardModifier {
	return core.Qt__KeyboardModifier(C.QGuiApplication_QGuiApplication_KeyboardModifiers())
}

//export callbackQGuiApplication_LastWindowClosed
func callbackQGuiApplication_LastWindowClosed(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::lastWindowClosed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QGuiApplication) ConnectLastWindowClosed(f func()) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectLastWindowClosed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::lastWindowClosed", f)
	}
}

func (ptr *QGuiApplication) DisconnectLastWindowClosed() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectLastWindowClosed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::lastWindowClosed")
	}
}

func (ptr *QGuiApplication) LastWindowClosed() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_LastWindowClosed(ptr.Pointer())
	}
}

//export callbackQGuiApplication_LayoutDirectionChanged
func callbackQGuiApplication_LayoutDirectionChanged(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::layoutDirectionChanged"); signal != nil {
		signal.(func(core.Qt__LayoutDirection))(core.Qt__LayoutDirection(direction))
	}

}

func (ptr *QGuiApplication) ConnectLayoutDirectionChanged(f func(direction core.Qt__LayoutDirection)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectLayoutDirectionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::layoutDirectionChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectLayoutDirectionChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectLayoutDirectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::layoutDirectionChanged")
	}
}

func (ptr *QGuiApplication) LayoutDirectionChanged(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_LayoutDirectionChanged(ptr.Pointer(), C.longlong(direction))
	}
}

func QGuiApplication_ModalWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_ModalWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) ModalWindow() *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_ModalWindow())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_MouseButtons() core.Qt__MouseButton {
	return core.Qt__MouseButton(C.QGuiApplication_QGuiApplication_MouseButtons())
}

func (ptr *QGuiApplication) MouseButtons() core.Qt__MouseButton {
	return core.Qt__MouseButton(C.QGuiApplication_QGuiApplication_MouseButtons())
}

func QGuiApplication_Palette() *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QGuiApplication_QGuiApplication_Palette())
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func (ptr *QGuiApplication) Palette() *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QGuiApplication_QGuiApplication_Palette())
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

//export callbackQGuiApplication_PaletteChanged
func callbackQGuiApplication_PaletteChanged(ptr unsafe.Pointer, palette unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::paletteChanged"); signal != nil {
		signal.(func(*QPalette))(NewQPaletteFromPointer(palette))
	}

}

func (ptr *QGuiApplication) ConnectPaletteChanged(f func(palette *QPalette)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectPaletteChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::paletteChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectPaletteChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectPaletteChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::paletteChanged")
	}
}

func (ptr *QGuiApplication) PaletteChanged(palette QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_PaletteChanged(ptr.Pointer(), PointerFromQPalette(palette))
	}
}

//export callbackQGuiApplication_PrimaryScreenChanged
func callbackQGuiApplication_PrimaryScreenChanged(ptr unsafe.Pointer, screen unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::primaryScreenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectPrimaryScreenChanged(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectPrimaryScreenChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::primaryScreenChanged", f)
	}
}

func (ptr *QGuiApplication) DisconnectPrimaryScreenChanged() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectPrimaryScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::primaryScreenChanged")
	}
}

func (ptr *QGuiApplication) PrimaryScreenChanged(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_PrimaryScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

//export callbackQGuiApplication_ScreenAdded
func callbackQGuiApplication_ScreenAdded(ptr unsafe.Pointer, screen unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::screenAdded"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectScreenAdded(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectScreenAdded(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::screenAdded", f)
	}
}

func (ptr *QGuiApplication) DisconnectScreenAdded() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectScreenAdded(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::screenAdded")
	}
}

func (ptr *QGuiApplication) ScreenAdded(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ScreenAdded(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

//export callbackQGuiApplication_ScreenRemoved
func callbackQGuiApplication_ScreenRemoved(ptr unsafe.Pointer, screen unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::screenRemoved"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QGuiApplication) ConnectScreenRemoved(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectScreenRemoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::screenRemoved", f)
	}
}

func (ptr *QGuiApplication) DisconnectScreenRemoved() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectScreenRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::screenRemoved")
	}
}

func (ptr *QGuiApplication) ScreenRemoved(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ScreenRemoved(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func QGuiApplication_Screens() []*QScreen {
	return func(l C.struct_QtGui_PackedList) []*QScreen {
		var out = make([]*QScreen, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQGuiApplicationFromPointer(l.data).screens_atList(i)
		}
		return out
	}(C.QGuiApplication_QGuiApplication_Screens())
}

func (ptr *QGuiApplication) Screens() []*QScreen {
	return func(l C.struct_QtGui_PackedList) []*QScreen {
		var out = make([]*QScreen, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQGuiApplicationFromPointer(l.data).screens_atList(i)
		}
		return out
	}(C.QGuiApplication_QGuiApplication_Screens())
}

func QGuiApplication_SetDesktopSettingsAware(on bool) {
	C.QGuiApplication_QGuiApplication_SetDesktopSettingsAware(C.char(int8(qt.GoBoolToInt(on))))
}

func (ptr *QGuiApplication) SetDesktopSettingsAware(on bool) {
	C.QGuiApplication_QGuiApplication_SetDesktopSettingsAware(C.char(int8(qt.GoBoolToInt(on))))
}

func QGuiApplication_SetFallbackSessionManagementEnabled(enabled bool) {
	C.QGuiApplication_QGuiApplication_SetFallbackSessionManagementEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func (ptr *QGuiApplication) SetFallbackSessionManagementEnabled(enabled bool) {
	C.QGuiApplication_QGuiApplication_SetFallbackSessionManagementEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func QGuiApplication_SetFont(font QFont_ITF) {
	C.QGuiApplication_QGuiApplication_SetFont(PointerFromQFont(font))
}

func (ptr *QGuiApplication) SetFont(font QFont_ITF) {
	C.QGuiApplication_QGuiApplication_SetFont(PointerFromQFont(font))
}

func QGuiApplication_SetPalette(pal QPalette_ITF) {
	C.QGuiApplication_QGuiApplication_SetPalette(PointerFromQPalette(pal))
}

func (ptr *QGuiApplication) SetPalette(pal QPalette_ITF) {
	C.QGuiApplication_QGuiApplication_SetPalette(PointerFromQPalette(pal))
}

func QGuiApplication_StyleHints() *QStyleHints {
	var tmpValue = NewQStyleHintsFromPointer(C.QGuiApplication_QGuiApplication_StyleHints())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) StyleHints() *QStyleHints {
	var tmpValue = NewQStyleHintsFromPointer(C.QGuiApplication_QGuiApplication_StyleHints())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QGuiApplication_Sync() {
	C.QGuiApplication_QGuiApplication_Sync()
}

func (ptr *QGuiApplication) Sync() {
	C.QGuiApplication_QGuiApplication_Sync()
}

func QGuiApplication_TopLevelAt(pos core.QPoint_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_TopLevelAt(core.PointerFromQPoint(pos)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QGuiApplication) TopLevelAt(pos core.QPoint_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QGuiApplication_QGuiApplication_TopLevelAt(core.PointerFromQPoint(pos)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQGuiApplication_DestroyQGuiApplication
func callbackQGuiApplication_DestroyQGuiApplication(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::~QGuiApplication"); signal != nil {
		signal.(func())()
	} else {
		NewQGuiApplicationFromPointer(ptr).DestroyQGuiApplicationDefault()
	}
}

func (ptr *QGuiApplication) ConnectDestroyQGuiApplication(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::~QGuiApplication", f)
	}
}

func (ptr *QGuiApplication) DisconnectDestroyQGuiApplication() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::~QGuiApplication")
	}
}

func (ptr *QGuiApplication) DestroyQGuiApplication() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DestroyQGuiApplication(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGuiApplication) DestroyQGuiApplicationDefault() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DestroyQGuiApplicationDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGuiApplication) screens_atList(i int) *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QGuiApplication_screens_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQGuiApplication_Quit
func callbackQGuiApplication_Quit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::quit"); signal != nil {
		signal.(func())()
	} else {
		NewQGuiApplicationFromPointer(ptr).QuitDefault()
	}
}

func (ptr *QGuiApplication) ConnectQuit(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::quit", f)
	}
}

func (ptr *QGuiApplication) DisconnectQuit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::quit")
	}
}

func (ptr *QGuiApplication) Quit() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_Quit(ptr.Pointer())
	}
}

func (ptr *QGuiApplication) QuitDefault() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_QuitDefault(ptr.Pointer())
	}
}

//export callbackQGuiApplication_TimerEvent
func callbackQGuiApplication_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::timerEvent", f)
	}
}

func (ptr *QGuiApplication) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::timerEvent")
	}
}

func (ptr *QGuiApplication) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QGuiApplication) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQGuiApplication_ChildEvent
func callbackQGuiApplication_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::childEvent", f)
	}
}

func (ptr *QGuiApplication) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::childEvent")
	}
}

func (ptr *QGuiApplication) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QGuiApplication) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQGuiApplication_ConnectNotify
func callbackQGuiApplication_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGuiApplicationFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGuiApplication) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::connectNotify", f)
	}
}

func (ptr *QGuiApplication) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::connectNotify")
	}
}

func (ptr *QGuiApplication) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGuiApplication) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGuiApplication_CustomEvent
func callbackQGuiApplication_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQGuiApplicationFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QGuiApplication) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::customEvent", f)
	}
}

func (ptr *QGuiApplication) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::customEvent")
	}
}

func (ptr *QGuiApplication) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QGuiApplication) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQGuiApplication_DeleteLater
func callbackQGuiApplication_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQGuiApplicationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QGuiApplication) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::deleteLater", f)
	}
}

func (ptr *QGuiApplication) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::deleteLater")
	}
}

func (ptr *QGuiApplication) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QGuiApplication) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQGuiApplication_DisconnectNotify
func callbackQGuiApplication_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQGuiApplicationFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QGuiApplication) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::disconnectNotify", f)
	}
}

func (ptr *QGuiApplication) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::disconnectNotify")
	}
}

func (ptr *QGuiApplication) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QGuiApplication) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QGuiApplication_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQGuiApplication_EventFilter
func callbackQGuiApplication_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQGuiApplicationFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QGuiApplication) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::eventFilter", f)
	}
}

func (ptr *QGuiApplication) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::eventFilter")
	}
}

func (ptr *QGuiApplication) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QGuiApplication) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QGuiApplication_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQGuiApplication_MetaObject
func callbackQGuiApplication_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QGuiApplication::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQGuiApplicationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QGuiApplication) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::metaObject", f)
	}
}

func (ptr *QGuiApplication) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QGuiApplication::metaObject")
	}
}

func (ptr *QGuiApplication) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGuiApplication_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGuiApplication) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QGuiApplication_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QHelpEvent struct {
	core.QEvent
}

type QHelpEvent_ITF interface {
	core.QEvent_ITF
	QHelpEvent_PTR() *QHelpEvent
}

func (p *QHelpEvent) QHelpEvent_PTR() *QHelpEvent {
	return p
}

func (p *QHelpEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QHelpEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQHelpEvent(ptr QHelpEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHelpEvent_PTR().Pointer()
	}
	return nil
}

func NewQHelpEventFromPointer(ptr unsafe.Pointer) *QHelpEvent {
	var n = new(QHelpEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHelpEvent) DestroyQHelpEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQHelpEvent(ty core.QEvent__Type, pos core.QPoint_ITF, globalPos core.QPoint_ITF) *QHelpEvent {
	var tmpValue = NewQHelpEventFromPointer(C.QHelpEvent_NewQHelpEvent(C.longlong(ty), core.PointerFromQPoint(pos), core.PointerFromQPoint(globalPos)))
	runtime.SetFinalizer(tmpValue, (*QHelpEvent).DestroyQHelpEvent)
	return tmpValue
}

func (ptr *QHelpEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHelpEvent_GlobalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHelpEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QHelpEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QHelpEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QHelpEvent_Pos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHelpEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QHelpEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QHelpEvent_Y(ptr.Pointer())))
	}
	return 0
}

type QHideEvent struct {
	core.QEvent
}

type QHideEvent_ITF interface {
	core.QEvent_ITF
	QHideEvent_PTR() *QHideEvent
}

func (p *QHideEvent) QHideEvent_PTR() *QHideEvent {
	return p
}

func (p *QHideEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QHideEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQHideEvent(ptr QHideEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHideEvent_PTR().Pointer()
	}
	return nil
}

func NewQHideEventFromPointer(ptr unsafe.Pointer) *QHideEvent {
	var n = new(QHideEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHideEvent) DestroyQHideEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQHideEvent() *QHideEvent {
	var tmpValue = NewQHideEventFromPointer(C.QHideEvent_NewQHideEvent())
	runtime.SetFinalizer(tmpValue, (*QHideEvent).DestroyQHideEvent)
	return tmpValue
}

type QHoverEvent struct {
	QInputEvent
}

type QHoverEvent_ITF interface {
	QInputEvent_ITF
	QHoverEvent_PTR() *QHoverEvent
}

func (p *QHoverEvent) QHoverEvent_PTR() *QHoverEvent {
	return p
}

func (p *QHoverEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QHoverEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQHoverEvent(ptr QHoverEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHoverEvent_PTR().Pointer()
	}
	return nil
}

func NewQHoverEventFromPointer(ptr unsafe.Pointer) *QHoverEvent {
	var n = new(QHoverEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHoverEvent) DestroyQHoverEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQHoverEvent(ty core.QEvent__Type, pos core.QPointF_ITF, oldPos core.QPointF_ITF, modifiers core.Qt__KeyboardModifier) *QHoverEvent {
	var tmpValue = NewQHoverEventFromPointer(C.QHoverEvent_NewQHoverEvent(C.longlong(ty), core.PointerFromQPointF(pos), core.PointerFromQPointF(oldPos), C.longlong(modifiers)))
	runtime.SetFinalizer(tmpValue, (*QHoverEvent).DestroyQHoverEvent)
	return tmpValue
}

func (ptr *QHoverEvent) OldPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QHoverEvent_OldPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QHoverEvent) OldPosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QHoverEvent_OldPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHoverEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QHoverEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QHoverEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QHoverEvent_PosF(ptr.Pointer()))
	}
	return nil
}

//QIcon::Mode
type QIcon__Mode int64

const (
	QIcon__Normal   = QIcon__Mode(0)
	QIcon__Disabled = QIcon__Mode(1)
	QIcon__Active   = QIcon__Mode(2)
	QIcon__Selected = QIcon__Mode(3)
)

//QIcon::State
type QIcon__State int64

const (
	QIcon__On  = QIcon__State(0)
	QIcon__Off = QIcon__State(1)
)

type QIcon struct {
	ptr unsafe.Pointer
}

type QIcon_ITF interface {
	QIcon_PTR() *QIcon
}

func (p *QIcon) QIcon_PTR() *QIcon {
	return p
}

func (p *QIcon) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QIcon) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQIcon(ptr QIcon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIcon_PTR().Pointer()
	}
	return nil
}

func NewQIconFromPointer(ptr unsafe.Pointer) *QIcon {
	var n = new(QIcon)
	n.SetPointer(ptr)
	return n
}
func NewQIcon() *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon())
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon4(other QIcon_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon4(PointerFromQIcon(other)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon6(engine QIconEngine_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon6(PointerFromQIconEngine(engine)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon3(other QIcon_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon3(PointerFromQIcon(other)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon2(pixmap QPixmap_ITF) *QIcon {
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon2(PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func NewQIcon5(fileName string) *QIcon {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQIconFromPointer(C.QIcon_NewQIcon5(fileNameC))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QIcon) ActualSize2(window QWindow_ITF, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIcon_ActualSize2(ptr.Pointer(), PointerFromQWindow(window), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) ActualSize(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIcon_ActualSize(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) AddFile(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QIcon_AddFile(ptr.Pointer(), fileNameC, core.PointerFromQSize(size), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) AddPixmap(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIcon_AddPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) AvailableSizes(mode QIcon__Mode, state QIcon__State) []*core.QSize {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QSize {
			var out = make([]*core.QSize, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQIconFromPointer(l.data).availableSizes_atList(i)
			}
			return out
		}(C.QIcon_AvailableSizes(ptr.Pointer(), C.longlong(mode), C.longlong(state)))
	}
	return nil
}

func (ptr *QIcon) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIcon_CacheKey(ptr.Pointer()))
	}
	return 0
}

func QIcon_FromTheme(name string) *QIcon {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme(nameC))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QIcon) FromTheme(name string) *QIcon {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme(nameC))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func QIcon_FromTheme2(name string, fallback QIcon_ITF) *QIcon {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme2(nameC, PointerFromQIcon(fallback)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func (ptr *QIcon) FromTheme2(name string, fallback QIcon_ITF) *QIcon {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQIconFromPointer(C.QIcon_QIcon_FromTheme2(nameC, PointerFromQIcon(fallback)))
	runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
	return tmpValue
}

func QIcon_HasThemeIcon(name string) bool {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	return C.QIcon_QIcon_HasThemeIcon(nameC) != 0
}

func (ptr *QIcon) HasThemeIcon(name string) bool {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	return C.QIcon_QIcon_HasThemeIcon(nameC) != 0
}

func (ptr *QIcon) IsMask() bool {
	if ptr.Pointer() != nil {
		return C.QIcon_IsMask(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIcon) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QIcon_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIcon) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIcon_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIcon) Paint(painter QPainter_ITF, rect core.QRect_ITF, alignment core.Qt__AlignmentFlag, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIcon_Paint(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRect(rect), C.longlong(alignment), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) Paint2(painter QPainter_ITF, x int, y int, w int, h int, alignment core.Qt__AlignmentFlag, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIcon_Paint2(ptr.Pointer(), PointerFromQPainter(painter), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.longlong(alignment), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIcon) Pixmap4(window QWindow_ITF, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap4(ptr.Pointer(), PointerFromQWindow(window), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) Pixmap(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) Pixmap3(extent int, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap3(ptr.Pointer(), C.int(int32(extent)), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) Pixmap2(w int, h int, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIcon_Pixmap2(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIcon) SetIsMask(isMask bool) {
	if ptr.Pointer() != nil {
		C.QIcon_SetIsMask(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(isMask))))
	}
}

func QIcon_SetThemeName(name string) {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	C.QIcon_QIcon_SetThemeName(nameC)
}

func (ptr *QIcon) SetThemeName(name string) {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	C.QIcon_QIcon_SetThemeName(nameC)
}

func QIcon_SetThemeSearchPaths(paths []string) {
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	C.QIcon_QIcon_SetThemeSearchPaths(pathsC)
}

func (ptr *QIcon) SetThemeSearchPaths(paths []string) {
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	C.QIcon_QIcon_SetThemeSearchPaths(pathsC)
}

func (ptr *QIcon) Swap(other QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QIcon_Swap(ptr.Pointer(), PointerFromQIcon(other))
	}
}

func QIcon_ThemeName() string {
	return cGoUnpackString(C.QIcon_QIcon_ThemeName())
}

func (ptr *QIcon) ThemeName() string {
	return cGoUnpackString(C.QIcon_QIcon_ThemeName())
}

func QIcon_ThemeSearchPaths() []string {
	return strings.Split(cGoUnpackString(C.QIcon_QIcon_ThemeSearchPaths()), "|")
}

func (ptr *QIcon) ThemeSearchPaths() []string {
	return strings.Split(cGoUnpackString(C.QIcon_QIcon_ThemeSearchPaths()), "|")
}

func (ptr *QIcon) DestroyQIcon() {
	if ptr.Pointer() != nil {
		C.QIcon_DestroyQIcon(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QIcon) availableSizes_atList(i int) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIcon_availableSizes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

type QIconDragEvent struct {
	core.QEvent
}

type QIconDragEvent_ITF interface {
	core.QEvent_ITF
	QIconDragEvent_PTR() *QIconDragEvent
}

func (p *QIconDragEvent) QIconDragEvent_PTR() *QIconDragEvent {
	return p
}

func (p *QIconDragEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QIconDragEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQIconDragEvent(ptr QIconDragEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconDragEvent_PTR().Pointer()
	}
	return nil
}

func NewQIconDragEventFromPointer(ptr unsafe.Pointer) *QIconDragEvent {
	var n = new(QIconDragEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QIconDragEvent) DestroyQIconDragEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQIconDragEvent() *QIconDragEvent {
	var tmpValue = NewQIconDragEventFromPointer(C.QIconDragEvent_NewQIconDragEvent())
	runtime.SetFinalizer(tmpValue, (*QIconDragEvent).DestroyQIconDragEvent)
	return tmpValue
}

//QIconEngine::IconEngineHook
type QIconEngine__IconEngineHook int64

const (
	QIconEngine__AvailableSizesHook = QIconEngine__IconEngineHook(1)
	QIconEngine__IconNameHook       = QIconEngine__IconEngineHook(2)
	QIconEngine__IsNullHook         = QIconEngine__IconEngineHook(3)
)

type QIconEngine struct {
	ptr unsafe.Pointer
}

type QIconEngine_ITF interface {
	QIconEngine_PTR() *QIconEngine
}

func (p *QIconEngine) QIconEngine_PTR() *QIconEngine {
	return p
}

func (p *QIconEngine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QIconEngine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQIconEngine(ptr QIconEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconEngine_PTR().Pointer()
	}
	return nil
}

func NewQIconEngineFromPointer(ptr unsafe.Pointer) *QIconEngine {
	var n = new(QIconEngine)
	n.SetPointer(ptr)
	return n
}
func NewQIconEngine() *QIconEngine {
	return NewQIconEngineFromPointer(C.QIconEngine_NewQIconEngine())
}

//export callbackQIconEngine_ActualSize
func callbackQIconEngine_ActualSize(ptr unsafe.Pointer, size unsafe.Pointer, mode C.longlong, state C.longlong) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::actualSize"); signal != nil {
		return core.PointerFromQSize(signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *core.QSize)(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
	}

	return core.PointerFromQSize(NewQIconEngineFromPointer(ptr).ActualSizeDefault(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
}

func (ptr *QIconEngine) ConnectActualSize(f func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *core.QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::actualSize", f)
	}
}

func (ptr *QIconEngine) DisconnectActualSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::actualSize")
	}
}

func (ptr *QIconEngine) ActualSize(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIconEngine_ActualSize(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIconEngine) ActualSizeDefault(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIconEngine_ActualSizeDefault(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQIconEngine_AddFile
func callbackQIconEngine_AddFile(ptr unsafe.Pointer, fileName C.struct_QtGui_PackedString, size unsafe.Pointer, mode C.longlong, state C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::addFile"); signal != nil {
		signal.(func(string, *core.QSize, QIcon__Mode, QIcon__State))(cGoUnpackString(fileName), core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state))
	} else {
		NewQIconEngineFromPointer(ptr).AddFileDefault(cGoUnpackString(fileName), core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state))
	}
}

func (ptr *QIconEngine) ConnectAddFile(f func(fileName string, size *core.QSize, mode QIcon__Mode, state QIcon__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::addFile", f)
	}
}

func (ptr *QIconEngine) DisconnectAddFile() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::addFile")
	}
}

func (ptr *QIconEngine) AddFile(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QIconEngine_AddFile(ptr.Pointer(), fileNameC, core.PointerFromQSize(size), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIconEngine) AddFileDefault(fileName string, size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QIconEngine_AddFileDefault(ptr.Pointer(), fileNameC, core.PointerFromQSize(size), C.longlong(mode), C.longlong(state))
	}
}

//export callbackQIconEngine_AddPixmap
func callbackQIconEngine_AddPixmap(ptr unsafe.Pointer, pixmap unsafe.Pointer, mode C.longlong, state C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::addPixmap"); signal != nil {
		signal.(func(*QPixmap, QIcon__Mode, QIcon__State))(NewQPixmapFromPointer(pixmap), QIcon__Mode(mode), QIcon__State(state))
	} else {
		NewQIconEngineFromPointer(ptr).AddPixmapDefault(NewQPixmapFromPointer(pixmap), QIcon__Mode(mode), QIcon__State(state))
	}
}

func (ptr *QIconEngine) ConnectAddPixmap(f func(pixmap *QPixmap, mode QIcon__Mode, state QIcon__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::addPixmap", f)
	}
}

func (ptr *QIconEngine) DisconnectAddPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::addPixmap")
	}
}

func (ptr *QIconEngine) AddPixmap(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIconEngine_AddPixmap(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode), C.longlong(state))
	}
}

func (ptr *QIconEngine) AddPixmapDefault(pixmap QPixmap_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIconEngine_AddPixmapDefault(ptr.Pointer(), PointerFromQPixmap(pixmap), C.longlong(mode), C.longlong(state))
	}
}

//export callbackQIconEngine_Clone
func callbackQIconEngine_Clone(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::clone"); signal != nil {
		return PointerFromQIconEngine(signal.(func() *QIconEngine)())
	}

	return PointerFromQIconEngine(nil)
}

func (ptr *QIconEngine) ConnectClone(f func() *QIconEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::clone", f)
	}
}

func (ptr *QIconEngine) DisconnectClone() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::clone")
	}
}

func (ptr *QIconEngine) Clone() *QIconEngine {
	if ptr.Pointer() != nil {
		return NewQIconEngineFromPointer(C.QIconEngine_Clone(ptr.Pointer()))
	}
	return nil
}

//export callbackQIconEngine_IconName
func callbackQIconEngine_IconName(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::iconName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQIconEngineFromPointer(ptr).IconNameDefault())
}

func (ptr *QIconEngine) ConnectIconName(f func() string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::iconName", f)
	}
}

func (ptr *QIconEngine) DisconnectIconName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::iconName")
	}
}

func (ptr *QIconEngine) IconName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_IconName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) IconNameDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_IconNameDefault(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QIconEngine_IsNull(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQIconEngine_Key
func callbackQIconEngine_Key(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::key"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQIconEngineFromPointer(ptr).KeyDefault())
}

func (ptr *QIconEngine) ConnectKey(f func() string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::key", f)
	}
}

func (ptr *QIconEngine) DisconnectKey() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::key")
	}
}

func (ptr *QIconEngine) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIconEngine) KeyDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIconEngine_KeyDefault(ptr.Pointer()))
	}
	return ""
}

//export callbackQIconEngine_Paint
func callbackQIconEngine_Paint(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer, mode C.longlong, state C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::paint"); signal != nil {
		signal.(func(*QPainter, *core.QRect, QIcon__Mode, QIcon__State))(NewQPainterFromPointer(painter), core.NewQRectFromPointer(rect), QIcon__Mode(mode), QIcon__State(state))
	}

}

func (ptr *QIconEngine) ConnectPaint(f func(painter *QPainter, rect *core.QRect, mode QIcon__Mode, state QIcon__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::paint", f)
	}
}

func (ptr *QIconEngine) DisconnectPaint(painter QPainter_ITF, rect core.QRect_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::paint")
	}
}

func (ptr *QIconEngine) Paint(painter QPainter_ITF, rect core.QRect_ITF, mode QIcon__Mode, state QIcon__State) {
	if ptr.Pointer() != nil {
		C.QIconEngine_Paint(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRect(rect), C.longlong(mode), C.longlong(state))
	}
}

//export callbackQIconEngine_Pixmap
func callbackQIconEngine_Pixmap(ptr unsafe.Pointer, size unsafe.Pointer, mode C.longlong, state C.longlong) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::pixmap"); signal != nil {
		return PointerFromQPixmap(signal.(func(*core.QSize, QIcon__Mode, QIcon__State) *QPixmap)(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
	}

	return PointerFromQPixmap(NewQIconEngineFromPointer(ptr).PixmapDefault(core.NewQSizeFromPointer(size), QIcon__Mode(mode), QIcon__State(state)))
}

func (ptr *QIconEngine) ConnectPixmap(f func(size *core.QSize, mode QIcon__Mode, state QIcon__State) *QPixmap) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::pixmap", f)
	}
}

func (ptr *QIconEngine) DisconnectPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::pixmap")
	}
}

func (ptr *QIconEngine) Pixmap(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIconEngine_Pixmap(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QIconEngine) PixmapDefault(size core.QSize_ITF, mode QIcon__Mode, state QIcon__State) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QIconEngine_PixmapDefault(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(mode), C.longlong(state)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

//export callbackQIconEngine_Virtual_hook
func callbackQIconEngine_Virtual_hook(ptr unsafe.Pointer, id C.int, data unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::virtual_hook"); signal != nil {
		signal.(func(int, unsafe.Pointer))(int(int32(id)), data)
	} else {
		NewQIconEngineFromPointer(ptr).Virtual_hookDefault(int(int32(id)), data)
	}
}

func (ptr *QIconEngine) ConnectVirtual_hook(f func(id int, data unsafe.Pointer)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::virtual_hook", f)
	}
}

func (ptr *QIconEngine) DisconnectVirtual_hook() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::virtual_hook")
	}
}

func (ptr *QIconEngine) Virtual_hook(id int, data unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QIconEngine_Virtual_hook(ptr.Pointer(), C.int(int32(id)), data)
	}
}

func (ptr *QIconEngine) Virtual_hookDefault(id int, data unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QIconEngine_Virtual_hookDefault(ptr.Pointer(), C.int(int32(id)), data)
	}
}

//export callbackQIconEngine_DestroyQIconEngine
func callbackQIconEngine_DestroyQIconEngine(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEngine::~QIconEngine"); signal != nil {
		signal.(func())()
	} else {
		NewQIconEngineFromPointer(ptr).DestroyQIconEngineDefault()
	}
}

func (ptr *QIconEngine) ConnectDestroyQIconEngine(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::~QIconEngine", f)
	}
}

func (ptr *QIconEngine) DisconnectDestroyQIconEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEngine::~QIconEngine")
	}
}

func (ptr *QIconEngine) DestroyQIconEngine() {
	if ptr.Pointer() != nil {
		C.QIconEngine_DestroyQIconEngine(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIconEngine) DestroyQIconEngineDefault() {
	if ptr.Pointer() != nil {
		C.QIconEngine_DestroyQIconEngineDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIconEngine) availableSizes_atList(i int) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QIconEngine_availableSizes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

type QIconEnginePlugin struct {
	core.QObject
}

type QIconEnginePlugin_ITF interface {
	core.QObject_ITF
	QIconEnginePlugin_PTR() *QIconEnginePlugin
}

func (p *QIconEnginePlugin) QIconEnginePlugin_PTR() *QIconEnginePlugin {
	return p
}

func (p *QIconEnginePlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QIconEnginePlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQIconEnginePlugin(ptr QIconEnginePlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIconEnginePlugin_PTR().Pointer()
	}
	return nil
}

func NewQIconEnginePluginFromPointer(ptr unsafe.Pointer) *QIconEnginePlugin {
	var n = new(QIconEnginePlugin)
	n.SetPointer(ptr)
	return n
}
func NewQIconEnginePlugin(parent core.QObject_ITF) *QIconEnginePlugin {
	var tmpValue = NewQIconEnginePluginFromPointer(C.QIconEnginePlugin_NewQIconEnginePlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQIconEnginePlugin_Create
func callbackQIconEnginePlugin_Create(ptr unsafe.Pointer, filename C.struct_QtGui_PackedString) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::create"); signal != nil {
		return PointerFromQIconEngine(signal.(func(string) *QIconEngine)(cGoUnpackString(filename)))
	}

	return PointerFromQIconEngine(nil)
}

func (ptr *QIconEnginePlugin) ConnectCreate(f func(filename string) *QIconEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::create", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectCreate(filename string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::create")
	}
}

func (ptr *QIconEnginePlugin) Create(filename string) *QIconEngine {
	if ptr.Pointer() != nil {
		var filenameC = C.CString(filename)
		defer C.free(unsafe.Pointer(filenameC))
		return NewQIconEngineFromPointer(C.QIconEnginePlugin_Create(ptr.Pointer(), filenameC))
	}
	return nil
}

func (ptr *QIconEnginePlugin) DestroyQIconEnginePlugin() {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DestroyQIconEnginePlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIconEnginePlugin_TimerEvent
func callbackQIconEnginePlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::timerEvent", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::timerEvent")
	}
}

func (ptr *QIconEnginePlugin) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QIconEnginePlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQIconEnginePlugin_ChildEvent
func callbackQIconEnginePlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::childEvent", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::childEvent")
	}
}

func (ptr *QIconEnginePlugin) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QIconEnginePlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQIconEnginePlugin_ConnectNotify
func callbackQIconEnginePlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIconEnginePluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIconEnginePlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::connectNotify", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::connectNotify")
	}
}

func (ptr *QIconEnginePlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIconEnginePlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIconEnginePlugin_CustomEvent
func callbackQIconEnginePlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQIconEnginePluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QIconEnginePlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::customEvent", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::customEvent")
	}
}

func (ptr *QIconEnginePlugin) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QIconEnginePlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQIconEnginePlugin_DeleteLater
func callbackQIconEnginePlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQIconEnginePluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QIconEnginePlugin) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::deleteLater", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::deleteLater")
	}
}

func (ptr *QIconEnginePlugin) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIconEnginePlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIconEnginePlugin_DisconnectNotify
func callbackQIconEnginePlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIconEnginePluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIconEnginePlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::disconnectNotify", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::disconnectNotify")
	}
}

func (ptr *QIconEnginePlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIconEnginePlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIconEnginePlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIconEnginePlugin_Event
func callbackQIconEnginePlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIconEnginePluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QIconEnginePlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::event", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::event")
	}
}

func (ptr *QIconEnginePlugin) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QIconEnginePlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQIconEnginePlugin_EventFilter
func callbackQIconEnginePlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIconEnginePluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QIconEnginePlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::eventFilter", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::eventFilter")
	}
}

func (ptr *QIconEnginePlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QIconEnginePlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIconEnginePlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQIconEnginePlugin_MetaObject
func callbackQIconEnginePlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIconEnginePlugin::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQIconEnginePluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QIconEnginePlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::metaObject", f)
	}
}

func (ptr *QIconEnginePlugin) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIconEnginePlugin::metaObject")
	}
}

func (ptr *QIconEnginePlugin) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIconEnginePlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QIconEnginePlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIconEnginePlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QImage::Format
type QImage__Format int64

const (
	QImage__Format_Invalid                = QImage__Format(0)
	QImage__Format_Mono                   = QImage__Format(1)
	QImage__Format_MonoLSB                = QImage__Format(2)
	QImage__Format_Indexed8               = QImage__Format(3)
	QImage__Format_RGB32                  = QImage__Format(4)
	QImage__Format_ARGB32                 = QImage__Format(5)
	QImage__Format_ARGB32_Premultiplied   = QImage__Format(6)
	QImage__Format_RGB16                  = QImage__Format(7)
	QImage__Format_ARGB8565_Premultiplied = QImage__Format(8)
	QImage__Format_RGB666                 = QImage__Format(9)
	QImage__Format_ARGB6666_Premultiplied = QImage__Format(10)
	QImage__Format_RGB555                 = QImage__Format(11)
	QImage__Format_ARGB8555_Premultiplied = QImage__Format(12)
	QImage__Format_RGB888                 = QImage__Format(13)
	QImage__Format_RGB444                 = QImage__Format(14)
	QImage__Format_ARGB4444_Premultiplied = QImage__Format(15)
	QImage__Format_RGBX8888               = QImage__Format(16)
	QImage__Format_RGBA8888               = QImage__Format(17)
	QImage__Format_RGBA8888_Premultiplied = QImage__Format(18)
	QImage__Format_BGR30                  = QImage__Format(19)
	QImage__Format_A2BGR30_Premultiplied  = QImage__Format(20)
	QImage__Format_RGB30                  = QImage__Format(21)
	QImage__Format_A2RGB30_Premultiplied  = QImage__Format(22)
	QImage__Format_Alpha8                 = QImage__Format(23)
	QImage__Format_Grayscale8             = QImage__Format(24)
)

//QImage::InvertMode
type QImage__InvertMode int64

const (
	QImage__InvertRgb  = QImage__InvertMode(0)
	QImage__InvertRgba = QImage__InvertMode(1)
)

type QImage struct {
	QPaintDevice
}

type QImage_ITF interface {
	QPaintDevice_ITF
	QImage_PTR() *QImage
}

func (p *QImage) QImage_PTR() *QImage {
	return p
}

func (p *QImage) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QImage) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQImage(ptr QImage_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImage_PTR().Pointer()
	}
	return nil
}

func NewQImageFromPointer(ptr unsafe.Pointer) *QImage {
	var n = new(QImage)
	n.SetPointer(ptr)
	return n
}
func (ptr *QImage) ColorCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_ColorCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) Copy(rectangle core.QRect_ITF) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Copy(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Fill3(color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QImage_Fill3(ptr.Pointer(), C.longlong(color))
	}
}

func (ptr *QImage) Fill2(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_Fill2(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QImage) Fill(pixelValue uint) {
	if ptr.Pointer() != nil {
		C.QImage_Fill(ptr.Pointer(), C.uint(uint32(pixelValue)))
	}
}

func QImage_FromData(data string, size int, format string) *QImage {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData(dataC, C.int(int32(size)), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func (ptr *QImage) FromData(data string, size int, format string) *QImage {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData(dataC, C.int(int32(size)), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func (ptr *QImage) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QImage_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) LoadFromData(data string, len int, format string) bool {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QImage_LoadFromData(ptr.Pointer(), dataC, C.int(int32(len)), formatC) != 0
	}
	return false
}

func (ptr *QImage) Offset() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QImage_Offset(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImage_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Scaled(size core.QSize_ITF, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Scaled(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) ScaledToHeight(height int, mode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_ScaledToHeight(ptr.Pointer(), C.int(int32(height)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) ScaledToWidth(width int, mode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_ScaledToWidth(ptr.Pointer(), C.int(int32(width)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) SetOffset(offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_SetOffset(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QImage) SetText(key string, text string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QImage_SetText(ptr.Pointer(), keyC, textC)
	}
}

func (ptr *QImage) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QImage_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func QImage_TrueMatrix2(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QImage_QImage_TrueMatrix2(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QImage) TrueMatrix2(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QImage_QImage_TrueMatrix2(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QImage) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_Width(ptr.Pointer())))
	}
	return 0
}

func NewQImage() *QImage {
	var tmpValue = NewQImageFromPointer(C.QImage_NewQImage())
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func NewQImage11(other QImage_ITF) *QImage {
	var tmpValue = NewQImageFromPointer(C.QImage_NewQImage11(PointerFromQImage(other)))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func NewQImage10(image QImage_ITF) *QImage {
	var tmpValue = NewQImageFromPointer(C.QImage_NewQImage10(PointerFromQImage(image)))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func NewQImage2(size core.QSize_ITF, format QImage__Format) *QImage {
	var tmpValue = NewQImageFromPointer(C.QImage_NewQImage2(core.PointerFromQSize(size), C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func NewQImage9(fileName string, format string) *QImage {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQImageFromPointer(C.QImage_NewQImage9(fileNameC, formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func NewQImage3(width int, height int, format QImage__Format) *QImage {
	var tmpValue = NewQImageFromPointer(C.QImage_NewQImage3(C.int(int32(width)), C.int(int32(height)), C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func (ptr *QImage) AllGray() bool {
	if ptr.Pointer() != nil {
		return C.QImage_AllGray(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) BitPlaneCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_BitPlaneCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) Bits() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_Bits(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImage) Bits2() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_Bits2(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImage) ByteCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_ByteCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) BytesPerLine() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_BytesPerLine(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QImage_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) ConstBits() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ConstBits(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImage) ConstScanLine(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ConstScanLine(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QImage) Copy2(x int, y int, width int, height int) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Copy2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) CreateAlphaMask(flags core.Qt__ImageConversionFlag) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_CreateAlphaMask(ptr.Pointer(), C.longlong(flags)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) CreateHeuristicMask(clipTight bool) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_CreateHeuristicMask(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(clipTight)))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Depth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_Depth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QImage_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImage) DotsPerMeterX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_DotsPerMeterX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) DotsPerMeterY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_DotsPerMeterY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImage) Format() QImage__Format {
	if ptr.Pointer() != nil {
		return QImage__Format(C.QImage_Format(ptr.Pointer()))
	}
	return 0
}

func QImage_FromData2(data core.QByteArray_ITF, format string) *QImage {
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData2(core.PointerFromQByteArray(data), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func (ptr *QImage) FromData2(data core.QByteArray_ITF, format string) *QImage {
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQImageFromPointer(C.QImage_QImage_FromData2(core.PointerFromQByteArray(data), formatC))
	runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
	return tmpValue
}

func (ptr *QImage) HasAlphaChannel() bool {
	if ptr.Pointer() != nil {
		return C.QImage_HasAlphaChannel(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) InvertPixels(mode QImage__InvertMode) {
	if ptr.Pointer() != nil {
		C.QImage_InvertPixels(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QImage) IsGrayscale() bool {
	if ptr.Pointer() != nil {
		return C.QImage_IsGrayscale(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImage) Load2(device core.QIODevice_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QImage_Load2(ptr.Pointer(), core.PointerFromQIODevice(device), formatC) != 0
	}
	return false
}

func (ptr *QImage) Load(fileName string, format string) bool {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QImage_Load(ptr.Pointer(), fileNameC, formatC) != 0
	}
	return false
}

func (ptr *QImage) LoadFromData2(data core.QByteArray_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QImage_LoadFromData2(ptr.Pointer(), core.PointerFromQByteArray(data), formatC) != 0
	}
	return false
}

func (ptr *QImage) PixelColor(position core.QPoint_ITF) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QImage_PixelColor(ptr.Pointer(), core.PointerFromQPoint(position)))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) PixelColor2(x int, y int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QImage_PixelColor2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) PixelFormat() *QPixelFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixelFormatFromPointer(C.QImage_PixelFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) PixelIndex(position core.QPoint_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_PixelIndex(ptr.Pointer(), core.PointerFromQPoint(position))))
	}
	return 0
}

func (ptr *QImage) PixelIndex2(x int, y int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_PixelIndex2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))))
	}
	return 0
}

func (ptr *QImage) Save2(device core.QIODevice_ITF, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QImage_Save2(ptr.Pointer(), core.PointerFromQIODevice(device), formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QImage) Save(fileName string, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QImage_Save(ptr.Pointer(), fileNameC, formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QImage) Scaled2(width int, height int, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Scaled2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) ScanLine(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ScanLine(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QImage) ScanLine2(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImage_ScanLine2(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QImage) SetColorCount(colorCount int) {
	if ptr.Pointer() != nil {
		C.QImage_SetColorCount(ptr.Pointer(), C.int(int32(colorCount)))
	}
}

func (ptr *QImage) SetDevicePixelRatio(scaleFactor float64) {
	if ptr.Pointer() != nil {
		C.QImage_SetDevicePixelRatio(ptr.Pointer(), C.double(scaleFactor))
	}
}

func (ptr *QImage) SetDotsPerMeterX(x int) {
	if ptr.Pointer() != nil {
		C.QImage_SetDotsPerMeterX(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QImage) SetDotsPerMeterY(y int) {
	if ptr.Pointer() != nil {
		C.QImage_SetDotsPerMeterY(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QImage) SetPixel(position core.QPoint_ITF, index_or_rgb uint) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixel(ptr.Pointer(), core.PointerFromQPoint(position), C.uint(uint32(index_or_rgb)))
	}
}

func (ptr *QImage) SetPixel2(x int, y int, index_or_rgb uint) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixel2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.uint(uint32(index_or_rgb)))
	}
}

func (ptr *QImage) SetPixelColor(position core.QPoint_ITF, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixelColor(ptr.Pointer(), core.PointerFromQPoint(position), PointerFromQColor(color))
	}
}

func (ptr *QImage) SetPixelColor2(x int, y int, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_SetPixelColor2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQColor(color))
	}
}

func (ptr *QImage) SmoothScaled(w int, h int) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_SmoothScaled(ptr.Pointer(), C.int(int32(w)), C.int(int32(h))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Swap(other QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QImage_Swap(ptr.Pointer(), PointerFromQImage(other))
	}
}

func (ptr *QImage) Text(key string) string {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return cGoUnpackString(C.QImage_Text(ptr.Pointer(), keyC))
	}
	return ""
}

func (ptr *QImage) TextKeys() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QImage_TextKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func QImage_ToImageFormat(format QPixelFormat_ITF) QImage__Format {
	return QImage__Format(C.QImage_QImage_ToImageFormat(PointerFromQPixelFormat(format)))
}

func (ptr *QImage) ToImageFormat(format QPixelFormat_ITF) QImage__Format {
	return QImage__Format(C.QImage_QImage_ToImageFormat(PointerFromQPixelFormat(format)))
}

func QImage_ToPixelFormat(format QImage__Format) *QPixelFormat {
	var tmpValue = NewQPixelFormatFromPointer(C.QImage_QImage_ToPixelFormat(C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func (ptr *QImage) ToPixelFormat(format QImage__Format) *QPixelFormat {
	var tmpValue = NewQPixelFormatFromPointer(C.QImage_QImage_ToPixelFormat(C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func (ptr *QImage) Transformed2(matrix QTransform_ITF, mode core.Qt__TransformationMode) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Transformed2(ptr.Pointer(), PointerFromQTransform(matrix), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Valid(pos core.QPoint_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImage_Valid(ptr.Pointer(), core.PointerFromQPoint(pos)) != 0
	}
	return false
}

func (ptr *QImage) Valid2(x int, y int) bool {
	if ptr.Pointer() != nil {
		return C.QImage_Valid2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))) != 0
	}
	return false
}

func (ptr *QImage) DestroyQImage() {
	if ptr.Pointer() != nil {
		C.QImage_DestroyQImage(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QImage) ConvertToFormat(format QImage__Format, flags core.Qt__ImageConversionFlag) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_ConvertToFormat(ptr.Pointer(), C.longlong(format), C.longlong(flags)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) Mirrored(horizontal bool, vertical bool) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_Mirrored(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(horizontal))), C.char(int8(qt.GoBoolToInt(vertical)))))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) RgbSwapped() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImage_RgbSwapped(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImage) ToVariant() *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QImage_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQImage_Metric
func callbackQImage_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImage::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQImageFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QImage) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImage::metric", f)
	}
}

func (ptr *QImage) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImage::metric")
	}
}

func (ptr *QImage) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QImage) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImage_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQImage_PaintEngine
func callbackQImage_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImage::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQImageFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QImage) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImage::paintEngine", f)
	}
}

func (ptr *QImage) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImage::paintEngine")
	}
}

func (ptr *QImage) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QImage_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImage) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QImage_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

//QImageIOHandler::ImageOption
type QImageIOHandler__ImageOption int64

const (
	QImageIOHandler__Size                 = QImageIOHandler__ImageOption(0)
	QImageIOHandler__ClipRect             = QImageIOHandler__ImageOption(1)
	QImageIOHandler__Description          = QImageIOHandler__ImageOption(2)
	QImageIOHandler__ScaledClipRect       = QImageIOHandler__ImageOption(3)
	QImageIOHandler__ScaledSize           = QImageIOHandler__ImageOption(4)
	QImageIOHandler__CompressionRatio     = QImageIOHandler__ImageOption(5)
	QImageIOHandler__Gamma                = QImageIOHandler__ImageOption(6)
	QImageIOHandler__Quality              = QImageIOHandler__ImageOption(7)
	QImageIOHandler__Name                 = QImageIOHandler__ImageOption(8)
	QImageIOHandler__SubType              = QImageIOHandler__ImageOption(9)
	QImageIOHandler__IncrementalReading   = QImageIOHandler__ImageOption(10)
	QImageIOHandler__Endianness           = QImageIOHandler__ImageOption(11)
	QImageIOHandler__Animation            = QImageIOHandler__ImageOption(12)
	QImageIOHandler__BackgroundColor      = QImageIOHandler__ImageOption(13)
	QImageIOHandler__ImageFormat          = QImageIOHandler__ImageOption(14)
	QImageIOHandler__SupportedSubTypes    = QImageIOHandler__ImageOption(15)
	QImageIOHandler__OptimizedWrite       = QImageIOHandler__ImageOption(16)
	QImageIOHandler__ProgressiveScanWrite = QImageIOHandler__ImageOption(17)
	QImageIOHandler__ImageTransformation  = QImageIOHandler__ImageOption(18)
	QImageIOHandler__TransformedByDefault = QImageIOHandler__ImageOption(19)
)

//QImageIOHandler::Transformation
type QImageIOHandler__Transformation int64

const (
	QImageIOHandler__TransformationNone              = QImageIOHandler__Transformation(0)
	QImageIOHandler__TransformationMirror            = QImageIOHandler__Transformation(1)
	QImageIOHandler__TransformationFlip              = QImageIOHandler__Transformation(2)
	QImageIOHandler__TransformationRotate180         = QImageIOHandler__Transformation(QImageIOHandler__TransformationMirror | QImageIOHandler__TransformationFlip)
	QImageIOHandler__TransformationRotate90          = QImageIOHandler__Transformation(4)
	QImageIOHandler__TransformationMirrorAndRotate90 = QImageIOHandler__Transformation(QImageIOHandler__TransformationMirror | QImageIOHandler__TransformationRotate90)
	QImageIOHandler__TransformationFlipAndRotate90   = QImageIOHandler__Transformation(QImageIOHandler__TransformationFlip | QImageIOHandler__TransformationRotate90)
	QImageIOHandler__TransformationRotate270         = QImageIOHandler__Transformation(QImageIOHandler__TransformationRotate180 | QImageIOHandler__TransformationRotate90)
)

type QImageIOHandler struct {
	ptr unsafe.Pointer
}

type QImageIOHandler_ITF interface {
	QImageIOHandler_PTR() *QImageIOHandler
}

func (p *QImageIOHandler) QImageIOHandler_PTR() *QImageIOHandler {
	return p
}

func (p *QImageIOHandler) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QImageIOHandler) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQImageIOHandler(ptr QImageIOHandler_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageIOHandler_PTR().Pointer()
	}
	return nil
}

func NewQImageIOHandlerFromPointer(ptr unsafe.Pointer) *QImageIOHandler {
	var n = new(QImageIOHandler)
	n.SetPointer(ptr)
	return n
}
func NewQImageIOHandler() *QImageIOHandler {
	return NewQImageIOHandlerFromPointer(C.QImageIOHandler_NewQImageIOHandler())
}

//export callbackQImageIOHandler_CanRead
func callbackQImageIOHandler_CanRead(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::canRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QImageIOHandler) ConnectCanRead(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::canRead", f)
	}
}

func (ptr *QImageIOHandler) DisconnectCanRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::canRead")
	}
}

func (ptr *QImageIOHandler) CanRead() bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_CanRead(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQImageIOHandler_CurrentImageNumber
func callbackQImageIOHandler_CurrentImageNumber(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::currentImageNumber"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).CurrentImageNumberDefault()))
}

func (ptr *QImageIOHandler) ConnectCurrentImageNumber(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::currentImageNumber", f)
	}
}

func (ptr *QImageIOHandler) DisconnectCurrentImageNumber() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::currentImageNumber")
	}
}

func (ptr *QImageIOHandler) CurrentImageNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_CurrentImageNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) CurrentImageNumberDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_CurrentImageNumberDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQImageIOHandler_CurrentImageRect
func callbackQImageIOHandler_CurrentImageRect(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::currentImageRect"); signal != nil {
		return core.PointerFromQRect(signal.(func() *core.QRect)())
	}

	return core.PointerFromQRect(NewQImageIOHandlerFromPointer(ptr).CurrentImageRectDefault())
}

func (ptr *QImageIOHandler) ConnectCurrentImageRect(f func() *core.QRect) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::currentImageRect", f)
	}
}

func (ptr *QImageIOHandler) DisconnectCurrentImageRect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::currentImageRect")
	}
}

func (ptr *QImageIOHandler) CurrentImageRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageIOHandler_CurrentImageRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOHandler) CurrentImageRectDefault() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageIOHandler_CurrentImageRectDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOHandler) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QImageIOHandler_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOHandler) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageIOHandler_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//export callbackQImageIOHandler_ImageCount
func callbackQImageIOHandler_ImageCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::imageCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).ImageCountDefault()))
}

func (ptr *QImageIOHandler) ConnectImageCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::imageCount", f)
	}
}

func (ptr *QImageIOHandler) DisconnectImageCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::imageCount")
	}
}

func (ptr *QImageIOHandler) ImageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_ImageCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) ImageCountDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_ImageCountDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQImageIOHandler_JumpToImage
func callbackQImageIOHandler_JumpToImage(ptr unsafe.Pointer, imageNumber C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::jumpToImage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(imageNumber))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).JumpToImageDefault(int(int32(imageNumber))))))
}

func (ptr *QImageIOHandler) ConnectJumpToImage(f func(imageNumber int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::jumpToImage", f)
	}
}

func (ptr *QImageIOHandler) DisconnectJumpToImage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::jumpToImage")
	}
}

func (ptr *QImageIOHandler) JumpToImage(imageNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToImage(ptr.Pointer(), C.int(int32(imageNumber))) != 0
	}
	return false
}

func (ptr *QImageIOHandler) JumpToImageDefault(imageNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToImageDefault(ptr.Pointer(), C.int(int32(imageNumber))) != 0
	}
	return false
}

//export callbackQImageIOHandler_JumpToNextImage
func callbackQImageIOHandler_JumpToNextImage(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::jumpToNextImage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).JumpToNextImageDefault())))
}

func (ptr *QImageIOHandler) ConnectJumpToNextImage(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::jumpToNextImage", f)
	}
}

func (ptr *QImageIOHandler) DisconnectJumpToNextImage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::jumpToNextImage")
	}
}

func (ptr *QImageIOHandler) JumpToNextImage() bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToNextImage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageIOHandler) JumpToNextImageDefault() bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_JumpToNextImageDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQImageIOHandler_LoopCount
func callbackQImageIOHandler_LoopCount(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::loopCount"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).LoopCountDefault()))
}

func (ptr *QImageIOHandler) ConnectLoopCount(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::loopCount", f)
	}
}

func (ptr *QImageIOHandler) DisconnectLoopCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::loopCount")
	}
}

func (ptr *QImageIOHandler) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_LoopCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) LoopCountDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_LoopCountDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQImageIOHandler_NextImageDelay
func callbackQImageIOHandler_NextImageDelay(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::nextImageDelay"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQImageIOHandlerFromPointer(ptr).NextImageDelayDefault()))
}

func (ptr *QImageIOHandler) ConnectNextImageDelay(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::nextImageDelay", f)
	}
}

func (ptr *QImageIOHandler) DisconnectNextImageDelay() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::nextImageDelay")
	}
}

func (ptr *QImageIOHandler) NextImageDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_NextImageDelay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageIOHandler) NextImageDelayDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageIOHandler_NextImageDelayDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQImageIOHandler_Option
func callbackQImageIOHandler_Option(ptr unsafe.Pointer, option C.longlong) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::option"); signal != nil {
		return core.PointerFromQVariant(signal.(func(QImageIOHandler__ImageOption) *core.QVariant)(QImageIOHandler__ImageOption(option)))
	}

	return core.PointerFromQVariant(NewQImageIOHandlerFromPointer(ptr).OptionDefault(QImageIOHandler__ImageOption(option)))
}

func (ptr *QImageIOHandler) ConnectOption(f func(option QImageIOHandler__ImageOption) *core.QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::option", f)
	}
}

func (ptr *QImageIOHandler) DisconnectOption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::option")
	}
}

func (ptr *QImageIOHandler) Option(option QImageIOHandler__ImageOption) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QImageIOHandler_Option(ptr.Pointer(), C.longlong(option)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QImageIOHandler) OptionDefault(option QImageIOHandler__ImageOption) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QImageIOHandler_OptionDefault(ptr.Pointer(), C.longlong(option)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQImageIOHandler_Read
func callbackQImageIOHandler_Read(ptr unsafe.Pointer, image unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::read"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QImage) bool)(NewQImageFromPointer(image)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QImageIOHandler) ConnectRead(f func(image *QImage) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::read", f)
	}
}

func (ptr *QImageIOHandler) DisconnectRead(image QImage_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::read")
	}
}

func (ptr *QImageIOHandler) Read(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_Read(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageIOHandler) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

func (ptr *QImageIOHandler) SetFormat2(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetFormat2(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

//export callbackQImageIOHandler_SetOption
func callbackQImageIOHandler_SetOption(ptr unsafe.Pointer, option C.longlong, value unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::setOption"); signal != nil {
		signal.(func(QImageIOHandler__ImageOption, *core.QVariant))(QImageIOHandler__ImageOption(option), core.NewQVariantFromPointer(value))
	} else {
		NewQImageIOHandlerFromPointer(ptr).SetOptionDefault(QImageIOHandler__ImageOption(option), core.NewQVariantFromPointer(value))
	}
}

func (ptr *QImageIOHandler) ConnectSetOption(f func(option QImageIOHandler__ImageOption, value *core.QVariant)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::setOption", f)
	}
}

func (ptr *QImageIOHandler) DisconnectSetOption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::setOption")
	}
}

func (ptr *QImageIOHandler) SetOption(option QImageIOHandler__ImageOption, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetOption(ptr.Pointer(), C.longlong(option), core.PointerFromQVariant(value))
	}
}

func (ptr *QImageIOHandler) SetOptionDefault(option QImageIOHandler__ImageOption, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_SetOptionDefault(ptr.Pointer(), C.longlong(option), core.PointerFromQVariant(value))
	}
}

//export callbackQImageIOHandler_SupportsOption
func callbackQImageIOHandler_SupportsOption(ptr unsafe.Pointer, option C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::supportsOption"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QImageIOHandler__ImageOption) bool)(QImageIOHandler__ImageOption(option)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).SupportsOptionDefault(QImageIOHandler__ImageOption(option)))))
}

func (ptr *QImageIOHandler) ConnectSupportsOption(f func(option QImageIOHandler__ImageOption) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::supportsOption", f)
	}
}

func (ptr *QImageIOHandler) DisconnectSupportsOption() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::supportsOption")
	}
}

func (ptr *QImageIOHandler) SupportsOption(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_SupportsOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) SupportsOptionDefault(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_SupportsOptionDefault(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

//export callbackQImageIOHandler_Write
func callbackQImageIOHandler_Write(ptr unsafe.Pointer, image unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::write"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QImage) bool)(NewQImageFromPointer(image)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOHandlerFromPointer(ptr).WriteDefault(NewQImageFromPointer(image)))))
}

func (ptr *QImageIOHandler) ConnectWrite(f func(image *QImage) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::write", f)
	}
}

func (ptr *QImageIOHandler) DisconnectWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::write")
	}
}

func (ptr *QImageIOHandler) Write(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_Write(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageIOHandler) WriteDefault(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOHandler_WriteDefault(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

//export callbackQImageIOHandler_DestroyQImageIOHandler
func callbackQImageIOHandler_DestroyQImageIOHandler(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOHandler::~QImageIOHandler"); signal != nil {
		signal.(func())()
	} else {
		NewQImageIOHandlerFromPointer(ptr).DestroyQImageIOHandlerDefault()
	}
}

func (ptr *QImageIOHandler) ConnectDestroyQImageIOHandler(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::~QImageIOHandler", f)
	}
}

func (ptr *QImageIOHandler) DisconnectDestroyQImageIOHandler() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOHandler::~QImageIOHandler")
	}
}

func (ptr *QImageIOHandler) DestroyQImageIOHandler() {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_DestroyQImageIOHandler(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageIOHandler) DestroyQImageIOHandlerDefault() {
	if ptr.Pointer() != nil {
		C.QImageIOHandler_DestroyQImageIOHandlerDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//QImageIOPlugin::Capability
type QImageIOPlugin__Capability int64

const (
	QImageIOPlugin__CanRead            = QImageIOPlugin__Capability(0x1)
	QImageIOPlugin__CanWrite           = QImageIOPlugin__Capability(0x2)
	QImageIOPlugin__CanReadIncremental = QImageIOPlugin__Capability(0x4)
)

type QImageIOPlugin struct {
	core.QObject
}

type QImageIOPlugin_ITF interface {
	core.QObject_ITF
	QImageIOPlugin_PTR() *QImageIOPlugin
}

func (p *QImageIOPlugin) QImageIOPlugin_PTR() *QImageIOPlugin {
	return p
}

func (p *QImageIOPlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QImageIOPlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQImageIOPlugin(ptr QImageIOPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageIOPlugin_PTR().Pointer()
	}
	return nil
}

func NewQImageIOPluginFromPointer(ptr unsafe.Pointer) *QImageIOPlugin {
	var n = new(QImageIOPlugin)
	n.SetPointer(ptr)
	return n
}
func NewQImageIOPlugin(parent core.QObject_ITF) *QImageIOPlugin {
	var tmpValue = NewQImageIOPluginFromPointer(C.QImageIOPlugin_NewQImageIOPlugin(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQImageIOPlugin_Capabilities
func callbackQImageIOPlugin_Capabilities(ptr unsafe.Pointer, device unsafe.Pointer, format unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::capabilities"); signal != nil {
		return C.longlong(signal.(func(*core.QIODevice, *core.QByteArray) QImageIOPlugin__Capability)(core.NewQIODeviceFromPointer(device), core.NewQByteArrayFromPointer(format)))
	}

	return C.longlong(0)
}

func (ptr *QImageIOPlugin) ConnectCapabilities(f func(device *core.QIODevice, format *core.QByteArray) QImageIOPlugin__Capability) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::capabilities", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectCapabilities(device core.QIODevice_ITF, format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::capabilities")
	}
}

func (ptr *QImageIOPlugin) Capabilities(device core.QIODevice_ITF, format core.QByteArray_ITF) QImageIOPlugin__Capability {
	if ptr.Pointer() != nil {
		return QImageIOPlugin__Capability(C.QImageIOPlugin_Capabilities(ptr.Pointer(), core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	}
	return 0
}

//export callbackQImageIOPlugin_Create
func callbackQImageIOPlugin_Create(ptr unsafe.Pointer, device unsafe.Pointer, format unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::create"); signal != nil {
		return PointerFromQImageIOHandler(signal.(func(*core.QIODevice, *core.QByteArray) *QImageIOHandler)(core.NewQIODeviceFromPointer(device), core.NewQByteArrayFromPointer(format)))
	}

	return PointerFromQImageIOHandler(nil)
}

func (ptr *QImageIOPlugin) ConnectCreate(f func(device *core.QIODevice, format *core.QByteArray) *QImageIOHandler) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::create", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectCreate(device core.QIODevice_ITF, format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::create")
	}
}

func (ptr *QImageIOPlugin) Create(device core.QIODevice_ITF, format core.QByteArray_ITF) *QImageIOHandler {
	if ptr.Pointer() != nil {
		return NewQImageIOHandlerFromPointer(C.QImageIOPlugin_Create(ptr.Pointer(), core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	}
	return nil
}

//export callbackQImageIOPlugin_DestroyQImageIOPlugin
func callbackQImageIOPlugin_DestroyQImageIOPlugin(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::~QImageIOPlugin"); signal != nil {
		signal.(func())()
	} else {
		NewQImageIOPluginFromPointer(ptr).DestroyQImageIOPluginDefault()
	}
}

func (ptr *QImageIOPlugin) ConnectDestroyQImageIOPlugin(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::~QImageIOPlugin", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectDestroyQImageIOPlugin() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::~QImageIOPlugin")
	}
}

func (ptr *QImageIOPlugin) DestroyQImageIOPlugin() {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DestroyQImageIOPlugin(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageIOPlugin) DestroyQImageIOPluginDefault() {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DestroyQImageIOPluginDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQImageIOPlugin_TimerEvent
func callbackQImageIOPlugin_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::timerEvent", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::timerEvent")
	}
}

func (ptr *QImageIOPlugin) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QImageIOPlugin) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQImageIOPlugin_ChildEvent
func callbackQImageIOPlugin_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::childEvent", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::childEvent")
	}
}

func (ptr *QImageIOPlugin) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QImageIOPlugin) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQImageIOPlugin_ConnectNotify
func callbackQImageIOPlugin_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageIOPluginFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageIOPlugin) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::connectNotify", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::connectNotify")
	}
}

func (ptr *QImageIOPlugin) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QImageIOPlugin) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageIOPlugin_CustomEvent
func callbackQImageIOPlugin_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQImageIOPluginFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QImageIOPlugin) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::customEvent", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::customEvent")
	}
}

func (ptr *QImageIOPlugin) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QImageIOPlugin) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQImageIOPlugin_DeleteLater
func callbackQImageIOPlugin_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQImageIOPluginFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QImageIOPlugin) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::deleteLater", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::deleteLater")
	}
}

func (ptr *QImageIOPlugin) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageIOPlugin) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQImageIOPlugin_DisconnectNotify
func callbackQImageIOPlugin_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQImageIOPluginFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QImageIOPlugin) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::disconnectNotify", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::disconnectNotify")
	}
}

func (ptr *QImageIOPlugin) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QImageIOPlugin) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QImageIOPlugin_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQImageIOPlugin_Event
func callbackQImageIOPlugin_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOPluginFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QImageIOPlugin) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::event", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::event")
	}
}

func (ptr *QImageIOPlugin) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QImageIOPlugin) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQImageIOPlugin_EventFilter
func callbackQImageIOPlugin_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQImageIOPluginFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QImageIOPlugin) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::eventFilter", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::eventFilter")
	}
}

func (ptr *QImageIOPlugin) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QImageIOPlugin) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageIOPlugin_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQImageIOPlugin_MetaObject
func callbackQImageIOPlugin_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QImageIOPlugin::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQImageIOPluginFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QImageIOPlugin) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::metaObject", f)
	}
}

func (ptr *QImageIOPlugin) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QImageIOPlugin::metaObject")
	}
}

func (ptr *QImageIOPlugin) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QImageIOPlugin_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageIOPlugin) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QImageIOPlugin_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QImageReader::ImageReaderError
type QImageReader__ImageReaderError int64

const (
	QImageReader__UnknownError           = QImageReader__ImageReaderError(0)
	QImageReader__FileNotFoundError      = QImageReader__ImageReaderError(1)
	QImageReader__DeviceError            = QImageReader__ImageReaderError(2)
	QImageReader__UnsupportedFormatError = QImageReader__ImageReaderError(3)
	QImageReader__InvalidDataError       = QImageReader__ImageReaderError(4)
)

type QImageReader struct {
	ptr unsafe.Pointer
}

type QImageReader_ITF interface {
	QImageReader_PTR() *QImageReader
}

func (p *QImageReader) QImageReader_PTR() *QImageReader {
	return p
}

func (p *QImageReader) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QImageReader) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQImageReader(ptr QImageReader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageReader_PTR().Pointer()
	}
	return nil
}

func NewQImageReaderFromPointer(ptr unsafe.Pointer) *QImageReader {
	var n = new(QImageReader)
	n.SetPointer(ptr)
	return n
}
func NewQImageReader() *QImageReader {
	var tmpValue = NewQImageReaderFromPointer(C.QImageReader_NewQImageReader())
	runtime.SetFinalizer(tmpValue, (*QImageReader).DestroyQImageReader)
	return tmpValue
}

func NewQImageReader2(device core.QIODevice_ITF, format core.QByteArray_ITF) *QImageReader {
	var tmpValue = NewQImageReaderFromPointer(C.QImageReader_NewQImageReader2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageReader).DestroyQImageReader)
	return tmpValue
}

func NewQImageReader3(fileName string, format core.QByteArray_ITF) *QImageReader {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQImageReaderFromPointer(C.QImageReader_NewQImageReader3(fileNameC, core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageReader).DestroyQImageReader)
	return tmpValue
}

func (ptr *QImageReader) AutoDetectImageFormat() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_AutoDetectImageFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) AutoTransform() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_AutoTransform(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) BackgroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QImageReader_BackgroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) CanRead() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_CanRead(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) ClipRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageReader_ClipRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) CurrentImageNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_CurrentImageNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) CurrentImageRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageReader_CurrentImageRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) DecideFormatFromContent() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_DecideFormatFromContent(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QImageReader_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) Error() QImageReader__ImageReaderError {
	if ptr.Pointer() != nil {
		return QImageReader__ImageReaderError(C.QImageReader_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageReader_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageReader_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageReader) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) Gamma() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QImageReader_Gamma(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) ImageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_ImageCount(ptr.Pointer())))
	}
	return 0
}

func QImageReader_ImageFormat3(device core.QIODevice_ITF) *core.QByteArray {
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat3(core.PointerFromQIODevice(device)))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QImageReader) ImageFormat3(device core.QIODevice_ITF) *core.QByteArray {
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat3(core.PointerFromQIODevice(device)))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func QImageReader_ImageFormat2(fileName string) *core.QByteArray {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat2(fileNameC))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QImageReader) ImageFormat2(fileName string) *core.QByteArray {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_QImageReader_ImageFormat2(fileNameC))
	runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QImageReader) ImageFormat() QImage__Format {
	if ptr.Pointer() != nil {
		return QImage__Format(C.QImageReader_ImageFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) JumpToImage(imageNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_JumpToImage(ptr.Pointer(), C.int(int32(imageNumber))) != 0
	}
	return false
}

func (ptr *QImageReader) JumpToNextImage() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_JumpToNextImage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_LoopCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) NextImageDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_NextImageDelay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) Quality() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageReader_Quality(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageReader) Read() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QImageReader_Read(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) Read2(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_Read2(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageReader) ScaledClipRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QImageReader_ScaledClipRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) ScaledSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QImageReader_ScaledSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) SetAutoDetectImageFormat(enabled bool) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetAutoDetectImageFormat(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QImageReader) SetAutoTransform(enabled bool) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetAutoTransform(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QImageReader) SetBackgroundColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetBackgroundColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QImageReader) SetClipRect(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetClipRect(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QImageReader) SetDecideFormatFromContent(ignored bool) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetDecideFormatFromContent(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ignored))))
	}
}

func (ptr *QImageReader) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageReader) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QImageReader_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QImageReader) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

func (ptr *QImageReader) SetGamma(gamma float32) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetGamma(ptr.Pointer(), C.float(gamma))
	}
}

func (ptr *QImageReader) SetQuality(quality int) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetQuality(ptr.Pointer(), C.int(int32(quality)))
	}
}

func (ptr *QImageReader) SetScaledClipRect(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetScaledClipRect(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QImageReader) SetScaledSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QImageReader_SetScaledSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QImageReader) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QImageReader_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) SubType() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_SubType(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func QImageReader_SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedImageFormats())
}

func (ptr *QImageReader) SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedImageFormats())
}

func QImageReader_SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedMimeTypes())
}

func (ptr *QImageReader) SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageReaderFromPointer(l.data).supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageReader_QImageReader_SupportedMimeTypes())
}

func (ptr *QImageReader) SupportedSubTypes() []*core.QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
			var out = make([]*core.QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQImageReaderFromPointer(l.data).supportedSubTypes_atList(i)
			}
			return out
		}(C.QImageReader_SupportedSubTypes(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageReader) SupportsAnimation() bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_SupportsAnimation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageReader) SupportsOption(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageReader_SupportsOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QImageReader) Text(key string) string {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return cGoUnpackString(C.QImageReader_Text(ptr.Pointer(), keyC))
	}
	return ""
}

func (ptr *QImageReader) TextKeys() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QImageReader_TextKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QImageReader) Transformation() QImageIOHandler__Transformation {
	if ptr.Pointer() != nil {
		return QImageIOHandler__Transformation(C.QImageReader_Transformation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageReader) DestroyQImageReader() {
	if ptr.Pointer() != nil {
		C.QImageReader_DestroyQImageReader(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageReader) supportedImageFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_supportedImageFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) supportedMimeTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_supportedMimeTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageReader) supportedSubTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageReader_supportedSubTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//QImageWriter::ImageWriterError
type QImageWriter__ImageWriterError int64

const (
	QImageWriter__UnknownError           = QImageWriter__ImageWriterError(0)
	QImageWriter__DeviceError            = QImageWriter__ImageWriterError(1)
	QImageWriter__UnsupportedFormatError = QImageWriter__ImageWriterError(2)
)

type QImageWriter struct {
	ptr unsafe.Pointer
}

type QImageWriter_ITF interface {
	QImageWriter_PTR() *QImageWriter
}

func (p *QImageWriter) QImageWriter_PTR() *QImageWriter {
	return p
}

func (p *QImageWriter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QImageWriter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQImageWriter(ptr QImageWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QImageWriter_PTR().Pointer()
	}
	return nil
}

func NewQImageWriterFromPointer(ptr unsafe.Pointer) *QImageWriter {
	var n = new(QImageWriter)
	n.SetPointer(ptr)
	return n
}
func NewQImageWriter() *QImageWriter {
	var tmpValue = NewQImageWriterFromPointer(C.QImageWriter_NewQImageWriter())
	runtime.SetFinalizer(tmpValue, (*QImageWriter).DestroyQImageWriter)
	return tmpValue
}

func NewQImageWriter2(device core.QIODevice_ITF, format core.QByteArray_ITF) *QImageWriter {
	var tmpValue = NewQImageWriterFromPointer(C.QImageWriter_NewQImageWriter2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageWriter).DestroyQImageWriter)
	return tmpValue
}

func NewQImageWriter3(fileName string, format core.QByteArray_ITF) *QImageWriter {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQImageWriterFromPointer(C.QImageWriter_NewQImageWriter3(fileNameC, core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QImageWriter).DestroyQImageWriter)
	return tmpValue
}

func (ptr *QImageWriter) CanWrite() bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_CanWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) Compression() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageWriter_Compression(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageWriter) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QImageWriter_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) Error() QImageWriter__ImageWriterError {
	if ptr.Pointer() != nil {
		return QImageWriter__ImageWriterError(C.QImageWriter_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageWriter_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QImageWriter_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QImageWriter) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) Gamma() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QImageWriter_Gamma(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) OptimizedWrite() bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_OptimizedWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) ProgressiveScanWrite() bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_ProgressiveScanWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QImageWriter) Quality() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QImageWriter_Quality(ptr.Pointer())))
	}
	return 0
}

func (ptr *QImageWriter) SetCompression(compression int) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetCompression(ptr.Pointer(), C.int(int32(compression)))
	}
}

func (ptr *QImageWriter) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QImageWriter) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QImageWriter_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QImageWriter) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

func (ptr *QImageWriter) SetGamma(gamma float32) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetGamma(ptr.Pointer(), C.float(gamma))
	}
}

func (ptr *QImageWriter) SetOptimizedWrite(optimize bool) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetOptimizedWrite(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(optimize))))
	}
}

func (ptr *QImageWriter) SetProgressiveScanWrite(progressive bool) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetProgressiveScanWrite(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(progressive))))
	}
}

func (ptr *QImageWriter) SetQuality(quality int) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetQuality(ptr.Pointer(), C.int(int32(quality)))
	}
}

func (ptr *QImageWriter) SetSubType(ty core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetSubType(ptr.Pointer(), core.PointerFromQByteArray(ty))
	}
}

func (ptr *QImageWriter) SetText(key string, text string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QImageWriter_SetText(ptr.Pointer(), keyC, textC)
	}
}

func (ptr *QImageWriter) SetTransformation(transform QImageIOHandler__Transformation) {
	if ptr.Pointer() != nil {
		C.QImageWriter_SetTransformation(ptr.Pointer(), C.longlong(transform))
	}
}

func (ptr *QImageWriter) SubType() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter_SubType(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func QImageWriter_SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedImageFormats())
}

func (ptr *QImageWriter) SupportedImageFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).supportedImageFormats_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedImageFormats())
}

func QImageWriter_SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedMimeTypes())
}

func (ptr *QImageWriter) SupportedMimeTypes() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQImageWriterFromPointer(l.data).supportedMimeTypes_atList(i)
		}
		return out
	}(C.QImageWriter_QImageWriter_SupportedMimeTypes())
}

func (ptr *QImageWriter) SupportedSubTypes() []*core.QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
			var out = make([]*core.QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQImageWriterFromPointer(l.data).supportedSubTypes_atList(i)
			}
			return out
		}(C.QImageWriter_SupportedSubTypes(ptr.Pointer()))
	}
	return nil
}

func (ptr *QImageWriter) SupportsOption(option QImageIOHandler__ImageOption) bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_SupportsOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QImageWriter) Transformation() QImageIOHandler__Transformation {
	if ptr.Pointer() != nil {
		return QImageIOHandler__Transformation(C.QImageWriter_Transformation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QImageWriter) Write(image QImage_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QImageWriter_Write(ptr.Pointer(), PointerFromQImage(image)) != 0
	}
	return false
}

func (ptr *QImageWriter) DestroyQImageWriter() {
	if ptr.Pointer() != nil {
		C.QImageWriter_DestroyQImageWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QImageWriter) supportedImageFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter_supportedImageFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) supportedMimeTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter_supportedMimeTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QImageWriter) supportedSubTypes_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QImageWriter_supportedSubTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

type QInputEvent struct {
	core.QEvent
}

type QInputEvent_ITF interface {
	core.QEvent_ITF
	QInputEvent_PTR() *QInputEvent
}

func (p *QInputEvent) QInputEvent_PTR() *QInputEvent {
	return p
}

func (p *QInputEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QInputEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputEvent(ptr QInputEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputEventFromPointer(ptr unsafe.Pointer) *QInputEvent {
	var n = new(QInputEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QInputEvent) DestroyQInputEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QInputEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QInputEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputEvent) Timestamp() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QInputEvent_Timestamp(ptr.Pointer())))
	}
	return 0
}

func (ptr *QInputEvent) ModState() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QInputEvent_ModState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputEvent) SetModState(vqt core.Qt__KeyboardModifier) {
	if ptr.Pointer() != nil {
		C.QInputEvent_SetModState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QInputEvent) Ts() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QInputEvent_Ts(ptr.Pointer())))
	}
	return 0
}

func (ptr *QInputEvent) SetTs(vul uint) {
	if ptr.Pointer() != nil {
		C.QInputEvent_SetTs(ptr.Pointer(), C.ulong(uint32(vul)))
	}
}

//QInputMethod::Action
type QInputMethod__Action int64

const (
	QInputMethod__Click       = QInputMethod__Action(0)
	QInputMethod__ContextMenu = QInputMethod__Action(1)
)

type QInputMethod struct {
	core.QObject
}

type QInputMethod_ITF interface {
	core.QObject_ITF
	QInputMethod_PTR() *QInputMethod
}

func (p *QInputMethod) QInputMethod_PTR() *QInputMethod {
	return p
}

func (p *QInputMethod) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QInputMethod) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputMethod(ptr QInputMethod_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethod_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodFromPointer(ptr unsafe.Pointer) *QInputMethod {
	var n = new(QInputMethod)
	n.SetPointer(ptr)
	return n
}

func (ptr *QInputMethod) DestroyQInputMethod() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QInputMethod) AnchorRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_AnchorRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) CursorRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_CursorRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) InputDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QInputMethod_InputDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputMethod) InputItemClipRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_InputItemClipRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) IsAnimating() bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_IsAnimating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QInputMethod) IsVisible() bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QInputMethod) KeyboardRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_KeyboardRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) Locale() *core.QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLocaleFromPointer(C.QInputMethod_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

//export callbackQInputMethod_AnchorRectangleChanged
func callbackQInputMethod_AnchorRectangleChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::anchorRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectAnchorRectangleChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectAnchorRectangleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::anchorRectangleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectAnchorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectAnchorRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::anchorRectangleChanged")
	}
}

func (ptr *QInputMethod) AnchorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_AnchorRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_AnimatingChanged
func callbackQInputMethod_AnimatingChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::animatingChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectAnimatingChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectAnimatingChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::animatingChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectAnimatingChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectAnimatingChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::animatingChanged")
	}
}

func (ptr *QInputMethod) AnimatingChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_AnimatingChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_Commit
func callbackQInputMethod_Commit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::commit"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectCommit(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::commit", f)
	}
}

func (ptr *QInputMethod) DisconnectCommit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::commit")
	}
}

func (ptr *QInputMethod) Commit() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Commit(ptr.Pointer())
	}
}

//export callbackQInputMethod_CursorRectangleChanged
func callbackQInputMethod_CursorRectangleChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::cursorRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectCursorRectangleChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectCursorRectangleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::cursorRectangleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectCursorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectCursorRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::cursorRectangleChanged")
	}
}

func (ptr *QInputMethod) CursorRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_CursorRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_Hide
func callbackQInputMethod_Hide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::hide"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectHide(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::hide", f)
	}
}

func (ptr *QInputMethod) DisconnectHide() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::hide")
	}
}

func (ptr *QInputMethod) Hide() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Hide(ptr.Pointer())
	}
}

//export callbackQInputMethod_InputDirectionChanged
func callbackQInputMethod_InputDirectionChanged(ptr unsafe.Pointer, newDirection C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::inputDirectionChanged"); signal != nil {
		signal.(func(core.Qt__LayoutDirection))(core.Qt__LayoutDirection(newDirection))
	}

}

func (ptr *QInputMethod) ConnectInputDirectionChanged(f func(newDirection core.Qt__LayoutDirection)) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectInputDirectionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::inputDirectionChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectInputDirectionChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectInputDirectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::inputDirectionChanged")
	}
}

func (ptr *QInputMethod) InputDirectionChanged(newDirection core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QInputMethod_InputDirectionChanged(ptr.Pointer(), C.longlong(newDirection))
	}
}

//export callbackQInputMethod_InputItemClipRectangleChanged
func callbackQInputMethod_InputItemClipRectangleChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::inputItemClipRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectInputItemClipRectangleChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectInputItemClipRectangleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::inputItemClipRectangleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectInputItemClipRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectInputItemClipRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::inputItemClipRectangleChanged")
	}
}

func (ptr *QInputMethod) InputItemClipRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_InputItemClipRectangleChanged(ptr.Pointer())
	}
}

func (ptr *QInputMethod) InputItemRectangle() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QInputMethod_InputItemRectangle(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QInputMethod) InputItemTransform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QInputMethod_InputItemTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

//export callbackQInputMethod_InvokeAction
func callbackQInputMethod_InvokeAction(ptr unsafe.Pointer, a C.longlong, cursorPosition C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::invokeAction"); signal != nil {
		signal.(func(QInputMethod__Action, int))(QInputMethod__Action(a), int(int32(cursorPosition)))
	}

}

func (ptr *QInputMethod) ConnectInvokeAction(f func(a QInputMethod__Action, cursorPosition int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::invokeAction", f)
	}
}

func (ptr *QInputMethod) DisconnectInvokeAction(a QInputMethod__Action, cursorPosition int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::invokeAction")
	}
}

func (ptr *QInputMethod) InvokeAction(a QInputMethod__Action, cursorPosition int) {
	if ptr.Pointer() != nil {
		C.QInputMethod_InvokeAction(ptr.Pointer(), C.longlong(a), C.int(int32(cursorPosition)))
	}
}

//export callbackQInputMethod_KeyboardRectangleChanged
func callbackQInputMethod_KeyboardRectangleChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::keyboardRectangleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectKeyboardRectangleChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectKeyboardRectangleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::keyboardRectangleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectKeyboardRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectKeyboardRectangleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::keyboardRectangleChanged")
	}
}

func (ptr *QInputMethod) KeyboardRectangleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_KeyboardRectangleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_LocaleChanged
func callbackQInputMethod_LocaleChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::localeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectLocaleChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectLocaleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::localeChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectLocaleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectLocaleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::localeChanged")
	}
}

func (ptr *QInputMethod) LocaleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_LocaleChanged(ptr.Pointer())
	}
}

func QInputMethod_QueryFocusObject(query core.Qt__InputMethodQuery, argument core.QVariant_ITF) *core.QVariant {
	var tmpValue = core.NewQVariantFromPointer(C.QInputMethod_QInputMethod_QueryFocusObject(C.longlong(query), core.PointerFromQVariant(argument)))
	runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
	return tmpValue
}

func (ptr *QInputMethod) QueryFocusObject(query core.Qt__InputMethodQuery, argument core.QVariant_ITF) *core.QVariant {
	var tmpValue = core.NewQVariantFromPointer(C.QInputMethod_QInputMethod_QueryFocusObject(C.longlong(query), core.PointerFromQVariant(argument)))
	runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
	return tmpValue
}

//export callbackQInputMethod_Reset
func callbackQInputMethod_Reset(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::reset"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectReset(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::reset", f)
	}
}

func (ptr *QInputMethod) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::reset")
	}
}

func (ptr *QInputMethod) Reset() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Reset(ptr.Pointer())
	}
}

func (ptr *QInputMethod) SetInputItemRectangle(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_SetInputItemRectangle(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QInputMethod) SetInputItemTransform(transform QTransform_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_SetInputItemTransform(ptr.Pointer(), PointerFromQTransform(transform))
	}
}

func (ptr *QInputMethod) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QInputMethod_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQInputMethod_Show
func callbackQInputMethod_Show(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::show"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectShow(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::show", f)
	}
}

func (ptr *QInputMethod) DisconnectShow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::show")
	}
}

func (ptr *QInputMethod) Show() {
	if ptr.Pointer() != nil {
		C.QInputMethod_Show(ptr.Pointer())
	}
}

//export callbackQInputMethod_Update
func callbackQInputMethod_Update(ptr unsafe.Pointer, queries C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::update"); signal != nil {
		signal.(func(core.Qt__InputMethodQuery))(core.Qt__InputMethodQuery(queries))
	}

}

func (ptr *QInputMethod) ConnectUpdate(f func(queries core.Qt__InputMethodQuery)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::update", f)
	}
}

func (ptr *QInputMethod) DisconnectUpdate(queries core.Qt__InputMethodQuery) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::update")
	}
}

func (ptr *QInputMethod) Update(queries core.Qt__InputMethodQuery) {
	if ptr.Pointer() != nil {
		C.QInputMethod_Update(ptr.Pointer(), C.longlong(queries))
	}
}

//export callbackQInputMethod_VisibleChanged
func callbackQInputMethod_VisibleChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::visibleChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QInputMethod) ConnectVisibleChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectVisibleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::visibleChanged", f)
	}
}

func (ptr *QInputMethod) DisconnectVisibleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectVisibleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::visibleChanged")
	}
}

func (ptr *QInputMethod) VisibleChanged() {
	if ptr.Pointer() != nil {
		C.QInputMethod_VisibleChanged(ptr.Pointer())
	}
}

//export callbackQInputMethod_TimerEvent
func callbackQInputMethod_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QInputMethod) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::timerEvent", f)
	}
}

func (ptr *QInputMethod) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::timerEvent")
	}
}

func (ptr *QInputMethod) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QInputMethod) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQInputMethod_ChildEvent
func callbackQInputMethod_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QInputMethod) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::childEvent", f)
	}
}

func (ptr *QInputMethod) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::childEvent")
	}
}

func (ptr *QInputMethod) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QInputMethod) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQInputMethod_ConnectNotify
func callbackQInputMethod_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQInputMethodFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QInputMethod) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::connectNotify", f)
	}
}

func (ptr *QInputMethod) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::connectNotify")
	}
}

func (ptr *QInputMethod) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QInputMethod) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQInputMethod_CustomEvent
func callbackQInputMethod_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQInputMethodFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QInputMethod) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::customEvent", f)
	}
}

func (ptr *QInputMethod) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::customEvent")
	}
}

func (ptr *QInputMethod) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QInputMethod) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQInputMethod_DeleteLater
func callbackQInputMethod_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQInputMethodFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QInputMethod) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::deleteLater", f)
	}
}

func (ptr *QInputMethod) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::deleteLater")
	}
}

func (ptr *QInputMethod) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QInputMethod) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QInputMethod_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQInputMethod_DisconnectNotify
func callbackQInputMethod_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQInputMethodFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QInputMethod) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::disconnectNotify", f)
	}
}

func (ptr *QInputMethod) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::disconnectNotify")
	}
}

func (ptr *QInputMethod) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QInputMethod) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethod_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQInputMethod_Event
func callbackQInputMethod_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQInputMethodFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QInputMethod) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::event", f)
	}
}

func (ptr *QInputMethod) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::event")
	}
}

func (ptr *QInputMethod) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QInputMethod) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQInputMethod_EventFilter
func callbackQInputMethod_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQInputMethodFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QInputMethod) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::eventFilter", f)
	}
}

func (ptr *QInputMethod) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::eventFilter")
	}
}

func (ptr *QInputMethod) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QInputMethod) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QInputMethod_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQInputMethod_MetaObject
func callbackQInputMethod_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QInputMethod::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQInputMethodFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QInputMethod) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::metaObject", f)
	}
}

func (ptr *QInputMethod) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QInputMethod::metaObject")
	}
}

func (ptr *QInputMethod) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QInputMethod_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QInputMethod) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QInputMethod_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QInputMethodEvent::AttributeType
type QInputMethodEvent__AttributeType int64

const (
	QInputMethodEvent__TextFormat = QInputMethodEvent__AttributeType(0)
	QInputMethodEvent__Cursor     = QInputMethodEvent__AttributeType(1)
	QInputMethodEvent__Language   = QInputMethodEvent__AttributeType(2)
	QInputMethodEvent__Ruby       = QInputMethodEvent__AttributeType(3)
	QInputMethodEvent__Selection  = QInputMethodEvent__AttributeType(4)
)

type QInputMethodEvent struct {
	core.QEvent
}

type QInputMethodEvent_ITF interface {
	core.QEvent_ITF
	QInputMethodEvent_PTR() *QInputMethodEvent
}

func (p *QInputMethodEvent) QInputMethodEvent_PTR() *QInputMethodEvent {
	return p
}

func (p *QInputMethodEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QInputMethodEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputMethodEvent(ptr QInputMethodEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethodEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodEventFromPointer(ptr unsafe.Pointer) *QInputMethodEvent {
	var n = new(QInputMethodEvent)
	n.SetPointer(ptr)
	return n
}
func (ptr *QInputMethodEvent) DestroyQInputMethodEvent() {
	if ptr.Pointer() != nil {
		C.QInputMethodEvent_DestroyQInputMethodEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQInputMethodEvent() *QInputMethodEvent {
	var tmpValue = NewQInputMethodEventFromPointer(C.QInputMethodEvent_NewQInputMethodEvent())
	runtime.SetFinalizer(tmpValue, (*QInputMethodEvent).DestroyQInputMethodEvent)
	return tmpValue
}

func NewQInputMethodEvent3(other QInputMethodEvent_ITF) *QInputMethodEvent {
	var tmpValue = NewQInputMethodEventFromPointer(C.QInputMethodEvent_NewQInputMethodEvent3(PointerFromQInputMethodEvent(other)))
	runtime.SetFinalizer(tmpValue, (*QInputMethodEvent).DestroyQInputMethodEvent)
	return tmpValue
}

func (ptr *QInputMethodEvent) CommitString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QInputMethodEvent_CommitString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QInputMethodEvent) PreeditString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QInputMethodEvent_PreeditString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QInputMethodEvent) ReplacementLength() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QInputMethodEvent_ReplacementLength(ptr.Pointer())))
	}
	return 0
}

func (ptr *QInputMethodEvent) ReplacementStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QInputMethodEvent_ReplacementStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QInputMethodEvent) SetCommitString(commitString string, replaceFrom int, replaceLength int) {
	if ptr.Pointer() != nil {
		var commitStringC = C.CString(commitString)
		defer C.free(unsafe.Pointer(commitStringC))
		C.QInputMethodEvent_SetCommitString(ptr.Pointer(), commitStringC, C.int(int32(replaceFrom)), C.int(int32(replaceLength)))
	}
}

type QInputMethodQueryEvent struct {
	core.QEvent
}

type QInputMethodQueryEvent_ITF interface {
	core.QEvent_ITF
	QInputMethodQueryEvent_PTR() *QInputMethodQueryEvent
}

func (p *QInputMethodQueryEvent) QInputMethodQueryEvent_PTR() *QInputMethodQueryEvent {
	return p
}

func (p *QInputMethodQueryEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QInputMethodQueryEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQInputMethodQueryEvent(ptr QInputMethodQueryEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QInputMethodQueryEvent_PTR().Pointer()
	}
	return nil
}

func NewQInputMethodQueryEventFromPointer(ptr unsafe.Pointer) *QInputMethodQueryEvent {
	var n = new(QInputMethodQueryEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QInputMethodQueryEvent) DestroyQInputMethodQueryEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQInputMethodQueryEvent(queries core.Qt__InputMethodQuery) *QInputMethodQueryEvent {
	var tmpValue = NewQInputMethodQueryEventFromPointer(C.QInputMethodQueryEvent_NewQInputMethodQueryEvent(C.longlong(queries)))
	runtime.SetFinalizer(tmpValue, (*QInputMethodQueryEvent).DestroyQInputMethodQueryEvent)
	return tmpValue
}

func (ptr *QInputMethodQueryEvent) Queries() core.Qt__InputMethodQuery {
	if ptr.Pointer() != nil {
		return core.Qt__InputMethodQuery(C.QInputMethodQueryEvent_Queries(ptr.Pointer()))
	}
	return 0
}

func (ptr *QInputMethodQueryEvent) SetValue(query core.Qt__InputMethodQuery, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QInputMethodQueryEvent_SetValue(ptr.Pointer(), C.longlong(query), core.PointerFromQVariant(value))
	}
}

func (ptr *QInputMethodQueryEvent) Value(query core.Qt__InputMethodQuery) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QInputMethodQueryEvent_Value(ptr.Pointer(), C.longlong(query)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

type QIntValidator struct {
	QValidator
}

type QIntValidator_ITF interface {
	QValidator_ITF
	QIntValidator_PTR() *QIntValidator
}

func (p *QIntValidator) QIntValidator_PTR() *QIntValidator {
	return p
}

func (p *QIntValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QIntValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQIntValidator(ptr QIntValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIntValidator_PTR().Pointer()
	}
	return nil
}

func NewQIntValidatorFromPointer(ptr unsafe.Pointer) *QIntValidator {
	var n = new(QIntValidator)
	n.SetPointer(ptr)
	return n
}
func (ptr *QIntValidator) SetBottom(vin int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetBottom(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QIntValidator) SetTop(vin int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetTop(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQIntValidator_Validate
func callbackQIntValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQIntValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QIntValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::validate", f)
	}
}

func (ptr *QIntValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::validate")
	}
}

func (ptr *QIntValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QIntValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QIntValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QIntValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func NewQIntValidator(parent core.QObject_ITF) *QIntValidator {
	var tmpValue = NewQIntValidatorFromPointer(C.QIntValidator_NewQIntValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQIntValidator2(minimum int, maximum int, parent core.QObject_ITF) *QIntValidator {
	var tmpValue = NewQIntValidatorFromPointer(C.QIntValidator_NewQIntValidator2(C.int(int32(minimum)), C.int(int32(maximum)), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QIntValidator) Bottom() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIntValidator_Bottom(ptr.Pointer())))
	}
	return 0
}

//export callbackQIntValidator_Fixup
func callbackQIntValidator_Fixup(ptr unsafe.Pointer, input C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::fixup"); signal != nil {
		signal.(func(string))(cGoUnpackString(input))
	} else {
		NewQIntValidatorFromPointer(ptr).FixupDefault(cGoUnpackString(input))
	}
}

func (ptr *QIntValidator) ConnectFixup(f func(input string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::fixup", f)
	}
}

func (ptr *QIntValidator) DisconnectFixup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::fixup")
	}
}

func (ptr *QIntValidator) Fixup(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QIntValidator_Fixup(ptr.Pointer(), inputC)
	}
}

func (ptr *QIntValidator) FixupDefault(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QIntValidator_FixupDefault(ptr.Pointer(), inputC)
	}
}

//export callbackQIntValidator_SetRange
func callbackQIntValidator_SetRange(ptr unsafe.Pointer, bottom C.int, top C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::setRange"); signal != nil {
		signal.(func(int, int))(int(int32(bottom)), int(int32(top)))
	} else {
		NewQIntValidatorFromPointer(ptr).SetRangeDefault(int(int32(bottom)), int(int32(top)))
	}
}

func (ptr *QIntValidator) ConnectSetRange(f func(bottom int, top int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::setRange", f)
	}
}

func (ptr *QIntValidator) DisconnectSetRange() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::setRange")
	}
}

func (ptr *QIntValidator) SetRange(bottom int, top int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetRange(ptr.Pointer(), C.int(int32(bottom)), C.int(int32(top)))
	}
}

func (ptr *QIntValidator) SetRangeDefault(bottom int, top int) {
	if ptr.Pointer() != nil {
		C.QIntValidator_SetRangeDefault(ptr.Pointer(), C.int(int32(bottom)), C.int(int32(top)))
	}
}

func (ptr *QIntValidator) Top() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIntValidator_Top(ptr.Pointer())))
	}
	return 0
}

func (ptr *QIntValidator) DestroyQIntValidator() {
	if ptr.Pointer() != nil {
		C.QIntValidator_DestroyQIntValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIntValidator_TimerEvent
func callbackQIntValidator_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQIntValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QIntValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::timerEvent", f)
	}
}

func (ptr *QIntValidator) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::timerEvent")
	}
}

func (ptr *QIntValidator) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QIntValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQIntValidator_ChildEvent
func callbackQIntValidator_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQIntValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QIntValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::childEvent", f)
	}
}

func (ptr *QIntValidator) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::childEvent")
	}
}

func (ptr *QIntValidator) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QIntValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQIntValidator_ConnectNotify
func callbackQIntValidator_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIntValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIntValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::connectNotify", f)
	}
}

func (ptr *QIntValidator) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::connectNotify")
	}
}

func (ptr *QIntValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIntValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIntValidator_CustomEvent
func callbackQIntValidator_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQIntValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QIntValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::customEvent", f)
	}
}

func (ptr *QIntValidator) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::customEvent")
	}
}

func (ptr *QIntValidator) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QIntValidator) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQIntValidator_DeleteLater
func callbackQIntValidator_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQIntValidatorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QIntValidator) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::deleteLater", f)
	}
}

func (ptr *QIntValidator) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::deleteLater")
	}
}

func (ptr *QIntValidator) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QIntValidator_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIntValidator) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QIntValidator_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIntValidator_DisconnectNotify
func callbackQIntValidator_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQIntValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIntValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::disconnectNotify", f)
	}
}

func (ptr *QIntValidator) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::disconnectNotify")
	}
}

func (ptr *QIntValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIntValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIntValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQIntValidator_Event
func callbackQIntValidator_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIntValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QIntValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::event", f)
	}
}

func (ptr *QIntValidator) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::event")
	}
}

func (ptr *QIntValidator) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIntValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QIntValidator) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIntValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQIntValidator_EventFilter
func callbackQIntValidator_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIntValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QIntValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::eventFilter", f)
	}
}

func (ptr *QIntValidator) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::eventFilter")
	}
}

func (ptr *QIntValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIntValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QIntValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIntValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQIntValidator_MetaObject
func callbackQIntValidator_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIntValidator::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQIntValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QIntValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::metaObject", f)
	}
}

func (ptr *QIntValidator) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIntValidator::metaObject")
	}
}

func (ptr *QIntValidator) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIntValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QIntValidator) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QIntValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QKeyEvent struct {
	QInputEvent
}

type QKeyEvent_ITF interface {
	QInputEvent_ITF
	QKeyEvent_PTR() *QKeyEvent
}

func (p *QKeyEvent) QKeyEvent_PTR() *QKeyEvent {
	return p
}

func (p *QKeyEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QKeyEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQKeyEvent(ptr QKeyEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QKeyEvent_PTR().Pointer()
	}
	return nil
}

func NewQKeyEventFromPointer(ptr unsafe.Pointer) *QKeyEvent {
	var n = new(QKeyEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QKeyEvent) DestroyQKeyEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QKeyEvent) Matches(key QKeySequence__StandardKey) bool {
	if ptr.Pointer() != nil {
		return C.QKeyEvent_Matches(ptr.Pointer(), C.longlong(key)) != 0
	}
	return false
}

func NewQKeyEvent(ty core.QEvent__Type, key int, modifiers core.Qt__KeyboardModifier, text string, autorep bool, count uint16) *QKeyEvent {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQKeyEventFromPointer(C.QKeyEvent_NewQKeyEvent(C.longlong(ty), C.int(int32(key)), C.longlong(modifiers), textC, C.char(int8(qt.GoBoolToInt(autorep))), C.ushort(count)))
	runtime.SetFinalizer(tmpValue, (*QKeyEvent).DestroyQKeyEvent)
	return tmpValue
}

func NewQKeyEvent2(ty core.QEvent__Type, key int, modifiers core.Qt__KeyboardModifier, nativeScanCode uint, nativeVirtualKey uint, nativeModifiers uint, text string, autorep bool, count uint16) *QKeyEvent {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQKeyEventFromPointer(C.QKeyEvent_NewQKeyEvent2(C.longlong(ty), C.int(int32(key)), C.longlong(modifiers), C.uint(uint32(nativeScanCode)), C.uint(uint32(nativeVirtualKey)), C.uint(uint32(nativeModifiers)), textC, C.char(int8(qt.GoBoolToInt(autorep))), C.ushort(count)))
	runtime.SetFinalizer(tmpValue, (*QKeyEvent).DestroyQKeyEvent)
	return tmpValue
}

func (ptr *QKeyEvent) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeyEvent_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) IsAutoRepeat() bool {
	if ptr.Pointer() != nil {
		return C.QKeyEvent_IsAutoRepeat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QKeyEvent) Key() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeyEvent_Key(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) Modifiers() core.Qt__KeyboardModifier {
	if ptr.Pointer() != nil {
		return core.Qt__KeyboardModifier(C.QKeyEvent_Modifiers(ptr.Pointer()))
	}
	return 0
}

func (ptr *QKeyEvent) NativeModifiers() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NativeModifiers(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) NativeScanCode() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NativeScanCode(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) NativeVirtualKey() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NativeVirtualKey(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QKeyEvent_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QKeyEvent) C() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QKeyEvent_C(ptr.Pointer()))
	}
	return 0
}

func (ptr *QKeyEvent) SetC(vus uint16) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetC(ptr.Pointer(), C.ushort(vus))
	}
}

func (ptr *QKeyEvent) K() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeyEvent_K(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetK(vin int) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetK(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QKeyEvent) NModifiers() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NModifiers(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetNModifiers(vqu uint) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetNModifiers(ptr.Pointer(), C.uint(uint32(vqu)))
	}
}

func (ptr *QKeyEvent) NScanCode() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NScanCode(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetNScanCode(vqu uint) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetNScanCode(ptr.Pointer(), C.uint(uint32(vqu)))
	}
}

func (ptr *QKeyEvent) NVirtualKey() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QKeyEvent_NVirtualKey(ptr.Pointer())))
	}
	return 0
}

func (ptr *QKeyEvent) SetNVirtualKey(vqu uint) {
	if ptr.Pointer() != nil {
		C.QKeyEvent_SetNVirtualKey(ptr.Pointer(), C.uint(uint32(vqu)))
	}
}

func (ptr *QKeyEvent) Txt() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QKeyEvent_Txt(ptr.Pointer()))
	}
	return ""
}

func (ptr *QKeyEvent) SetTxt(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QKeyEvent_SetTxt(ptr.Pointer(), vqsC)
	}
}

//QKeySequence::SequenceFormat
type QKeySequence__SequenceFormat int64

const (
	QKeySequence__NativeText   = QKeySequence__SequenceFormat(0)
	QKeySequence__PortableText = QKeySequence__SequenceFormat(1)
)

//QKeySequence::SequenceMatch
type QKeySequence__SequenceMatch int64

const (
	QKeySequence__NoMatch      = QKeySequence__SequenceMatch(0)
	QKeySequence__PartialMatch = QKeySequence__SequenceMatch(1)
	QKeySequence__ExactMatch   = QKeySequence__SequenceMatch(2)
)

//QKeySequence::StandardKey
type QKeySequence__StandardKey int64

const (
	QKeySequence__UnknownKey               = QKeySequence__StandardKey(0)
	QKeySequence__HelpContents             = QKeySequence__StandardKey(1)
	QKeySequence__WhatsThis                = QKeySequence__StandardKey(2)
	QKeySequence__Open                     = QKeySequence__StandardKey(3)
	QKeySequence__Close                    = QKeySequence__StandardKey(4)
	QKeySequence__Save                     = QKeySequence__StandardKey(5)
	QKeySequence__New                      = QKeySequence__StandardKey(6)
	QKeySequence__Delete                   = QKeySequence__StandardKey(7)
	QKeySequence__Cut                      = QKeySequence__StandardKey(8)
	QKeySequence__Copy                     = QKeySequence__StandardKey(9)
	QKeySequence__Paste                    = QKeySequence__StandardKey(10)
	QKeySequence__Undo                     = QKeySequence__StandardKey(11)
	QKeySequence__Redo                     = QKeySequence__StandardKey(12)
	QKeySequence__Back                     = QKeySequence__StandardKey(13)
	QKeySequence__Forward                  = QKeySequence__StandardKey(14)
	QKeySequence__Refresh                  = QKeySequence__StandardKey(15)
	QKeySequence__ZoomIn                   = QKeySequence__StandardKey(16)
	QKeySequence__ZoomOut                  = QKeySequence__StandardKey(17)
	QKeySequence__Print                    = QKeySequence__StandardKey(18)
	QKeySequence__AddTab                   = QKeySequence__StandardKey(19)
	QKeySequence__NextChild                = QKeySequence__StandardKey(20)
	QKeySequence__PreviousChild            = QKeySequence__StandardKey(21)
	QKeySequence__Find                     = QKeySequence__StandardKey(22)
	QKeySequence__FindNext                 = QKeySequence__StandardKey(23)
	QKeySequence__FindPrevious             = QKeySequence__StandardKey(24)
	QKeySequence__Replace                  = QKeySequence__StandardKey(25)
	QKeySequence__SelectAll                = QKeySequence__StandardKey(26)
	QKeySequence__Bold                     = QKeySequence__StandardKey(27)
	QKeySequence__Italic                   = QKeySequence__StandardKey(28)
	QKeySequence__Underline                = QKeySequence__StandardKey(29)
	QKeySequence__MoveToNextChar           = QKeySequence__StandardKey(30)
	QKeySequence__MoveToPreviousChar       = QKeySequence__StandardKey(31)
	QKeySequence__MoveToNextWord           = QKeySequence__StandardKey(32)
	QKeySequence__MoveToPreviousWord       = QKeySequence__StandardKey(33)
	QKeySequence__MoveToNextLine           = QKeySequence__StandardKey(34)
	QKeySequence__MoveToPreviousLine       = QKeySequence__StandardKey(35)
	QKeySequence__MoveToNextPage           = QKeySequence__StandardKey(36)
	QKeySequence__MoveToPreviousPage       = QKeySequence__StandardKey(37)
	QKeySequence__MoveToStartOfLine        = QKeySequence__StandardKey(38)
	QKeySequence__MoveToEndOfLine          = QKeySequence__StandardKey(39)
	QKeySequence__MoveToStartOfBlock       = QKeySequence__StandardKey(40)
	QKeySequence__MoveToEndOfBlock         = QKeySequence__StandardKey(41)
	QKeySequence__MoveToStartOfDocument    = QKeySequence__StandardKey(42)
	QKeySequence__MoveToEndOfDocument      = QKeySequence__StandardKey(43)
	QKeySequence__SelectNextChar           = QKeySequence__StandardKey(44)
	QKeySequence__SelectPreviousChar       = QKeySequence__StandardKey(45)
	QKeySequence__SelectNextWord           = QKeySequence__StandardKey(46)
	QKeySequence__SelectPreviousWord       = QKeySequence__StandardKey(47)
	QKeySequence__SelectNextLine           = QKeySequence__StandardKey(48)
	QKeySequence__SelectPreviousLine       = QKeySequence__StandardKey(49)
	QKeySequence__SelectNextPage           = QKeySequence__StandardKey(50)
	QKeySequence__SelectPreviousPage       = QKeySequence__StandardKey(51)
	QKeySequence__SelectStartOfLine        = QKeySequence__StandardKey(52)
	QKeySequence__SelectEndOfLine          = QKeySequence__StandardKey(53)
	QKeySequence__SelectStartOfBlock       = QKeySequence__StandardKey(54)
	QKeySequence__SelectEndOfBlock         = QKeySequence__StandardKey(55)
	QKeySequence__SelectStartOfDocument    = QKeySequence__StandardKey(56)
	QKeySequence__SelectEndOfDocument      = QKeySequence__StandardKey(57)
	QKeySequence__DeleteStartOfWord        = QKeySequence__StandardKey(58)
	QKeySequence__DeleteEndOfWord          = QKeySequence__StandardKey(59)
	QKeySequence__DeleteEndOfLine          = QKeySequence__StandardKey(60)
	QKeySequence__InsertParagraphSeparator = QKeySequence__StandardKey(61)
	QKeySequence__InsertLineSeparator      = QKeySequence__StandardKey(62)
	QKeySequence__SaveAs                   = QKeySequence__StandardKey(63)
	QKeySequence__Preferences              = QKeySequence__StandardKey(64)
	QKeySequence__Quit                     = QKeySequence__StandardKey(65)
	QKeySequence__FullScreen               = QKeySequence__StandardKey(66)
	QKeySequence__Deselect                 = QKeySequence__StandardKey(67)
	QKeySequence__DeleteCompleteLine       = QKeySequence__StandardKey(68)
	QKeySequence__Backspace                = QKeySequence__StandardKey(69)
	QKeySequence__Cancel                   = QKeySequence__StandardKey(70)
)

type QKeySequence struct {
	ptr unsafe.Pointer
}

type QKeySequence_ITF interface {
	QKeySequence_PTR() *QKeySequence
}

func (p *QKeySequence) QKeySequence_PTR() *QKeySequence {
	return p
}

func (p *QKeySequence) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QKeySequence) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQKeySequence(ptr QKeySequence_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QKeySequence_PTR().Pointer()
	}
	return nil
}

func NewQKeySequenceFromPointer(ptr unsafe.Pointer) *QKeySequence {
	var n = new(QKeySequence)
	n.SetPointer(ptr)
	return n
}
func NewQKeySequence() *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence())
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence5(key QKeySequence__StandardKey) *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence5(C.longlong(key)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence4(keysequence QKeySequence_ITF) *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence4(PointerFromQKeySequence(keysequence)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence2(key string, format QKeySequence__SequenceFormat) *QKeySequence {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence2(keyC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func NewQKeySequence3(k1 int, k2 int, k3 int, k4 int) *QKeySequence {
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_NewQKeySequence3(C.int(int32(k1)), C.int(int32(k2)), C.int(int32(k3)), C.int(int32(k4))))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func (ptr *QKeySequence) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QKeySequence_Count(ptr.Pointer())))
	}
	return 0
}

func QKeySequence_FromString(str string, format QKeySequence__SequenceFormat) *QKeySequence {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_FromString(strC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func (ptr *QKeySequence) FromString(str string, format QKeySequence__SequenceFormat) *QKeySequence {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_FromString(strC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func (ptr *QKeySequence) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QKeySequence_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func QKeySequence_KeyBindings(key QKeySequence__StandardKey) []*QKeySequence {
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).keyBindings_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_KeyBindings(C.longlong(key)))
}

func (ptr *QKeySequence) KeyBindings(key QKeySequence__StandardKey) []*QKeySequence {
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).keyBindings_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_KeyBindings(C.longlong(key)))
}

func QKeySequence_ListFromString(str string, format QKeySequence__SequenceFormat) []*QKeySequence {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).listFromString_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_ListFromString(strC, C.longlong(format)))
}

func (ptr *QKeySequence) ListFromString(str string, format QKeySequence__SequenceFormat) []*QKeySequence {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	return func(l C.struct_QtGui_PackedList) []*QKeySequence {
		var out = make([]*QKeySequence, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQKeySequenceFromPointer(l.data).listFromString_atList(i)
		}
		return out
	}(C.QKeySequence_QKeySequence_ListFromString(strC, C.longlong(format)))
}

func (ptr *QKeySequence) Matches(seq QKeySequence_ITF) QKeySequence__SequenceMatch {
	if ptr.Pointer() != nil {
		return QKeySequence__SequenceMatch(C.QKeySequence_Matches(ptr.Pointer(), PointerFromQKeySequence(seq)))
	}
	return 0
}

func QKeySequence_Mnemonic(text string) *QKeySequence {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_Mnemonic(textC))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func (ptr *QKeySequence) Mnemonic(text string) *QKeySequence {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_QKeySequence_Mnemonic(textC))
	runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
	return tmpValue
}

func (ptr *QKeySequence) Swap(other QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QKeySequence_Swap(ptr.Pointer(), PointerFromQKeySequence(other))
	}
}

func (ptr *QKeySequence) ToString(format QKeySequence__SequenceFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QKeySequence_ToString(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QKeySequence) DestroyQKeySequence() {
	if ptr.Pointer() != nil {
		C.QKeySequence_DestroyQKeySequence(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QKeySequence) keyBindings_atList(i int) *QKeySequence {
	if ptr.Pointer() != nil {
		var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_keyBindings_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QKeySequence) listFromString_atList(i int) *QKeySequence {
	if ptr.Pointer() != nil {
		var tmpValue = NewQKeySequenceFromPointer(C.QKeySequence_listFromString_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

type QLinearGradient struct {
	QGradient
}

type QLinearGradient_ITF interface {
	QGradient_ITF
	QLinearGradient_PTR() *QLinearGradient
}

func (p *QLinearGradient) QLinearGradient_PTR() *QLinearGradient {
	return p
}

func (p *QLinearGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGradient_PTR().Pointer()
	}
	return nil
}

func (p *QLinearGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGradient_PTR().SetPointer(ptr)
	}
}

func PointerFromQLinearGradient(ptr QLinearGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLinearGradient_PTR().Pointer()
	}
	return nil
}

func NewQLinearGradientFromPointer(ptr unsafe.Pointer) *QLinearGradient {
	var n = new(QLinearGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLinearGradient) DestroyQLinearGradient() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQLinearGradient3(x1 float64, y1 float64, x2 float64, y2 float64) *QLinearGradient {
	var tmpValue = NewQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient3(C.double(x1), C.double(y1), C.double(x2), C.double(y2)))
	runtime.SetFinalizer(tmpValue, (*QLinearGradient).DestroyQLinearGradient)
	return tmpValue
}

func NewQLinearGradient() *QLinearGradient {
	var tmpValue = NewQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient())
	runtime.SetFinalizer(tmpValue, (*QLinearGradient).DestroyQLinearGradient)
	return tmpValue
}

func NewQLinearGradient2(start core.QPointF_ITF, finalStop core.QPointF_ITF) *QLinearGradient {
	var tmpValue = NewQLinearGradientFromPointer(C.QLinearGradient_NewQLinearGradient2(core.PointerFromQPointF(start), core.PointerFromQPointF(finalStop)))
	runtime.SetFinalizer(tmpValue, (*QLinearGradient).DestroyQLinearGradient)
	return tmpValue
}

func (ptr *QLinearGradient) FinalStop() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QLinearGradient_FinalStop(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QLinearGradient) SetFinalStop(stop core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetFinalStop(ptr.Pointer(), core.PointerFromQPointF(stop))
	}
}

func (ptr *QLinearGradient) SetFinalStop2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetFinalStop2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QLinearGradient) SetStart(start core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetStart(ptr.Pointer(), core.PointerFromQPointF(start))
	}
}

func (ptr *QLinearGradient) SetStart2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QLinearGradient_SetStart2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QLinearGradient) Start() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QLinearGradient_Start(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

type QMatrix4x4 struct {
	ptr unsafe.Pointer
}

type QMatrix4x4_ITF interface {
	QMatrix4x4_PTR() *QMatrix4x4
}

func (p *QMatrix4x4) QMatrix4x4_PTR() *QMatrix4x4 {
	return p
}

func (p *QMatrix4x4) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMatrix4x4) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMatrix4x4(ptr QMatrix4x4_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMatrix4x4_PTR().Pointer()
	}
	return nil
}

func NewQMatrix4x4FromPointer(ptr unsafe.Pointer) *QMatrix4x4 {
	var n = new(QMatrix4x4)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMatrix4x4) DestroyQMatrix4x4() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQMatrix4x4() *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x4())
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func NewQMatrix4x47(transform QTransform_ITF) *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x47(PointerFromQTransform(transform)))
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func NewQMatrix4x43(values float32) *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x43(C.float(values)))
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func NewQMatrix4x44(m11 float32, m12 float32, m13 float32, m14 float32, m21 float32, m22 float32, m23 float32, m24 float32, m31 float32, m32 float32, m33 float32, m34 float32, m41 float32, m42 float32, m43 float32, m44 float32) *QMatrix4x4 {
	var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_NewQMatrix4x44(C.float(m11), C.float(m12), C.float(m13), C.float(m14), C.float(m21), C.float(m22), C.float(m23), C.float(m24), C.float(m31), C.float(m32), C.float(m33), C.float(m34), C.float(m41), C.float(m42), C.float(m43), C.float(m44)))
	runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
	return tmpValue
}

func (ptr *QMatrix4x4) Determinant() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QMatrix4x4_Determinant(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) Column(index int) *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QMatrix4x4_Column(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) ConstData() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QMatrix4x4_ConstData(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) CopyDataTo(values float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_CopyDataTo(ptr.Pointer(), C.float(values))
	}
}

func (ptr *QMatrix4x4) Data() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QMatrix4x4_Data(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) Data2() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QMatrix4x4_Data2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMatrix4x4) Fill(value float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Fill(ptr.Pointer(), C.float(value))
	}
}

func (ptr *QMatrix4x4) Frustum(left float32, right float32, bottom float32, top float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Frustum(ptr.Pointer(), C.float(left), C.float(right), C.float(bottom), C.float(top), C.float(nearPlane), C.float(farPlane))
	}
}

func (ptr *QMatrix4x4) Inverted(invertible bool) *QMatrix4x4 {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_Inverted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(invertible)))))
		runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) IsAffine() bool {
	if ptr.Pointer() != nil {
		return C.QMatrix4x4_IsAffine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMatrix4x4) IsIdentity() bool {
	if ptr.Pointer() != nil {
		return C.QMatrix4x4_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMatrix4x4) LookAt(eye QVector3D_ITF, center QVector3D_ITF, up QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_LookAt(ptr.Pointer(), PointerFromQVector3D(eye), PointerFromQVector3D(center), PointerFromQVector3D(up))
	}
}

func (ptr *QMatrix4x4) Map(point core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QMatrix4x4_Map(ptr.Pointer(), core.PointerFromQPoint(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Map2(point core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QMatrix4x4_Map2(ptr.Pointer(), core.PointerFromQPointF(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Map3(point QVector3D_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QMatrix4x4_Map3(ptr.Pointer(), PointerFromQVector3D(point)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Map4(point QVector4D_ITF) *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QMatrix4x4_Map4(ptr.Pointer(), PointerFromQVector4D(point)))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) MapRect(rect core.QRect_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QMatrix4x4_MapRect(ptr.Pointer(), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) MapRect2(rect core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QMatrix4x4_MapRect2(ptr.Pointer(), core.PointerFromQRectF(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) MapVector(vector QVector3D_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QMatrix4x4_MapVector(ptr.Pointer(), PointerFromQVector3D(vector)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Optimize() {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Optimize(ptr.Pointer())
	}
}

func (ptr *QMatrix4x4) Ortho3(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho3(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QMatrix4x4) Ortho2(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho2(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QMatrix4x4) Ortho(left float32, right float32, bottom float32, top float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Ortho(ptr.Pointer(), C.float(left), C.float(right), C.float(bottom), C.float(top), C.float(nearPlane), C.float(farPlane))
	}
}

func (ptr *QMatrix4x4) Perspective(verticalAngle float32, aspectRatio float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Perspective(ptr.Pointer(), C.float(verticalAngle), C.float(aspectRatio), C.float(nearPlane), C.float(farPlane))
	}
}

func (ptr *QMatrix4x4) Rotate3(quaternion QQuaternion_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Rotate3(ptr.Pointer(), PointerFromQQuaternion(quaternion))
	}
}

func (ptr *QMatrix4x4) Rotate(angle float32, vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Rotate(ptr.Pointer(), C.float(angle), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) Rotate2(angle float32, x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Rotate2(ptr.Pointer(), C.float(angle), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QMatrix4x4) Row(index int) *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QMatrix4x4_Row(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Scale(vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) Scale4(factor float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale4(ptr.Pointer(), C.float(factor))
	}
}

func (ptr *QMatrix4x4) Scale2(x float32, y float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale2(ptr.Pointer(), C.float(x), C.float(y))
	}
}

func (ptr *QMatrix4x4) Scale3(x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Scale3(ptr.Pointer(), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QMatrix4x4) SetColumn(index int, value QVector4D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetColumn(ptr.Pointer(), C.int(int32(index)), PointerFromQVector4D(value))
	}
}

func (ptr *QMatrix4x4) SetRow(index int, value QVector4D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetRow(ptr.Pointer(), C.int(int32(index)), PointerFromQVector4D(value))
	}
}

func (ptr *QMatrix4x4) SetToIdentity() {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_SetToIdentity(ptr.Pointer())
	}
}

func (ptr *QMatrix4x4) ToTransform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QMatrix4x4_ToTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) ToTransform2(distanceToPlane float32) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QMatrix4x4_ToTransform2(ptr.Pointer(), C.float(distanceToPlane)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Translate(vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Translate(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QMatrix4x4) Translate2(x float32, y float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Translate2(ptr.Pointer(), C.float(x), C.float(y))
	}
}

func (ptr *QMatrix4x4) Translate3(x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Translate3(ptr.Pointer(), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QMatrix4x4) Transposed() *QMatrix4x4 {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMatrix4x4FromPointer(C.QMatrix4x4_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMatrix4x4).DestroyQMatrix4x4)
		return tmpValue
	}
	return nil
}

func (ptr *QMatrix4x4) Viewport2(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Viewport2(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QMatrix4x4) Viewport(left float32, bottom float32, width float32, height float32, nearPlane float32, farPlane float32) {
	if ptr.Pointer() != nil {
		C.QMatrix4x4_Viewport(ptr.Pointer(), C.float(left), C.float(bottom), C.float(width), C.float(height), C.float(nearPlane), C.float(farPlane))
	}
}

type QMouseEvent struct {
	QInputEvent
}

type QMouseEvent_ITF interface {
	QInputEvent_ITF
	QMouseEvent_PTR() *QMouseEvent
}

func (p *QMouseEvent) QMouseEvent_PTR() *QMouseEvent {
	return p
}

func (p *QMouseEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QMouseEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQMouseEvent(ptr QMouseEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMouseEvent_PTR().Pointer()
	}
	return nil
}

func NewQMouseEventFromPointer(ptr unsafe.Pointer) *QMouseEvent {
	var n = new(QMouseEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMouseEvent) DestroyQMouseEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQMouseEvent(ty core.QEvent__Type, localPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	var tmpValue = NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent(C.longlong(ty), core.PointerFromQPointF(localPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers)))
	runtime.SetFinalizer(tmpValue, (*QMouseEvent).DestroyQMouseEvent)
	return tmpValue
}

func NewQMouseEvent2(ty core.QEvent__Type, localPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	var tmpValue = NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent2(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(screenPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers)))
	runtime.SetFinalizer(tmpValue, (*QMouseEvent).DestroyQMouseEvent)
	return tmpValue
}

func NewQMouseEvent3(ty core.QEvent__Type, localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QMouseEvent {
	var tmpValue = NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent3(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers)))
	runtime.SetFinalizer(tmpValue, (*QMouseEvent).DestroyQMouseEvent)
	return tmpValue
}

func NewQMouseEvent4(ty core.QEvent__Type, localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF, button core.Qt__MouseButton, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, source core.Qt__MouseEventSource) *QMouseEvent {
	var tmpValue = NewQMouseEventFromPointer(C.QMouseEvent_NewQMouseEvent4(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos), C.longlong(button), C.longlong(buttons), C.longlong(modifiers), C.longlong(source)))
	runtime.SetFinalizer(tmpValue, (*QMouseEvent).DestroyQMouseEvent)
	return tmpValue
}

func (ptr *QMouseEvent) Button() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_Button(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) Flags() core.Qt__MouseEventFlag {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventFlag(C.QMouseEvent_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QMouseEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QMouseEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) LocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QMouseEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QMouseEvent) ScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) Source() core.Qt__MouseEventSource {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventSource(C.QMouseEvent_Source(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) WindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QMouseEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMouseEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) B() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_B(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) SetB(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetB(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QMouseEvent) Caps() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMouseEvent_Caps(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMouseEvent) SetCaps(vin int) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetCaps(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QMouseEvent) MouseState() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QMouseEvent_MouseState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMouseEvent) SetMouseState(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetMouseState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QMouseEvent) Velocity() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QMouseEvent_Velocity(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QMouseEvent) SetVelocity(vqv QVector2D_ITF) {
	if ptr.Pointer() != nil {
		C.QMouseEvent_SetVelocity(ptr.Pointer(), PointerFromQVector2D(vqv))
	}
}

type QMoveEvent struct {
	core.QEvent
}

type QMoveEvent_ITF interface {
	core.QEvent_ITF
	QMoveEvent_PTR() *QMoveEvent
}

func (p *QMoveEvent) QMoveEvent_PTR() *QMoveEvent {
	return p
}

func (p *QMoveEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QMoveEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQMoveEvent(ptr QMoveEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMoveEvent_PTR().Pointer()
	}
	return nil
}

func NewQMoveEventFromPointer(ptr unsafe.Pointer) *QMoveEvent {
	var n = new(QMoveEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMoveEvent) DestroyQMoveEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQMoveEvent(pos core.QPoint_ITF, oldPos core.QPoint_ITF) *QMoveEvent {
	var tmpValue = NewQMoveEventFromPointer(C.QMoveEvent_NewQMoveEvent(core.PointerFromQPoint(pos), core.PointerFromQPoint(oldPos)))
	runtime.SetFinalizer(tmpValue, (*QMoveEvent).DestroyQMoveEvent)
	return tmpValue
}

func (ptr *QMoveEvent) OldPos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMoveEvent_OldPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMoveEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		return core.NewQPointFromPointer(C.QMoveEvent_Pos(ptr.Pointer()))
	}
	return nil
}

//QMovie::CacheMode
type QMovie__CacheMode int64

const (
	QMovie__CacheNone = QMovie__CacheMode(0)
	QMovie__CacheAll  = QMovie__CacheMode(1)
)

//QMovie::MovieState
type QMovie__MovieState int64

const (
	QMovie__NotRunning = QMovie__MovieState(0)
	QMovie__Paused     = QMovie__MovieState(1)
	QMovie__Running    = QMovie__MovieState(2)
)

type QMovie struct {
	core.QObject
}

type QMovie_ITF interface {
	core.QObject_ITF
	QMovie_PTR() *QMovie
}

func (p *QMovie) QMovie_PTR() *QMovie {
	return p
}

func (p *QMovie) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMovie) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMovie(ptr QMovie_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMovie_PTR().Pointer()
	}
	return nil
}

func NewQMovieFromPointer(ptr unsafe.Pointer) *QMovie {
	var n = new(QMovie)
	n.SetPointer(ptr)
	return n
}
func (ptr *QMovie) CacheMode() QMovie__CacheMode {
	if ptr.Pointer() != nil {
		return QMovie__CacheMode(C.QMovie_CacheMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMovie) SetCacheMode(mode QMovie__CacheMode) {
	if ptr.Pointer() != nil {
		C.QMovie_SetCacheMode(ptr.Pointer(), C.longlong(mode))
	}
}

//export callbackQMovie_SetSpeed
func callbackQMovie_SetSpeed(ptr unsafe.Pointer, percentSpeed C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::setSpeed"); signal != nil {
		signal.(func(int))(int(int32(percentSpeed)))
	}

}

func (ptr *QMovie) ConnectSetSpeed(f func(percentSpeed int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::setSpeed", f)
	}
}

func (ptr *QMovie) DisconnectSetSpeed(percentSpeed int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::setSpeed")
	}
}

func (ptr *QMovie) SetSpeed(percentSpeed int) {
	if ptr.Pointer() != nil {
		C.QMovie_SetSpeed(ptr.Pointer(), C.int(int32(percentSpeed)))
	}
}

func (ptr *QMovie) Speed() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_Speed(ptr.Pointer())))
	}
	return 0
}

func NewQMovie2(device core.QIODevice_ITF, format core.QByteArray_ITF, parent core.QObject_ITF) *QMovie {
	var tmpValue = NewQMovieFromPointer(C.QMovie_NewQMovie2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQMovie(parent core.QObject_ITF) *QMovie {
	var tmpValue = NewQMovieFromPointer(C.QMovie_NewQMovie(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQMovie3(fileName string, format core.QByteArray_ITF, parent core.QObject_ITF) *QMovie {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQMovieFromPointer(C.QMovie_NewQMovie3(fileNameC, core.PointerFromQByteArray(format), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMovie) BackgroundColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QMovie_BackgroundColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) CurrentFrameNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_CurrentFrameNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) CurrentImage() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QMovie_CurrentImage(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) CurrentPixmap() *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QMovie_CurrentPixmap(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QMovie_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQMovie_Error
func callbackQMovie_Error(ptr unsafe.Pointer, error C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::error"); signal != nil {
		signal.(func(QImageReader__ImageReaderError))(QImageReader__ImageReaderError(error))
	}

}

func (ptr *QMovie) ConnectError(f func(error QImageReader__ImageReaderError)) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectError(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::error", f)
	}
}

func (ptr *QMovie) DisconnectError() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectError(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::error")
	}
}

func (ptr *QMovie) Error(error QImageReader__ImageReaderError) {
	if ptr.Pointer() != nil {
		C.QMovie_Error(ptr.Pointer(), C.longlong(error))
	}
}

func (ptr *QMovie) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMovie_FileName(ptr.Pointer()))
	}
	return ""
}

//export callbackQMovie_Finished
func callbackQMovie_Finished(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectFinished(f func()) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::finished", f)
	}
}

func (ptr *QMovie) DisconnectFinished() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::finished")
	}
}

func (ptr *QMovie) Finished() {
	if ptr.Pointer() != nil {
		C.QMovie_Finished(ptr.Pointer())
	}
}

func (ptr *QMovie) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QMovie_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//export callbackQMovie_FrameChanged
func callbackQMovie_FrameChanged(ptr unsafe.Pointer, frameNumber C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::frameChanged"); signal != nil {
		signal.(func(int))(int(int32(frameNumber)))
	}

}

func (ptr *QMovie) ConnectFrameChanged(f func(frameNumber int)) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectFrameChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::frameChanged", f)
	}
}

func (ptr *QMovie) DisconnectFrameChanged() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectFrameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::frameChanged")
	}
}

func (ptr *QMovie) FrameChanged(frameNumber int) {
	if ptr.Pointer() != nil {
		C.QMovie_FrameChanged(ptr.Pointer(), C.int(int32(frameNumber)))
	}
}

func (ptr *QMovie) FrameCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_FrameCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) FrameRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QMovie_FrameRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QMovie_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMovie) JumpToFrame(frameNumber int) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_JumpToFrame(ptr.Pointer(), C.int(int32(frameNumber))) != 0
	}
	return false
}

//export callbackQMovie_JumpToNextFrame
func callbackQMovie_JumpToNextFrame(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::jumpToNextFrame"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QMovie) ConnectJumpToNextFrame(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::jumpToNextFrame", f)
	}
}

func (ptr *QMovie) DisconnectJumpToNextFrame() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::jumpToNextFrame")
	}
}

func (ptr *QMovie) JumpToNextFrame() bool {
	if ptr.Pointer() != nil {
		return C.QMovie_JumpToNextFrame(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMovie) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_LoopCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMovie) NextFrameDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMovie_NextFrameDelay(ptr.Pointer())))
	}
	return 0
}

//export callbackQMovie_Resized
func callbackQMovie_Resized(ptr unsafe.Pointer, size unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::resized"); signal != nil {
		signal.(func(*core.QSize))(core.NewQSizeFromPointer(size))
	}

}

func (ptr *QMovie) ConnectResized(f func(size *core.QSize)) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectResized(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::resized", f)
	}
}

func (ptr *QMovie) DisconnectResized() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectResized(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::resized")
	}
}

func (ptr *QMovie) Resized(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_Resized(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QMovie) ScaledSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QMovie_ScaledSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QMovie) SetBackgroundColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetBackgroundColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QMovie) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QMovie) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QMovie_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QMovie) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

//export callbackQMovie_SetPaused
func callbackQMovie_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	}

}

func (ptr *QMovie) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::setPaused", f)
	}
}

func (ptr *QMovie) DisconnectSetPaused(paused bool) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::setPaused")
	}
}

func (ptr *QMovie) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QMovie_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QMovie) SetScaledSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_SetScaledSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

//export callbackQMovie_Start
func callbackQMovie_Start(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectStart(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::start", f)
	}
}

func (ptr *QMovie) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::start")
	}
}

func (ptr *QMovie) Start() {
	if ptr.Pointer() != nil {
		C.QMovie_Start(ptr.Pointer())
	}
}

//export callbackQMovie_Started
func callbackQMovie_Started(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::started"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectStarted(f func()) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectStarted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::started", f)
	}
}

func (ptr *QMovie) DisconnectStarted() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectStarted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::started")
	}
}

func (ptr *QMovie) Started() {
	if ptr.Pointer() != nil {
		C.QMovie_Started(ptr.Pointer())
	}
}

func (ptr *QMovie) State() QMovie__MovieState {
	if ptr.Pointer() != nil {
		return QMovie__MovieState(C.QMovie_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQMovie_StateChanged
func callbackQMovie_StateChanged(ptr unsafe.Pointer, state C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::stateChanged"); signal != nil {
		signal.(func(QMovie__MovieState))(QMovie__MovieState(state))
	}

}

func (ptr *QMovie) ConnectStateChanged(f func(state QMovie__MovieState)) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::stateChanged", f)
	}
}

func (ptr *QMovie) DisconnectStateChanged() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::stateChanged")
	}
}

func (ptr *QMovie) StateChanged(state QMovie__MovieState) {
	if ptr.Pointer() != nil {
		C.QMovie_StateChanged(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQMovie_Stop
func callbackQMovie_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QMovie) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::stop", f)
	}
}

func (ptr *QMovie) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::stop")
	}
}

func (ptr *QMovie) Stop() {
	if ptr.Pointer() != nil {
		C.QMovie_Stop(ptr.Pointer())
	}
}

func QMovie_SupportedFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQMovieFromPointer(l.data).supportedFormats_atList(i)
		}
		return out
	}(C.QMovie_QMovie_SupportedFormats())
}

func (ptr *QMovie) SupportedFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQMovieFromPointer(l.data).supportedFormats_atList(i)
		}
		return out
	}(C.QMovie_QMovie_SupportedFormats())
}

//export callbackQMovie_Updated
func callbackQMovie_Updated(ptr unsafe.Pointer, rect unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::updated"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	}

}

func (ptr *QMovie) ConnectUpdated(f func(rect *core.QRect)) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectUpdated(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::updated", f)
	}
}

func (ptr *QMovie) DisconnectUpdated() {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectUpdated(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::updated")
	}
}

func (ptr *QMovie) Updated(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_Updated(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QMovie) DestroyQMovie() {
	if ptr.Pointer() != nil {
		C.QMovie_DestroyQMovie(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMovie) supportedFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QMovie_supportedFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//export callbackQMovie_TimerEvent
func callbackQMovie_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMovie) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::timerEvent", f)
	}
}

func (ptr *QMovie) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::timerEvent")
	}
}

func (ptr *QMovie) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QMovie) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQMovie_ChildEvent
func callbackQMovie_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QMovie) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::childEvent", f)
	}
}

func (ptr *QMovie) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::childEvent")
	}
}

func (ptr *QMovie) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QMovie) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQMovie_ConnectNotify
func callbackQMovie_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMovieFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMovie) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::connectNotify", f)
	}
}

func (ptr *QMovie) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::connectNotify")
	}
}

func (ptr *QMovie) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMovie) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMovie_CustomEvent
func callbackQMovie_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQMovieFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QMovie) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::customEvent", f)
	}
}

func (ptr *QMovie) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::customEvent")
	}
}

func (ptr *QMovie) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QMovie) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQMovie_DeleteLater
func callbackQMovie_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMovieFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMovie) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::deleteLater", f)
	}
}

func (ptr *QMovie) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::deleteLater")
	}
}

func (ptr *QMovie) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QMovie_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMovie) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QMovie_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMovie_DisconnectNotify
func callbackQMovie_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQMovieFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMovie) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::disconnectNotify", f)
	}
}

func (ptr *QMovie) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::disconnectNotify")
	}
}

func (ptr *QMovie) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMovie) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMovie_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQMovie_Event
func callbackQMovie_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMovieFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QMovie) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::event", f)
	}
}

func (ptr *QMovie) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::event")
	}
}

func (ptr *QMovie) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMovie) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMovie_EventFilter
func callbackQMovie_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMovieFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QMovie) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::eventFilter", f)
	}
}

func (ptr *QMovie) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::eventFilter")
	}
}

func (ptr *QMovie) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMovie) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMovie_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMovie_MetaObject
func callbackQMovie_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMovie::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQMovieFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMovie) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::metaObject", f)
	}
}

func (ptr *QMovie) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMovie::metaObject")
	}
}

func (ptr *QMovie) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMovie_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMovie) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QMovie_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QNativeGestureEvent struct {
	QInputEvent
}

type QNativeGestureEvent_ITF interface {
	QInputEvent_ITF
	QNativeGestureEvent_PTR() *QNativeGestureEvent
}

func (p *QNativeGestureEvent) QNativeGestureEvent_PTR() *QNativeGestureEvent {
	return p
}

func (p *QNativeGestureEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QNativeGestureEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQNativeGestureEvent(ptr QNativeGestureEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QNativeGestureEvent_PTR().Pointer()
	}
	return nil
}

func NewQNativeGestureEventFromPointer(ptr unsafe.Pointer) *QNativeGestureEvent {
	var n = new(QNativeGestureEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QNativeGestureEvent) DestroyQNativeGestureEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQNativeGestureEvent(ty core.Qt__NativeGestureType, localPos core.QPointF_ITF, windowPos core.QPointF_ITF, screenPos core.QPointF_ITF, realValue float64, sequenceId uint, intValue uint64) *QNativeGestureEvent {
	var tmpValue = NewQNativeGestureEventFromPointer(C.QNativeGestureEvent_NewQNativeGestureEvent(C.longlong(ty), core.PointerFromQPointF(localPos), core.PointerFromQPointF(windowPos), core.PointerFromQPointF(screenPos), C.double(realValue), C.ulong(uint32(sequenceId)), C.ulonglong(intValue)))
	runtime.SetFinalizer(tmpValue, (*QNativeGestureEvent).DestroyQNativeGestureEvent)
	return tmpValue
}

func (ptr *QNativeGestureEvent) GestureType() core.Qt__NativeGestureType {
	if ptr.Pointer() != nil {
		return core.Qt__NativeGestureType(C.QNativeGestureEvent_GestureType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QNativeGestureEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) LocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_LocalPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QNativeGestureEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) ScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_ScreenPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) Value() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QNativeGestureEvent_Value(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) WindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QNativeGestureEvent_WindowPos(ptr.Pointer()))
	}
	return nil
}

func (ptr *QNativeGestureEvent) MGestureType() core.Qt__NativeGestureType {
	if ptr.Pointer() != nil {
		return core.Qt__NativeGestureType(C.QNativeGestureEvent_MGestureType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMGestureType(vqt core.Qt__NativeGestureType) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMGestureType(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QNativeGestureEvent) MIntValue() uint64 {
	if ptr.Pointer() != nil {
		return uint64(C.QNativeGestureEvent_MIntValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMIntValue(vqu uint64) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMIntValue(ptr.Pointer(), C.ulonglong(vqu))
	}
}

func (ptr *QNativeGestureEvent) MLocalPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QNativeGestureEvent_MLocalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) SetMLocalPos(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMLocalPos(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QNativeGestureEvent) MRealValue() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QNativeGestureEvent_MRealValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMRealValue(vqr float64) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMRealValue(ptr.Pointer(), C.double(vqr))
	}
}

func (ptr *QNativeGestureEvent) MScreenPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QNativeGestureEvent_MScreenPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) SetMScreenPos(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMScreenPos(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QNativeGestureEvent) MSequenceId() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QNativeGestureEvent_MSequenceId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QNativeGestureEvent) SetMSequenceId(vul uint) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMSequenceId(ptr.Pointer(), C.ulong(uint32(vul)))
	}
}

func (ptr *QNativeGestureEvent) MWindowPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QNativeGestureEvent_MWindowPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QNativeGestureEvent) SetMWindowPos(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QNativeGestureEvent_SetMWindowPos(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

type QOffscreenSurface struct {
	core.QObject
	QSurface
}

type QOffscreenSurface_ITF interface {
	core.QObject_ITF
	QSurface_ITF
	QOffscreenSurface_PTR() *QOffscreenSurface
}

func (p *QOffscreenSurface) QOffscreenSurface_PTR() *QOffscreenSurface {
	return p
}

func (p *QOffscreenSurface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOffscreenSurface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QSurface_PTR().SetPointer(ptr)
	}
}

func PointerFromQOffscreenSurface(ptr QOffscreenSurface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOffscreenSurface_PTR().Pointer()
	}
	return nil
}

func NewQOffscreenSurfaceFromPointer(ptr unsafe.Pointer) *QOffscreenSurface {
	var n = new(QOffscreenSurface)
	n.SetPointer(ptr)
	return n
}
func NewQOffscreenSurface(targetScreen QScreen_ITF) *QOffscreenSurface {
	var tmpValue = NewQOffscreenSurfaceFromPointer(C.QOffscreenSurface_NewQOffscreenSurface(PointerFromQScreen(targetScreen)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QOffscreenSurface) Create() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_Create(ptr.Pointer())
	}
}

func (ptr *QOffscreenSurface) Destroy() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_Destroy(ptr.Pointer())
	}
}

//export callbackQOffscreenSurface_Format
func callbackQOffscreenSurface_Format(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQOffscreenSurfaceFromPointer(ptr).FormatDefault())
}

func (ptr *QOffscreenSurface) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::format", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::format")
	}
}

func (ptr *QOffscreenSurface) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QOffscreenSurface_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) FormatDefault() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QOffscreenSurface_FormatDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) RequestedFormat() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QOffscreenSurface_RequestedFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) Screen() *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QOffscreenSurface_Screen(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQOffscreenSurface_ScreenChanged
func callbackQOffscreenSurface_ScreenChanged(ptr unsafe.Pointer, screen unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::screenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QOffscreenSurface) ConnectScreenChanged(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectScreenChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::screenChanged", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectScreenChanged() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::screenChanged")
	}
}

func (ptr *QOffscreenSurface) ScreenChanged(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func (ptr *QOffscreenSurface) SetFormat(format QSurfaceFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_SetFormat(ptr.Pointer(), PointerFromQSurfaceFormat(format))
	}
}

func (ptr *QOffscreenSurface) SetScreen(newScreen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_SetScreen(ptr.Pointer(), PointerFromQScreen(newScreen))
	}
}

//export callbackQOffscreenSurface_Size
func callbackQOffscreenSurface_Size(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQOffscreenSurfaceFromPointer(ptr).SizeDefault())
}

func (ptr *QOffscreenSurface) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::size", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::size")
	}
}

func (ptr *QOffscreenSurface) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QOffscreenSurface_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QOffscreenSurface) SizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QOffscreenSurface_SizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQOffscreenSurface_SurfaceType
func callbackQOffscreenSurface_SurfaceType(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(NewQOffscreenSurfaceFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QOffscreenSurface) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::surfaceType", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::surfaceType")
	}
}

func (ptr *QOffscreenSurface) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QOffscreenSurface_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QOffscreenSurface) SurfaceTypeDefault() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QOffscreenSurface_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQOffscreenSurface_DestroyQOffscreenSurface
func callbackQOffscreenSurface_DestroyQOffscreenSurface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::~QOffscreenSurface"); signal != nil {
		signal.(func())()
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).DestroyQOffscreenSurfaceDefault()
	}
}

func (ptr *QOffscreenSurface) ConnectDestroyQOffscreenSurface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::~QOffscreenSurface", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectDestroyQOffscreenSurface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::~QOffscreenSurface")
	}
}

func (ptr *QOffscreenSurface) DestroyQOffscreenSurface() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DestroyQOffscreenSurface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QOffscreenSurface) DestroyQOffscreenSurfaceDefault() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DestroyQOffscreenSurfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQOffscreenSurface_TimerEvent
func callbackQOffscreenSurface_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::timerEvent", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::timerEvent")
	}
}

func (ptr *QOffscreenSurface) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QOffscreenSurface) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQOffscreenSurface_ChildEvent
func callbackQOffscreenSurface_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::childEvent", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::childEvent")
	}
}

func (ptr *QOffscreenSurface) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QOffscreenSurface) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQOffscreenSurface_ConnectNotify
func callbackQOffscreenSurface_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::connectNotify", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::connectNotify")
	}
}

func (ptr *QOffscreenSurface) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQOffscreenSurface_CustomEvent
func callbackQOffscreenSurface_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QOffscreenSurface) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::customEvent", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::customEvent")
	}
}

func (ptr *QOffscreenSurface) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QOffscreenSurface) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQOffscreenSurface_DeleteLater
func callbackQOffscreenSurface_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QOffscreenSurface) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::deleteLater", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::deleteLater")
	}
}

func (ptr *QOffscreenSurface) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QOffscreenSurface) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQOffscreenSurface_DisconnectNotify
func callbackQOffscreenSurface_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQOffscreenSurfaceFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QOffscreenSurface) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::disconnectNotify", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::disconnectNotify")
	}
}

func (ptr *QOffscreenSurface) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QOffscreenSurface) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QOffscreenSurface_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQOffscreenSurface_Event
func callbackQOffscreenSurface_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQOffscreenSurfaceFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QOffscreenSurface) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::event", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::event")
	}
}

func (ptr *QOffscreenSurface) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQOffscreenSurface_EventFilter
func callbackQOffscreenSurface_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQOffscreenSurfaceFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QOffscreenSurface) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::eventFilter", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::eventFilter")
	}
}

func (ptr *QOffscreenSurface) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QOffscreenSurface) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QOffscreenSurface_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQOffscreenSurface_MetaObject
func callbackQOffscreenSurface_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QOffscreenSurface::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQOffscreenSurfaceFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QOffscreenSurface) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::metaObject", f)
	}
}

func (ptr *QOffscreenSurface) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QOffscreenSurface::metaObject")
	}
}

func (ptr *QOffscreenSurface) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QOffscreenSurface_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QOffscreenSurface) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QOffscreenSurface_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QOpenGLBuffer::Access
type QOpenGLBuffer__Access int64

const (
	QOpenGLBuffer__ReadOnly  = QOpenGLBuffer__Access(0x88B8)
	QOpenGLBuffer__WriteOnly = QOpenGLBuffer__Access(0x88B9)
	QOpenGLBuffer__ReadWrite = QOpenGLBuffer__Access(0x88BA)
)

//QOpenGLBuffer::RangeAccessFlag
type QOpenGLBuffer__RangeAccessFlag int64

const (
	QOpenGLBuffer__RangeRead             = QOpenGLBuffer__RangeAccessFlag(0x0001)
	QOpenGLBuffer__RangeWrite            = QOpenGLBuffer__RangeAccessFlag(0x0002)
	QOpenGLBuffer__RangeInvalidate       = QOpenGLBuffer__RangeAccessFlag(0x0004)
	QOpenGLBuffer__RangeInvalidateBuffer = QOpenGLBuffer__RangeAccessFlag(0x0008)
	QOpenGLBuffer__RangeFlushExplicit    = QOpenGLBuffer__RangeAccessFlag(0x0010)
	QOpenGLBuffer__RangeUnsynchronized   = QOpenGLBuffer__RangeAccessFlag(0x0020)
)

//QOpenGLBuffer::Type
type QOpenGLBuffer__Type int64

const (
	QOpenGLBuffer__VertexBuffer      = QOpenGLBuffer__Type(0x8892)
	QOpenGLBuffer__IndexBuffer       = QOpenGLBuffer__Type(0x8893)
	QOpenGLBuffer__PixelPackBuffer   = QOpenGLBuffer__Type(0x88EB)
	QOpenGLBuffer__PixelUnpackBuffer = QOpenGLBuffer__Type(0x88EC)
)

//QOpenGLBuffer::UsagePattern
type QOpenGLBuffer__UsagePattern int64

const (
	QOpenGLBuffer__StreamDraw  = QOpenGLBuffer__UsagePattern(0x88E0)
	QOpenGLBuffer__StreamRead  = QOpenGLBuffer__UsagePattern(0x88E1)
	QOpenGLBuffer__StreamCopy  = QOpenGLBuffer__UsagePattern(0x88E2)
	QOpenGLBuffer__StaticDraw  = QOpenGLBuffer__UsagePattern(0x88E4)
	QOpenGLBuffer__StaticRead  = QOpenGLBuffer__UsagePattern(0x88E5)
	QOpenGLBuffer__StaticCopy  = QOpenGLBuffer__UsagePattern(0x88E6)
	QOpenGLBuffer__DynamicDraw = QOpenGLBuffer__UsagePattern(0x88E8)
	QOpenGLBuffer__DynamicRead = QOpenGLBuffer__UsagePattern(0x88E9)
	QOpenGLBuffer__DynamicCopy = QOpenGLBuffer__UsagePattern(0x88EA)
)

type QOpenGLBuffer struct {
	ptr unsafe.Pointer
}

type QOpenGLBuffer_ITF interface {
	QOpenGLBuffer_PTR() *QOpenGLBuffer
}

func (p *QOpenGLBuffer) QOpenGLBuffer_PTR() *QOpenGLBuffer {
	return p
}

func (p *QOpenGLBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLBuffer(ptr QOpenGLBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLBuffer_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLBufferFromPointer(ptr unsafe.Pointer) *QOpenGLBuffer {
	var n = new(QOpenGLBuffer)
	n.SetPointer(ptr)
	return n
}

//QOpenGLContext::OpenGLModuleType
type QOpenGLContext__OpenGLModuleType int64

const (
	QOpenGLContext__LibGL   = QOpenGLContext__OpenGLModuleType(0)
	QOpenGLContext__LibGLES = QOpenGLContext__OpenGLModuleType(1)
)

type QOpenGLContext struct {
	core.QObject
}

type QOpenGLContext_ITF interface {
	core.QObject_ITF
	QOpenGLContext_PTR() *QOpenGLContext
}

func (p *QOpenGLContext) QOpenGLContext_PTR() *QOpenGLContext {
	return p
}

func (p *QOpenGLContext) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLContext) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLContext(ptr QOpenGLContext_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLContext_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLContextFromPointer(ptr unsafe.Pointer) *QOpenGLContext {
	var n = new(QOpenGLContext)
	n.SetPointer(ptr)
	return n
}

type QOpenGLContextGroup struct {
	core.QObject
}

type QOpenGLContextGroup_ITF interface {
	core.QObject_ITF
	QOpenGLContextGroup_PTR() *QOpenGLContextGroup
}

func (p *QOpenGLContextGroup) QOpenGLContextGroup_PTR() *QOpenGLContextGroup {
	return p
}

func (p *QOpenGLContextGroup) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLContextGroup) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLContextGroup(ptr QOpenGLContextGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLContextGroup_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLContextGroupFromPointer(ptr unsafe.Pointer) *QOpenGLContextGroup {
	var n = new(QOpenGLContextGroup)
	n.SetPointer(ptr)
	return n
}

func (ptr *QOpenGLContextGroup) DestroyQOpenGLContextGroup() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

//QOpenGLDebugLogger::LoggingMode
type QOpenGLDebugLogger__LoggingMode int64

const (
	QOpenGLDebugLogger__AsynchronousLogging = QOpenGLDebugLogger__LoggingMode(0)
	QOpenGLDebugLogger__SynchronousLogging  = QOpenGLDebugLogger__LoggingMode(1)
)

type QOpenGLDebugLogger struct {
	core.QObject
}

type QOpenGLDebugLogger_ITF interface {
	core.QObject_ITF
	QOpenGLDebugLogger_PTR() *QOpenGLDebugLogger
}

func (p *QOpenGLDebugLogger) QOpenGLDebugLogger_PTR() *QOpenGLDebugLogger {
	return p
}

func (p *QOpenGLDebugLogger) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLDebugLogger) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLDebugLogger(ptr QOpenGLDebugLogger_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLDebugLogger_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLDebugLoggerFromPointer(ptr unsafe.Pointer) *QOpenGLDebugLogger {
	var n = new(QOpenGLDebugLogger)
	n.SetPointer(ptr)
	return n
}

//QOpenGLDebugMessage::Severity
type QOpenGLDebugMessage__Severity int64

const (
	QOpenGLDebugMessage__InvalidSeverity      = QOpenGLDebugMessage__Severity(0x00000000)
	QOpenGLDebugMessage__HighSeverity         = QOpenGLDebugMessage__Severity(0x00000001)
	QOpenGLDebugMessage__MediumSeverity       = QOpenGLDebugMessage__Severity(0x00000002)
	QOpenGLDebugMessage__LowSeverity          = QOpenGLDebugMessage__Severity(0x00000004)
	QOpenGLDebugMessage__NotificationSeverity = QOpenGLDebugMessage__Severity(0x00000008)
	QOpenGLDebugMessage__LastSeverity         = QOpenGLDebugMessage__Severity(QOpenGLDebugMessage__NotificationSeverity)
	QOpenGLDebugMessage__AnySeverity          = QOpenGLDebugMessage__Severity(0xffffffff)
)

//QOpenGLDebugMessage::Source
type QOpenGLDebugMessage__Source int64

const (
	QOpenGLDebugMessage__InvalidSource        = QOpenGLDebugMessage__Source(0x00000000)
	QOpenGLDebugMessage__APISource            = QOpenGLDebugMessage__Source(0x00000001)
	QOpenGLDebugMessage__WindowSystemSource   = QOpenGLDebugMessage__Source(0x00000002)
	QOpenGLDebugMessage__ShaderCompilerSource = QOpenGLDebugMessage__Source(0x00000004)
	QOpenGLDebugMessage__ThirdPartySource     = QOpenGLDebugMessage__Source(0x00000008)
	QOpenGLDebugMessage__ApplicationSource    = QOpenGLDebugMessage__Source(0x00000010)
	QOpenGLDebugMessage__OtherSource          = QOpenGLDebugMessage__Source(0x00000020)
	QOpenGLDebugMessage__LastSource           = QOpenGLDebugMessage__Source(QOpenGLDebugMessage__OtherSource)
	QOpenGLDebugMessage__AnySource            = QOpenGLDebugMessage__Source(0xffffffff)
)

//QOpenGLDebugMessage::Type
type QOpenGLDebugMessage__Type int64

const (
	QOpenGLDebugMessage__InvalidType            = QOpenGLDebugMessage__Type(0x00000000)
	QOpenGLDebugMessage__ErrorType              = QOpenGLDebugMessage__Type(0x00000001)
	QOpenGLDebugMessage__DeprecatedBehaviorType = QOpenGLDebugMessage__Type(0x00000002)
	QOpenGLDebugMessage__UndefinedBehaviorType  = QOpenGLDebugMessage__Type(0x00000004)
	QOpenGLDebugMessage__PortabilityType        = QOpenGLDebugMessage__Type(0x00000008)
	QOpenGLDebugMessage__PerformanceType        = QOpenGLDebugMessage__Type(0x00000010)
	QOpenGLDebugMessage__OtherType              = QOpenGLDebugMessage__Type(0x00000020)
	QOpenGLDebugMessage__MarkerType             = QOpenGLDebugMessage__Type(0x00000040)
	QOpenGLDebugMessage__GroupPushType          = QOpenGLDebugMessage__Type(0x00000080)
	QOpenGLDebugMessage__GroupPopType           = QOpenGLDebugMessage__Type(0x00000100)
	QOpenGLDebugMessage__LastType               = QOpenGLDebugMessage__Type(QOpenGLDebugMessage__GroupPopType)
	QOpenGLDebugMessage__AnyType                = QOpenGLDebugMessage__Type(0xffffffff)
)

type QOpenGLDebugMessage struct {
	ptr unsafe.Pointer
}

type QOpenGLDebugMessage_ITF interface {
	QOpenGLDebugMessage_PTR() *QOpenGLDebugMessage
}

func (p *QOpenGLDebugMessage) QOpenGLDebugMessage_PTR() *QOpenGLDebugMessage {
	return p
}

func (p *QOpenGLDebugMessage) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLDebugMessage) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLDebugMessage(ptr QOpenGLDebugMessage_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLDebugMessage_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLDebugMessageFromPointer(ptr unsafe.Pointer) *QOpenGLDebugMessage {
	var n = new(QOpenGLDebugMessage)
	n.SetPointer(ptr)
	return n
}

type QOpenGLExtraFunctions struct {
	QOpenGLFunctions
}

type QOpenGLExtraFunctions_ITF interface {
	QOpenGLFunctions_ITF
	QOpenGLExtraFunctions_PTR() *QOpenGLExtraFunctions
}

func (p *QOpenGLExtraFunctions) QOpenGLExtraFunctions_PTR() *QOpenGLExtraFunctions {
	return p
}

func (p *QOpenGLExtraFunctions) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLExtraFunctions) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLExtraFunctions(ptr QOpenGLExtraFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLExtraFunctions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLExtraFunctionsFromPointer(ptr unsafe.Pointer) *QOpenGLExtraFunctions {
	var n = new(QOpenGLExtraFunctions)
	n.SetPointer(ptr)
	return n
}

//QOpenGLFramebufferObject::Attachment
type QOpenGLFramebufferObject__Attachment int64

const (
	QOpenGLFramebufferObject__NoAttachment         = QOpenGLFramebufferObject__Attachment(0)
	QOpenGLFramebufferObject__CombinedDepthStencil = QOpenGLFramebufferObject__Attachment(1)
	QOpenGLFramebufferObject__Depth                = QOpenGLFramebufferObject__Attachment(2)
)

//QOpenGLFramebufferObject::FramebufferRestorePolicy
type QOpenGLFramebufferObject__FramebufferRestorePolicy int64

const (
	QOpenGLFramebufferObject__DontRestoreFramebufferBinding      = QOpenGLFramebufferObject__FramebufferRestorePolicy(0)
	QOpenGLFramebufferObject__RestoreFramebufferBindingToDefault = QOpenGLFramebufferObject__FramebufferRestorePolicy(1)
	QOpenGLFramebufferObject__RestoreFrameBufferBinding          = QOpenGLFramebufferObject__FramebufferRestorePolicy(2)
)

type QOpenGLFramebufferObject struct {
	ptr unsafe.Pointer
}

type QOpenGLFramebufferObject_ITF interface {
	QOpenGLFramebufferObject_PTR() *QOpenGLFramebufferObject
}

func (p *QOpenGLFramebufferObject) QOpenGLFramebufferObject_PTR() *QOpenGLFramebufferObject {
	return p
}

func (p *QOpenGLFramebufferObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLFramebufferObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLFramebufferObject(ptr QOpenGLFramebufferObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFramebufferObject_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFramebufferObjectFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObject {
	var n = new(QOpenGLFramebufferObject)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFramebufferObjectFormat struct {
	ptr unsafe.Pointer
}

type QOpenGLFramebufferObjectFormat_ITF interface {
	QOpenGLFramebufferObjectFormat_PTR() *QOpenGLFramebufferObjectFormat
}

func (p *QOpenGLFramebufferObjectFormat) QOpenGLFramebufferObjectFormat_PTR() *QOpenGLFramebufferObjectFormat {
	return p
}

func (p *QOpenGLFramebufferObjectFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLFramebufferObjectFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLFramebufferObjectFormat(ptr QOpenGLFramebufferObjectFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFramebufferObjectFormat_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFramebufferObjectFormatFromPointer(ptr unsafe.Pointer) *QOpenGLFramebufferObjectFormat {
	var n = new(QOpenGLFramebufferObjectFormat)
	n.SetPointer(ptr)
	return n
}

//QOpenGLFunctions::OpenGLFeature
type QOpenGLFunctions__OpenGLFeature int64

const (
	QOpenGLFunctions__Multitexture          = QOpenGLFunctions__OpenGLFeature(0x0001)
	QOpenGLFunctions__Shaders               = QOpenGLFunctions__OpenGLFeature(0x0002)
	QOpenGLFunctions__Buffers               = QOpenGLFunctions__OpenGLFeature(0x0004)
	QOpenGLFunctions__Framebuffers          = QOpenGLFunctions__OpenGLFeature(0x0008)
	QOpenGLFunctions__BlendColor            = QOpenGLFunctions__OpenGLFeature(0x0010)
	QOpenGLFunctions__BlendEquation         = QOpenGLFunctions__OpenGLFeature(0x0020)
	QOpenGLFunctions__BlendEquationSeparate = QOpenGLFunctions__OpenGLFeature(0x0040)
	QOpenGLFunctions__BlendFuncSeparate     = QOpenGLFunctions__OpenGLFeature(0x0080)
	QOpenGLFunctions__BlendSubtract         = QOpenGLFunctions__OpenGLFeature(0x0100)
	QOpenGLFunctions__CompressedTextures    = QOpenGLFunctions__OpenGLFeature(0x0200)
	QOpenGLFunctions__Multisample           = QOpenGLFunctions__OpenGLFeature(0x0400)
	QOpenGLFunctions__StencilSeparate       = QOpenGLFunctions__OpenGLFeature(0x0800)
	QOpenGLFunctions__NPOTTextures          = QOpenGLFunctions__OpenGLFeature(0x1000)
	QOpenGLFunctions__NPOTTextureRepeat     = QOpenGLFunctions__OpenGLFeature(0x2000)
	QOpenGLFunctions__FixedFunctionPipeline = QOpenGLFunctions__OpenGLFeature(0x4000)
	QOpenGLFunctions__TextureRGFormats      = QOpenGLFunctions__OpenGLFeature(0x8000)
	QOpenGLFunctions__MultipleRenderTargets = QOpenGLFunctions__OpenGLFeature(0x10000)
)

type QOpenGLFunctions struct {
	ptr unsafe.Pointer
}

type QOpenGLFunctions_ITF interface {
	QOpenGLFunctions_PTR() *QOpenGLFunctions
}

func (p *QOpenGLFunctions) QOpenGLFunctions_PTR() *QOpenGLFunctions {
	return p
}

func (p *QOpenGLFunctions) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLFunctions) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLFunctions(ptr QOpenGLFunctions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctionsFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions {
	var n = new(QOpenGLFunctions)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_0_PTR() *QOpenGLFunctions_1_0
}

func (p *QOpenGLFunctions_1_0) QOpenGLFunctions_1_0_PTR() *QOpenGLFunctions_1_0 {
	return p
}

func (p *QOpenGLFunctions_1_0) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_0) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_0(ptr QOpenGLFunctions_1_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_0 {
	var n = new(QOpenGLFunctions_1_0)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_1_PTR() *QOpenGLFunctions_1_1
}

func (p *QOpenGLFunctions_1_1) QOpenGLFunctions_1_1_PTR() *QOpenGLFunctions_1_1 {
	return p
}

func (p *QOpenGLFunctions_1_1) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_1) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_1(ptr QOpenGLFunctions_1_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_1 {
	var n = new(QOpenGLFunctions_1_1)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_2 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_2_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_2_PTR() *QOpenGLFunctions_1_2
}

func (p *QOpenGLFunctions_1_2) QOpenGLFunctions_1_2_PTR() *QOpenGLFunctions_1_2 {
	return p
}

func (p *QOpenGLFunctions_1_2) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_2) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_2(ptr QOpenGLFunctions_1_2_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_2_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_2 {
	var n = new(QOpenGLFunctions_1_2)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_3 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_3_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_3_PTR() *QOpenGLFunctions_1_3
}

func (p *QOpenGLFunctions_1_3) QOpenGLFunctions_1_3_PTR() *QOpenGLFunctions_1_3 {
	return p
}

func (p *QOpenGLFunctions_1_3) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_3) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_3(ptr QOpenGLFunctions_1_3_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_3_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_3FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_3 {
	var n = new(QOpenGLFunctions_1_3)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_4 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_4_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_4_PTR() *QOpenGLFunctions_1_4
}

func (p *QOpenGLFunctions_1_4) QOpenGLFunctions_1_4_PTR() *QOpenGLFunctions_1_4 {
	return p
}

func (p *QOpenGLFunctions_1_4) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_4) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_4(ptr QOpenGLFunctions_1_4_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_4_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_4FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_4 {
	var n = new(QOpenGLFunctions_1_4)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_1_5 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_1_5_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_1_5_PTR() *QOpenGLFunctions_1_5
}

func (p *QOpenGLFunctions_1_5) QOpenGLFunctions_1_5_PTR() *QOpenGLFunctions_1_5 {
	return p
}

func (p *QOpenGLFunctions_1_5) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_1_5) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_1_5(ptr QOpenGLFunctions_1_5_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_1_5_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_1_5FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_1_5 {
	var n = new(QOpenGLFunctions_1_5)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_2_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_2_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_2_0_PTR() *QOpenGLFunctions_2_0
}

func (p *QOpenGLFunctions_2_0) QOpenGLFunctions_2_0_PTR() *QOpenGLFunctions_2_0 {
	return p
}

func (p *QOpenGLFunctions_2_0) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_2_0) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_2_0(ptr QOpenGLFunctions_2_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_2_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_2_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_0 {
	var n = new(QOpenGLFunctions_2_0)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_2_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_2_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_2_1_PTR() *QOpenGLFunctions_2_1
}

func (p *QOpenGLFunctions_2_1) QOpenGLFunctions_2_1_PTR() *QOpenGLFunctions_2_1 {
	return p
}

func (p *QOpenGLFunctions_2_1) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_2_1) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_2_1(ptr QOpenGLFunctions_2_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_2_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_2_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_2_1 {
	var n = new(QOpenGLFunctions_2_1)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_0 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_0_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_0_PTR() *QOpenGLFunctions_3_0
}

func (p *QOpenGLFunctions_3_0) QOpenGLFunctions_3_0_PTR() *QOpenGLFunctions_3_0 {
	return p
}

func (p *QOpenGLFunctions_3_0) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_0) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_0(ptr QOpenGLFunctions_3_0_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_0_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_0FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_0 {
	var n = new(QOpenGLFunctions_3_0)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_1 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_1_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_1_PTR() *QOpenGLFunctions_3_1
}

func (p *QOpenGLFunctions_3_1) QOpenGLFunctions_3_1_PTR() *QOpenGLFunctions_3_1 {
	return p
}

func (p *QOpenGLFunctions_3_1) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_1) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_1(ptr QOpenGLFunctions_3_1_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_1_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_1FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_1 {
	var n = new(QOpenGLFunctions_3_1)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_2_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_2_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_2_Compatibility_PTR() *QOpenGLFunctions_3_2_Compatibility
}

func (p *QOpenGLFunctions_3_2_Compatibility) QOpenGLFunctions_3_2_Compatibility_PTR() *QOpenGLFunctions_3_2_Compatibility {
	return p
}

func (p *QOpenGLFunctions_3_2_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_2_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_2_Compatibility(ptr QOpenGLFunctions_3_2_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_2_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Compatibility {
	var n = new(QOpenGLFunctions_3_2_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_2_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_2_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_2_Core_PTR() *QOpenGLFunctions_3_2_Core
}

func (p *QOpenGLFunctions_3_2_Core) QOpenGLFunctions_3_2_Core_PTR() *QOpenGLFunctions_3_2_Core {
	return p
}

func (p *QOpenGLFunctions_3_2_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_2_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_2_Core(ptr QOpenGLFunctions_3_2_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_2_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_2_Core {
	var n = new(QOpenGLFunctions_3_2_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_3_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_3_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_3_Compatibility_PTR() *QOpenGLFunctions_3_3_Compatibility
}

func (p *QOpenGLFunctions_3_3_Compatibility) QOpenGLFunctions_3_3_Compatibility_PTR() *QOpenGLFunctions_3_3_Compatibility {
	return p
}

func (p *QOpenGLFunctions_3_3_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_3_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_3_Compatibility(ptr QOpenGLFunctions_3_3_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_3_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Compatibility {
	var n = new(QOpenGLFunctions_3_3_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_3_3_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_3_3_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_3_3_Core_PTR() *QOpenGLFunctions_3_3_Core
}

func (p *QOpenGLFunctions_3_3_Core) QOpenGLFunctions_3_3_Core_PTR() *QOpenGLFunctions_3_3_Core {
	return p
}

func (p *QOpenGLFunctions_3_3_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_3_3_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_3_3_Core(ptr QOpenGLFunctions_3_3_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_3_3_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_3_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_3_3_Core {
	var n = new(QOpenGLFunctions_3_3_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_0_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_0_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_0_Compatibility_PTR() *QOpenGLFunctions_4_0_Compatibility
}

func (p *QOpenGLFunctions_4_0_Compatibility) QOpenGLFunctions_4_0_Compatibility_PTR() *QOpenGLFunctions_4_0_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_0_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_0_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_0_Compatibility(ptr QOpenGLFunctions_4_0_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_0_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_0_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Compatibility {
	var n = new(QOpenGLFunctions_4_0_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_0_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_0_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_0_Core_PTR() *QOpenGLFunctions_4_0_Core
}

func (p *QOpenGLFunctions_4_0_Core) QOpenGLFunctions_4_0_Core_PTR() *QOpenGLFunctions_4_0_Core {
	return p
}

func (p *QOpenGLFunctions_4_0_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_0_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_0_Core(ptr QOpenGLFunctions_4_0_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_0_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_0_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_0_Core {
	var n = new(QOpenGLFunctions_4_0_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_1_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_1_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_1_Compatibility_PTR() *QOpenGLFunctions_4_1_Compatibility
}

func (p *QOpenGLFunctions_4_1_Compatibility) QOpenGLFunctions_4_1_Compatibility_PTR() *QOpenGLFunctions_4_1_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_1_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_1_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_1_Compatibility(ptr QOpenGLFunctions_4_1_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_1_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_1_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Compatibility {
	var n = new(QOpenGLFunctions_4_1_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_1_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_1_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_1_Core_PTR() *QOpenGLFunctions_4_1_Core
}

func (p *QOpenGLFunctions_4_1_Core) QOpenGLFunctions_4_1_Core_PTR() *QOpenGLFunctions_4_1_Core {
	return p
}

func (p *QOpenGLFunctions_4_1_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_1_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_1_Core(ptr QOpenGLFunctions_4_1_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_1_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_1_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_1_Core {
	var n = new(QOpenGLFunctions_4_1_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_2_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_2_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_2_Compatibility_PTR() *QOpenGLFunctions_4_2_Compatibility
}

func (p *QOpenGLFunctions_4_2_Compatibility) QOpenGLFunctions_4_2_Compatibility_PTR() *QOpenGLFunctions_4_2_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_2_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_2_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_2_Compatibility(ptr QOpenGLFunctions_4_2_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_2_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_2_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Compatibility {
	var n = new(QOpenGLFunctions_4_2_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_2_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_2_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_2_Core_PTR() *QOpenGLFunctions_4_2_Core
}

func (p *QOpenGLFunctions_4_2_Core) QOpenGLFunctions_4_2_Core_PTR() *QOpenGLFunctions_4_2_Core {
	return p
}

func (p *QOpenGLFunctions_4_2_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_2_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_2_Core(ptr QOpenGLFunctions_4_2_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_2_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_2_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_2_Core {
	var n = new(QOpenGLFunctions_4_2_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_3_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_3_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_3_Compatibility_PTR() *QOpenGLFunctions_4_3_Compatibility
}

func (p *QOpenGLFunctions_4_3_Compatibility) QOpenGLFunctions_4_3_Compatibility_PTR() *QOpenGLFunctions_4_3_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_3_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_3_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_3_Compatibility(ptr QOpenGLFunctions_4_3_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_3_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_3_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Compatibility {
	var n = new(QOpenGLFunctions_4_3_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_3_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_3_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_3_Core_PTR() *QOpenGLFunctions_4_3_Core
}

func (p *QOpenGLFunctions_4_3_Core) QOpenGLFunctions_4_3_Core_PTR() *QOpenGLFunctions_4_3_Core {
	return p
}

func (p *QOpenGLFunctions_4_3_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_3_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_3_Core(ptr QOpenGLFunctions_4_3_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_3_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_3_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_3_Core {
	var n = new(QOpenGLFunctions_4_3_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_4_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_4_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_4_Compatibility_PTR() *QOpenGLFunctions_4_4_Compatibility
}

func (p *QOpenGLFunctions_4_4_Compatibility) QOpenGLFunctions_4_4_Compatibility_PTR() *QOpenGLFunctions_4_4_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_4_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_4_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_4_Compatibility(ptr QOpenGLFunctions_4_4_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_4_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_4_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Compatibility {
	var n = new(QOpenGLFunctions_4_4_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_4_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_4_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_4_Core_PTR() *QOpenGLFunctions_4_4_Core
}

func (p *QOpenGLFunctions_4_4_Core) QOpenGLFunctions_4_4_Core_PTR() *QOpenGLFunctions_4_4_Core {
	return p
}

func (p *QOpenGLFunctions_4_4_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_4_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_4_Core(ptr QOpenGLFunctions_4_4_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_4_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_4_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_4_Core {
	var n = new(QOpenGLFunctions_4_4_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_5_Compatibility struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_5_Compatibility_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_5_Compatibility_PTR() *QOpenGLFunctions_4_5_Compatibility
}

func (p *QOpenGLFunctions_4_5_Compatibility) QOpenGLFunctions_4_5_Compatibility_PTR() *QOpenGLFunctions_4_5_Compatibility {
	return p
}

func (p *QOpenGLFunctions_4_5_Compatibility) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_5_Compatibility) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_5_Compatibility(ptr QOpenGLFunctions_4_5_Compatibility_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_5_Compatibility_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_5_CompatibilityFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Compatibility {
	var n = new(QOpenGLFunctions_4_5_Compatibility)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_4_5_Core struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_4_5_Core_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_4_5_Core_PTR() *QOpenGLFunctions_4_5_Core
}

func (p *QOpenGLFunctions_4_5_Core) QOpenGLFunctions_4_5_Core_PTR() *QOpenGLFunctions_4_5_Core {
	return p
}

func (p *QOpenGLFunctions_4_5_Core) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_4_5_Core) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_4_5_Core(ptr QOpenGLFunctions_4_5_Core_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_4_5_Core_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_4_5_CoreFromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_4_5_Core {
	var n = new(QOpenGLFunctions_4_5_Core)
	n.SetPointer(ptr)
	return n
}

type QOpenGLFunctions_ES2 struct {
	QAbstractOpenGLFunctions
}

type QOpenGLFunctions_ES2_ITF interface {
	QAbstractOpenGLFunctions_ITF
	QOpenGLFunctions_ES2_PTR() *QOpenGLFunctions_ES2
}

func (p *QOpenGLFunctions_ES2) QOpenGLFunctions_ES2_PTR() *QOpenGLFunctions_ES2 {
	return p
}

func (p *QOpenGLFunctions_ES2) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractOpenGLFunctions_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLFunctions_ES2) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractOpenGLFunctions_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLFunctions_ES2(ptr QOpenGLFunctions_ES2_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLFunctions_ES2_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLFunctions_ES2FromPointer(ptr unsafe.Pointer) *QOpenGLFunctions_ES2 {
	var n = new(QOpenGLFunctions_ES2)
	n.SetPointer(ptr)
	return n
}

type QOpenGLPaintDevice struct {
	QPaintDevice
}

type QOpenGLPaintDevice_ITF interface {
	QPaintDevice_ITF
	QOpenGLPaintDevice_PTR() *QOpenGLPaintDevice
}

func (p *QOpenGLPaintDevice) QOpenGLPaintDevice_PTR() *QOpenGLPaintDevice {
	return p
}

func (p *QOpenGLPaintDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLPaintDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLPaintDevice(ptr QOpenGLPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLPaintDeviceFromPointer(ptr unsafe.Pointer) *QOpenGLPaintDevice {
	var n = new(QOpenGLPaintDevice)
	n.SetPointer(ptr)
	return n
}

type QOpenGLPixelTransferOptions struct {
	ptr unsafe.Pointer
}

type QOpenGLPixelTransferOptions_ITF interface {
	QOpenGLPixelTransferOptions_PTR() *QOpenGLPixelTransferOptions
}

func (p *QOpenGLPixelTransferOptions) QOpenGLPixelTransferOptions_PTR() *QOpenGLPixelTransferOptions {
	return p
}

func (p *QOpenGLPixelTransferOptions) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLPixelTransferOptions) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLPixelTransferOptions(ptr QOpenGLPixelTransferOptions_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLPixelTransferOptions_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLPixelTransferOptionsFromPointer(ptr unsafe.Pointer) *QOpenGLPixelTransferOptions {
	var n = new(QOpenGLPixelTransferOptions)
	n.SetPointer(ptr)
	return n
}

//QOpenGLShader::ShaderTypeBit
type QOpenGLShader__ShaderTypeBit int64

const (
	QOpenGLShader__Vertex                 = QOpenGLShader__ShaderTypeBit(0x0001)
	QOpenGLShader__Fragment               = QOpenGLShader__ShaderTypeBit(0x0002)
	QOpenGLShader__Geometry               = QOpenGLShader__ShaderTypeBit(0x0004)
	QOpenGLShader__TessellationControl    = QOpenGLShader__ShaderTypeBit(0x0008)
	QOpenGLShader__TessellationEvaluation = QOpenGLShader__ShaderTypeBit(0x0010)
	QOpenGLShader__Compute                = QOpenGLShader__ShaderTypeBit(0x0020)
)

type QOpenGLShader struct {
	core.QObject
}

type QOpenGLShader_ITF interface {
	core.QObject_ITF
	QOpenGLShader_PTR() *QOpenGLShader
}

func (p *QOpenGLShader) QOpenGLShader_PTR() *QOpenGLShader {
	return p
}

func (p *QOpenGLShader) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLShader) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLShader(ptr QOpenGLShader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLShader_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLShaderFromPointer(ptr unsafe.Pointer) *QOpenGLShader {
	var n = new(QOpenGLShader)
	n.SetPointer(ptr)
	return n
}

type QOpenGLShaderProgram struct {
	core.QObject
}

type QOpenGLShaderProgram_ITF interface {
	core.QObject_ITF
	QOpenGLShaderProgram_PTR() *QOpenGLShaderProgram
}

func (p *QOpenGLShaderProgram) QOpenGLShaderProgram_PTR() *QOpenGLShaderProgram {
	return p
}

func (p *QOpenGLShaderProgram) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLShaderProgram) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLShaderProgram(ptr QOpenGLShaderProgram_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLShaderProgram_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLShaderProgramFromPointer(ptr unsafe.Pointer) *QOpenGLShaderProgram {
	var n = new(QOpenGLShaderProgram)
	n.SetPointer(ptr)
	return n
}

//QOpenGLTexture::BindingTarget
type QOpenGLTexture__BindingTarget int64

const (
	QOpenGLTexture__BindingTarget1D                 = QOpenGLTexture__BindingTarget(0x8068)
	QOpenGLTexture__BindingTarget1DArray            = QOpenGLTexture__BindingTarget(0x8C1C)
	QOpenGLTexture__BindingTarget2D                 = QOpenGLTexture__BindingTarget(0x8069)
	QOpenGLTexture__BindingTarget2DArray            = QOpenGLTexture__BindingTarget(0x8C1D)
	QOpenGLTexture__BindingTarget3D                 = QOpenGLTexture__BindingTarget(0x806A)
	QOpenGLTexture__BindingTargetCubeMap            = QOpenGLTexture__BindingTarget(0x8514)
	QOpenGLTexture__BindingTargetCubeMapArray       = QOpenGLTexture__BindingTarget(0x900A)
	QOpenGLTexture__BindingTarget2DMultisample      = QOpenGLTexture__BindingTarget(0x9104)
	QOpenGLTexture__BindingTarget2DMultisampleArray = QOpenGLTexture__BindingTarget(0x9105)
	QOpenGLTexture__BindingTargetRectangle          = QOpenGLTexture__BindingTarget(0x84F6)
	QOpenGLTexture__BindingTargetBuffer             = QOpenGLTexture__BindingTarget(0x8C2C)
)

//QOpenGLTexture::ComparisonFunction
type QOpenGLTexture__ComparisonFunction int64

const (
	QOpenGLTexture__CompareLessEqual    = QOpenGLTexture__ComparisonFunction(0x0203)
	QOpenGLTexture__CompareGreaterEqual = QOpenGLTexture__ComparisonFunction(0x0206)
	QOpenGLTexture__CompareLess         = QOpenGLTexture__ComparisonFunction(0x0201)
	QOpenGLTexture__CompareGreater      = QOpenGLTexture__ComparisonFunction(0x0204)
	QOpenGLTexture__CompareEqual        = QOpenGLTexture__ComparisonFunction(0x0202)
	QOpenGLTexture__CommpareNotEqual    = QOpenGLTexture__ComparisonFunction(0x0205)
	QOpenGLTexture__CompareAlways       = QOpenGLTexture__ComparisonFunction(0x0207)
	QOpenGLTexture__CompareNever        = QOpenGLTexture__ComparisonFunction(0x0200)
)

//QOpenGLTexture::ComparisonMode
type QOpenGLTexture__ComparisonMode int64

const (
	QOpenGLTexture__CompareRefToTexture = QOpenGLTexture__ComparisonMode(0x884E)
	QOpenGLTexture__CompareNone         = QOpenGLTexture__ComparisonMode(0x0000)
)

//QOpenGLTexture::CoordinateDirection
type QOpenGLTexture__CoordinateDirection int64

const (
	QOpenGLTexture__DirectionS = QOpenGLTexture__CoordinateDirection(0x2802)
	QOpenGLTexture__DirectionT = QOpenGLTexture__CoordinateDirection(0x2803)
	QOpenGLTexture__DirectionR = QOpenGLTexture__CoordinateDirection(0x8072)
)

//QOpenGLTexture::CubeMapFace
type QOpenGLTexture__CubeMapFace int64

const (
	QOpenGLTexture__CubeMapPositiveX = QOpenGLTexture__CubeMapFace(0x8515)
	QOpenGLTexture__CubeMapNegativeX = QOpenGLTexture__CubeMapFace(0x8516)
	QOpenGLTexture__CubeMapPositiveY = QOpenGLTexture__CubeMapFace(0x8517)
	QOpenGLTexture__CubeMapNegativeY = QOpenGLTexture__CubeMapFace(0x8518)
	QOpenGLTexture__CubeMapPositiveZ = QOpenGLTexture__CubeMapFace(0x8519)
	QOpenGLTexture__CubeMapNegativeZ = QOpenGLTexture__CubeMapFace(0x851A)
)

//QOpenGLTexture::DepthStencilMode
type QOpenGLTexture__DepthStencilMode int64

const (
	QOpenGLTexture__DepthMode   = QOpenGLTexture__DepthStencilMode(0x1902)
	QOpenGLTexture__StencilMode = QOpenGLTexture__DepthStencilMode(0x1901)
)

//QOpenGLTexture::Feature
type QOpenGLTexture__Feature int64

const (
	QOpenGLTexture__ImmutableStorage            = QOpenGLTexture__Feature(0x00000001)
	QOpenGLTexture__ImmutableMultisampleStorage = QOpenGLTexture__Feature(0x00000002)
	QOpenGLTexture__TextureRectangle            = QOpenGLTexture__Feature(0x00000004)
	QOpenGLTexture__TextureArrays               = QOpenGLTexture__Feature(0x00000008)
	QOpenGLTexture__Texture3D                   = QOpenGLTexture__Feature(0x00000010)
	QOpenGLTexture__TextureMultisample          = QOpenGLTexture__Feature(0x00000020)
	QOpenGLTexture__TextureBuffer               = QOpenGLTexture__Feature(0x00000040)
	QOpenGLTexture__TextureCubeMapArrays        = QOpenGLTexture__Feature(0x00000080)
	QOpenGLTexture__Swizzle                     = QOpenGLTexture__Feature(0x00000100)
	QOpenGLTexture__StencilTexturing            = QOpenGLTexture__Feature(0x00000200)
	QOpenGLTexture__AnisotropicFiltering        = QOpenGLTexture__Feature(0x00000400)
	QOpenGLTexture__NPOTTextures                = QOpenGLTexture__Feature(0x00000800)
	QOpenGLTexture__NPOTTextureRepeat           = QOpenGLTexture__Feature(0x00001000)
	QOpenGLTexture__Texture1D                   = QOpenGLTexture__Feature(0x00002000)
	QOpenGLTexture__TextureComparisonOperators  = QOpenGLTexture__Feature(0x00004000)
	QOpenGLTexture__TextureMipMapLevel          = QOpenGLTexture__Feature(0x00008000)
)

//QOpenGLTexture::Filter
type QOpenGLTexture__Filter int64

const (
	QOpenGLTexture__Nearest              = QOpenGLTexture__Filter(0x2600)
	QOpenGLTexture__Linear               = QOpenGLTexture__Filter(0x2601)
	QOpenGLTexture__NearestMipMapNearest = QOpenGLTexture__Filter(0x2700)
	QOpenGLTexture__NearestMipMapLinear  = QOpenGLTexture__Filter(0x2702)
	QOpenGLTexture__LinearMipMapNearest  = QOpenGLTexture__Filter(0x2701)
	QOpenGLTexture__LinearMipMapLinear   = QOpenGLTexture__Filter(0x2703)
)

//QOpenGLTexture::MipMapGeneration
type QOpenGLTexture__MipMapGeneration int64

const (
	QOpenGLTexture__GenerateMipMaps     = QOpenGLTexture__MipMapGeneration(0)
	QOpenGLTexture__DontGenerateMipMaps = QOpenGLTexture__MipMapGeneration(1)
)

//QOpenGLTexture::PixelFormat
type QOpenGLTexture__PixelFormat int64

const (
	QOpenGLTexture__NoSourceFormat = QOpenGLTexture__PixelFormat(0)
	QOpenGLTexture__Red            = QOpenGLTexture__PixelFormat(0x1903)
	QOpenGLTexture__RG             = QOpenGLTexture__PixelFormat(0x8227)
	QOpenGLTexture__RGB            = QOpenGLTexture__PixelFormat(0x1907)
	QOpenGLTexture__BGR            = QOpenGLTexture__PixelFormat(0x80E0)
	QOpenGLTexture__RGBA           = QOpenGLTexture__PixelFormat(0x1908)
	QOpenGLTexture__BGRA           = QOpenGLTexture__PixelFormat(0x80E1)
	QOpenGLTexture__Red_Integer    = QOpenGLTexture__PixelFormat(0x8D94)
	QOpenGLTexture__RG_Integer     = QOpenGLTexture__PixelFormat(0x8228)
	QOpenGLTexture__RGB_Integer    = QOpenGLTexture__PixelFormat(0x8D98)
	QOpenGLTexture__BGR_Integer    = QOpenGLTexture__PixelFormat(0x8D9A)
	QOpenGLTexture__RGBA_Integer   = QOpenGLTexture__PixelFormat(0x8D99)
	QOpenGLTexture__BGRA_Integer   = QOpenGLTexture__PixelFormat(0x8D9B)
	QOpenGLTexture__Stencil        = QOpenGLTexture__PixelFormat(0x1901)
	QOpenGLTexture__Depth          = QOpenGLTexture__PixelFormat(0x1902)
	QOpenGLTexture__DepthStencil   = QOpenGLTexture__PixelFormat(0x84F9)
	QOpenGLTexture__Alpha          = QOpenGLTexture__PixelFormat(0x1906)
	QOpenGLTexture__Luminance      = QOpenGLTexture__PixelFormat(0x1909)
	QOpenGLTexture__LuminanceAlpha = QOpenGLTexture__PixelFormat(0x190A)
)

//QOpenGLTexture::PixelType
type QOpenGLTexture__PixelType int64

const (
	QOpenGLTexture__NoPixelType               = QOpenGLTexture__PixelType(0)
	QOpenGLTexture__Int8                      = QOpenGLTexture__PixelType(0x1400)
	QOpenGLTexture__UInt8                     = QOpenGLTexture__PixelType(0x1401)
	QOpenGLTexture__Int16                     = QOpenGLTexture__PixelType(0x1402)
	QOpenGLTexture__UInt16                    = QOpenGLTexture__PixelType(0x1403)
	QOpenGLTexture__Int32                     = QOpenGLTexture__PixelType(0x1404)
	QOpenGLTexture__UInt32                    = QOpenGLTexture__PixelType(0x1405)
	QOpenGLTexture__Float16                   = QOpenGLTexture__PixelType(0x140B)
	QOpenGLTexture__Float16OES                = QOpenGLTexture__PixelType(0x8D61)
	QOpenGLTexture__Float32                   = QOpenGLTexture__PixelType(0x1406)
	QOpenGLTexture__UInt32_RGB9_E5            = QOpenGLTexture__PixelType(0x8C3E)
	QOpenGLTexture__UInt32_RG11B10F           = QOpenGLTexture__PixelType(0x8C3B)
	QOpenGLTexture__UInt8_RG3B2               = QOpenGLTexture__PixelType(0x8032)
	QOpenGLTexture__UInt8_RG3B2_Rev           = QOpenGLTexture__PixelType(0x8362)
	QOpenGLTexture__UInt16_RGB5A1             = QOpenGLTexture__PixelType(0x8034)
	QOpenGLTexture__UInt16_RGB5A1_Rev         = QOpenGLTexture__PixelType(0x8366)
	QOpenGLTexture__UInt16_R5G6B5             = QOpenGLTexture__PixelType(0x8363)
	QOpenGLTexture__UInt16_R5G6B5_Rev         = QOpenGLTexture__PixelType(0x8364)
	QOpenGLTexture__UInt16_RGBA4              = QOpenGLTexture__PixelType(0x8033)
	QOpenGLTexture__UInt16_RGBA4_Rev          = QOpenGLTexture__PixelType(0x8365)
	QOpenGLTexture__UInt32_RGBA8              = QOpenGLTexture__PixelType(0x8035)
	QOpenGLTexture__UInt32_RGBA8_Rev          = QOpenGLTexture__PixelType(0x8367)
	QOpenGLTexture__UInt32_RGB10A2            = QOpenGLTexture__PixelType(0x8036)
	QOpenGLTexture__UInt32_RGB10A2_Rev        = QOpenGLTexture__PixelType(0x8368)
	QOpenGLTexture__UInt32_D24S8              = QOpenGLTexture__PixelType(0x84FA)
	QOpenGLTexture__Float32_D32_UInt32_S8_X24 = QOpenGLTexture__PixelType(0x8DAD)
)

//QOpenGLTexture::SwizzleComponent
type QOpenGLTexture__SwizzleComponent int64

const (
	QOpenGLTexture__SwizzleRed   = QOpenGLTexture__SwizzleComponent(0x8E42)
	QOpenGLTexture__SwizzleGreen = QOpenGLTexture__SwizzleComponent(0x8E43)
	QOpenGLTexture__SwizzleBlue  = QOpenGLTexture__SwizzleComponent(0x8E44)
	QOpenGLTexture__SwizzleAlpha = QOpenGLTexture__SwizzleComponent(0x8E45)
)

//QOpenGLTexture::SwizzleValue
type QOpenGLTexture__SwizzleValue int64

const (
	QOpenGLTexture__RedValue   = QOpenGLTexture__SwizzleValue(0x1903)
	QOpenGLTexture__GreenValue = QOpenGLTexture__SwizzleValue(0x1904)
	QOpenGLTexture__BlueValue  = QOpenGLTexture__SwizzleValue(0x1905)
	QOpenGLTexture__AlphaValue = QOpenGLTexture__SwizzleValue(0x1906)
	QOpenGLTexture__ZeroValue  = QOpenGLTexture__SwizzleValue(0)
	QOpenGLTexture__OneValue   = QOpenGLTexture__SwizzleValue(1)
)

//QOpenGLTexture::Target
type QOpenGLTexture__Target int64

const (
	QOpenGLTexture__Target1D                 = QOpenGLTexture__Target(0x0DE0)
	QOpenGLTexture__Target1DArray            = QOpenGLTexture__Target(0x8C18)
	QOpenGLTexture__Target2D                 = QOpenGLTexture__Target(0x0DE1)
	QOpenGLTexture__Target2DArray            = QOpenGLTexture__Target(0x8C1A)
	QOpenGLTexture__Target3D                 = QOpenGLTexture__Target(0x806F)
	QOpenGLTexture__TargetCubeMap            = QOpenGLTexture__Target(0x8513)
	QOpenGLTexture__TargetCubeMapArray       = QOpenGLTexture__Target(0x9009)
	QOpenGLTexture__Target2DMultisample      = QOpenGLTexture__Target(0x9100)
	QOpenGLTexture__Target2DMultisampleArray = QOpenGLTexture__Target(0x9102)
	QOpenGLTexture__TargetRectangle          = QOpenGLTexture__Target(0x84F5)
	QOpenGLTexture__TargetBuffer             = QOpenGLTexture__Target(0x8C2A)
)

//QOpenGLTexture::TextureFormat
type QOpenGLTexture__TextureFormat int64

const (
	QOpenGLTexture__NoFormat                       = QOpenGLTexture__TextureFormat(0)
	QOpenGLTexture__R8_UNorm                       = QOpenGLTexture__TextureFormat(0x8229)
	QOpenGLTexture__RG8_UNorm                      = QOpenGLTexture__TextureFormat(0x822B)
	QOpenGLTexture__RGB8_UNorm                     = QOpenGLTexture__TextureFormat(0x8051)
	QOpenGLTexture__RGBA8_UNorm                    = QOpenGLTexture__TextureFormat(0x8058)
	QOpenGLTexture__R16_UNorm                      = QOpenGLTexture__TextureFormat(0x822A)
	QOpenGLTexture__RG16_UNorm                     = QOpenGLTexture__TextureFormat(0x822C)
	QOpenGLTexture__RGB16_UNorm                    = QOpenGLTexture__TextureFormat(0x8054)
	QOpenGLTexture__RGBA16_UNorm                   = QOpenGLTexture__TextureFormat(0x805B)
	QOpenGLTexture__R8_SNorm                       = QOpenGLTexture__TextureFormat(0x8F94)
	QOpenGLTexture__RG8_SNorm                      = QOpenGLTexture__TextureFormat(0x8F95)
	QOpenGLTexture__RGB8_SNorm                     = QOpenGLTexture__TextureFormat(0x8F96)
	QOpenGLTexture__RGBA8_SNorm                    = QOpenGLTexture__TextureFormat(0x8F97)
	QOpenGLTexture__R16_SNorm                      = QOpenGLTexture__TextureFormat(0x8F98)
	QOpenGLTexture__RG16_SNorm                     = QOpenGLTexture__TextureFormat(0x8F99)
	QOpenGLTexture__RGB16_SNorm                    = QOpenGLTexture__TextureFormat(0x8F9A)
	QOpenGLTexture__RGBA16_SNorm                   = QOpenGLTexture__TextureFormat(0x8F9B)
	QOpenGLTexture__R8U                            = QOpenGLTexture__TextureFormat(0x8232)
	QOpenGLTexture__RG8U                           = QOpenGLTexture__TextureFormat(0x8238)
	QOpenGLTexture__RGB8U                          = QOpenGLTexture__TextureFormat(0x8D7D)
	QOpenGLTexture__RGBA8U                         = QOpenGLTexture__TextureFormat(0x8D7C)
	QOpenGLTexture__R16U                           = QOpenGLTexture__TextureFormat(0x8234)
	QOpenGLTexture__RG16U                          = QOpenGLTexture__TextureFormat(0x823A)
	QOpenGLTexture__RGB16U                         = QOpenGLTexture__TextureFormat(0x8D77)
	QOpenGLTexture__RGBA16U                        = QOpenGLTexture__TextureFormat(0x8D76)
	QOpenGLTexture__R32U                           = QOpenGLTexture__TextureFormat(0x8236)
	QOpenGLTexture__RG32U                          = QOpenGLTexture__TextureFormat(0x823C)
	QOpenGLTexture__RGB32U                         = QOpenGLTexture__TextureFormat(0x8D71)
	QOpenGLTexture__RGBA32U                        = QOpenGLTexture__TextureFormat(0x8D70)
	QOpenGLTexture__R8I                            = QOpenGLTexture__TextureFormat(0x8231)
	QOpenGLTexture__RG8I                           = QOpenGLTexture__TextureFormat(0x8237)
	QOpenGLTexture__RGB8I                          = QOpenGLTexture__TextureFormat(0x8D8F)
	QOpenGLTexture__RGBA8I                         = QOpenGLTexture__TextureFormat(0x8D8E)
	QOpenGLTexture__R16I                           = QOpenGLTexture__TextureFormat(0x8233)
	QOpenGLTexture__RG16I                          = QOpenGLTexture__TextureFormat(0x8239)
	QOpenGLTexture__RGB16I                         = QOpenGLTexture__TextureFormat(0x8D89)
	QOpenGLTexture__RGBA16I                        = QOpenGLTexture__TextureFormat(0x8D88)
	QOpenGLTexture__R32I                           = QOpenGLTexture__TextureFormat(0x8235)
	QOpenGLTexture__RG32I                          = QOpenGLTexture__TextureFormat(0x823B)
	QOpenGLTexture__RGB32I                         = QOpenGLTexture__TextureFormat(0x8D83)
	QOpenGLTexture__RGBA32I                        = QOpenGLTexture__TextureFormat(0x8D82)
	QOpenGLTexture__R16F                           = QOpenGLTexture__TextureFormat(0x822D)
	QOpenGLTexture__RG16F                          = QOpenGLTexture__TextureFormat(0x822F)
	QOpenGLTexture__RGB16F                         = QOpenGLTexture__TextureFormat(0x881B)
	QOpenGLTexture__RGBA16F                        = QOpenGLTexture__TextureFormat(0x881A)
	QOpenGLTexture__R32F                           = QOpenGLTexture__TextureFormat(0x822E)
	QOpenGLTexture__RG32F                          = QOpenGLTexture__TextureFormat(0x8230)
	QOpenGLTexture__RGB32F                         = QOpenGLTexture__TextureFormat(0x8815)
	QOpenGLTexture__RGBA32F                        = QOpenGLTexture__TextureFormat(0x8814)
	QOpenGLTexture__RGB9E5                         = QOpenGLTexture__TextureFormat(0x8C3D)
	QOpenGLTexture__RG11B10F                       = QOpenGLTexture__TextureFormat(0x8C3A)
	QOpenGLTexture__RG3B2                          = QOpenGLTexture__TextureFormat(0x2A10)
	QOpenGLTexture__R5G6B5                         = QOpenGLTexture__TextureFormat(0x8D62)
	QOpenGLTexture__RGB5A1                         = QOpenGLTexture__TextureFormat(0x8057)
	QOpenGLTexture__RGBA4                          = QOpenGLTexture__TextureFormat(0x8056)
	QOpenGLTexture__RGB10A2                        = QOpenGLTexture__TextureFormat(0x906F)
	QOpenGLTexture__D16                            = QOpenGLTexture__TextureFormat(0x81A5)
	QOpenGLTexture__D24                            = QOpenGLTexture__TextureFormat(0x81A6)
	QOpenGLTexture__D24S8                          = QOpenGLTexture__TextureFormat(0x88F0)
	QOpenGLTexture__D32                            = QOpenGLTexture__TextureFormat(0x81A7)
	QOpenGLTexture__D32F                           = QOpenGLTexture__TextureFormat(0x8CAC)
	QOpenGLTexture__D32FS8X24                      = QOpenGLTexture__TextureFormat(0x8CAD)
	QOpenGLTexture__S8                             = QOpenGLTexture__TextureFormat(0x8D48)
	QOpenGLTexture__RGB_DXT1                       = QOpenGLTexture__TextureFormat(0x83F0)
	QOpenGLTexture__RGBA_DXT1                      = QOpenGLTexture__TextureFormat(0x83F1)
	QOpenGLTexture__RGBA_DXT3                      = QOpenGLTexture__TextureFormat(0x83F2)
	QOpenGLTexture__RGBA_DXT5                      = QOpenGLTexture__TextureFormat(0x83F3)
	QOpenGLTexture__R_ATI1N_UNorm                  = QOpenGLTexture__TextureFormat(0x8DBB)
	QOpenGLTexture__R_ATI1N_SNorm                  = QOpenGLTexture__TextureFormat(0x8DBC)
	QOpenGLTexture__RG_ATI2N_UNorm                 = QOpenGLTexture__TextureFormat(0x8DBD)
	QOpenGLTexture__RG_ATI2N_SNorm                 = QOpenGLTexture__TextureFormat(0x8DBE)
	QOpenGLTexture__RGB_BP_UNSIGNED_FLOAT          = QOpenGLTexture__TextureFormat(0x8E8F)
	QOpenGLTexture__RGB_BP_SIGNED_FLOAT            = QOpenGLTexture__TextureFormat(0x8E8E)
	QOpenGLTexture__RGB_BP_UNorm                   = QOpenGLTexture__TextureFormat(0x8E8C)
	QOpenGLTexture__R11_EAC_UNorm                  = QOpenGLTexture__TextureFormat(0x9270)
	QOpenGLTexture__R11_EAC_SNorm                  = QOpenGLTexture__TextureFormat(0x9271)
	QOpenGLTexture__RG11_EAC_UNorm                 = QOpenGLTexture__TextureFormat(0x9272)
	QOpenGLTexture__RG11_EAC_SNorm                 = QOpenGLTexture__TextureFormat(0x9273)
	QOpenGLTexture__RGB8_ETC2                      = QOpenGLTexture__TextureFormat(0x9274)
	QOpenGLTexture__SRGB8_ETC2                     = QOpenGLTexture__TextureFormat(0x9275)
	QOpenGLTexture__RGB8_PunchThrough_Alpha1_ETC2  = QOpenGLTexture__TextureFormat(0x9276)
	QOpenGLTexture__SRGB8_PunchThrough_Alpha1_ETC2 = QOpenGLTexture__TextureFormat(0x9277)
	QOpenGLTexture__RGBA8_ETC2_EAC                 = QOpenGLTexture__TextureFormat(0x9278)
	QOpenGLTexture__SRGB8_Alpha8_ETC2_EAC          = QOpenGLTexture__TextureFormat(0x9279)
	QOpenGLTexture__RGB8_ETC1                      = QOpenGLTexture__TextureFormat(0x8D64)
	QOpenGLTexture__SRGB8                          = QOpenGLTexture__TextureFormat(0x8C41)
	QOpenGLTexture__SRGB8_Alpha8                   = QOpenGLTexture__TextureFormat(0x8C43)
	QOpenGLTexture__SRGB_DXT1                      = QOpenGLTexture__TextureFormat(0x8C4C)
	QOpenGLTexture__SRGB_Alpha_DXT1                = QOpenGLTexture__TextureFormat(0x8C4D)
	QOpenGLTexture__SRGB_Alpha_DXT3                = QOpenGLTexture__TextureFormat(0x8C4E)
	QOpenGLTexture__SRGB_Alpha_DXT5                = QOpenGLTexture__TextureFormat(0x8C4F)
	QOpenGLTexture__SRGB_BP_UNorm                  = QOpenGLTexture__TextureFormat(0x8E8D)
	QOpenGLTexture__DepthFormat                    = QOpenGLTexture__TextureFormat(0x1902)
	QOpenGLTexture__AlphaFormat                    = QOpenGLTexture__TextureFormat(0x1906)
	QOpenGLTexture__RGBFormat                      = QOpenGLTexture__TextureFormat(0x1907)
	QOpenGLTexture__RGBAFormat                     = QOpenGLTexture__TextureFormat(0x1908)
	QOpenGLTexture__LuminanceFormat                = QOpenGLTexture__TextureFormat(0x1909)
	QOpenGLTexture__LuminanceAlphaFormat           = QOpenGLTexture__TextureFormat(0x190A)
)

//QOpenGLTexture::TextureUnitReset
type QOpenGLTexture__TextureUnitReset int64

const (
	QOpenGLTexture__ResetTextureUnit     = QOpenGLTexture__TextureUnitReset(0)
	QOpenGLTexture__DontResetTextureUnit = QOpenGLTexture__TextureUnitReset(1)
)

//QOpenGLTexture::WrapMode
type QOpenGLTexture__WrapMode int64

const (
	QOpenGLTexture__Repeat         = QOpenGLTexture__WrapMode(0x2901)
	QOpenGLTexture__MirroredRepeat = QOpenGLTexture__WrapMode(0x8370)
	QOpenGLTexture__ClampToEdge    = QOpenGLTexture__WrapMode(0x812F)
	QOpenGLTexture__ClampToBorder  = QOpenGLTexture__WrapMode(0x812D)
)

type QOpenGLTexture struct {
	ptr unsafe.Pointer
}

type QOpenGLTexture_ITF interface {
	QOpenGLTexture_PTR() *QOpenGLTexture
}

func (p *QOpenGLTexture) QOpenGLTexture_PTR() *QOpenGLTexture {
	return p
}

func (p *QOpenGLTexture) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLTexture) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLTexture(ptr QOpenGLTexture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTexture_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTextureFromPointer(ptr unsafe.Pointer) *QOpenGLTexture {
	var n = new(QOpenGLTexture)
	n.SetPointer(ptr)
	return n
}

type QOpenGLTimeMonitor struct {
	core.QObject
}

type QOpenGLTimeMonitor_ITF interface {
	core.QObject_ITF
	QOpenGLTimeMonitor_PTR() *QOpenGLTimeMonitor
}

func (p *QOpenGLTimeMonitor) QOpenGLTimeMonitor_PTR() *QOpenGLTimeMonitor {
	return p
}

func (p *QOpenGLTimeMonitor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLTimeMonitor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLTimeMonitor(ptr QOpenGLTimeMonitor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTimeMonitor_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTimeMonitorFromPointer(ptr unsafe.Pointer) *QOpenGLTimeMonitor {
	var n = new(QOpenGLTimeMonitor)
	n.SetPointer(ptr)
	return n
}

type QOpenGLTimerQuery struct {
	core.QObject
}

type QOpenGLTimerQuery_ITF interface {
	core.QObject_ITF
	QOpenGLTimerQuery_PTR() *QOpenGLTimerQuery
}

func (p *QOpenGLTimerQuery) QOpenGLTimerQuery_PTR() *QOpenGLTimerQuery {
	return p
}

func (p *QOpenGLTimerQuery) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLTimerQuery) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLTimerQuery(ptr QOpenGLTimerQuery_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLTimerQuery_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLTimerQueryFromPointer(ptr unsafe.Pointer) *QOpenGLTimerQuery {
	var n = new(QOpenGLTimerQuery)
	n.SetPointer(ptr)
	return n
}

type QOpenGLVersionProfile struct {
	ptr unsafe.Pointer
}

type QOpenGLVersionProfile_ITF interface {
	QOpenGLVersionProfile_PTR() *QOpenGLVersionProfile
}

func (p *QOpenGLVersionProfile) QOpenGLVersionProfile_PTR() *QOpenGLVersionProfile {
	return p
}

func (p *QOpenGLVersionProfile) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QOpenGLVersionProfile) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQOpenGLVersionProfile(ptr QOpenGLVersionProfile_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLVersionProfile_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLVersionProfileFromPointer(ptr unsafe.Pointer) *QOpenGLVersionProfile {
	var n = new(QOpenGLVersionProfile)
	n.SetPointer(ptr)
	return n
}

type QOpenGLVertexArrayObject struct {
	core.QObject
}

type QOpenGLVertexArrayObject_ITF interface {
	core.QObject_ITF
	QOpenGLVertexArrayObject_PTR() *QOpenGLVertexArrayObject
}

func (p *QOpenGLVertexArrayObject) QOpenGLVertexArrayObject_PTR() *QOpenGLVertexArrayObject {
	return p
}

func (p *QOpenGLVertexArrayObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLVertexArrayObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLVertexArrayObject(ptr QOpenGLVertexArrayObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLVertexArrayObject_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLVertexArrayObjectFromPointer(ptr unsafe.Pointer) *QOpenGLVertexArrayObject {
	var n = new(QOpenGLVertexArrayObject)
	n.SetPointer(ptr)
	return n
}

//QOpenGLWindow::UpdateBehavior
type QOpenGLWindow__UpdateBehavior int64

const (
	QOpenGLWindow__NoPartialUpdate    = QOpenGLWindow__UpdateBehavior(0)
	QOpenGLWindow__PartialUpdateBlit  = QOpenGLWindow__UpdateBehavior(1)
	QOpenGLWindow__PartialUpdateBlend = QOpenGLWindow__UpdateBehavior(2)
)

type QOpenGLWindow struct {
	QPaintDeviceWindow
}

type QOpenGLWindow_ITF interface {
	QPaintDeviceWindow_ITF
	QOpenGLWindow_PTR() *QOpenGLWindow
}

func (p *QOpenGLWindow) QOpenGLWindow_PTR() *QOpenGLWindow {
	return p
}

func (p *QOpenGLWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func (p *QOpenGLWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDeviceWindow_PTR().SetPointer(ptr)
	}
}

func PointerFromQOpenGLWindow(ptr QOpenGLWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QOpenGLWindow_PTR().Pointer()
	}
	return nil
}

func NewQOpenGLWindowFromPointer(ptr unsafe.Pointer) *QOpenGLWindow {
	var n = new(QOpenGLWindow)
	n.SetPointer(ptr)
	return n
}

//QPageLayout::Mode
type QPageLayout__Mode int64

const (
	QPageLayout__StandardMode = QPageLayout__Mode(0)
	QPageLayout__FullPageMode = QPageLayout__Mode(1)
)

//QPageLayout::Orientation
type QPageLayout__Orientation int64

const (
	QPageLayout__Portrait  = QPageLayout__Orientation(0)
	QPageLayout__Landscape = QPageLayout__Orientation(1)
)

//QPageLayout::Unit
type QPageLayout__Unit int64

const (
	QPageLayout__Millimeter = QPageLayout__Unit(0)
	QPageLayout__Point      = QPageLayout__Unit(1)
	QPageLayout__Inch       = QPageLayout__Unit(2)
	QPageLayout__Pica       = QPageLayout__Unit(3)
	QPageLayout__Didot      = QPageLayout__Unit(4)
	QPageLayout__Cicero     = QPageLayout__Unit(5)
)

type QPageLayout struct {
	ptr unsafe.Pointer
}

type QPageLayout_ITF interface {
	QPageLayout_PTR() *QPageLayout
}

func (p *QPageLayout) QPageLayout_PTR() *QPageLayout {
	return p
}

func (p *QPageLayout) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPageLayout) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPageLayout(ptr QPageLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPageLayout_PTR().Pointer()
	}
	return nil
}

func NewQPageLayoutFromPointer(ptr unsafe.Pointer) *QPageLayout {
	var n = new(QPageLayout)
	n.SetPointer(ptr)
	return n
}
func NewQPageLayout() *QPageLayout {
	var tmpValue = NewQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout())
	runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
	return tmpValue
}

func NewQPageLayout3(other QPageLayout_ITF) *QPageLayout {
	var tmpValue = NewQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout3(PointerFromQPageLayout(other)))
	runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
	return tmpValue
}

func NewQPageLayout2(pageSize QPageSize_ITF, orientation QPageLayout__Orientation, margins core.QMarginsF_ITF, units QPageLayout__Unit, minMargins core.QMarginsF_ITF) *QPageLayout {
	var tmpValue = NewQPageLayoutFromPointer(C.QPageLayout_NewQPageLayout2(PointerFromQPageSize(pageSize), C.longlong(orientation), core.PointerFromQMarginsF(margins), C.longlong(units), core.PointerFromQMarginsF(minMargins)))
	runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
	return tmpValue
}

func (ptr *QPageLayout) FullRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_FullRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) FullRect2(units QPageLayout__Unit) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_FullRect2(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) FullRectPixels(resolution int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_FullRectPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) FullRectPoints() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_FullRectPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) IsEquivalentTo(other QPageLayout_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_IsEquivalentTo(ptr.Pointer(), PointerFromQPageLayout(other)) != 0
	}
	return false
}

func (ptr *QPageLayout) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPageLayout) Margins() *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_Margins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) Margins2(units QPageLayout__Unit) *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_Margins2(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) MarginsPixels(resolution int) *core.QMargins {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFromPointer(C.QPageLayout_MarginsPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) MarginsPoints() *core.QMargins {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFromPointer(C.QPageLayout_MarginsPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) MaximumMargins() *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_MaximumMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) MinimumMargins() *core.QMarginsF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFFromPointer(C.QPageLayout_MinimumMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMarginsF).DestroyQMarginsF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) Mode() QPageLayout__Mode {
	if ptr.Pointer() != nil {
		return QPageLayout__Mode(C.QPageLayout_Mode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) Orientation() QPageLayout__Orientation {
	if ptr.Pointer() != nil {
		return QPageLayout__Orientation(C.QPageLayout_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) PageSize() *QPageSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPageSizeFromPointer(C.QPageLayout_PageSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_PaintRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRect2(units QPageLayout__Unit) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageLayout_PaintRect2(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRectPixels(resolution int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_PaintRectPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) PaintRectPoints() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageLayout_PaintRectPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageLayout) SetBottomMargin(bottomMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetBottomMargin(ptr.Pointer(), C.double(bottomMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetLeftMargin(leftMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetLeftMargin(ptr.Pointer(), C.double(leftMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetMargins(margins core.QMarginsF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetMinimumMargins(minMargins core.QMarginsF_ITF) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetMinimumMargins(ptr.Pointer(), core.PointerFromQMarginsF(minMargins))
	}
}

func (ptr *QPageLayout) SetMode(mode QPageLayout__Mode) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QPageLayout) SetOrientation(orientation QPageLayout__Orientation) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetOrientation(ptr.Pointer(), C.longlong(orientation))
	}
}

func (ptr *QPageLayout) SetPageSize(pageSize QPageSize_ITF, minMargins core.QMarginsF_ITF) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize), core.PointerFromQMarginsF(minMargins))
	}
}

func (ptr *QPageLayout) SetRightMargin(rightMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetRightMargin(ptr.Pointer(), C.double(rightMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetTopMargin(topMargin float64) bool {
	if ptr.Pointer() != nil {
		return C.QPageLayout_SetTopMargin(ptr.Pointer(), C.double(topMargin)) != 0
	}
	return false
}

func (ptr *QPageLayout) SetUnits(units QPageLayout__Unit) {
	if ptr.Pointer() != nil {
		C.QPageLayout_SetUnits(ptr.Pointer(), C.longlong(units))
	}
}

func (ptr *QPageLayout) Swap(other QPageLayout_ITF) {
	if ptr.Pointer() != nil {
		C.QPageLayout_Swap(ptr.Pointer(), PointerFromQPageLayout(other))
	}
}

func (ptr *QPageLayout) Units() QPageLayout__Unit {
	if ptr.Pointer() != nil {
		return QPageLayout__Unit(C.QPageLayout_Units(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageLayout) DestroyQPageLayout() {
	if ptr.Pointer() != nil {
		C.QPageLayout_DestroyQPageLayout(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPageSize::PageSizeId
type QPageSize__PageSizeId int64

const (
	QPageSize__A4                 = QPageSize__PageSizeId(0)
	QPageSize__B5                 = QPageSize__PageSizeId(1)
	QPageSize__Letter             = QPageSize__PageSizeId(2)
	QPageSize__Legal              = QPageSize__PageSizeId(3)
	QPageSize__Executive          = QPageSize__PageSizeId(4)
	QPageSize__A0                 = QPageSize__PageSizeId(5)
	QPageSize__A1                 = QPageSize__PageSizeId(6)
	QPageSize__A2                 = QPageSize__PageSizeId(7)
	QPageSize__A3                 = QPageSize__PageSizeId(8)
	QPageSize__A5                 = QPageSize__PageSizeId(9)
	QPageSize__A6                 = QPageSize__PageSizeId(10)
	QPageSize__A7                 = QPageSize__PageSizeId(11)
	QPageSize__A8                 = QPageSize__PageSizeId(12)
	QPageSize__A9                 = QPageSize__PageSizeId(13)
	QPageSize__B0                 = QPageSize__PageSizeId(14)
	QPageSize__B1                 = QPageSize__PageSizeId(15)
	QPageSize__B10                = QPageSize__PageSizeId(16)
	QPageSize__B2                 = QPageSize__PageSizeId(17)
	QPageSize__B3                 = QPageSize__PageSizeId(18)
	QPageSize__B4                 = QPageSize__PageSizeId(19)
	QPageSize__B6                 = QPageSize__PageSizeId(20)
	QPageSize__B7                 = QPageSize__PageSizeId(21)
	QPageSize__B8                 = QPageSize__PageSizeId(22)
	QPageSize__B9                 = QPageSize__PageSizeId(23)
	QPageSize__C5E                = QPageSize__PageSizeId(24)
	QPageSize__Comm10E            = QPageSize__PageSizeId(25)
	QPageSize__DLE                = QPageSize__PageSizeId(26)
	QPageSize__Folio              = QPageSize__PageSizeId(27)
	QPageSize__Ledger             = QPageSize__PageSizeId(28)
	QPageSize__Tabloid            = QPageSize__PageSizeId(29)
	QPageSize__Custom             = QPageSize__PageSizeId(30)
	QPageSize__A10                = QPageSize__PageSizeId(31)
	QPageSize__A3Extra            = QPageSize__PageSizeId(32)
	QPageSize__A4Extra            = QPageSize__PageSizeId(33)
	QPageSize__A4Plus             = QPageSize__PageSizeId(34)
	QPageSize__A4Small            = QPageSize__PageSizeId(35)
	QPageSize__A5Extra            = QPageSize__PageSizeId(36)
	QPageSize__B5Extra            = QPageSize__PageSizeId(37)
	QPageSize__JisB0              = QPageSize__PageSizeId(38)
	QPageSize__JisB1              = QPageSize__PageSizeId(39)
	QPageSize__JisB2              = QPageSize__PageSizeId(40)
	QPageSize__JisB3              = QPageSize__PageSizeId(41)
	QPageSize__JisB4              = QPageSize__PageSizeId(42)
	QPageSize__JisB5              = QPageSize__PageSizeId(43)
	QPageSize__JisB6              = QPageSize__PageSizeId(44)
	QPageSize__JisB7              = QPageSize__PageSizeId(45)
	QPageSize__JisB8              = QPageSize__PageSizeId(46)
	QPageSize__JisB9              = QPageSize__PageSizeId(47)
	QPageSize__JisB10             = QPageSize__PageSizeId(48)
	QPageSize__AnsiC              = QPageSize__PageSizeId(49)
	QPageSize__AnsiD              = QPageSize__PageSizeId(50)
	QPageSize__AnsiE              = QPageSize__PageSizeId(51)
	QPageSize__LegalExtra         = QPageSize__PageSizeId(52)
	QPageSize__LetterExtra        = QPageSize__PageSizeId(53)
	QPageSize__LetterPlus         = QPageSize__PageSizeId(54)
	QPageSize__LetterSmall        = QPageSize__PageSizeId(55)
	QPageSize__TabloidExtra       = QPageSize__PageSizeId(56)
	QPageSize__ArchA              = QPageSize__PageSizeId(57)
	QPageSize__ArchB              = QPageSize__PageSizeId(58)
	QPageSize__ArchC              = QPageSize__PageSizeId(59)
	QPageSize__ArchD              = QPageSize__PageSizeId(60)
	QPageSize__ArchE              = QPageSize__PageSizeId(61)
	QPageSize__Imperial7x9        = QPageSize__PageSizeId(62)
	QPageSize__Imperial8x10       = QPageSize__PageSizeId(63)
	QPageSize__Imperial9x11       = QPageSize__PageSizeId(64)
	QPageSize__Imperial9x12       = QPageSize__PageSizeId(65)
	QPageSize__Imperial10x11      = QPageSize__PageSizeId(66)
	QPageSize__Imperial10x13      = QPageSize__PageSizeId(67)
	QPageSize__Imperial10x14      = QPageSize__PageSizeId(68)
	QPageSize__Imperial12x11      = QPageSize__PageSizeId(69)
	QPageSize__Imperial15x11      = QPageSize__PageSizeId(70)
	QPageSize__ExecutiveStandard  = QPageSize__PageSizeId(71)
	QPageSize__Note               = QPageSize__PageSizeId(72)
	QPageSize__Quarto             = QPageSize__PageSizeId(73)
	QPageSize__Statement          = QPageSize__PageSizeId(74)
	QPageSize__SuperA             = QPageSize__PageSizeId(75)
	QPageSize__SuperB             = QPageSize__PageSizeId(76)
	QPageSize__Postcard           = QPageSize__PageSizeId(77)
	QPageSize__DoublePostcard     = QPageSize__PageSizeId(78)
	QPageSize__Prc16K             = QPageSize__PageSizeId(79)
	QPageSize__Prc32K             = QPageSize__PageSizeId(80)
	QPageSize__Prc32KBig          = QPageSize__PageSizeId(81)
	QPageSize__FanFoldUS          = QPageSize__PageSizeId(82)
	QPageSize__FanFoldGerman      = QPageSize__PageSizeId(83)
	QPageSize__FanFoldGermanLegal = QPageSize__PageSizeId(84)
	QPageSize__EnvelopeB4         = QPageSize__PageSizeId(85)
	QPageSize__EnvelopeB5         = QPageSize__PageSizeId(86)
	QPageSize__EnvelopeB6         = QPageSize__PageSizeId(87)
	QPageSize__EnvelopeC0         = QPageSize__PageSizeId(88)
	QPageSize__EnvelopeC1         = QPageSize__PageSizeId(89)
	QPageSize__EnvelopeC2         = QPageSize__PageSizeId(90)
	QPageSize__EnvelopeC3         = QPageSize__PageSizeId(91)
	QPageSize__EnvelopeC4         = QPageSize__PageSizeId(92)
	QPageSize__EnvelopeC6         = QPageSize__PageSizeId(93)
	QPageSize__EnvelopeC65        = QPageSize__PageSizeId(94)
	QPageSize__EnvelopeC7         = QPageSize__PageSizeId(95)
	QPageSize__Envelope9          = QPageSize__PageSizeId(96)
	QPageSize__Envelope11         = QPageSize__PageSizeId(97)
	QPageSize__Envelope12         = QPageSize__PageSizeId(98)
	QPageSize__Envelope14         = QPageSize__PageSizeId(99)
	QPageSize__EnvelopeMonarch    = QPageSize__PageSizeId(100)
	QPageSize__EnvelopePersonal   = QPageSize__PageSizeId(101)
	QPageSize__EnvelopeChou3      = QPageSize__PageSizeId(102)
	QPageSize__EnvelopeChou4      = QPageSize__PageSizeId(103)
	QPageSize__EnvelopeInvite     = QPageSize__PageSizeId(104)
	QPageSize__EnvelopeItalian    = QPageSize__PageSizeId(105)
	QPageSize__EnvelopeKaku2      = QPageSize__PageSizeId(106)
	QPageSize__EnvelopeKaku3      = QPageSize__PageSizeId(107)
	QPageSize__EnvelopePrc1       = QPageSize__PageSizeId(108)
	QPageSize__EnvelopePrc2       = QPageSize__PageSizeId(109)
	QPageSize__EnvelopePrc3       = QPageSize__PageSizeId(110)
	QPageSize__EnvelopePrc4       = QPageSize__PageSizeId(111)
	QPageSize__EnvelopePrc5       = QPageSize__PageSizeId(112)
	QPageSize__EnvelopePrc6       = QPageSize__PageSizeId(113)
	QPageSize__EnvelopePrc7       = QPageSize__PageSizeId(114)
	QPageSize__EnvelopePrc8       = QPageSize__PageSizeId(115)
	QPageSize__EnvelopePrc9       = QPageSize__PageSizeId(116)
	QPageSize__EnvelopePrc10      = QPageSize__PageSizeId(117)
	QPageSize__EnvelopeYou4       = QPageSize__PageSizeId(118)
	QPageSize__LastPageSize       = QPageSize__PageSizeId(QPageSize__EnvelopeYou4)
	QPageSize__NPageSize          = QPageSize__PageSizeId(QPageSize__LastPageSize)
	QPageSize__NPaperSize         = QPageSize__PageSizeId(QPageSize__LastPageSize)
	QPageSize__AnsiA              = QPageSize__PageSizeId(QPageSize__Letter)
	QPageSize__AnsiB              = QPageSize__PageSizeId(QPageSize__Ledger)
	QPageSize__EnvelopeC5         = QPageSize__PageSizeId(QPageSize__C5E)
	QPageSize__EnvelopeDL         = QPageSize__PageSizeId(QPageSize__DLE)
	QPageSize__Envelope10         = QPageSize__PageSizeId(QPageSize__Comm10E)
)

//QPageSize::SizeMatchPolicy
type QPageSize__SizeMatchPolicy int64

const (
	QPageSize__FuzzyMatch            = QPageSize__SizeMatchPolicy(0)
	QPageSize__FuzzyOrientationMatch = QPageSize__SizeMatchPolicy(1)
	QPageSize__ExactMatch            = QPageSize__SizeMatchPolicy(2)
)

//QPageSize::Unit
type QPageSize__Unit int64

const (
	QPageSize__Millimeter = QPageSize__Unit(0)
	QPageSize__Point      = QPageSize__Unit(1)
	QPageSize__Inch       = QPageSize__Unit(2)
	QPageSize__Pica       = QPageSize__Unit(3)
	QPageSize__Didot      = QPageSize__Unit(4)
	QPageSize__Cicero     = QPageSize__Unit(5)
)

type QPageSize struct {
	ptr unsafe.Pointer
}

type QPageSize_ITF interface {
	QPageSize_PTR() *QPageSize
}

func (p *QPageSize) QPageSize_PTR() *QPageSize {
	return p
}

func (p *QPageSize) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPageSize) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPageSize(ptr QPageSize_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPageSize_PTR().Pointer()
	}
	return nil
}

func NewQPageSizeFromPointer(ptr unsafe.Pointer) *QPageSize {
	var n = new(QPageSize)
	n.SetPointer(ptr)
	return n
}
func NewQPageSize() *QPageSize {
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize())
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize2(pageSize QPageSize__PageSizeId) *QPageSize {
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize2(C.longlong(pageSize)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize5(other QPageSize_ITF) *QPageSize {
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize5(PointerFromQPageSize(other)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize3(pointSize core.QSize_ITF, name string, matchPolicy QPageSize__SizeMatchPolicy) *QPageSize {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize3(core.PointerFromQSize(pointSize), nameC, C.longlong(matchPolicy)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func NewQPageSize4(size core.QSizeF_ITF, units QPageSize__Unit, name string, matchPolicy QPageSize__SizeMatchPolicy) *QPageSize {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQPageSizeFromPointer(C.QPageSize_NewQPageSize4(core.PointerFromQSizeF(size), C.longlong(units), nameC, C.longlong(matchPolicy)))
	runtime.SetFinalizer(tmpValue, (*QPageSize).DestroyQPageSize)
	return tmpValue
}

func QPageSize_DefinitionSize2(pageSizeId QPageSize__PageSizeId) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_DefinitionSize2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func (ptr *QPageSize) DefinitionSize2(pageSizeId QPageSize__PageSizeId) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_DefinitionSize2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func (ptr *QPageSize) DefinitionSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_DefinitionSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func QPageSize_DefinitionUnits2(pageSizeId QPageSize__PageSizeId) QPageSize__Unit {
	return QPageSize__Unit(C.QPageSize_QPageSize_DefinitionUnits2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) DefinitionUnits2(pageSizeId QPageSize__PageSizeId) QPageSize__Unit {
	return QPageSize__Unit(C.QPageSize_QPageSize_DefinitionUnits2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) DefinitionUnits() QPageSize__Unit {
	if ptr.Pointer() != nil {
		return QPageSize__Unit(C.QPageSize_DefinitionUnits(ptr.Pointer()))
	}
	return 0
}

func QPageSize_Id2(pointSize core.QSize_ITF, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id2(core.PointerFromQSize(pointSize), C.longlong(matchPolicy)))
}

func (ptr *QPageSize) Id2(pointSize core.QSize_ITF, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id2(core.PointerFromQSize(pointSize), C.longlong(matchPolicy)))
}

func QPageSize_Id3(size core.QSizeF_ITF, units QPageSize__Unit, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id3(core.PointerFromQSizeF(size), C.longlong(units), C.longlong(matchPolicy)))
}

func (ptr *QPageSize) Id3(size core.QSizeF_ITF, units QPageSize__Unit, matchPolicy QPageSize__SizeMatchPolicy) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id3(core.PointerFromQSizeF(size), C.longlong(units), C.longlong(matchPolicy)))
}

func QPageSize_Id4(windowsId int) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id4(C.int(int32(windowsId))))
}

func (ptr *QPageSize) Id4(windowsId int) QPageSize__PageSizeId {
	return QPageSize__PageSizeId(C.QPageSize_QPageSize_Id4(C.int(int32(windowsId))))
}

func (ptr *QPageSize) Id() QPageSize__PageSizeId {
	if ptr.Pointer() != nil {
		return QPageSize__PageSizeId(C.QPageSize_Id(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPageSize) IsEquivalentTo(other QPageSize_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPageSize_IsEquivalentTo(ptr.Pointer(), PointerFromQPageSize(other)) != 0
	}
	return false
}

func (ptr *QPageSize) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QPageSize_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QPageSize_Key2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Key2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) Key2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Key2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPageSize_Key(ptr.Pointer()))
	}
	return ""
}

func QPageSize_Name2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Name2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) Name2(pageSizeId QPageSize__PageSizeId) string {
	return cGoUnpackString(C.QPageSize_QPageSize_Name2(C.longlong(pageSizeId)))
}

func (ptr *QPageSize) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPageSize_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPageSize) Rect(units QPageSize__Unit) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPageSize_Rect(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) RectPixels(resolution int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageSize_RectPixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) RectPoints() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPageSize_RectPoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func QPageSize_Size2(pageSizeId QPageSize__PageSizeId, units QPageSize__Unit) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_Size2(C.longlong(pageSizeId), C.longlong(units)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func (ptr *QPageSize) Size2(pageSizeId QPageSize__PageSizeId, units QPageSize__Unit) *core.QSizeF {
	var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_QPageSize_Size2(C.longlong(pageSizeId), C.longlong(units)))
	runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
	return tmpValue
}

func (ptr *QPageSize) Size(units QPageSize__Unit) *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QPageSize_Size(ptr.Pointer(), C.longlong(units)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func QPageSize_SizePixels2(pageSizeId QPageSize__PageSizeId, resolution int) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePixels2(C.longlong(pageSizeId), C.int(int32(resolution))))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QPageSize) SizePixels2(pageSizeId QPageSize__PageSizeId, resolution int) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePixels2(C.longlong(pageSizeId), C.int(int32(resolution))))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QPageSize) SizePixels(resolution int) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPageSize_SizePixels(ptr.Pointer(), C.int(int32(resolution))))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func QPageSize_SizePoints2(pageSizeId QPageSize__PageSizeId) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePoints2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QPageSize) SizePoints2(pageSizeId QPageSize__PageSizeId) *core.QSize {
	var tmpValue = core.NewQSizeFromPointer(C.QPageSize_QPageSize_SizePoints2(C.longlong(pageSizeId)))
	runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QPageSize) SizePoints() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPageSize_SizePoints(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QPageSize) Swap(other QPageSize_ITF) {
	if ptr.Pointer() != nil {
		C.QPageSize_Swap(ptr.Pointer(), PointerFromQPageSize(other))
	}
}

func QPageSize_WindowsId2(pageSizeId QPageSize__PageSizeId) int {
	return int(int32(C.QPageSize_QPageSize_WindowsId2(C.longlong(pageSizeId))))
}

func (ptr *QPageSize) WindowsId2(pageSizeId QPageSize__PageSizeId) int {
	return int(int32(C.QPageSize_QPageSize_WindowsId2(C.longlong(pageSizeId))))
}

func (ptr *QPageSize) WindowsId() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPageSize_WindowsId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPageSize) DestroyQPageSize() {
	if ptr.Pointer() != nil {
		C.QPageSize_DestroyQPageSize(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPagedPaintDevice::PageSize
type QPagedPaintDevice__PageSize int64

const (
	QPagedPaintDevice__A4                 = QPagedPaintDevice__PageSize(0)
	QPagedPaintDevice__B5                 = QPagedPaintDevice__PageSize(1)
	QPagedPaintDevice__Letter             = QPagedPaintDevice__PageSize(2)
	QPagedPaintDevice__Legal              = QPagedPaintDevice__PageSize(3)
	QPagedPaintDevice__Executive          = QPagedPaintDevice__PageSize(4)
	QPagedPaintDevice__A0                 = QPagedPaintDevice__PageSize(5)
	QPagedPaintDevice__A1                 = QPagedPaintDevice__PageSize(6)
	QPagedPaintDevice__A2                 = QPagedPaintDevice__PageSize(7)
	QPagedPaintDevice__A3                 = QPagedPaintDevice__PageSize(8)
	QPagedPaintDevice__A5                 = QPagedPaintDevice__PageSize(9)
	QPagedPaintDevice__A6                 = QPagedPaintDevice__PageSize(10)
	QPagedPaintDevice__A7                 = QPagedPaintDevice__PageSize(11)
	QPagedPaintDevice__A8                 = QPagedPaintDevice__PageSize(12)
	QPagedPaintDevice__A9                 = QPagedPaintDevice__PageSize(13)
	QPagedPaintDevice__B0                 = QPagedPaintDevice__PageSize(14)
	QPagedPaintDevice__B1                 = QPagedPaintDevice__PageSize(15)
	QPagedPaintDevice__B10                = QPagedPaintDevice__PageSize(16)
	QPagedPaintDevice__B2                 = QPagedPaintDevice__PageSize(17)
	QPagedPaintDevice__B3                 = QPagedPaintDevice__PageSize(18)
	QPagedPaintDevice__B4                 = QPagedPaintDevice__PageSize(19)
	QPagedPaintDevice__B6                 = QPagedPaintDevice__PageSize(20)
	QPagedPaintDevice__B7                 = QPagedPaintDevice__PageSize(21)
	QPagedPaintDevice__B8                 = QPagedPaintDevice__PageSize(22)
	QPagedPaintDevice__B9                 = QPagedPaintDevice__PageSize(23)
	QPagedPaintDevice__C5E                = QPagedPaintDevice__PageSize(24)
	QPagedPaintDevice__Comm10E            = QPagedPaintDevice__PageSize(25)
	QPagedPaintDevice__DLE                = QPagedPaintDevice__PageSize(26)
	QPagedPaintDevice__Folio              = QPagedPaintDevice__PageSize(27)
	QPagedPaintDevice__Ledger             = QPagedPaintDevice__PageSize(28)
	QPagedPaintDevice__Tabloid            = QPagedPaintDevice__PageSize(29)
	QPagedPaintDevice__Custom             = QPagedPaintDevice__PageSize(30)
	QPagedPaintDevice__A10                = QPagedPaintDevice__PageSize(31)
	QPagedPaintDevice__A3Extra            = QPagedPaintDevice__PageSize(32)
	QPagedPaintDevice__A4Extra            = QPagedPaintDevice__PageSize(33)
	QPagedPaintDevice__A4Plus             = QPagedPaintDevice__PageSize(34)
	QPagedPaintDevice__A4Small            = QPagedPaintDevice__PageSize(35)
	QPagedPaintDevice__A5Extra            = QPagedPaintDevice__PageSize(36)
	QPagedPaintDevice__B5Extra            = QPagedPaintDevice__PageSize(37)
	QPagedPaintDevice__JisB0              = QPagedPaintDevice__PageSize(38)
	QPagedPaintDevice__JisB1              = QPagedPaintDevice__PageSize(39)
	QPagedPaintDevice__JisB2              = QPagedPaintDevice__PageSize(40)
	QPagedPaintDevice__JisB3              = QPagedPaintDevice__PageSize(41)
	QPagedPaintDevice__JisB4              = QPagedPaintDevice__PageSize(42)
	QPagedPaintDevice__JisB5              = QPagedPaintDevice__PageSize(43)
	QPagedPaintDevice__JisB6              = QPagedPaintDevice__PageSize(44)
	QPagedPaintDevice__JisB7              = QPagedPaintDevice__PageSize(45)
	QPagedPaintDevice__JisB8              = QPagedPaintDevice__PageSize(46)
	QPagedPaintDevice__JisB9              = QPagedPaintDevice__PageSize(47)
	QPagedPaintDevice__JisB10             = QPagedPaintDevice__PageSize(48)
	QPagedPaintDevice__AnsiC              = QPagedPaintDevice__PageSize(49)
	QPagedPaintDevice__AnsiD              = QPagedPaintDevice__PageSize(50)
	QPagedPaintDevice__AnsiE              = QPagedPaintDevice__PageSize(51)
	QPagedPaintDevice__LegalExtra         = QPagedPaintDevice__PageSize(52)
	QPagedPaintDevice__LetterExtra        = QPagedPaintDevice__PageSize(53)
	QPagedPaintDevice__LetterPlus         = QPagedPaintDevice__PageSize(54)
	QPagedPaintDevice__LetterSmall        = QPagedPaintDevice__PageSize(55)
	QPagedPaintDevice__TabloidExtra       = QPagedPaintDevice__PageSize(56)
	QPagedPaintDevice__ArchA              = QPagedPaintDevice__PageSize(57)
	QPagedPaintDevice__ArchB              = QPagedPaintDevice__PageSize(58)
	QPagedPaintDevice__ArchC              = QPagedPaintDevice__PageSize(59)
	QPagedPaintDevice__ArchD              = QPagedPaintDevice__PageSize(60)
	QPagedPaintDevice__ArchE              = QPagedPaintDevice__PageSize(61)
	QPagedPaintDevice__Imperial7x9        = QPagedPaintDevice__PageSize(62)
	QPagedPaintDevice__Imperial8x10       = QPagedPaintDevice__PageSize(63)
	QPagedPaintDevice__Imperial9x11       = QPagedPaintDevice__PageSize(64)
	QPagedPaintDevice__Imperial9x12       = QPagedPaintDevice__PageSize(65)
	QPagedPaintDevice__Imperial10x11      = QPagedPaintDevice__PageSize(66)
	QPagedPaintDevice__Imperial10x13      = QPagedPaintDevice__PageSize(67)
	QPagedPaintDevice__Imperial10x14      = QPagedPaintDevice__PageSize(68)
	QPagedPaintDevice__Imperial12x11      = QPagedPaintDevice__PageSize(69)
	QPagedPaintDevice__Imperial15x11      = QPagedPaintDevice__PageSize(70)
	QPagedPaintDevice__ExecutiveStandard  = QPagedPaintDevice__PageSize(71)
	QPagedPaintDevice__Note               = QPagedPaintDevice__PageSize(72)
	QPagedPaintDevice__Quarto             = QPagedPaintDevice__PageSize(73)
	QPagedPaintDevice__Statement          = QPagedPaintDevice__PageSize(74)
	QPagedPaintDevice__SuperA             = QPagedPaintDevice__PageSize(75)
	QPagedPaintDevice__SuperB             = QPagedPaintDevice__PageSize(76)
	QPagedPaintDevice__Postcard           = QPagedPaintDevice__PageSize(77)
	QPagedPaintDevice__DoublePostcard     = QPagedPaintDevice__PageSize(78)
	QPagedPaintDevice__Prc16K             = QPagedPaintDevice__PageSize(79)
	QPagedPaintDevice__Prc32K             = QPagedPaintDevice__PageSize(80)
	QPagedPaintDevice__Prc32KBig          = QPagedPaintDevice__PageSize(81)
	QPagedPaintDevice__FanFoldUS          = QPagedPaintDevice__PageSize(82)
	QPagedPaintDevice__FanFoldGerman      = QPagedPaintDevice__PageSize(83)
	QPagedPaintDevice__FanFoldGermanLegal = QPagedPaintDevice__PageSize(84)
	QPagedPaintDevice__EnvelopeB4         = QPagedPaintDevice__PageSize(85)
	QPagedPaintDevice__EnvelopeB5         = QPagedPaintDevice__PageSize(86)
	QPagedPaintDevice__EnvelopeB6         = QPagedPaintDevice__PageSize(87)
	QPagedPaintDevice__EnvelopeC0         = QPagedPaintDevice__PageSize(88)
	QPagedPaintDevice__EnvelopeC1         = QPagedPaintDevice__PageSize(89)
	QPagedPaintDevice__EnvelopeC2         = QPagedPaintDevice__PageSize(90)
	QPagedPaintDevice__EnvelopeC3         = QPagedPaintDevice__PageSize(91)
	QPagedPaintDevice__EnvelopeC4         = QPagedPaintDevice__PageSize(92)
	QPagedPaintDevice__EnvelopeC6         = QPagedPaintDevice__PageSize(93)
	QPagedPaintDevice__EnvelopeC65        = QPagedPaintDevice__PageSize(94)
	QPagedPaintDevice__EnvelopeC7         = QPagedPaintDevice__PageSize(95)
	QPagedPaintDevice__Envelope9          = QPagedPaintDevice__PageSize(96)
	QPagedPaintDevice__Envelope11         = QPagedPaintDevice__PageSize(97)
	QPagedPaintDevice__Envelope12         = QPagedPaintDevice__PageSize(98)
	QPagedPaintDevice__Envelope14         = QPagedPaintDevice__PageSize(99)
	QPagedPaintDevice__EnvelopeMonarch    = QPagedPaintDevice__PageSize(100)
	QPagedPaintDevice__EnvelopePersonal   = QPagedPaintDevice__PageSize(101)
	QPagedPaintDevice__EnvelopeChou3      = QPagedPaintDevice__PageSize(102)
	QPagedPaintDevice__EnvelopeChou4      = QPagedPaintDevice__PageSize(103)
	QPagedPaintDevice__EnvelopeInvite     = QPagedPaintDevice__PageSize(104)
	QPagedPaintDevice__EnvelopeItalian    = QPagedPaintDevice__PageSize(105)
	QPagedPaintDevice__EnvelopeKaku2      = QPagedPaintDevice__PageSize(106)
	QPagedPaintDevice__EnvelopeKaku3      = QPagedPaintDevice__PageSize(107)
	QPagedPaintDevice__EnvelopePrc1       = QPagedPaintDevice__PageSize(108)
	QPagedPaintDevice__EnvelopePrc2       = QPagedPaintDevice__PageSize(109)
	QPagedPaintDevice__EnvelopePrc3       = QPagedPaintDevice__PageSize(110)
	QPagedPaintDevice__EnvelopePrc4       = QPagedPaintDevice__PageSize(111)
	QPagedPaintDevice__EnvelopePrc5       = QPagedPaintDevice__PageSize(112)
	QPagedPaintDevice__EnvelopePrc6       = QPagedPaintDevice__PageSize(113)
	QPagedPaintDevice__EnvelopePrc7       = QPagedPaintDevice__PageSize(114)
	QPagedPaintDevice__EnvelopePrc8       = QPagedPaintDevice__PageSize(115)
	QPagedPaintDevice__EnvelopePrc9       = QPagedPaintDevice__PageSize(116)
	QPagedPaintDevice__EnvelopePrc10      = QPagedPaintDevice__PageSize(117)
	QPagedPaintDevice__EnvelopeYou4       = QPagedPaintDevice__PageSize(118)
	QPagedPaintDevice__LastPageSize       = QPagedPaintDevice__PageSize(QPagedPaintDevice__EnvelopeYou4)
	QPagedPaintDevice__NPageSize          = QPagedPaintDevice__PageSize(QPagedPaintDevice__LastPageSize)
	QPagedPaintDevice__NPaperSize         = QPagedPaintDevice__PageSize(QPagedPaintDevice__LastPageSize)
	QPagedPaintDevice__AnsiA              = QPagedPaintDevice__PageSize(QPagedPaintDevice__Letter)
	QPagedPaintDevice__AnsiB              = QPagedPaintDevice__PageSize(QPagedPaintDevice__Ledger)
	QPagedPaintDevice__EnvelopeC5         = QPagedPaintDevice__PageSize(QPagedPaintDevice__C5E)
	QPagedPaintDevice__EnvelopeDL         = QPagedPaintDevice__PageSize(QPagedPaintDevice__DLE)
	QPagedPaintDevice__Envelope10         = QPagedPaintDevice__PageSize(QPagedPaintDevice__Comm10E)
)

type QPagedPaintDevice struct {
	QPaintDevice
}

type QPagedPaintDevice_ITF interface {
	QPaintDevice_ITF
	QPagedPaintDevice_PTR() *QPagedPaintDevice
}

func (p *QPagedPaintDevice) QPagedPaintDevice_PTR() *QPagedPaintDevice {
	return p
}

func (p *QPagedPaintDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QPagedPaintDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPagedPaintDevice(ptr QPagedPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPagedPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQPagedPaintDeviceFromPointer(ptr unsafe.Pointer) *QPagedPaintDevice {
	var n = new(QPagedPaintDevice)
	n.SetPointer(ptr)
	return n
}
func NewQPagedPaintDevice() *QPagedPaintDevice {
	return NewQPagedPaintDeviceFromPointer(C.QPagedPaintDevice_NewQPagedPaintDevice())
}

//export callbackQPagedPaintDevice_NewPage
func callbackQPagedPaintDevice_NewPage(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPagedPaintDevice::newPage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QPagedPaintDevice) ConnectNewPage(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::newPage", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectNewPage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::newPage")
	}
}

func (ptr *QPagedPaintDevice) NewPage() bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_NewPage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) PageLayout() *QPageLayout {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPageLayoutFromPointer(C.QPagedPaintDevice_PageLayout(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
		return tmpValue
	}
	return nil
}

func (ptr *QPagedPaintDevice) PageSize() QPagedPaintDevice__PageSize {
	if ptr.Pointer() != nil {
		return QPagedPaintDevice__PageSize(C.QPagedPaintDevice_PageSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPagedPaintDevice) PageSizeMM() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QPagedPaintDevice_PageSizeMM(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QPagedPaintDevice) SetPageLayout(newPageLayout QPageLayout_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageLayout(ptr.Pointer(), PointerFromQPageLayout(newPageLayout)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageMargins(margins core.QMarginsF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageMargins2(margins core.QMarginsF_ITF, units QPageLayout__Unit) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageMargins2(ptr.Pointer(), core.PointerFromQMarginsF(margins), C.longlong(units)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageOrientation(orientation QPageLayout__Orientation) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageOrientation(ptr.Pointer(), C.longlong(orientation)) != 0
	}
	return false
}

func (ptr *QPagedPaintDevice) SetPageSize(pageSize QPageSize_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPagedPaintDevice_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize)) != 0
	}
	return false
}

//export callbackQPagedPaintDevice_SetPageSize2
func callbackQPagedPaintDevice_SetPageSize2(ptr unsafe.Pointer, size C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPagedPaintDevice::setPageSize2"); signal != nil {
		signal.(func(QPagedPaintDevice__PageSize))(QPagedPaintDevice__PageSize(size))
	} else {
		NewQPagedPaintDeviceFromPointer(ptr).SetPageSize2Default(QPagedPaintDevice__PageSize(size))
	}
}

func (ptr *QPagedPaintDevice) ConnectSetPageSize2(f func(size QPagedPaintDevice__PageSize)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::setPageSize2", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectSetPageSize2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::setPageSize2")
	}
}

func (ptr *QPagedPaintDevice) SetPageSize2(size QPagedPaintDevice__PageSize) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSize2(ptr.Pointer(), C.longlong(size))
	}
}

func (ptr *QPagedPaintDevice) SetPageSize2Default(size QPagedPaintDevice__PageSize) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSize2Default(ptr.Pointer(), C.longlong(size))
	}
}

//export callbackQPagedPaintDevice_SetPageSizeMM
func callbackQPagedPaintDevice_SetPageSizeMM(ptr unsafe.Pointer, size unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPagedPaintDevice::setPageSizeMM"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	} else {
		NewQPagedPaintDeviceFromPointer(ptr).SetPageSizeMMDefault(core.NewQSizeFFromPointer(size))
	}
}

func (ptr *QPagedPaintDevice) ConnectSetPageSizeMM(f func(size *core.QSizeF)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::setPageSizeMM", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectSetPageSizeMM() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::setPageSizeMM")
	}
}

func (ptr *QPagedPaintDevice) SetPageSizeMM(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSizeMM(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPagedPaintDevice) SetPageSizeMMDefault(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_SetPageSizeMMDefault(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPagedPaintDevice) DestroyQPagedPaintDevice() {
	if ptr.Pointer() != nil {
		C.QPagedPaintDevice_DestroyQPagedPaintDevice(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPagedPaintDevice_Metric
func callbackQPagedPaintDevice_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPagedPaintDevice::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQPagedPaintDeviceFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QPagedPaintDevice) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::metric", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::metric")
	}
}

func (ptr *QPagedPaintDevice) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPagedPaintDevice_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPagedPaintDevice) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPagedPaintDevice_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQPagedPaintDevice_PaintEngine
func callbackQPagedPaintDevice_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPagedPaintDevice::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QPagedPaintDevice) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::paintEngine", f)
	}
}

func (ptr *QPagedPaintDevice) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPagedPaintDevice::paintEngine")
	}
}

func (ptr *QPagedPaintDevice) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPagedPaintDevice_PaintEngine(ptr.Pointer()))
	}
	return nil
}

//QPaintDevice::PaintDeviceMetric
type QPaintDevice__PaintDeviceMetric int64

const (
	QPaintDevice__PdmWidth                  = QPaintDevice__PaintDeviceMetric(1)
	QPaintDevice__PdmHeight                 = QPaintDevice__PaintDeviceMetric(2)
	QPaintDevice__PdmWidthMM                = QPaintDevice__PaintDeviceMetric(3)
	QPaintDevice__PdmHeightMM               = QPaintDevice__PaintDeviceMetric(4)
	QPaintDevice__PdmNumColors              = QPaintDevice__PaintDeviceMetric(5)
	QPaintDevice__PdmDepth                  = QPaintDevice__PaintDeviceMetric(6)
	QPaintDevice__PdmDpiX                   = QPaintDevice__PaintDeviceMetric(7)
	QPaintDevice__PdmDpiY                   = QPaintDevice__PaintDeviceMetric(8)
	QPaintDevice__PdmPhysicalDpiX           = QPaintDevice__PaintDeviceMetric(9)
	QPaintDevice__PdmPhysicalDpiY           = QPaintDevice__PaintDeviceMetric(10)
	QPaintDevice__PdmDevicePixelRatio       = QPaintDevice__PaintDeviceMetric(11)
	QPaintDevice__PdmDevicePixelRatioScaled = QPaintDevice__PaintDeviceMetric(12)
)

type QPaintDevice struct {
	ptr unsafe.Pointer
}

type QPaintDevice_ITF interface {
	QPaintDevice_PTR() *QPaintDevice
}

func (p *QPaintDevice) QPaintDevice_PTR() *QPaintDevice {
	return p
}

func (p *QPaintDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPaintDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPaintDevice(ptr QPaintDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func NewQPaintDeviceFromPointer(ptr unsafe.Pointer) *QPaintDevice {
	var n = new(QPaintDevice)
	n.SetPointer(ptr)
	return n
}
func NewQPaintDevice() *QPaintDevice {
	return NewQPaintDeviceFromPointer(C.QPaintDevice_NewQPaintDevice())
}

//export callbackQPaintDevice_Metric
func callbackQPaintDevice_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDevice::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQPaintDeviceFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QPaintDevice) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDevice::metric", f)
	}
}

func (ptr *QPaintDevice) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDevice::metric")
	}
}

func (ptr *QPaintDevice) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPaintDevice) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQPaintDevice_DestroyQPaintDevice
func callbackQPaintDevice_DestroyQPaintDevice(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDevice::~QPaintDevice"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceFromPointer(ptr).DestroyQPaintDeviceDefault()
	}
}

func (ptr *QPaintDevice) ConnectDestroyQPaintDevice(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDevice::~QPaintDevice", f)
	}
}

func (ptr *QPaintDevice) DisconnectDestroyQPaintDevice() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDevice::~QPaintDevice")
	}
}

func (ptr *QPaintDevice) DestroyQPaintDevice() {
	if ptr.Pointer() != nil {
		C.QPaintDevice_DestroyQPaintDevice(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintDevice) DestroyQPaintDeviceDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDevice_DestroyQPaintDeviceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintDevice) ColorCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_ColorCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) Depth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Depth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) DevicePixelRatio() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_DevicePixelRatio(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) DevicePixelRatioF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPaintDevice_DevicePixelRatioF(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) HeightMM() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_HeightMM(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) LogicalDpiX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_LogicalDpiX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) LogicalDpiY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_LogicalDpiY(ptr.Pointer())))
	}
	return 0
}

//export callbackQPaintDevice_PaintEngine
func callbackQPaintDevice_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDevice::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(nil)
}

func (ptr *QPaintDevice) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDevice::paintEngine", f)
	}
}

func (ptr *QPaintDevice) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDevice::paintEngine")
	}
}

func (ptr *QPaintDevice) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDevice_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDevice) PaintingActive() bool {
	if ptr.Pointer() != nil {
		return C.QPaintDevice_PaintingActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintDevice) PhysicalDpiX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_PhysicalDpiX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) PhysicalDpiY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_PhysicalDpiY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) WidthMM() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDevice_WidthMM(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPaintDevice) Painters() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QPaintDevice_Painters(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDevice) SetPainters(vus uint16) {
	if ptr.Pointer() != nil {
		C.QPaintDevice_SetPainters(ptr.Pointer(), C.ushort(vus))
	}
}

type QPaintDeviceWindow struct {
	QWindow
	QPaintDevice
}

type QPaintDeviceWindow_ITF interface {
	QWindow_ITF
	QPaintDevice_ITF
	QPaintDeviceWindow_PTR() *QPaintDeviceWindow
}

func (p *QPaintDeviceWindow) QPaintDeviceWindow_PTR() *QPaintDeviceWindow {
	return p
}

func (p *QPaintDeviceWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QWindow_PTR().Pointer()
	}
	return nil
}

func (p *QPaintDeviceWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QWindow_PTR().SetPointer(ptr)
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPaintDeviceWindow(ptr QPaintDeviceWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func NewQPaintDeviceWindowFromPointer(ptr unsafe.Pointer) *QPaintDeviceWindow {
	var n = new(QPaintDeviceWindow)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPaintDeviceWindow) DestroyQPaintDeviceWindow() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

//export callbackQPaintDeviceWindow_PaintEvent
func callbackQPaintDeviceWindow_PaintEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::paintEvent"); signal != nil {
		signal.(func(*QPaintEvent))(NewQPaintEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).PaintEventDefault(NewQPaintEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectPaintEvent(f func(event *QPaintEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::paintEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectPaintEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::paintEvent")
	}
}

func (ptr *QPaintDeviceWindow) PaintEvent(event QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_PaintEvent(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) PaintEventDefault(event QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_PaintEventDefault(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

//export callbackQPaintDeviceWindow_Update3
func callbackQPaintDeviceWindow_Update3(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::update3"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QPaintDeviceWindow) ConnectUpdate3(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::update3", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectUpdate3() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::update3")
	}
}

func (ptr *QPaintDeviceWindow) Update3() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update3(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) Update(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QPaintDeviceWindow) Update2(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Update2(ptr.Pointer(), PointerFromQRegion(region))
	}
}

//export callbackQPaintDeviceWindow_SetHeight
func callbackQPaintDeviceWindow_SetHeight(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setHeight"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetHeightDefault(int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetHeight(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setHeight", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setHeight")
	}
}

func (ptr *QPaintDeviceWindow) SetHeight(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetHeight(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) SetHeightDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetHeightDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQPaintDeviceWindow_SetMaximumHeight
func callbackQPaintDeviceWindow_SetMaximumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setMaximumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetMaximumHeightDefault(int(int32(h)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetMaximumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMaximumHeight", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMaximumHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMaximumHeight")
	}
}

func (ptr *QPaintDeviceWindow) SetMaximumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMaximumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QPaintDeviceWindow) SetMaximumHeightDefault(h int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMaximumHeightDefault(ptr.Pointer(), C.int(int32(h)))
	}
}

//export callbackQPaintDeviceWindow_SetMaximumWidth
func callbackQPaintDeviceWindow_SetMaximumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setMaximumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetMaximumWidthDefault(int(int32(w)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetMaximumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMaximumWidth", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMaximumWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMaximumWidth")
	}
}

func (ptr *QPaintDeviceWindow) SetMaximumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMaximumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QPaintDeviceWindow) SetMaximumWidthDefault(w int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMaximumWidthDefault(ptr.Pointer(), C.int(int32(w)))
	}
}

//export callbackQPaintDeviceWindow_SetMinimumHeight
func callbackQPaintDeviceWindow_SetMinimumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setMinimumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetMinimumHeightDefault(int(int32(h)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetMinimumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMinimumHeight", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMinimumHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMinimumHeight")
	}
}

func (ptr *QPaintDeviceWindow) SetMinimumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMinimumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QPaintDeviceWindow) SetMinimumHeightDefault(h int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMinimumHeightDefault(ptr.Pointer(), C.int(int32(h)))
	}
}

//export callbackQPaintDeviceWindow_SetMinimumWidth
func callbackQPaintDeviceWindow_SetMinimumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setMinimumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetMinimumWidthDefault(int(int32(w)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetMinimumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMinimumWidth", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetMinimumWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setMinimumWidth")
	}
}

func (ptr *QPaintDeviceWindow) SetMinimumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMinimumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QPaintDeviceWindow) SetMinimumWidthDefault(w int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetMinimumWidthDefault(ptr.Pointer(), C.int(int32(w)))
	}
}

//export callbackQPaintDeviceWindow_SetTitle
func callbackQPaintDeviceWindow_SetTitle(ptr unsafe.Pointer, vqs C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setTitle"); signal != nil {
		signal.(func(string))(cGoUnpackString(vqs))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetTitleDefault(cGoUnpackString(vqs))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetTitle(f func(vqs string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setTitle", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetTitle() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setTitle")
	}
}

func (ptr *QPaintDeviceWindow) SetTitle(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QPaintDeviceWindow_SetTitle(ptr.Pointer(), vqsC)
	}
}

func (ptr *QPaintDeviceWindow) SetTitleDefault(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QPaintDeviceWindow_SetTitleDefault(ptr.Pointer(), vqsC)
	}
}

//export callbackQPaintDeviceWindow_SetVisible
func callbackQPaintDeviceWindow_SetVisible(ptr unsafe.Pointer, visible C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setVisible"); signal != nil {
		signal.(func(bool))(int8(visible) != 0)
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetVisibleDefault(int8(visible) != 0)
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetVisible(f func(visible bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setVisible", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetVisible() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setVisible")
	}
}

func (ptr *QPaintDeviceWindow) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QPaintDeviceWindow) SetVisibleDefault(visible bool) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQPaintDeviceWindow_SetWidth
func callbackQPaintDeviceWindow_SetWidth(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setWidth"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetWidthDefault(int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetWidth(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setWidth", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setWidth")
	}
}

func (ptr *QPaintDeviceWindow) SetWidth(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetWidth(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) SetWidthDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetWidthDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQPaintDeviceWindow_SetX
func callbackQPaintDeviceWindow_SetX(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setX"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetXDefault(int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetX(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setX", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetX() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setX")
	}
}

func (ptr *QPaintDeviceWindow) SetX(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetX(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) SetXDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetXDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQPaintDeviceWindow_SetY
func callbackQPaintDeviceWindow_SetY(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::setY"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).SetYDefault(int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectSetY(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setY", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSetY() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::setY")
	}
}

func (ptr *QPaintDeviceWindow) SetY(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetY(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QPaintDeviceWindow) SetYDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_SetYDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQPaintDeviceWindow_Alert
func callbackQPaintDeviceWindow_Alert(ptr unsafe.Pointer, msec C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::alert"); signal != nil {
		signal.(func(int))(int(int32(msec)))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).AlertDefault(int(int32(msec)))
	}
}

func (ptr *QPaintDeviceWindow) ConnectAlert(f func(msec int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::alert", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectAlert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::alert")
	}
}

func (ptr *QPaintDeviceWindow) Alert(msec int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Alert(ptr.Pointer(), C.int(int32(msec)))
	}
}

func (ptr *QPaintDeviceWindow) AlertDefault(msec int) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_AlertDefault(ptr.Pointer(), C.int(int32(msec)))
	}
}

//export callbackQPaintDeviceWindow_Close
func callbackQPaintDeviceWindow_Close(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPaintDeviceWindowFromPointer(ptr).CloseDefault())))
}

func (ptr *QPaintDeviceWindow) ConnectClose(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::close", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::close")
	}
}

func (ptr *QPaintDeviceWindow) Close() bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_Close(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintDeviceWindow) CloseDefault() bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_CloseDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_Event
func callbackQPaintDeviceWindow_Event(ptr unsafe.Pointer, ev unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(ev)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPaintDeviceWindowFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev)))))
}

func (ptr *QPaintDeviceWindow) ConnectEvent(f func(ev *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::event", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::event")
	}
}

func (ptr *QPaintDeviceWindow) Event(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_Event(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

func (ptr *QPaintDeviceWindow) EventDefault(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_ExposeEvent
func callbackQPaintDeviceWindow_ExposeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::exposeEvent"); signal != nil {
		signal.(func(*QExposeEvent))(NewQExposeEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ExposeEventDefault(NewQExposeEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectExposeEvent(f func(ev *QExposeEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::exposeEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectExposeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::exposeEvent")
	}
}

func (ptr *QPaintDeviceWindow) ExposeEvent(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ExposeEvent(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) ExposeEventDefault(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ExposeEventDefault(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_FocusInEvent
func callbackQPaintDeviceWindow_FocusInEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::focusInEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).FocusInEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectFocusInEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::focusInEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFocusInEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::focusInEvent")
	}
}

func (ptr *QPaintDeviceWindow) FocusInEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusInEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) FocusInEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusInEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_FocusObject
func callbackQPaintDeviceWindow_FocusObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::focusObject"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQPaintDeviceWindowFromPointer(ptr).FocusObjectDefault())
}

func (ptr *QPaintDeviceWindow) ConnectFocusObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::focusObject", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFocusObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::focusObject")
	}
}

func (ptr *QPaintDeviceWindow) FocusObject() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPaintDeviceWindow_FocusObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPaintDeviceWindow) FocusObjectDefault() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QPaintDeviceWindow_FocusObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQPaintDeviceWindow_FocusOutEvent
func callbackQPaintDeviceWindow_FocusOutEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::focusOutEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).FocusOutEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectFocusOutEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::focusOutEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFocusOutEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::focusOutEvent")
	}
}

func (ptr *QPaintDeviceWindow) FocusOutEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusOutEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) FocusOutEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_FocusOutEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_Format
func callbackQPaintDeviceWindow_Format(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQPaintDeviceWindowFromPointer(ptr).FormatDefault())
}

func (ptr *QPaintDeviceWindow) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::format", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::format")
	}
}

func (ptr *QPaintDeviceWindow) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QPaintDeviceWindow_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintDeviceWindow) FormatDefault() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QPaintDeviceWindow_FormatDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

//export callbackQPaintDeviceWindow_Hide
func callbackQPaintDeviceWindow_Hide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::hide"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).HideDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectHide(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::hide", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectHide() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::hide")
	}
}

func (ptr *QPaintDeviceWindow) Hide() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Hide(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) HideDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_HideDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_HideEvent
func callbackQPaintDeviceWindow_HideEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::hideEvent"); signal != nil {
		signal.(func(*QHideEvent))(NewQHideEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).HideEventDefault(NewQHideEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectHideEvent(f func(ev *QHideEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::hideEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectHideEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::hideEvent")
	}
}

func (ptr *QPaintDeviceWindow) HideEvent(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_HideEvent(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) HideEventDefault(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_HideEventDefault(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_KeyPressEvent
func callbackQPaintDeviceWindow_KeyPressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::keyPressEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).KeyPressEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectKeyPressEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::keyPressEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectKeyPressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::keyPressEvent")
	}
}

func (ptr *QPaintDeviceWindow) KeyPressEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyPressEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) KeyPressEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyPressEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_KeyReleaseEvent
func callbackQPaintDeviceWindow_KeyReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::keyReleaseEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).KeyReleaseEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectKeyReleaseEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::keyReleaseEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectKeyReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::keyReleaseEvent")
	}
}

func (ptr *QPaintDeviceWindow) KeyReleaseEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyReleaseEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) KeyReleaseEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_KeyReleaseEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_Lower
func callbackQPaintDeviceWindow_Lower(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::lower"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).LowerDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectLower(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::lower", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectLower() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::lower")
	}
}

func (ptr *QPaintDeviceWindow) Lower() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Lower(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) LowerDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_LowerDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_MouseDoubleClickEvent
func callbackQPaintDeviceWindow_MouseDoubleClickEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::mouseDoubleClickEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MouseDoubleClickEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMouseDoubleClickEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mouseDoubleClickEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMouseDoubleClickEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mouseDoubleClickEvent")
	}
}

func (ptr *QPaintDeviceWindow) MouseDoubleClickEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MouseDoubleClickEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MouseMoveEvent
func callbackQPaintDeviceWindow_MouseMoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::mouseMoveEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MouseMoveEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMouseMoveEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mouseMoveEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMouseMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mouseMoveEvent")
	}
}

func (ptr *QPaintDeviceWindow) MouseMoveEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseMoveEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MouseMoveEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseMoveEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MousePressEvent
func callbackQPaintDeviceWindow_MousePressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::mousePressEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MousePressEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMousePressEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mousePressEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMousePressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mousePressEvent")
	}
}

func (ptr *QPaintDeviceWindow) MousePressEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MousePressEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MousePressEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MousePressEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MouseReleaseEvent
func callbackQPaintDeviceWindow_MouseReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::mouseReleaseEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MouseReleaseEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMouseReleaseEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mouseReleaseEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMouseReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::mouseReleaseEvent")
	}
}

func (ptr *QPaintDeviceWindow) MouseReleaseEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseReleaseEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MouseReleaseEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_MoveEvent
func callbackQPaintDeviceWindow_MoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::moveEvent"); signal != nil {
		signal.(func(*QMoveEvent))(NewQMoveEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).MoveEventDefault(NewQMoveEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectMoveEvent(f func(ev *QMoveEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::moveEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::moveEvent")
	}
}

func (ptr *QPaintDeviceWindow) MoveEvent(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MoveEvent(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) MoveEventDefault(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_MoveEventDefault(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_NativeEvent
func callbackQPaintDeviceWindow_NativeEvent(ptr unsafe.Pointer, eventType unsafe.Pointer, message unsafe.Pointer, result C.long) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::nativeEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QByteArray, unsafe.Pointer, int) bool)(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPaintDeviceWindowFromPointer(ptr).NativeEventDefault(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
}

func (ptr *QPaintDeviceWindow) ConnectNativeEvent(f func(eventType *core.QByteArray, message unsafe.Pointer, result int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::nativeEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectNativeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::nativeEvent")
	}
}

func (ptr *QPaintDeviceWindow) NativeEvent(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_NativeEvent(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

func (ptr *QPaintDeviceWindow) NativeEventDefault(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_NativeEventDefault(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_Raise
func callbackQPaintDeviceWindow_Raise(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::raise"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).RaiseDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectRaise(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::raise", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectRaise() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::raise")
	}
}

func (ptr *QPaintDeviceWindow) Raise() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Raise(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) RaiseDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_RaiseDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_RequestActivate
func callbackQPaintDeviceWindow_RequestActivate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::requestActivate"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).RequestActivateDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectRequestActivate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::requestActivate", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectRequestActivate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::requestActivate")
	}
}

func (ptr *QPaintDeviceWindow) RequestActivate() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_RequestActivate(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) RequestActivateDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_RequestActivateDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_RequestUpdate
func callbackQPaintDeviceWindow_RequestUpdate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::requestUpdate"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).RequestUpdateDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectRequestUpdate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::requestUpdate", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectRequestUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::requestUpdate")
	}
}

func (ptr *QPaintDeviceWindow) RequestUpdate() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_RequestUpdate(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) RequestUpdateDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_RequestUpdateDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ResizeEvent
func callbackQPaintDeviceWindow_ResizeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::resizeEvent"); signal != nil {
		signal.(func(*QResizeEvent))(NewQResizeEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ResizeEventDefault(NewQResizeEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectResizeEvent(f func(ev *QResizeEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::resizeEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectResizeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::resizeEvent")
	}
}

func (ptr *QPaintDeviceWindow) ResizeEvent(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ResizeEvent(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) ResizeEventDefault(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ResizeEventDefault(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_Show
func callbackQPaintDeviceWindow_Show(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::show"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ShowDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectShow(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::show", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::show")
	}
}

func (ptr *QPaintDeviceWindow) Show() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_Show(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) ShowDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowEvent
func callbackQPaintDeviceWindow_ShowEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::showEvent"); signal != nil {
		signal.(func(*QShowEvent))(NewQShowEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ShowEventDefault(NewQShowEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectShowEvent(f func(ev *QShowEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showEvent")
	}
}

func (ptr *QPaintDeviceWindow) ShowEvent(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowEvent(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) ShowEventDefault(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowEventDefault(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_ShowFullScreen
func callbackQPaintDeviceWindow_ShowFullScreen(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::showFullScreen"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ShowFullScreenDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectShowFullScreen(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showFullScreen", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowFullScreen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showFullScreen")
	}
}

func (ptr *QPaintDeviceWindow) ShowFullScreen() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowFullScreen(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) ShowFullScreenDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowFullScreenDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowMaximized
func callbackQPaintDeviceWindow_ShowMaximized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::showMaximized"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ShowMaximizedDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectShowMaximized(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showMaximized", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowMaximized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showMaximized")
	}
}

func (ptr *QPaintDeviceWindow) ShowMaximized() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowMaximized(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) ShowMaximizedDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowMaximizedDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowMinimized
func callbackQPaintDeviceWindow_ShowMinimized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::showMinimized"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ShowMinimizedDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectShowMinimized(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showMinimized", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowMinimized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showMinimized")
	}
}

func (ptr *QPaintDeviceWindow) ShowMinimized() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowMinimized(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) ShowMinimizedDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowMinimizedDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_ShowNormal
func callbackQPaintDeviceWindow_ShowNormal(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::showNormal"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ShowNormalDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectShowNormal(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showNormal", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectShowNormal() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::showNormal")
	}
}

func (ptr *QPaintDeviceWindow) ShowNormal() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowNormal(ptr.Pointer())
	}
}

func (ptr *QPaintDeviceWindow) ShowNormalDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ShowNormalDefault(ptr.Pointer())
	}
}

//export callbackQPaintDeviceWindow_Size
func callbackQPaintDeviceWindow_Size(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQPaintDeviceWindowFromPointer(ptr).SizeDefault())
}

func (ptr *QPaintDeviceWindow) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::size", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::size")
	}
}

func (ptr *QPaintDeviceWindow) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPaintDeviceWindow_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintDeviceWindow) SizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPaintDeviceWindow_SizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQPaintDeviceWindow_SurfaceType
func callbackQPaintDeviceWindow_SurfaceType(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(NewQPaintDeviceWindowFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QPaintDeviceWindow) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::surfaceType", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::surfaceType")
	}
}

func (ptr *QPaintDeviceWindow) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QPaintDeviceWindow_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintDeviceWindow) SurfaceTypeDefault() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QPaintDeviceWindow_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQPaintDeviceWindow_TabletEvent
func callbackQPaintDeviceWindow_TabletEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::tabletEvent"); signal != nil {
		signal.(func(*QTabletEvent))(NewQTabletEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).TabletEventDefault(NewQTabletEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectTabletEvent(f func(ev *QTabletEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::tabletEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectTabletEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::tabletEvent")
	}
}

func (ptr *QPaintDeviceWindow) TabletEvent(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TabletEvent(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) TabletEventDefault(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TabletEventDefault(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_TouchEvent
func callbackQPaintDeviceWindow_TouchEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::touchEvent"); signal != nil {
		signal.(func(*QTouchEvent))(NewQTouchEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).TouchEventDefault(NewQTouchEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectTouchEvent(f func(ev *QTouchEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::touchEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectTouchEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::touchEvent")
	}
}

func (ptr *QPaintDeviceWindow) TouchEvent(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TouchEvent(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) TouchEventDefault(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TouchEventDefault(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_WheelEvent
func callbackQPaintDeviceWindow_WheelEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::wheelEvent"); signal != nil {
		signal.(func(*QWheelEvent))(NewQWheelEventFromPointer(ev))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).WheelEventDefault(NewQWheelEventFromPointer(ev))
	}
}

func (ptr *QPaintDeviceWindow) ConnectWheelEvent(f func(ev *QWheelEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::wheelEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::wheelEvent")
	}
}

func (ptr *QPaintDeviceWindow) WheelEvent(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_WheelEvent(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QPaintDeviceWindow) WheelEventDefault(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_WheelEventDefault(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

//export callbackQPaintDeviceWindow_TimerEvent
func callbackQPaintDeviceWindow_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::timerEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::timerEvent")
	}
}

func (ptr *QPaintDeviceWindow) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQPaintDeviceWindow_ChildEvent
func callbackQPaintDeviceWindow_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::childEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::childEvent")
	}
}

func (ptr *QPaintDeviceWindow) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQPaintDeviceWindow_ConnectNotify
func callbackQPaintDeviceWindow_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPaintDeviceWindow) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::connectNotify", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::connectNotify")
	}
}

func (ptr *QPaintDeviceWindow) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPaintDeviceWindow) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPaintDeviceWindow_CustomEvent
func callbackQPaintDeviceWindow_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QPaintDeviceWindow) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::customEvent", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::customEvent")
	}
}

func (ptr *QPaintDeviceWindow) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QPaintDeviceWindow) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQPaintDeviceWindow_DeleteLater
func callbackQPaintDeviceWindow_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QPaintDeviceWindow) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::deleteLater", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::deleteLater")
	}
}

func (ptr *QPaintDeviceWindow) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintDeviceWindow) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPaintDeviceWindow_DisconnectNotify
func callbackQPaintDeviceWindow_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPaintDeviceWindowFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPaintDeviceWindow) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::disconnectNotify", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::disconnectNotify")
	}
}

func (ptr *QPaintDeviceWindow) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPaintDeviceWindow) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintDeviceWindow_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPaintDeviceWindow_EventFilter
func callbackQPaintDeviceWindow_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPaintDeviceWindowFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QPaintDeviceWindow) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::eventFilter", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::eventFilter")
	}
}

func (ptr *QPaintDeviceWindow) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPaintDeviceWindow) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPaintDeviceWindow_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPaintDeviceWindow_MetaObject
func callbackQPaintDeviceWindow_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQPaintDeviceWindowFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPaintDeviceWindow) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::metaObject", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::metaObject")
	}
}

func (ptr *QPaintDeviceWindow) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPaintDeviceWindow_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDeviceWindow) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPaintDeviceWindow_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPaintDeviceWindow_Metric
func callbackQPaintDeviceWindow_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQPaintDeviceWindowFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QPaintDeviceWindow) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::metric", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::metric")
	}
}

func (ptr *QPaintDeviceWindow) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDeviceWindow_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPaintDeviceWindow) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPaintDeviceWindow_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQPaintDeviceWindow_PaintEngine
func callbackQPaintDeviceWindow_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintDeviceWindow::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPaintDeviceWindowFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPaintDeviceWindow) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::paintEngine", f)
	}
}

func (ptr *QPaintDeviceWindow) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintDeviceWindow::paintEngine")
	}
}

func (ptr *QPaintDeviceWindow) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDeviceWindow_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintDeviceWindow) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPaintDeviceWindow_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

//QPaintEngine::DirtyFlag
type QPaintEngine__DirtyFlag int64

const (
	QPaintEngine__DirtyPen             = QPaintEngine__DirtyFlag(0x0001)
	QPaintEngine__DirtyBrush           = QPaintEngine__DirtyFlag(0x0002)
	QPaintEngine__DirtyBrushOrigin     = QPaintEngine__DirtyFlag(0x0004)
	QPaintEngine__DirtyFont            = QPaintEngine__DirtyFlag(0x0008)
	QPaintEngine__DirtyBackground      = QPaintEngine__DirtyFlag(0x0010)
	QPaintEngine__DirtyBackgroundMode  = QPaintEngine__DirtyFlag(0x0020)
	QPaintEngine__DirtyTransform       = QPaintEngine__DirtyFlag(0x0040)
	QPaintEngine__DirtyClipRegion      = QPaintEngine__DirtyFlag(0x0080)
	QPaintEngine__DirtyClipPath        = QPaintEngine__DirtyFlag(0x0100)
	QPaintEngine__DirtyHints           = QPaintEngine__DirtyFlag(0x0200)
	QPaintEngine__DirtyCompositionMode = QPaintEngine__DirtyFlag(0x0400)
	QPaintEngine__DirtyClipEnabled     = QPaintEngine__DirtyFlag(0x0800)
	QPaintEngine__DirtyOpacity         = QPaintEngine__DirtyFlag(0x1000)
	QPaintEngine__AllDirty             = QPaintEngine__DirtyFlag(0xffff)
)

//QPaintEngine::PaintEngineFeature
type QPaintEngine__PaintEngineFeature int64

const (
	QPaintEngine__PrimitiveTransform          = QPaintEngine__PaintEngineFeature(0x00000001)
	QPaintEngine__PatternTransform            = QPaintEngine__PaintEngineFeature(0x00000002)
	QPaintEngine__PixmapTransform             = QPaintEngine__PaintEngineFeature(0x00000004)
	QPaintEngine__PatternBrush                = QPaintEngine__PaintEngineFeature(0x00000008)
	QPaintEngine__LinearGradientFill          = QPaintEngine__PaintEngineFeature(0x00000010)
	QPaintEngine__RadialGradientFill          = QPaintEngine__PaintEngineFeature(0x00000020)
	QPaintEngine__ConicalGradientFill         = QPaintEngine__PaintEngineFeature(0x00000040)
	QPaintEngine__AlphaBlend                  = QPaintEngine__PaintEngineFeature(0x00000080)
	QPaintEngine__PorterDuff                  = QPaintEngine__PaintEngineFeature(0x00000100)
	QPaintEngine__PainterPaths                = QPaintEngine__PaintEngineFeature(0x00000200)
	QPaintEngine__Antialiasing                = QPaintEngine__PaintEngineFeature(0x00000400)
	QPaintEngine__BrushStroke                 = QPaintEngine__PaintEngineFeature(0x00000800)
	QPaintEngine__ConstantOpacity             = QPaintEngine__PaintEngineFeature(0x00001000)
	QPaintEngine__MaskedBrush                 = QPaintEngine__PaintEngineFeature(0x00002000)
	QPaintEngine__PerspectiveTransform        = QPaintEngine__PaintEngineFeature(0x00004000)
	QPaintEngine__BlendModes                  = QPaintEngine__PaintEngineFeature(0x00008000)
	QPaintEngine__ObjectBoundingModeGradients = QPaintEngine__PaintEngineFeature(0x00010000)
	QPaintEngine__RasterOpModes               = QPaintEngine__PaintEngineFeature(0x00020000)
	QPaintEngine__PaintOutsidePaintEvent      = QPaintEngine__PaintEngineFeature(0x20000000)
	QPaintEngine__AllFeatures                 = QPaintEngine__PaintEngineFeature(0xffffffff)
)

//QPaintEngine::PolygonDrawMode
type QPaintEngine__PolygonDrawMode int64

const (
	QPaintEngine__OddEvenMode  = QPaintEngine__PolygonDrawMode(0)
	QPaintEngine__WindingMode  = QPaintEngine__PolygonDrawMode(1)
	QPaintEngine__ConvexMode   = QPaintEngine__PolygonDrawMode(2)
	QPaintEngine__PolylineMode = QPaintEngine__PolygonDrawMode(3)
)

//QPaintEngine::Type
type QPaintEngine__Type int64

const (
	QPaintEngine__X11           = QPaintEngine__Type(0)
	QPaintEngine__Windows       = QPaintEngine__Type(1)
	QPaintEngine__QuickDraw     = QPaintEngine__Type(2)
	QPaintEngine__CoreGraphics  = QPaintEngine__Type(3)
	QPaintEngine__MacPrinter    = QPaintEngine__Type(4)
	QPaintEngine__QWindowSystem = QPaintEngine__Type(5)
	QPaintEngine__PostScript    = QPaintEngine__Type(6)
	QPaintEngine__OpenGL        = QPaintEngine__Type(7)
	QPaintEngine__Picture       = QPaintEngine__Type(8)
	QPaintEngine__SVG           = QPaintEngine__Type(9)
	QPaintEngine__Raster        = QPaintEngine__Type(10)
	QPaintEngine__Direct3D      = QPaintEngine__Type(11)
	QPaintEngine__Pdf           = QPaintEngine__Type(12)
	QPaintEngine__OpenVG        = QPaintEngine__Type(13)
	QPaintEngine__OpenGL2       = QPaintEngine__Type(14)
	QPaintEngine__PaintBuffer   = QPaintEngine__Type(15)
	QPaintEngine__Blitter       = QPaintEngine__Type(16)
	QPaintEngine__Direct2D      = QPaintEngine__Type(17)
	QPaintEngine__User          = QPaintEngine__Type(50)
	QPaintEngine__MaxUser       = QPaintEngine__Type(100)
)

type QPaintEngine struct {
	ptr unsafe.Pointer
}

type QPaintEngine_ITF interface {
	QPaintEngine_PTR() *QPaintEngine
}

func (p *QPaintEngine) QPaintEngine_PTR() *QPaintEngine {
	return p
}

func (p *QPaintEngine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPaintEngine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPaintEngine(ptr QPaintEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEngine_PTR().Pointer()
	}
	return nil
}

func NewQPaintEngineFromPointer(ptr unsafe.Pointer) *QPaintEngine {
	var n = new(QPaintEngine)
	n.SetPointer(ptr)
	return n
}

//export callbackQPaintEngine_DrawEllipse
func callbackQPaintEngine_DrawEllipse(ptr unsafe.Pointer, rect unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawEllipse"); signal != nil {
		signal.(func(*core.QRectF))(core.NewQRectFFromPointer(rect))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawEllipseDefault(core.NewQRectFFromPointer(rect))
	}
}

func (ptr *QPaintEngine) ConnectDrawEllipse(f func(rect *core.QRectF)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawEllipse", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawEllipse() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawEllipse")
	}
}

func (ptr *QPaintEngine) DrawEllipse(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QPaintEngine) DrawEllipseDefault(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipseDefault(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

//export callbackQPaintEngine_DrawImage
func callbackQPaintEngine_DrawImage(ptr unsafe.Pointer, rectangle unsafe.Pointer, image unsafe.Pointer, sr unsafe.Pointer, flags C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawImage"); signal != nil {
		signal.(func(*core.QRectF, *QImage, *core.QRectF, core.Qt__ImageConversionFlag))(core.NewQRectFFromPointer(rectangle), NewQImageFromPointer(image), core.NewQRectFFromPointer(sr), core.Qt__ImageConversionFlag(flags))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawImageDefault(core.NewQRectFFromPointer(rectangle), NewQImageFromPointer(image), core.NewQRectFFromPointer(sr), core.Qt__ImageConversionFlag(flags))
	}
}

func (ptr *QPaintEngine) ConnectDrawImage(f func(rectangle *core.QRectF, image *QImage, sr *core.QRectF, flags core.Qt__ImageConversionFlag)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawImage", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawImage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawImage")
	}
}

func (ptr *QPaintEngine) DrawImage(rectangle core.QRectF_ITF, image QImage_ITF, sr core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawImage(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image), core.PointerFromQRectF(sr), C.longlong(flags))
	}
}

func (ptr *QPaintEngine) DrawImageDefault(rectangle core.QRectF_ITF, image QImage_ITF, sr core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawImageDefault(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image), core.PointerFromQRectF(sr), C.longlong(flags))
	}
}

//export callbackQPaintEngine_DrawPolygon
func callbackQPaintEngine_DrawPolygon(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int, mode C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawPolygon"); signal != nil {
		signal.(func(*core.QPointF, int, QPaintEngine__PolygonDrawMode))(core.NewQPointFFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPolygonDefault(core.NewQPointFFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	}
}

func (ptr *QPaintEngine) ConnectDrawPolygon(f func(points *core.QPointF, pointCount int, mode QPaintEngine__PolygonDrawMode)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPolygon", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPolygon() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPolygon")
	}
}

func (ptr *QPaintEngine) DrawPolygon(points core.QPointF_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

func (ptr *QPaintEngine) DrawPolygonDefault(points core.QPointF_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygonDefault(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

func NewQPaintEngine(caps QPaintEngine__PaintEngineFeature) *QPaintEngine {
	return NewQPaintEngineFromPointer(C.QPaintEngine_NewQPaintEngine(C.longlong(caps)))
}

//export callbackQPaintEngine_Begin
func callbackQPaintEngine_Begin(ptr unsafe.Pointer, pdev unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::begin"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QPaintDevice) bool)(NewQPaintDeviceFromPointer(pdev)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QPaintEngine) ConnectBegin(f func(pdev *QPaintDevice) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::begin", f)
	}
}

func (ptr *QPaintEngine) DisconnectBegin(pdev QPaintDevice_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::begin")
	}
}

func (ptr *QPaintEngine) Begin(pdev QPaintDevice_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_Begin(ptr.Pointer(), PointerFromQPaintDevice(pdev)) != 0
	}
	return false
}

//export callbackQPaintEngine_DrawEllipse2
func callbackQPaintEngine_DrawEllipse2(ptr unsafe.Pointer, rect unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawEllipse2"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawEllipse2Default(core.NewQRectFromPointer(rect))
	}
}

func (ptr *QPaintEngine) ConnectDrawEllipse2(f func(rect *core.QRect)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawEllipse2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawEllipse2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawEllipse2")
	}
}

func (ptr *QPaintEngine) DrawEllipse2(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse2(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QPaintEngine) DrawEllipse2Default(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawEllipse2Default(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

//export callbackQPaintEngine_DrawLines2
func callbackQPaintEngine_DrawLines2(ptr unsafe.Pointer, lines unsafe.Pointer, lineCount C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawLines2"); signal != nil {
		signal.(func(*core.QLine, int))(core.NewQLineFromPointer(lines), int(int32(lineCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawLines2Default(core.NewQLineFromPointer(lines), int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawLines2(f func(lines *core.QLine, lineCount int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawLines2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawLines2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawLines2")
	}
}

func (ptr *QPaintEngine) DrawLines2(lines core.QLine_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines2(ptr.Pointer(), core.PointerFromQLine(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) DrawLines2Default(lines core.QLine_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines2Default(ptr.Pointer(), core.PointerFromQLine(lines), C.int(int32(lineCount)))
	}
}

//export callbackQPaintEngine_DrawLines
func callbackQPaintEngine_DrawLines(ptr unsafe.Pointer, lines unsafe.Pointer, lineCount C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawLines"); signal != nil {
		signal.(func(*core.QLineF, int))(core.NewQLineFFromPointer(lines), int(int32(lineCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawLinesDefault(core.NewQLineFFromPointer(lines), int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawLines(f func(lines *core.QLineF, lineCount int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawLines", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawLines() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawLines")
	}
}

func (ptr *QPaintEngine) DrawLines(lines core.QLineF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLines(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPaintEngine) DrawLinesDefault(lines core.QLineF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawLinesDefault(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(int32(lineCount)))
	}
}

//export callbackQPaintEngine_DrawPath
func callbackQPaintEngine_DrawPath(ptr unsafe.Pointer, path unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawPath"); signal != nil {
		signal.(func(*QPainterPath))(NewQPainterPathFromPointer(path))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPathDefault(NewQPainterPathFromPointer(path))
	}
}

func (ptr *QPaintEngine) ConnectDrawPath(f func(path *QPainterPath)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPath", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPath() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPath")
	}
}

func (ptr *QPaintEngine) DrawPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPaintEngine) DrawPathDefault(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPathDefault(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

//export callbackQPaintEngine_DrawPixmap
func callbackQPaintEngine_DrawPixmap(ptr unsafe.Pointer, r unsafe.Pointer, pm unsafe.Pointer, sr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawPixmap"); signal != nil {
		signal.(func(*core.QRectF, *QPixmap, *core.QRectF))(core.NewQRectFFromPointer(r), NewQPixmapFromPointer(pm), core.NewQRectFFromPointer(sr))
	}

}

func (ptr *QPaintEngine) ConnectDrawPixmap(f func(r *core.QRectF, pm *QPixmap, sr *core.QRectF)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPixmap", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPixmap(r core.QRectF_ITF, pm QPixmap_ITF, sr core.QRectF_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPixmap")
	}
}

func (ptr *QPaintEngine) DrawPixmap(r core.QRectF_ITF, pm QPixmap_ITF, sr core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPixmap(ptr.Pointer(), core.PointerFromQRectF(r), PointerFromQPixmap(pm), core.PointerFromQRectF(sr))
	}
}

//export callbackQPaintEngine_DrawPoints2
func callbackQPaintEngine_DrawPoints2(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawPoints2"); signal != nil {
		signal.(func(*core.QPoint, int))(core.NewQPointFromPointer(points), int(int32(pointCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPoints2Default(core.NewQPointFromPointer(points), int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawPoints2(f func(points *core.QPoint, pointCount int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPoints2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPoints2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPoints2")
	}
}

func (ptr *QPaintEngine) DrawPoints2(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) DrawPoints2Default(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints2Default(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

//export callbackQPaintEngine_DrawPoints
func callbackQPaintEngine_DrawPoints(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawPoints"); signal != nil {
		signal.(func(*core.QPointF, int))(core.NewQPointFFromPointer(points), int(int32(pointCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPointsDefault(core.NewQPointFFromPointer(points), int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawPoints(f func(points *core.QPointF, pointCount int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPoints", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPoints() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPoints")
	}
}

func (ptr *QPaintEngine) DrawPoints(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPoints(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPaintEngine) DrawPointsDefault(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPointsDefault(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

//export callbackQPaintEngine_DrawPolygon2
func callbackQPaintEngine_DrawPolygon2(ptr unsafe.Pointer, points unsafe.Pointer, pointCount C.int, mode C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawPolygon2"); signal != nil {
		signal.(func(*core.QPoint, int, QPaintEngine__PolygonDrawMode))(core.NewQPointFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawPolygon2Default(core.NewQPointFromPointer(points), int(int32(pointCount)), QPaintEngine__PolygonDrawMode(mode))
	}
}

func (ptr *QPaintEngine) ConnectDrawPolygon2(f func(points *core.QPoint, pointCount int, mode QPaintEngine__PolygonDrawMode)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPolygon2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawPolygon2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawPolygon2")
	}
}

func (ptr *QPaintEngine) DrawPolygon2(points core.QPoint_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon2(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

func (ptr *QPaintEngine) DrawPolygon2Default(points core.QPoint_ITF, pointCount int, mode QPaintEngine__PolygonDrawMode) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawPolygon2Default(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)), C.longlong(mode))
	}
}

//export callbackQPaintEngine_DrawRects2
func callbackQPaintEngine_DrawRects2(ptr unsafe.Pointer, rects unsafe.Pointer, rectCount C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawRects2"); signal != nil {
		signal.(func(*core.QRect, int))(core.NewQRectFromPointer(rects), int(int32(rectCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawRects2Default(core.NewQRectFromPointer(rects), int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawRects2(f func(rects *core.QRect, rectCount int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawRects2", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawRects2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawRects2")
	}
}

func (ptr *QPaintEngine) DrawRects2(rects core.QRect_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects2(ptr.Pointer(), core.PointerFromQRect(rects), C.int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) DrawRects2Default(rects core.QRect_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects2Default(ptr.Pointer(), core.PointerFromQRect(rects), C.int(int32(rectCount)))
	}
}

//export callbackQPaintEngine_DrawRects
func callbackQPaintEngine_DrawRects(ptr unsafe.Pointer, rects unsafe.Pointer, rectCount C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawRects"); signal != nil {
		signal.(func(*core.QRectF, int))(core.NewQRectFFromPointer(rects), int(int32(rectCount)))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawRectsDefault(core.NewQRectFFromPointer(rects), int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) ConnectDrawRects(f func(rects *core.QRectF, rectCount int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawRects", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawRects() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawRects")
	}
}

func (ptr *QPaintEngine) DrawRects(rects core.QRectF_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRects(ptr.Pointer(), core.PointerFromQRectF(rects), C.int(int32(rectCount)))
	}
}

func (ptr *QPaintEngine) DrawRectsDefault(rects core.QRectF_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawRectsDefault(ptr.Pointer(), core.PointerFromQRectF(rects), C.int(int32(rectCount)))
	}
}

//export callbackQPaintEngine_DrawTextItem
func callbackQPaintEngine_DrawTextItem(ptr unsafe.Pointer, p unsafe.Pointer, textItem unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawTextItem"); signal != nil {
		signal.(func(*core.QPointF, *QTextItem))(core.NewQPointFFromPointer(p), NewQTextItemFromPointer(textItem))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawTextItemDefault(core.NewQPointFFromPointer(p), NewQTextItemFromPointer(textItem))
	}
}

func (ptr *QPaintEngine) ConnectDrawTextItem(f func(p *core.QPointF, textItem *QTextItem)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawTextItem", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawTextItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawTextItem")
	}
}

func (ptr *QPaintEngine) DrawTextItem(p core.QPointF_ITF, textItem QTextItem_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTextItem(ptr.Pointer(), core.PointerFromQPointF(p), PointerFromQTextItem(textItem))
	}
}

func (ptr *QPaintEngine) DrawTextItemDefault(p core.QPointF_ITF, textItem QTextItem_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTextItemDefault(ptr.Pointer(), core.PointerFromQPointF(p), PointerFromQTextItem(textItem))
	}
}

//export callbackQPaintEngine_DrawTiledPixmap
func callbackQPaintEngine_DrawTiledPixmap(ptr unsafe.Pointer, rect unsafe.Pointer, pixmap unsafe.Pointer, p unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::drawTiledPixmap"); signal != nil {
		signal.(func(*core.QRectF, *QPixmap, *core.QPointF))(core.NewQRectFFromPointer(rect), NewQPixmapFromPointer(pixmap), core.NewQPointFFromPointer(p))
	} else {
		NewQPaintEngineFromPointer(ptr).DrawTiledPixmapDefault(core.NewQRectFFromPointer(rect), NewQPixmapFromPointer(pixmap), core.NewQPointFFromPointer(p))
	}
}

func (ptr *QPaintEngine) ConnectDrawTiledPixmap(f func(rect *core.QRectF, pixmap *QPixmap, p *core.QPointF)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawTiledPixmap", f)
	}
}

func (ptr *QPaintEngine) DisconnectDrawTiledPixmap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::drawTiledPixmap")
	}
}

func (ptr *QPaintEngine) DrawTiledPixmap(rect core.QRectF_ITF, pixmap QPixmap_ITF, p core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTiledPixmap(ptr.Pointer(), core.PointerFromQRectF(rect), PointerFromQPixmap(pixmap), core.PointerFromQPointF(p))
	}
}

func (ptr *QPaintEngine) DrawTiledPixmapDefault(rect core.QRectF_ITF, pixmap QPixmap_ITF, p core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DrawTiledPixmapDefault(ptr.Pointer(), core.PointerFromQRectF(rect), PointerFromQPixmap(pixmap), core.PointerFromQPointF(p))
	}
}

//export callbackQPaintEngine_End
func callbackQPaintEngine_End(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::end"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QPaintEngine) ConnectEnd(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::end", f)
	}
}

func (ptr *QPaintEngine) DisconnectEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::end")
	}
}

func (ptr *QPaintEngine) End() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_End(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngine) HasFeature(feature QPaintEngine__PaintEngineFeature) bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_HasFeature(ptr.Pointer(), C.longlong(feature)) != 0
	}
	return false
}

func (ptr *QPaintEngine) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngine_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngine) PaintDevice() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QPaintEngine_PaintDevice(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngine) Painter() *QPainter {
	if ptr.Pointer() != nil {
		return NewQPainterFromPointer(C.QPaintEngine_Painter(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngine) SetActive(state bool) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_SetActive(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(state))))
	}
}

//export callbackQPaintEngine_Type
func callbackQPaintEngine_Type(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::type"); signal != nil {
		return C.longlong(signal.(func() QPaintEngine__Type)())
	}

	return C.longlong(0)
}

func (ptr *QPaintEngine) ConnectType(f func() QPaintEngine__Type) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::type", f)
	}
}

func (ptr *QPaintEngine) DisconnectType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::type")
	}
}

func (ptr *QPaintEngine) Type() QPaintEngine__Type {
	if ptr.Pointer() != nil {
		return QPaintEngine__Type(C.QPaintEngine_Type(ptr.Pointer()))
	}
	return 0
}

//export callbackQPaintEngine_UpdateState
func callbackQPaintEngine_UpdateState(ptr unsafe.Pointer, state unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::updateState"); signal != nil {
		signal.(func(*QPaintEngineState))(NewQPaintEngineStateFromPointer(state))
	}

}

func (ptr *QPaintEngine) ConnectUpdateState(f func(state *QPaintEngineState)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::updateState", f)
	}
}

func (ptr *QPaintEngine) DisconnectUpdateState(state QPaintEngineState_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::updateState")
	}
}

func (ptr *QPaintEngine) UpdateState(state QPaintEngineState_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_UpdateState(ptr.Pointer(), PointerFromQPaintEngineState(state))
	}
}

//export callbackQPaintEngine_DestroyQPaintEngine
func callbackQPaintEngine_DestroyQPaintEngine(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPaintEngine::~QPaintEngine"); signal != nil {
		signal.(func())()
	} else {
		NewQPaintEngineFromPointer(ptr).DestroyQPaintEngineDefault()
	}
}

func (ptr *QPaintEngine) ConnectDestroyQPaintEngine(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::~QPaintEngine", f)
	}
}

func (ptr *QPaintEngine) DisconnectDestroyQPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPaintEngine::~QPaintEngine")
	}
}

func (ptr *QPaintEngine) DestroyQPaintEngine() {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DestroyQPaintEngine(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintEngine) DestroyQPaintEngineDefault() {
	if ptr.Pointer() != nil {
		C.QPaintEngine_DestroyQPaintEngineDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPaintEngine) Gccaps() QPaintEngine__PaintEngineFeature {
	if ptr.Pointer() != nil {
		return QPaintEngine__PaintEngineFeature(C.QPaintEngine_Gccaps(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngine) SetGccaps(vpa QPaintEngine__PaintEngineFeature) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_SetGccaps(ptr.Pointer(), C.longlong(vpa))
	}
}

func (ptr *QPaintEngine) State() *QPaintEngineState {
	if ptr.Pointer() != nil {
		return NewQPaintEngineStateFromPointer(C.QPaintEngine_State(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngine) SetState(vqp QPaintEngineState_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEngine_SetState(ptr.Pointer(), PointerFromQPaintEngineState(vqp))
	}
}

type QPaintEngineState struct {
	ptr unsafe.Pointer
}

type QPaintEngineState_ITF interface {
	QPaintEngineState_PTR() *QPaintEngineState
}

func (p *QPaintEngineState) QPaintEngineState_PTR() *QPaintEngineState {
	return p
}

func (p *QPaintEngineState) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPaintEngineState) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPaintEngineState(ptr QPaintEngineState_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEngineState_PTR().Pointer()
	}
	return nil
}

func NewQPaintEngineStateFromPointer(ptr unsafe.Pointer) *QPaintEngineState {
	var n = new(QPaintEngineState)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPaintEngineState) DestroyQPaintEngineState() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QPaintEngineState) BackgroundBrush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QPaintEngineState_BackgroundBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) BackgroundMode() core.Qt__BGMode {
	if ptr.Pointer() != nil {
		return core.Qt__BGMode(C.QPaintEngineState_BackgroundMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Brush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QPaintEngineState_Brush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) BrushNeedsResolving() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngineState_BrushNeedsResolving(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) BrushOrigin() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPaintEngineState_BrushOrigin(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) ClipOperation() core.Qt__ClipOperation {
	if ptr.Pointer() != nil {
		return core.Qt__ClipOperation(C.QPaintEngineState_ClipOperation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) ClipPath() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPaintEngineState_ClipPath(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) ClipRegion() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QPaintEngineState_ClipRegion(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) CompositionMode() QPainter__CompositionMode {
	if ptr.Pointer() != nil {
		return QPainter__CompositionMode(C.QPaintEngineState_CompositionMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QPaintEngineState_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) IsClipEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngineState_IsClipEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPaintEngineState_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Painter() *QPainter {
	if ptr.Pointer() != nil {
		return NewQPainterFromPointer(C.QPaintEngineState_Painter(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEngineState) Pen() *QPen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPenFromPointer(C.QPaintEngineState_Pen(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) PenNeedsResolving() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEngineState_PenNeedsResolving(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEngineState) RenderHints() QPainter__RenderHint {
	if ptr.Pointer() != nil {
		return QPainter__RenderHint(C.QPaintEngineState_RenderHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) State() QPaintEngine__DirtyFlag {
	if ptr.Pointer() != nil {
		return QPaintEngine__DirtyFlag(C.QPaintEngineState_State(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) Transform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QPaintEngineState_Transform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEngineState) DirtyFlags() QPaintEngine__DirtyFlag {
	if ptr.Pointer() != nil {
		return QPaintEngine__DirtyFlag(C.QPaintEngineState_DirtyFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPaintEngineState) SetDirtyFlags(vqp QPaintEngine__DirtyFlag) {
	if ptr.Pointer() != nil {
		C.QPaintEngineState_SetDirtyFlags(ptr.Pointer(), C.longlong(vqp))
	}
}

type QPaintEvent struct {
	core.QEvent
}

type QPaintEvent_ITF interface {
	core.QEvent_ITF
	QPaintEvent_PTR() *QPaintEvent
}

func (p *QPaintEvent) QPaintEvent_PTR() *QPaintEvent {
	return p
}

func (p *QPaintEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QPaintEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQPaintEvent(ptr QPaintEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPaintEvent_PTR().Pointer()
	}
	return nil
}

func NewQPaintEventFromPointer(ptr unsafe.Pointer) *QPaintEvent {
	var n = new(QPaintEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPaintEvent) DestroyQPaintEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQPaintEvent2(paintRect core.QRect_ITF) *QPaintEvent {
	var tmpValue = NewQPaintEventFromPointer(C.QPaintEvent_NewQPaintEvent2(core.PointerFromQRect(paintRect)))
	runtime.SetFinalizer(tmpValue, (*QPaintEvent).DestroyQPaintEvent)
	return tmpValue
}

func NewQPaintEvent(paintRegion QRegion_ITF) *QPaintEvent {
	var tmpValue = NewQPaintEventFromPointer(C.QPaintEvent_NewQPaintEvent(PointerFromQRegion(paintRegion)))
	runtime.SetFinalizer(tmpValue, (*QPaintEvent).DestroyQPaintEvent)
	return tmpValue
}

func (ptr *QPaintEvent) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		return core.NewQRectFromPointer(C.QPaintEvent_Rect(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEvent) Region() *QRegion {
	if ptr.Pointer() != nil {
		return NewQRegionFromPointer(C.QPaintEvent_Region(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPaintEvent) M_erased() bool {
	if ptr.Pointer() != nil {
		return C.QPaintEvent_M_erased(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPaintEvent) SetM_erased(vbo bool) {
	if ptr.Pointer() != nil {
		C.QPaintEvent_SetM_erased(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QPaintEvent) M_rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPaintEvent_M_rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEvent) SetM_rect(vqr core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEvent_SetM_rect(ptr.Pointer(), core.PointerFromQRect(vqr))
	}
}

func (ptr *QPaintEvent) M_region() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QPaintEvent_M_region(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QPaintEvent) SetM_region(vqr QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPaintEvent_SetM_region(ptr.Pointer(), PointerFromQRegion(vqr))
	}
}

//QPainter::CompositionMode
type QPainter__CompositionMode int64

const (
	QPainter__CompositionMode_SourceOver          = QPainter__CompositionMode(0)
	QPainter__CompositionMode_DestinationOver     = QPainter__CompositionMode(1)
	QPainter__CompositionMode_Clear               = QPainter__CompositionMode(2)
	QPainter__CompositionMode_Source              = QPainter__CompositionMode(3)
	QPainter__CompositionMode_Destination         = QPainter__CompositionMode(4)
	QPainter__CompositionMode_SourceIn            = QPainter__CompositionMode(5)
	QPainter__CompositionMode_DestinationIn       = QPainter__CompositionMode(6)
	QPainter__CompositionMode_SourceOut           = QPainter__CompositionMode(7)
	QPainter__CompositionMode_DestinationOut      = QPainter__CompositionMode(8)
	QPainter__CompositionMode_SourceAtop          = QPainter__CompositionMode(9)
	QPainter__CompositionMode_DestinationAtop     = QPainter__CompositionMode(10)
	QPainter__CompositionMode_Xor                 = QPainter__CompositionMode(11)
	QPainter__CompositionMode_Plus                = QPainter__CompositionMode(12)
	QPainter__CompositionMode_Multiply            = QPainter__CompositionMode(13)
	QPainter__CompositionMode_Screen              = QPainter__CompositionMode(14)
	QPainter__CompositionMode_Overlay             = QPainter__CompositionMode(15)
	QPainter__CompositionMode_Darken              = QPainter__CompositionMode(16)
	QPainter__CompositionMode_Lighten             = QPainter__CompositionMode(17)
	QPainter__CompositionMode_ColorDodge          = QPainter__CompositionMode(18)
	QPainter__CompositionMode_ColorBurn           = QPainter__CompositionMode(19)
	QPainter__CompositionMode_HardLight           = QPainter__CompositionMode(20)
	QPainter__CompositionMode_SoftLight           = QPainter__CompositionMode(21)
	QPainter__CompositionMode_Difference          = QPainter__CompositionMode(22)
	QPainter__CompositionMode_Exclusion           = QPainter__CompositionMode(23)
	QPainter__RasterOp_SourceOrDestination        = QPainter__CompositionMode(24)
	QPainter__RasterOp_SourceAndDestination       = QPainter__CompositionMode(25)
	QPainter__RasterOp_SourceXorDestination       = QPainter__CompositionMode(26)
	QPainter__RasterOp_NotSourceAndNotDestination = QPainter__CompositionMode(27)
	QPainter__RasterOp_NotSourceOrNotDestination  = QPainter__CompositionMode(28)
	QPainter__RasterOp_NotSourceXorDestination    = QPainter__CompositionMode(29)
	QPainter__RasterOp_NotSource                  = QPainter__CompositionMode(30)
	QPainter__RasterOp_NotSourceAndDestination    = QPainter__CompositionMode(31)
	QPainter__RasterOp_SourceAndNotDestination    = QPainter__CompositionMode(32)
	QPainter__RasterOp_NotSourceOrDestination     = QPainter__CompositionMode(33)
	QPainter__RasterOp_SourceOrNotDestination     = QPainter__CompositionMode(34)
	QPainter__RasterOp_ClearDestination           = QPainter__CompositionMode(35)
	QPainter__RasterOp_SetDestination             = QPainter__CompositionMode(36)
	QPainter__RasterOp_NotDestination             = QPainter__CompositionMode(37)
)

//QPainter::PixmapFragmentHint
type QPainter__PixmapFragmentHint int64

const (
	QPainter__OpaqueHint = QPainter__PixmapFragmentHint(0x01)
)

//QPainter::RenderHint
type QPainter__RenderHint int64

const (
	QPainter__Antialiasing            = QPainter__RenderHint(0x01)
	QPainter__TextAntialiasing        = QPainter__RenderHint(0x02)
	QPainter__SmoothPixmapTransform   = QPainter__RenderHint(0x04)
	QPainter__HighQualityAntialiasing = QPainter__RenderHint(0x08)
	QPainter__NonCosmeticDefaultPen   = QPainter__RenderHint(0x10)
	QPainter__Qt4CompatiblePainting   = QPainter__RenderHint(0x20)
)

type QPainter struct {
	ptr unsafe.Pointer
}

type QPainter_ITF interface {
	QPainter_PTR() *QPainter
}

func (p *QPainter) QPainter_PTR() *QPainter {
	return p
}

func (p *QPainter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPainter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPainter(ptr QPainter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainter_PTR().Pointer()
	}
	return nil
}

func NewQPainterFromPointer(ptr unsafe.Pointer) *QPainter {
	var n = new(QPainter)
	n.SetPointer(ptr)
	return n
}
func NewQPainter2(device QPaintDevice_ITF) *QPainter {
	var tmpValue = NewQPainterFromPointer(C.QPainter_NewQPainter2(PointerFromQPaintDevice(device)))
	runtime.SetFinalizer(tmpValue, (*QPainter).DestroyQPainter)
	return tmpValue
}

func (ptr *QPainter) Begin(device QPaintDevice_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainter_Begin(ptr.Pointer(), PointerFromQPaintDevice(device)) != 0
	}
	return false
}

func (ptr *QPainter) BoundingRect2(rectangle core.QRect_ITF, flags int, text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFromPointer(C.QPainter_BoundingRect2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(flags)), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) BoundingRect4(rectangle core.QRectF_ITF, text string, option QTextOption_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFFromPointer(C.QPainter_BoundingRect4(ptr.Pointer(), core.PointerFromQRectF(rectangle), textC, PointerFromQTextOption(option)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) BoundingRect(rectangle core.QRectF_ITF, flags int, text string) *core.QRectF {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFFromPointer(C.QPainter_BoundingRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(flags)), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) DrawArc(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawArc(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawChord(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawChord(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawConvexPolygon3(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawConvexPolygon(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawEllipse2(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse2(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) DrawEllipse(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) DrawGlyphRun(position core.QPointF_ITF, glyphs QGlyphRun_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawGlyphRun(ptr.Pointer(), core.PointerFromQPointF(position), PointerFromQGlyphRun(glyphs))
	}
}

func (ptr *QPainter) DrawImage7(point core.QPointF_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage7(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage(target core.QRectF_ITF, image QImage_ITF, source core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage(ptr.Pointer(), core.PointerFromQRectF(target), PointerFromQImage(image), core.PointerFromQRectF(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawLines5(lines core.QLine_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines5(ptr.Pointer(), core.PointerFromQLine(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawPicture(point core.QPointF_ITF, picture QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPie(rectangle core.QRectF_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPie(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawPixmap7(point core.QPointF_ITF, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap7(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap(target core.QRectF_ITF, pixmap QPixmap_ITF, source core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap(ptr.Pointer(), core.PointerFromQRectF(target), PointerFromQPixmap(pixmap), core.PointerFromQRectF(source))
	}
}

func (ptr *QPainter) DrawRects3(rectangles core.QRect_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRects3(ptr.Pointer(), core.PointerFromQRect(rectangles), C.int(int32(rectCount)))
	}
}

func (ptr *QPainter) DrawRects(rectangles core.QRectF_ITF, rectCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRects(ptr.Pointer(), core.PointerFromQRectF(rectangles), C.int(int32(rectCount)))
	}
}

func (ptr *QPainter) DrawText(position core.QPointF_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainter_DrawText(ptr.Pointer(), core.PointerFromQPointF(position), textC)
	}
}

func (ptr *QPainter) DrawText6(rectangle core.QRect_ITF, flags int, text string, boundingRect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainter_DrawText6(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(flags)), textC, core.PointerFromQRect(boundingRect))
	}
}

func (ptr *QPainter) DrawText8(rectangle core.QRectF_ITF, text string, option QTextOption_ITF) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainter_DrawText8(ptr.Pointer(), core.PointerFromQRectF(rectangle), textC, PointerFromQTextOption(option))
	}
}

func (ptr *QPainter) DrawText5(rectangle core.QRectF_ITF, flags int, text string, boundingRect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainter_DrawText5(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.int(int32(flags)), textC, core.PointerFromQRectF(boundingRect))
	}
}

func (ptr *QPainter) DrawTiledPixmap(rectangle core.QRectF_ITF, pixmap QPixmap_ITF, position core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQPixmap(pixmap), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) EraseRect(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_EraseRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) FillRect3(rectangle core.QRect_ITF, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect3(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect6(rectangle core.QRect_ITF, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect6(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQColor(color))
	}
}

func (ptr *QPainter) FillRect(rectangle core.QRectF_ITF, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect4(rectangle core.QRectF_ITF, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect4(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQColor(color))
	}
}

func (ptr *QPainter) Rotate(angle float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Rotate(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QPainter) SetBackground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) SetBrushOrigin(position core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin(ptr.Pointer(), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) SetClipPath(path QPainterPath_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipPath(ptr.Pointer(), PointerFromQPainterPath(path), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipRect2(rectangle core.QRect_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipRect(rectangle core.QRectF_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipRegion(region QRegion_ITF, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRegion(ptr.Pointer(), PointerFromQRegion(region), C.longlong(operation))
	}
}

func (ptr *QPainter) SetViewport(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetViewport(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) SetWindow(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWindow(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func NewQPainter() *QPainter {
	var tmpValue = NewQPainterFromPointer(C.QPainter_NewQPainter())
	runtime.SetFinalizer(tmpValue, (*QPainter).DestroyQPainter)
	return tmpValue
}

func (ptr *QPainter) Background() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPainter_Background(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) BackgroundMode() core.Qt__BGMode {
	if ptr.Pointer() != nil {
		return core.Qt__BGMode(C.QPainter_BackgroundMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) BeginNativePainting() {
	if ptr.Pointer() != nil {
		C.QPainter_BeginNativePainting(ptr.Pointer())
	}
}

func (ptr *QPainter) BoundingRect3(x int, y int, w int, h int, flags int, text string) *core.QRect {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		var tmpValue = core.NewQRectFromPointer(C.QPainter_BoundingRect3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.int(int32(flags)), textC))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) Brush() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPainter_Brush(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) BrushOrigin() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QPainter_BrushOrigin(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) ClipBoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPainter_ClipBoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) ClipPath() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainter_ClipPath(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) ClipRegion() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QPainter_ClipRegion(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) CombinedTransform() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QPainter_CombinedTransform(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) CompositionMode() QPainter__CompositionMode {
	if ptr.Pointer() != nil {
		return QPainter__CompositionMode(C.QPainter_CompositionMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) Device() *QPaintDevice {
	if ptr.Pointer() != nil {
		return NewQPaintDeviceFromPointer(C.QPainter_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) DeviceTransform() *QTransform {
	if ptr.Pointer() != nil {
		return NewQTransformFromPointer(C.QPainter_DeviceTransform(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) DrawArc2(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawArc2(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawArc3(x int, y int, width int, height int, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawArc3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawChord3(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawChord3(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawChord2(x int, y int, width int, height int, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawChord2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawConvexPolygon4(polygon QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon4(ptr.Pointer(), PointerFromQPolygon(polygon))
	}
}

func (ptr *QPainter) DrawConvexPolygon2(polygon QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawConvexPolygon2(ptr.Pointer(), PointerFromQPolygonF(polygon))
	}
}

func (ptr *QPainter) DrawEllipse5(center core.QPoint_ITF, rx int, ry int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse5(ptr.Pointer(), core.PointerFromQPoint(center), C.int(int32(rx)), C.int(int32(ry)))
	}
}

func (ptr *QPainter) DrawEllipse4(center core.QPointF_ITF, rx float64, ry float64) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse4(ptr.Pointer(), core.PointerFromQPointF(center), C.double(rx), C.double(ry))
	}
}

func (ptr *QPainter) DrawEllipse3(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawEllipse3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) DrawImage8(point core.QPoint_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage8(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage4(point core.QPoint_ITF, image QImage_ITF, source core.QRect_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage4(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQImage(image), core.PointerFromQRect(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawImage3(point core.QPointF_ITF, image QImage_ITF, source core.QRectF_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage3(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQImage(image), core.PointerFromQRectF(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawImage6(rectangle core.QRect_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage6(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage2(target core.QRect_ITF, image QImage_ITF, source core.QRect_ITF, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage2(ptr.Pointer(), core.PointerFromQRect(target), PointerFromQImage(image), core.PointerFromQRect(source), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawImage5(rectangle core.QRectF_ITF, image QImage_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage5(ptr.Pointer(), core.PointerFromQRectF(rectangle), PointerFromQImage(image))
	}
}

func (ptr *QPainter) DrawImage9(x int, y int, image QImage_ITF, sx int, sy int, sw int, sh int, flags core.Qt__ImageConversionFlag) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawImage9(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQImage(image), C.int(int32(sx)), C.int(int32(sy)), C.int(int32(sw)), C.int(int32(sh)), C.longlong(flags))
	}
}

func (ptr *QPainter) DrawLine2(line core.QLine_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine2(ptr.Pointer(), core.PointerFromQLine(line))
	}
}

func (ptr *QPainter) DrawLine(line core.QLineF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine(ptr.Pointer(), core.PointerFromQLineF(line))
	}
}

func (ptr *QPainter) DrawLine4(p1 core.QPoint_ITF, p2 core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine4(ptr.Pointer(), core.PointerFromQPoint(p1), core.PointerFromQPoint(p2))
	}
}

func (ptr *QPainter) DrawLine5(p1 core.QPointF_ITF, p2 core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine5(ptr.Pointer(), core.PointerFromQPointF(p1), core.PointerFromQPointF(p2))
	}
}

func (ptr *QPainter) DrawLine3(x1 int, y1 int, x2 int, y2 int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLine3(ptr.Pointer(), C.int(int32(x1)), C.int(int32(y1)), C.int(int32(x2)), C.int(int32(y2)))
	}
}

func (ptr *QPainter) DrawLines(lines core.QLineF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines(ptr.Pointer(), core.PointerFromQLineF(lines), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawLines7(pointPairs core.QPoint_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines7(ptr.Pointer(), core.PointerFromQPoint(pointPairs), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawLines3(pointPairs core.QPointF_ITF, lineCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawLines3(ptr.Pointer(), core.PointerFromQPointF(pointPairs), C.int(int32(lineCount)))
	}
}

func (ptr *QPainter) DrawPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainter) DrawPicture3(point core.QPoint_ITF, picture QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture3(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPicture2(x int, y int, picture QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPicture2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQPicture(picture))
	}
}

func (ptr *QPainter) DrawPie3(rectangle core.QRect_ITF, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPie3(ptr.Pointer(), core.PointerFromQRect(rectangle), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawPie2(x int, y int, width int, height int, startAngle int, spanAngle int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPie2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(startAngle)), C.int(int32(spanAngle)))
	}
}

func (ptr *QPainter) DrawPixmap8(point core.QPoint_ITF, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap8(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap6(point core.QPoint_ITF, pixmap QPixmap_ITF, source core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap6(ptr.Pointer(), core.PointerFromQPoint(point), PointerFromQPixmap(pixmap), core.PointerFromQRect(source))
	}
}

func (ptr *QPainter) DrawPixmap5(point core.QPointF_ITF, pixmap QPixmap_ITF, source core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap5(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQPixmap(pixmap), core.PointerFromQRectF(source))
	}
}

func (ptr *QPainter) DrawPixmap10(rectangle core.QRect_ITF, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap10(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap2(target core.QRect_ITF, pixmap QPixmap_ITF, source core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap2(ptr.Pointer(), core.PointerFromQRect(target), PointerFromQPixmap(pixmap), core.PointerFromQRect(source))
	}
}

func (ptr *QPainter) DrawPixmap9(x int, y int, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap9(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPixmap4(x int, y int, pixmap QPixmap_ITF, sx int, sy int, sw int, sh int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap4(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), PointerFromQPixmap(pixmap), C.int(int32(sx)), C.int(int32(sy)), C.int(int32(sw)), C.int(int32(sh)))
	}
}

func (ptr *QPainter) DrawPixmap3(x int, y int, w int, h int, pixmap QPixmap_ITF, sx int, sy int, sw int, sh int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), PointerFromQPixmap(pixmap), C.int(int32(sx)), C.int(int32(sy)), C.int(int32(sw)), C.int(int32(sh)))
	}
}

func (ptr *QPainter) DrawPixmap11(x int, y int, width int, height int, pixmap QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPixmap11(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQPixmap(pixmap))
	}
}

func (ptr *QPainter) DrawPoint2(position core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint2(ptr.Pointer(), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) DrawPoint(position core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint(ptr.Pointer(), core.PointerFromQPointF(position))
	}
}

func (ptr *QPainter) DrawPoint3(x int, y int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoint3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPainter) DrawPoints3(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPoints(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPoints4(points QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints4(ptr.Pointer(), PointerFromQPolygon(points))
	}
}

func (ptr *QPainter) DrawPoints2(points QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPoints2(ptr.Pointer(), PointerFromQPolygonF(points))
	}
}

func (ptr *QPainter) DrawPolygon3(points core.QPoint_ITF, pointCount int, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon(points core.QPointF_ITF, pointCount int, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon4(points QPolygon_ITF, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon4(ptr.Pointer(), PointerFromQPolygon(points), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolygon2(points QPolygonF_ITF, fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolygon2(ptr.Pointer(), PointerFromQPolygonF(points), C.longlong(fillRule))
	}
}

func (ptr *QPainter) DrawPolyline3(points core.QPoint_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline3(ptr.Pointer(), core.PointerFromQPoint(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPolyline(points core.QPointF_ITF, pointCount int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline(ptr.Pointer(), core.PointerFromQPointF(points), C.int(int32(pointCount)))
	}
}

func (ptr *QPainter) DrawPolyline4(points QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline4(ptr.Pointer(), PointerFromQPolygon(points))
	}
}

func (ptr *QPainter) DrawPolyline2(points QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawPolyline2(ptr.Pointer(), PointerFromQPolygonF(points))
	}
}

func (ptr *QPainter) DrawRect3(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRect3(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) DrawRect(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainter) DrawRect2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) DrawRoundedRect3(rect core.QRect_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect3(ptr.Pointer(), core.PointerFromQRect(rect), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainter) DrawRoundedRect(rect core.QRectF_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect(ptr.Pointer(), core.PointerFromQRectF(rect), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainter) DrawRoundedRect2(x int, y int, w int, h int, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawRoundedRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainter) DrawStaticText2(topLeftPosition core.QPoint_ITF, staticText QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText2(ptr.Pointer(), core.PointerFromQPoint(topLeftPosition), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawStaticText(topLeftPosition core.QPointF_ITF, staticText QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText(ptr.Pointer(), core.PointerFromQPointF(topLeftPosition), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawStaticText3(left int, top int, staticText QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawStaticText3(ptr.Pointer(), C.int(int32(left)), C.int(int32(top)), PointerFromQStaticText(staticText))
	}
}

func (ptr *QPainter) DrawText2(position core.QPoint_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainter_DrawText2(ptr.Pointer(), core.PointerFromQPoint(position), textC)
	}
}

func (ptr *QPainter) DrawText3(x int, y int, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainter_DrawText3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), textC)
	}
}

func (ptr *QPainter) DrawText7(x int, y int, width int, height int, flags int, text string, boundingRect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainter_DrawText7(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.int(int32(flags)), textC, core.PointerFromQRect(boundingRect))
	}
}

func (ptr *QPainter) DrawTiledPixmap3(rectangle core.QRect_ITF, pixmap QPixmap_ITF, position core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap3(ptr.Pointer(), core.PointerFromQRect(rectangle), PointerFromQPixmap(pixmap), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) DrawTiledPixmap2(x int, y int, width int, height int, pixmap QPixmap_ITF, sx int, sy int) {
	if ptr.Pointer() != nil {
		C.QPainter_DrawTiledPixmap2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQPixmap(pixmap), C.int(int32(sx)), C.int(int32(sy)))
	}
}

func (ptr *QPainter) End() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_End(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) EndNativePainting() {
	if ptr.Pointer() != nil {
		C.QPainter_EndNativePainting(ptr.Pointer())
	}
}

func (ptr *QPainter) EraseRect3(rectangle core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_EraseRect3(ptr.Pointer(), core.PointerFromQRect(rectangle))
	}
}

func (ptr *QPainter) EraseRect2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_EraseRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) FillPath(path QPainterPath_ITF, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillPath(ptr.Pointer(), PointerFromQPainterPath(path), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect11(rectangle core.QRect_ITF, style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect11(ptr.Pointer(), core.PointerFromQRect(rectangle), C.longlong(style))
	}
}

func (ptr *QPainter) FillRect8(rectangle core.QRect_ITF, color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect8(ptr.Pointer(), core.PointerFromQRect(rectangle), C.longlong(color))
	}
}

func (ptr *QPainter) FillRect12(rectangle core.QRectF_ITF, style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect12(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.longlong(style))
	}
}

func (ptr *QPainter) FillRect9(rectangle core.QRectF_ITF, color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect9(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.longlong(color))
	}
}

func (ptr *QPainter) FillRect10(x int, y int, width int, height int, style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect10(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.longlong(style))
	}
}

func (ptr *QPainter) FillRect7(x int, y int, width int, height int, color core.Qt__GlobalColor) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect7(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.longlong(color))
	}
}

func (ptr *QPainter) FillRect2(x int, y int, width int, height int, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) FillRect5(x int, y int, width int, height int, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_FillRect5(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQColor(color))
	}
}

func (ptr *QPainter) Font() *QFont {
	if ptr.Pointer() != nil {
		return NewQFontFromPointer(C.QPainter_Font(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) FontInfo() *QFontInfo {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontInfoFromPointer(C.QPainter_FontInfo(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFontInfo).DestroyQFontInfo)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) FontMetrics() *QFontMetrics {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontMetricsFromPointer(C.QPainter_FontMetrics(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFontMetrics).DestroyQFontMetrics)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) HasClipping() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_HasClipping(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) LayoutDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QPainter_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainter_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPainter_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Pen() *QPen {
	if ptr.Pointer() != nil {
		return NewQPenFromPointer(C.QPainter_Pen(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) RenderHints() QPainter__RenderHint {
	if ptr.Pointer() != nil {
		return QPainter__RenderHint(C.QPainter_RenderHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainter) ResetTransform() {
	if ptr.Pointer() != nil {
		C.QPainter_ResetTransform(ptr.Pointer())
	}
}

func (ptr *QPainter) Restore() {
	if ptr.Pointer() != nil {
		C.QPainter_Restore(ptr.Pointer())
	}
}

func (ptr *QPainter) Save() {
	if ptr.Pointer() != nil {
		C.QPainter_Save(ptr.Pointer())
	}
}

func (ptr *QPainter) Scale(sx float64, sy float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Scale(ptr.Pointer(), C.double(sx), C.double(sy))
	}
}

func (ptr *QPainter) SetBackgroundMode(mode core.Qt__BGMode) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBackgroundMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QPainter) SetBrush2(style core.Qt__BrushStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrush2(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainter) SetBrush(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPainter) SetBrushOrigin2(position core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin2(ptr.Pointer(), core.PointerFromQPoint(position))
	}
}

func (ptr *QPainter) SetBrushOrigin3(x int, y int) {
	if ptr.Pointer() != nil {
		C.QPainter_SetBrushOrigin3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPainter) SetClipRect3(x int, y int, width int, height int, operation core.Qt__ClipOperation) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipRect3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), C.longlong(operation))
	}
}

func (ptr *QPainter) SetClipping(enable bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetClipping(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QPainter) SetCompositionMode(mode QPainter__CompositionMode) {
	if ptr.Pointer() != nil {
		C.QPainter_SetCompositionMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QPainter) SetFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QPainter) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QPainter_SetLayoutDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QPainter) SetOpacity(opacity float64) {
	if ptr.Pointer() != nil {
		C.QPainter_SetOpacity(ptr.Pointer(), C.double(opacity))
	}
}

func (ptr *QPainter) SetPen3(style core.Qt__PenStyle) {
	if ptr.Pointer() != nil {
		C.QPainter_SetPen3(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainter) SetPen2(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetPen2(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QPainter) SetPen(pen QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_SetPen(ptr.Pointer(), PointerFromQPen(pen))
	}
}

func (ptr *QPainter) SetRenderHint(hint QPainter__RenderHint, on bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetRenderHint(ptr.Pointer(), C.longlong(hint), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QPainter) SetRenderHints(hints QPainter__RenderHint, on bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetRenderHints(ptr.Pointer(), C.longlong(hints), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QPainter) SetTransform(transform QTransform_ITF, combine bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetTransform(ptr.Pointer(), PointerFromQTransform(transform), C.char(int8(qt.GoBoolToInt(combine))))
	}
}

func (ptr *QPainter) SetViewTransformEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetViewTransformEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QPainter) SetViewport2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_SetViewport2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) SetWindow2(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWindow2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QPainter) SetWorldMatrixEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWorldMatrixEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QPainter) SetWorldTransform(matrix QTransform_ITF, combine bool) {
	if ptr.Pointer() != nil {
		C.QPainter_SetWorldTransform(ptr.Pointer(), PointerFromQTransform(matrix), C.char(int8(qt.GoBoolToInt(combine))))
	}
}

func (ptr *QPainter) Shear(sh float64, sv float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Shear(ptr.Pointer(), C.double(sh), C.double(sv))
	}
}

func (ptr *QPainter) StrokePath(path QPainterPath_ITF, pen QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_StrokePath(ptr.Pointer(), PointerFromQPainterPath(path), PointerFromQPen(pen))
	}
}

func (ptr *QPainter) TestRenderHint(hint QPainter__RenderHint) bool {
	if ptr.Pointer() != nil {
		return C.QPainter_TestRenderHint(ptr.Pointer(), C.longlong(hint)) != 0
	}
	return false
}

func (ptr *QPainter) Transform() *QTransform {
	if ptr.Pointer() != nil {
		return NewQTransformFromPointer(C.QPainter_Transform(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) Translate2(offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_Translate2(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QPainter) Translate(offset core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainter_Translate(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPainter) Translate3(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QPainter_Translate3(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPainter) ViewTransformEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_ViewTransformEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) Viewport() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPainter_Viewport(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) Window() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPainter_Window(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPainter) WorldMatrixEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QPainter_WorldMatrixEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainter) WorldTransform() *QTransform {
	if ptr.Pointer() != nil {
		return NewQTransformFromPointer(C.QPainter_WorldTransform(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPainter) DestroyQPainter() {
	if ptr.Pointer() != nil {
		C.QPainter_DestroyQPainter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPainterPath::ElementType
type QPainterPath__ElementType int64

const (
	QPainterPath__MoveToElement      = QPainterPath__ElementType(0)
	QPainterPath__LineToElement      = QPainterPath__ElementType(1)
	QPainterPath__CurveToElement     = QPainterPath__ElementType(2)
	QPainterPath__CurveToDataElement = QPainterPath__ElementType(3)
)

type QPainterPath struct {
	ptr unsafe.Pointer
}

type QPainterPath_ITF interface {
	QPainterPath_PTR() *QPainterPath
}

func (p *QPainterPath) QPainterPath_PTR() *QPainterPath {
	return p
}

func (p *QPainterPath) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPainterPath) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPainterPath(ptr QPainterPath_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainterPath_PTR().Pointer()
	}
	return nil
}

func NewQPainterPathFromPointer(ptr unsafe.Pointer) *QPainterPath {
	var n = new(QPainterPath)
	n.SetPointer(ptr)
	return n
}
func NewQPainterPath3(path QPainterPath_ITF) *QPainterPath {
	var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_NewQPainterPath3(PointerFromQPainterPath(path)))
	runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
	return tmpValue
}

func (ptr *QPainterPath) AddEllipse(boundingRectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse(ptr.Pointer(), core.PointerFromQRectF(boundingRectangle))
	}
}

func (ptr *QPainterPath) AddPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainterPath) AddRect(rectangle core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRect(ptr.Pointer(), core.PointerFromQRectF(rectangle))
	}
}

func (ptr *QPainterPath) AddText(point core.QPointF_ITF, font QFont_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainterPath_AddText(ptr.Pointer(), core.PointerFromQPointF(point), PointerFromQFont(font), textC)
	}
}

func (ptr *QPainterPath) ArcMoveTo(rectangle core.QRectF_ITF, angle float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcMoveTo(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.double(angle))
	}
}

func (ptr *QPainterPath) ArcTo(rectangle core.QRectF_ITF, startAngle float64, sweepLength float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcTo(ptr.Pointer(), core.PointerFromQRectF(rectangle), C.double(startAngle), C.double(sweepLength))
	}
}

func (ptr *QPainterPath) ConnectPath(path QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ConnectPath(ptr.Pointer(), PointerFromQPainterPath(path))
	}
}

func (ptr *QPainterPath) Contains(point core.QPointF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains(ptr.Pointer(), core.PointerFromQPointF(point)) != 0
	}
	return false
}

func (ptr *QPainterPath) Contains2(rectangle core.QRectF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains2(ptr.Pointer(), core.PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QPainterPath) CubicTo(c1 core.QPointF_ITF, c2 core.QPointF_ITF, endPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_CubicTo(ptr.Pointer(), core.PointerFromQPointF(c1), core.PointerFromQPointF(c2), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) CurrentPosition() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPainterPath_CurrentPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) ElementCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPainterPath_ElementCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPainterPath) Intersects(rectangle core.QRectF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Intersects(ptr.Pointer(), core.PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QPainterPath) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPainterPath) LineTo(endPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_LineTo(ptr.Pointer(), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) MoveTo(point core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_MoveTo(ptr.Pointer(), core.PointerFromQPointF(point))
	}
}

func (ptr *QPainterPath) QuadTo(c core.QPointF_ITF, endPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_QuadTo(ptr.Pointer(), core.PointerFromQPointF(c), core.PointerFromQPointF(endPoint))
	}
}

func (ptr *QPainterPath) SetElementPositionAt(index int, x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_SetElementPositionAt(ptr.Pointer(), C.int(int32(index)), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) SetFillRule(fillRule core.Qt__FillRule) {
	if ptr.Pointer() != nil {
		C.QPainterPath_SetFillRule(ptr.Pointer(), C.longlong(fillRule))
	}
}

func NewQPainterPath() *QPainterPath {
	var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_NewQPainterPath())
	runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
	return tmpValue
}

func NewQPainterPath2(startPoint core.QPointF_ITF) *QPainterPath {
	var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_NewQPainterPath2(core.PointerFromQPointF(startPoint)))
	runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
	return tmpValue
}

func (ptr *QPainterPath) AddEllipse3(center core.QPointF_ITF, rx float64, ry float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse3(ptr.Pointer(), core.PointerFromQPointF(center), C.double(rx), C.double(ry))
	}
}

func (ptr *QPainterPath) AddEllipse2(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddEllipse2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QPainterPath) AddPolygon(polygon QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddPolygon(ptr.Pointer(), PointerFromQPolygonF(polygon))
	}
}

func (ptr *QPainterPath) AddRect2(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QPainterPath) AddRegion(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRegion(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QPainterPath) AddRoundedRect(rect core.QRectF_ITF, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRoundedRect(ptr.Pointer(), core.PointerFromQRectF(rect), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainterPath) AddRoundedRect2(x float64, y float64, w float64, h float64, xRadius float64, yRadius float64, mode core.Qt__SizeMode) {
	if ptr.Pointer() != nil {
		C.QPainterPath_AddRoundedRect2(ptr.Pointer(), C.double(x), C.double(y), C.double(w), C.double(h), C.double(xRadius), C.double(yRadius), C.longlong(mode))
	}
}

func (ptr *QPainterPath) AddText2(x float64, y float64, font QFont_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QPainterPath_AddText2(ptr.Pointer(), C.double(x), C.double(y), PointerFromQFont(font), textC)
	}
}

func (ptr *QPainterPath) AngleAtPercent(t float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_AngleAtPercent(ptr.Pointer(), C.double(t)))
	}
	return 0
}

func (ptr *QPainterPath) ArcMoveTo2(x float64, y float64, width float64, height float64, angle float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcMoveTo2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height), C.double(angle))
	}
}

func (ptr *QPainterPath) ArcTo2(x float64, y float64, width float64, height float64, startAngle float64, sweepLength float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_ArcTo2(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height), C.double(startAngle), C.double(sweepLength))
	}
}

func (ptr *QPainterPath) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPainterPath_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) CloseSubpath() {
	if ptr.Pointer() != nil {
		C.QPainterPath_CloseSubpath(ptr.Pointer())
	}
}

func (ptr *QPainterPath) Contains3(p QPainterPath_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Contains3(ptr.Pointer(), PointerFromQPainterPath(p)) != 0
	}
	return false
}

func (ptr *QPainterPath) ControlPointRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPainterPath_ControlPointRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) CubicTo2(c1X float64, c1Y float64, c2X float64, c2Y float64, endPointX float64, endPointY float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_CubicTo2(ptr.Pointer(), C.double(c1X), C.double(c1Y), C.double(c2X), C.double(c2Y), C.double(endPointX), C.double(endPointY))
	}
}

func (ptr *QPainterPath) FillRule() core.Qt__FillRule {
	if ptr.Pointer() != nil {
		return core.Qt__FillRule(C.QPainterPath_FillRule(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPath) Intersected(p QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Intersected(ptr.Pointer(), PointerFromQPainterPath(p)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) Intersects2(p QPainterPath_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPainterPath_Intersects2(ptr.Pointer(), PointerFromQPainterPath(p)) != 0
	}
	return false
}

func (ptr *QPainterPath) Length() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPath) LineTo2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_LineTo2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) MoveTo2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_MoveTo2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QPainterPath) PercentAtLength(len float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_PercentAtLength(ptr.Pointer(), C.double(len)))
	}
	return 0
}

func (ptr *QPainterPath) PointAtPercent(t float64) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QPainterPath_PointAtPercent(ptr.Pointer(), C.double(t)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) QuadTo2(cx float64, cy float64, endPointX float64, endPointY float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_QuadTo2(ptr.Pointer(), C.double(cx), C.double(cy), C.double(endPointX), C.double(endPointY))
	}
}

func (ptr *QPainterPath) Simplified() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Simplified(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) SlopeAtPercent(t float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPath_SlopeAtPercent(ptr.Pointer(), C.double(t)))
	}
	return 0
}

func (ptr *QPainterPath) Subtracted(p QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Subtracted(ptr.Pointer(), PointerFromQPainterPath(p)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) Swap(other QPainterPath_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_Swap(ptr.Pointer(), PointerFromQPainterPath(other))
	}
}

func (ptr *QPainterPath) ToFillPolygon(matrix QTransform_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath_ToFillPolygon(ptr.Pointer(), PointerFromQTransform(matrix)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) ToFillPolygons(matrix QTransform_ITF) []*QPolygonF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QPolygonF {
			var out = make([]*QPolygonF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQPainterPathFromPointer(l.data).toFillPolygons_atList(i)
			}
			return out
		}(C.QPainterPath_ToFillPolygons(ptr.Pointer(), PointerFromQTransform(matrix)))
	}
	return nil
}

func (ptr *QPainterPath) ToReversed() *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_ToReversed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) ToSubpathPolygons(matrix QTransform_ITF) []*QPolygonF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QPolygonF {
			var out = make([]*QPolygonF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQPainterPathFromPointer(l.data).toSubpathPolygons_atList(i)
			}
			return out
		}(C.QPainterPath_ToSubpathPolygons(ptr.Pointer(), PointerFromQTransform(matrix)))
	}
	return nil
}

func (ptr *QPainterPath) Translate2(offset core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPainterPath_Translate2(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPainterPath) Translate(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QPainterPath_Translate(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPainterPath) Translated2(offset core.QPointF_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Translated2(ptr.Pointer(), core.PointerFromQPointF(offset)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) Translated(dx float64, dy float64) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_Translated(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) United(p QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPath_United(ptr.Pointer(), PointerFromQPainterPath(p)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) DestroyQPainterPath() {
	if ptr.Pointer() != nil {
		C.QPainterPath_DestroyQPainterPath(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QPainterPath) toFillPolygons_atList(i int) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath_toFillPolygons_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPath) toSubpathPolygons_atList(i int) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPainterPath_toSubpathPolygons_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

type QPainterPathStroker struct {
	ptr unsafe.Pointer
}

type QPainterPathStroker_ITF interface {
	QPainterPathStroker_PTR() *QPainterPathStroker
}

func (p *QPainterPathStroker) QPainterPathStroker_PTR() *QPainterPathStroker {
	return p
}

func (p *QPainterPathStroker) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPainterPathStroker) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPainterPathStroker(ptr QPainterPathStroker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPainterPathStroker_PTR().Pointer()
	}
	return nil
}

func NewQPainterPathStrokerFromPointer(ptr unsafe.Pointer) *QPainterPathStroker {
	var n = new(QPainterPathStroker)
	n.SetPointer(ptr)
	return n
}
func NewQPainterPathStroker() *QPainterPathStroker {
	var tmpValue = NewQPainterPathStrokerFromPointer(C.QPainterPathStroker_NewQPainterPathStroker())
	runtime.SetFinalizer(tmpValue, (*QPainterPathStroker).DestroyQPainterPathStroker)
	return tmpValue
}

func NewQPainterPathStroker2(pen QPen_ITF) *QPainterPathStroker {
	var tmpValue = NewQPainterPathStrokerFromPointer(C.QPainterPathStroker_NewQPainterPathStroker2(PointerFromQPen(pen)))
	runtime.SetFinalizer(tmpValue, (*QPainterPathStroker).DestroyQPainterPathStroker)
	return tmpValue
}

func (ptr *QPainterPathStroker) CapStyle() core.Qt__PenCapStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenCapStyle(C.QPainterPathStroker_CapStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) CreateStroke(path QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QPainterPathStroker_CreateStroke(ptr.Pointer(), PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QPainterPathStroker) CurveThreshold() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_CurveThreshold(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) DashOffset() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_DashOffset(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) JoinStyle() core.Qt__PenJoinStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenJoinStyle(C.QPainterPathStroker_JoinStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) MiterLimit() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_MiterLimit(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) SetCapStyle(style core.Qt__PenCapStyle) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetCapStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainterPathStroker) SetCurveThreshold(threshold float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetCurveThreshold(ptr.Pointer(), C.double(threshold))
	}
}

func (ptr *QPainterPathStroker) SetDashOffset(offset float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetDashOffset(ptr.Pointer(), C.double(offset))
	}
}

func (ptr *QPainterPathStroker) SetDashPattern(style core.Qt__PenStyle) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetDashPattern(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainterPathStroker) SetJoinStyle(style core.Qt__PenJoinStyle) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetJoinStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPainterPathStroker) SetMiterLimit(limit float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetMiterLimit(ptr.Pointer(), C.double(limit))
	}
}

func (ptr *QPainterPathStroker) SetWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QPainterPathStroker) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPainterPathStroker_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPainterPathStroker) DestroyQPainterPathStroker() {
	if ptr.Pointer() != nil {
		C.QPainterPathStroker_DestroyQPainterPathStroker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QPalette::ColorGroup
type QPalette__ColorGroup int64

const (
	QPalette__Active       = QPalette__ColorGroup(0)
	QPalette__Disabled     = QPalette__ColorGroup(1)
	QPalette__Inactive     = QPalette__ColorGroup(2)
	QPalette__NColorGroups = QPalette__ColorGroup(3)
	QPalette__Current      = QPalette__ColorGroup(4)
	QPalette__All          = QPalette__ColorGroup(5)
	QPalette__Normal       = QPalette__ColorGroup(QPalette__Active)
)

//QPalette::ColorRole
type QPalette__ColorRole int64

var (
	QPalette__WindowText      = QPalette__ColorRole(0)
	QPalette__Button          = QPalette__ColorRole(1)
	QPalette__Light           = QPalette__ColorRole(2)
	QPalette__Midlight        = QPalette__ColorRole(3)
	QPalette__Dark            = QPalette__ColorRole(4)
	QPalette__Mid             = QPalette__ColorRole(5)
	QPalette__Text            = QPalette__ColorRole(6)
	QPalette__BrightText      = QPalette__ColorRole(7)
	QPalette__ButtonText      = QPalette__ColorRole(8)
	QPalette__Base            = QPalette__ColorRole(9)
	QPalette__Window          = QPalette__ColorRole(10)
	QPalette__Shadow          = QPalette__ColorRole(11)
	QPalette__Highlight       = QPalette__ColorRole(12)
	QPalette__HighlightedText = QPalette__ColorRole(13)
	QPalette__Link            = QPalette__ColorRole(14)
	QPalette__LinkVisited     = QPalette__ColorRole(15)
	QPalette__AlternateBase   = QPalette__ColorRole(16)
	QPalette__NoRole          = QPalette__ColorRole(17)
	QPalette__ToolTipBase     = QPalette__ColorRole(18)
	QPalette__ToolTipText     = QPalette__ColorRole(19)
	QPalette__NColorRoles     = QPalette__ColorRole(C.QPalette_NColorRoles_Type())
	QPalette__Foreground      = QPalette__ColorRole(QPalette__WindowText)
	QPalette__Background      = QPalette__ColorRole(QPalette__Window)
)

type QPalette struct {
	ptr unsafe.Pointer
}

type QPalette_ITF interface {
	QPalette_PTR() *QPalette
}

func (p *QPalette) QPalette_PTR() *QPalette {
	return p
}

func (p *QPalette) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPalette) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPalette(ptr QPalette_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPalette_PTR().Pointer()
	}
	return nil
}

func NewQPaletteFromPointer(ptr unsafe.Pointer) *QPalette {
	var n = new(QPalette)
	n.SetPointer(ptr)
	return n
}
func (ptr *QPalette) Brush(group QPalette__ColorGroup, role QPalette__ColorRole) *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Brush(ptr.Pointer(), C.longlong(group), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) IsEqual(cg1 QPalette__ColorGroup, cg2 QPalette__ColorGroup) bool {
	if ptr.Pointer() != nil {
		return C.QPalette_IsEqual(ptr.Pointer(), C.longlong(cg1), C.longlong(cg2)) != 0
	}
	return false
}

func (ptr *QPalette) SetBrush2(group QPalette__ColorGroup, role QPalette__ColorRole, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetBrush2(ptr.Pointer(), C.longlong(group), C.longlong(role), PointerFromQBrush(brush))
	}
}

func NewQPalette() *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette())
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette8(other QPalette_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette8(PointerFromQPalette(other)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette3(button core.Qt__GlobalColor) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette3(C.longlong(button)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette5(windowText QBrush_ITF, button QBrush_ITF, light QBrush_ITF, dark QBrush_ITF, mid QBrush_ITF, text QBrush_ITF, bright_text QBrush_ITF, base QBrush_ITF, window QBrush_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette5(PointerFromQBrush(windowText), PointerFromQBrush(button), PointerFromQBrush(light), PointerFromQBrush(dark), PointerFromQBrush(mid), PointerFromQBrush(text), PointerFromQBrush(bright_text), PointerFromQBrush(base), PointerFromQBrush(window)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette2(button QColor_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette2(PointerFromQColor(button)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette4(button QColor_ITF, window QColor_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette4(PointerFromQColor(button), PointerFromQColor(window)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func NewQPalette7(p QPalette_ITF) *QPalette {
	var tmpValue = NewQPaletteFromPointer(C.QPalette_NewQPalette7(PointerFromQPalette(p)))
	runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
	return tmpValue
}

func (ptr *QPalette) AlternateBase() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_AlternateBase(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Base() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Base(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) BrightText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_BrightText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Brush2(role QPalette__ColorRole) *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Brush2(ptr.Pointer(), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) Button() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Button(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ButtonText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ButtonText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QPalette_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPalette) Color(group QPalette__ColorGroup, role QPalette__ColorRole) *QColor {
	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QPalette_Color(ptr.Pointer(), C.longlong(group), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) Color2(role QPalette__ColorRole) *QColor {
	if ptr.Pointer() != nil {
		return NewQColorFromPointer(C.QPalette_Color2(ptr.Pointer(), C.longlong(role)))
	}
	return nil
}

func (ptr *QPalette) CurrentColorGroup() QPalette__ColorGroup {
	if ptr.Pointer() != nil {
		return QPalette__ColorGroup(C.QPalette_CurrentColorGroup(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPalette) Dark() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Dark(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Highlight() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Highlight(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) HighlightedText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_HighlightedText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) IsBrushSet(cg QPalette__ColorGroup, cr QPalette__ColorRole) bool {
	if ptr.Pointer() != nil {
		return C.QPalette_IsBrushSet(ptr.Pointer(), C.longlong(cg), C.longlong(cr)) != 0
	}
	return false
}

func (ptr *QPalette) IsCopyOf(p QPalette_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPalette_IsCopyOf(ptr.Pointer(), PointerFromQPalette(p)) != 0
	}
	return false
}

func (ptr *QPalette) Light() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Light(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Link() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Link(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) LinkVisited() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_LinkVisited(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Mid() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Mid(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Midlight() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Midlight(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Resolve(other QPalette_ITF) *QPalette {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPaletteFromPointer(C.QPalette_Resolve(ptr.Pointer(), PointerFromQPalette(other)))
		runtime.SetFinalizer(tmpValue, (*QPalette).DestroyQPalette)
		return tmpValue
	}
	return nil
}

func (ptr *QPalette) SetBrush(role QPalette__ColorRole, brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetBrush(ptr.Pointer(), C.longlong(role), PointerFromQBrush(brush))
	}
}

func (ptr *QPalette) SetColor(group QPalette__ColorGroup, role QPalette__ColorRole, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetColor(ptr.Pointer(), C.longlong(group), C.longlong(role), PointerFromQColor(color))
	}
}

func (ptr *QPalette) SetColor2(role QPalette__ColorRole, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetColor2(ptr.Pointer(), C.longlong(role), PointerFromQColor(color))
	}
}

func (ptr *QPalette) SetColorGroup(cg QPalette__ColorGroup, windowText QBrush_ITF, button QBrush_ITF, light QBrush_ITF, dark QBrush_ITF, mid QBrush_ITF, text QBrush_ITF, bright_text QBrush_ITF, base QBrush_ITF, window QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_SetColorGroup(ptr.Pointer(), C.longlong(cg), PointerFromQBrush(windowText), PointerFromQBrush(button), PointerFromQBrush(light), PointerFromQBrush(dark), PointerFromQBrush(mid), PointerFromQBrush(text), PointerFromQBrush(bright_text), PointerFromQBrush(base), PointerFromQBrush(window))
	}
}

func (ptr *QPalette) SetCurrentColorGroup(cg QPalette__ColorGroup) {
	if ptr.Pointer() != nil {
		C.QPalette_SetCurrentColorGroup(ptr.Pointer(), C.longlong(cg))
	}
}

func (ptr *QPalette) Shadow() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Shadow(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Swap(other QPalette_ITF) {
	if ptr.Pointer() != nil {
		C.QPalette_Swap(ptr.Pointer(), PointerFromQPalette(other))
	}
}

func (ptr *QPalette) Text() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Text(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ToolTipBase() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ToolTipBase(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) ToolTipText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_ToolTipText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) Window() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_Window(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) WindowText() *QBrush {
	if ptr.Pointer() != nil {
		return NewQBrushFromPointer(C.QPalette_WindowText(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPalette) DestroyQPalette() {
	if ptr.Pointer() != nil {
		C.QPalette_DestroyQPalette(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QPdfWriter struct {
	core.QObject
	QPagedPaintDevice
}

type QPdfWriter_ITF interface {
	core.QObject_ITF
	QPagedPaintDevice_ITF
	QPdfWriter_PTR() *QPdfWriter
}

func (p *QPdfWriter) QPdfWriter_PTR() *QPdfWriter {
	return p
}

func (p *QPdfWriter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QPdfWriter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QPagedPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPdfWriter(ptr QPdfWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPdfWriter_PTR().Pointer()
	}
	return nil
}

func NewQPdfWriterFromPointer(ptr unsafe.Pointer) *QPdfWriter {
	var n = new(QPdfWriter)
	n.SetPointer(ptr)
	return n
}
func NewQPdfWriter2(device core.QIODevice_ITF) *QPdfWriter {
	var tmpValue = NewQPdfWriterFromPointer(C.QPdfWriter_NewQPdfWriter2(core.PointerFromQIODevice(device)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQPdfWriter(filename string) *QPdfWriter {
	var filenameC = C.CString(filename)
	defer C.free(unsafe.Pointer(filenameC))
	var tmpValue = NewQPdfWriterFromPointer(C.QPdfWriter_NewQPdfWriter(filenameC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QPdfWriter) Creator() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPdfWriter_Creator(ptr.Pointer()))
	}
	return ""
}

//export callbackQPdfWriter_NewPage
func callbackQPdfWriter_NewPage(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::newPage"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).NewPageDefault())))
}

func (ptr *QPdfWriter) ConnectNewPage(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::newPage", f)
	}
}

func (ptr *QPdfWriter) DisconnectNewPage() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::newPage")
	}
}

func (ptr *QPdfWriter) NewPage() bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_NewPage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPdfWriter) NewPageDefault() bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_NewPageDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPdfWriter) PageLayout() *QPageLayout {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPageLayoutFromPointer(C.QPdfWriter_PageLayout(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPageLayout).DestroyQPageLayout)
		return tmpValue
	}
	return nil
}

//export callbackQPdfWriter_PaintEngine
func callbackQPdfWriter_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPdfWriterFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPdfWriter) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::paintEngine", f)
	}
}

func (ptr *QPdfWriter) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::paintEngine")
	}
}

func (ptr *QPdfWriter) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPdfWriter_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPdfWriter) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPdfWriter_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPdfWriter) Resolution() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPdfWriter_Resolution(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPdfWriter) SetCreator(creator string) {
	if ptr.Pointer() != nil {
		var creatorC = C.CString(creator)
		defer C.free(unsafe.Pointer(creatorC))
		C.QPdfWriter_SetCreator(ptr.Pointer(), creatorC)
	}
}

func (ptr *QPdfWriter) SetPageLayout(newPageLayout QPageLayout_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageLayout(ptr.Pointer(), PointerFromQPageLayout(newPageLayout)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageMargins(margins core.QMarginsF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageMargins(ptr.Pointer(), core.PointerFromQMarginsF(margins)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageMargins2(margins core.QMarginsF_ITF, units QPageLayout__Unit) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageMargins2(ptr.Pointer(), core.PointerFromQMarginsF(margins), C.longlong(units)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageOrientation(orientation QPageLayout__Orientation) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageOrientation(ptr.Pointer(), C.longlong(orientation)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetPageSize(pageSize QPageSize_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_SetPageSize(ptr.Pointer(), PointerFromQPageSize(pageSize)) != 0
	}
	return false
}

func (ptr *QPdfWriter) SetResolution(resolution int) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_SetResolution(ptr.Pointer(), C.int(int32(resolution)))
	}
}

func (ptr *QPdfWriter) SetTitle(title string) {
	if ptr.Pointer() != nil {
		var titleC = C.CString(title)
		defer C.free(unsafe.Pointer(titleC))
		C.QPdfWriter_SetTitle(ptr.Pointer(), titleC)
	}
}

func (ptr *QPdfWriter) Title() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPdfWriter_Title(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPdfWriter) DestroyQPdfWriter() {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DestroyQPdfWriter(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPdfWriter_TimerEvent
func callbackQPdfWriter_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::timerEvent", f)
	}
}

func (ptr *QPdfWriter) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::timerEvent")
	}
}

func (ptr *QPdfWriter) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QPdfWriter) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQPdfWriter_ChildEvent
func callbackQPdfWriter_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::childEvent", f)
	}
}

func (ptr *QPdfWriter) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::childEvent")
	}
}

func (ptr *QPdfWriter) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QPdfWriter) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQPdfWriter_ConnectNotify
func callbackQPdfWriter_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPdfWriterFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPdfWriter) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::connectNotify", f)
	}
}

func (ptr *QPdfWriter) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::connectNotify")
	}
}

func (ptr *QPdfWriter) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPdfWriter) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPdfWriter_CustomEvent
func callbackQPdfWriter_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQPdfWriterFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QPdfWriter) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::customEvent", f)
	}
}

func (ptr *QPdfWriter) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::customEvent")
	}
}

func (ptr *QPdfWriter) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QPdfWriter) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQPdfWriter_DeleteLater
func callbackQPdfWriter_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQPdfWriterFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QPdfWriter) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::deleteLater", f)
	}
}

func (ptr *QPdfWriter) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::deleteLater")
	}
}

func (ptr *QPdfWriter) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPdfWriter) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPdfWriter_DisconnectNotify
func callbackQPdfWriter_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQPdfWriterFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPdfWriter) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::disconnectNotify", f)
	}
}

func (ptr *QPdfWriter) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::disconnectNotify")
	}
}

func (ptr *QPdfWriter) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPdfWriter) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQPdfWriter_Event
func callbackQPdfWriter_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QPdfWriter) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::event", f)
	}
}

func (ptr *QPdfWriter) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::event")
	}
}

func (ptr *QPdfWriter) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QPdfWriter) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQPdfWriter_EventFilter
func callbackQPdfWriter_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPdfWriterFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QPdfWriter) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::eventFilter", f)
	}
}

func (ptr *QPdfWriter) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::eventFilter")
	}
}

func (ptr *QPdfWriter) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPdfWriter) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPdfWriter_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPdfWriter_MetaObject
func callbackQPdfWriter_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQPdfWriterFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPdfWriter) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::metaObject", f)
	}
}

func (ptr *QPdfWriter) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::metaObject")
	}
}

func (ptr *QPdfWriter) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPdfWriter_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPdfWriter) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QPdfWriter_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQPdfWriter_SetPageSize2
func callbackQPdfWriter_SetPageSize2(ptr unsafe.Pointer, size C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::setPageSize2"); signal != nil {
		signal.(func(QPagedPaintDevice__PageSize))(QPagedPaintDevice__PageSize(size))
	} else {
		NewQPdfWriterFromPointer(ptr).SetPageSize2Default(QPagedPaintDevice__PageSize(size))
	}
}

func (ptr *QPdfWriter) ConnectSetPageSize2(f func(size QPagedPaintDevice__PageSize)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::setPageSize2", f)
	}
}

func (ptr *QPdfWriter) DisconnectSetPageSize2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::setPageSize2")
	}
}

func (ptr *QPdfWriter) SetPageSize2(size QPagedPaintDevice__PageSize) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSize2(ptr.Pointer(), C.longlong(size))
	}
}

func (ptr *QPdfWriter) SetPageSize2Default(size QPagedPaintDevice__PageSize) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSize2Default(ptr.Pointer(), C.longlong(size))
	}
}

//export callbackQPdfWriter_SetPageSizeMM
func callbackQPdfWriter_SetPageSizeMM(ptr unsafe.Pointer, size unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::setPageSizeMM"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	} else {
		NewQPdfWriterFromPointer(ptr).SetPageSizeMMDefault(core.NewQSizeFFromPointer(size))
	}
}

func (ptr *QPdfWriter) ConnectSetPageSizeMM(f func(size *core.QSizeF)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::setPageSizeMM", f)
	}
}

func (ptr *QPdfWriter) DisconnectSetPageSizeMM() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::setPageSizeMM")
	}
}

func (ptr *QPdfWriter) SetPageSizeMM(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSizeMM(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QPdfWriter) SetPageSizeMMDefault(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QPdfWriter_SetPageSizeMMDefault(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

//export callbackQPdfWriter_Metric
func callbackQPdfWriter_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPdfWriter::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQPdfWriterFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QPdfWriter) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::metric", f)
	}
}

func (ptr *QPdfWriter) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPdfWriter::metric")
	}
}

func (ptr *QPdfWriter) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPdfWriter_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPdfWriter) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPdfWriter_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

type QPen struct {
	ptr unsafe.Pointer
}

type QPen_ITF interface {
	QPen_PTR() *QPen
}

func (p *QPen) QPen_PTR() *QPen {
	return p
}

func (p *QPen) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPen) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPen(ptr QPen_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPen_PTR().Pointer()
	}
	return nil
}

func NewQPenFromPointer(ptr unsafe.Pointer) *QPen {
	var n = new(QPen)
	n.SetPointer(ptr)
	return n
}
func NewQPen4(brush QBrush_ITF, width float64, style core.Qt__PenStyle, cap core.Qt__PenCapStyle, join core.Qt__PenJoinStyle) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen4(PointerFromQBrush(brush), C.double(width), C.longlong(style), C.longlong(cap), C.longlong(join)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen5(pen QPen_ITF) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen5(PointerFromQPen(pen)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func (ptr *QPen) Color() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QPen_Color(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QPen) SetCapStyle(style core.Qt__PenCapStyle) {
	if ptr.Pointer() != nil {
		C.QPen_SetCapStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPen) SetColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPen_SetColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QPen) SetJoinStyle(style core.Qt__PenJoinStyle) {
	if ptr.Pointer() != nil {
		C.QPen_SetJoinStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPen) SetStyle(style core.Qt__PenStyle) {
	if ptr.Pointer() != nil {
		C.QPen_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QPen) SetWidth(width int) {
	if ptr.Pointer() != nil {
		C.QPen_SetWidth(ptr.Pointer(), C.int(int32(width)))
	}
}

func (ptr *QPen) Style() core.Qt__PenStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenStyle(C.QPen_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPen_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPen) WidthF() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen_WidthF(ptr.Pointer()))
	}
	return 0
}

func NewQPen() *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen())
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen6(pen QPen_ITF) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen6(PointerFromQPen(pen)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen2(style core.Qt__PenStyle) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen2(C.longlong(style)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func NewQPen3(color QColor_ITF) *QPen {
	var tmpValue = NewQPenFromPointer(C.QPen_NewQPen3(PointerFromQColor(color)))
	runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
	return tmpValue
}

func (ptr *QPen) Brush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QPen_Brush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QPen) CapStyle() core.Qt__PenCapStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenCapStyle(C.QPen_CapStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) DashOffset() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen_DashOffset(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) IsCosmetic() bool {
	if ptr.Pointer() != nil {
		return C.QPen_IsCosmetic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPen) IsSolid() bool {
	if ptr.Pointer() != nil {
		return C.QPen_IsSolid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPen) JoinStyle() core.Qt__PenJoinStyle {
	if ptr.Pointer() != nil {
		return core.Qt__PenJoinStyle(C.QPen_JoinStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) MiterLimit() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPen_MiterLimit(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPen) SetBrush(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QPen_SetBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QPen) SetCosmetic(cosmetic bool) {
	if ptr.Pointer() != nil {
		C.QPen_SetCosmetic(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(cosmetic))))
	}
}

func (ptr *QPen) SetDashOffset(offset float64) {
	if ptr.Pointer() != nil {
		C.QPen_SetDashOffset(ptr.Pointer(), C.double(offset))
	}
}

func (ptr *QPen) SetMiterLimit(limit float64) {
	if ptr.Pointer() != nil {
		C.QPen_SetMiterLimit(ptr.Pointer(), C.double(limit))
	}
}

func (ptr *QPen) SetWidthF(width float64) {
	if ptr.Pointer() != nil {
		C.QPen_SetWidthF(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QPen) Swap(other QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QPen_Swap(ptr.Pointer(), PointerFromQPen(other))
	}
}

func (ptr *QPen) DestroyQPen() {
	if ptr.Pointer() != nil {
		C.QPen_DestroyQPen(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QPicture struct {
	QPaintDevice
}

type QPicture_ITF interface {
	QPaintDevice_ITF
	QPicture_PTR() *QPicture
}

func (p *QPicture) QPicture_PTR() *QPicture {
	return p
}

func (p *QPicture) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QPicture) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPicture(ptr QPicture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPicture_PTR().Pointer()
	}
	return nil
}

func NewQPictureFromPointer(ptr unsafe.Pointer) *QPicture {
	var n = new(QPicture)
	n.SetPointer(ptr)
	return n
}
func (ptr *QPicture) Data() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPicture_Data(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPicture) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QPicture_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPicture) Size() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QPicture_Size(ptr.Pointer())))
	}
	return 0
}

func NewQPicture2(pic QPicture_ITF) *QPicture {
	return NewQPictureFromPointer(C.QPicture_NewQPicture2(PointerFromQPicture(pic)))
}

func NewQPicture(formatVersion int) *QPicture {
	return NewQPictureFromPointer(C.QPicture_NewQPicture(C.int(int32(formatVersion))))
}

func (ptr *QPicture) BoundingRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPicture_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPicture) Load2(dev core.QIODevice_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPicture_Load2(ptr.Pointer(), core.PointerFromQIODevice(dev), formatC) != 0
	}
	return false
}

func (ptr *QPicture) Load(fileName string, format string) bool {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPicture_Load(ptr.Pointer(), fileNameC, formatC) != 0
	}
	return false
}

func (ptr *QPicture) Play(painter QPainter_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPicture_Play(ptr.Pointer(), PointerFromQPainter(painter)) != 0
	}
	return false
}

func (ptr *QPicture) Save2(dev core.QIODevice_ITF, format string) bool {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPicture_Save2(ptr.Pointer(), core.PointerFromQIODevice(dev), formatC) != 0
	}
	return false
}

func (ptr *QPicture) Save(fileName string, format string) bool {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPicture_Save(ptr.Pointer(), fileNameC, formatC) != 0
	}
	return false
}

func (ptr *QPicture) SetBoundingRect(r core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QPicture_SetBoundingRect(ptr.Pointer(), core.PointerFromQRect(r))
	}
}

//export callbackQPicture_SetData
func callbackQPicture_SetData(ptr unsafe.Pointer, data C.struct_QtGui_PackedString, size C.uint) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPicture::setData"); signal != nil {
		signal.(func(string, uint))(cGoUnpackString(data), uint(uint32(size)))
	} else {
		NewQPictureFromPointer(ptr).SetDataDefault(cGoUnpackString(data), uint(uint32(size)))
	}
}

func (ptr *QPicture) ConnectSetData(f func(data string, size uint)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPicture::setData", f)
	}
}

func (ptr *QPicture) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPicture::setData")
	}
}

func (ptr *QPicture) SetData(data string, size uint) {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QPicture_SetData(ptr.Pointer(), dataC, C.uint(uint32(size)))
	}
}

func (ptr *QPicture) SetDataDefault(data string, size uint) {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QPicture_SetDataDefault(ptr.Pointer(), dataC, C.uint(uint32(size)))
	}
}

func (ptr *QPicture) Swap(other QPicture_ITF) {
	if ptr.Pointer() != nil {
		C.QPicture_Swap(ptr.Pointer(), PointerFromQPicture(other))
	}
}

func (ptr *QPicture) DestroyQPicture() {
	if ptr.Pointer() != nil {
		C.QPicture_DestroyQPicture(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPicture_Metric
func callbackQPicture_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPicture::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQPictureFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QPicture) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPicture::metric", f)
	}
}

func (ptr *QPicture) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPicture::metric")
	}
}

func (ptr *QPicture) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPicture_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPicture) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPicture_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQPicture_PaintEngine
func callbackQPicture_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPicture::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPictureFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPicture) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPicture::paintEngine", f)
	}
}

func (ptr *QPicture) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPicture::paintEngine")
	}
}

func (ptr *QPicture) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPicture_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPicture) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPicture_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

//QPixelFormat::AlphaPosition
type QPixelFormat__AlphaPosition int64

const (
	QPixelFormat__AtBeginning = QPixelFormat__AlphaPosition(0)
	QPixelFormat__AtEnd       = QPixelFormat__AlphaPosition(1)
)

//QPixelFormat::AlphaPremultiplied
type QPixelFormat__AlphaPremultiplied int64

const (
	QPixelFormat__NotPremultiplied = QPixelFormat__AlphaPremultiplied(0)
	QPixelFormat__Premultiplied    = QPixelFormat__AlphaPremultiplied(1)
)

//QPixelFormat::AlphaUsage
type QPixelFormat__AlphaUsage int64

const (
	QPixelFormat__UsesAlpha    = QPixelFormat__AlphaUsage(0)
	QPixelFormat__IgnoresAlpha = QPixelFormat__AlphaUsage(1)
)

//QPixelFormat::ByteOrder
type QPixelFormat__ByteOrder int64

const (
	QPixelFormat__LittleEndian        = QPixelFormat__ByteOrder(0)
	QPixelFormat__BigEndian           = QPixelFormat__ByteOrder(1)
	QPixelFormat__CurrentSystemEndian = QPixelFormat__ByteOrder(2)
)

//QPixelFormat::ColorModel
type QPixelFormat__ColorModel int64

const (
	QPixelFormat__RGB       = QPixelFormat__ColorModel(0)
	QPixelFormat__BGR       = QPixelFormat__ColorModel(1)
	QPixelFormat__Indexed   = QPixelFormat__ColorModel(2)
	QPixelFormat__Grayscale = QPixelFormat__ColorModel(3)
	QPixelFormat__CMYK      = QPixelFormat__ColorModel(4)
	QPixelFormat__HSL       = QPixelFormat__ColorModel(5)
	QPixelFormat__HSV       = QPixelFormat__ColorModel(6)
	QPixelFormat__YUV       = QPixelFormat__ColorModel(7)
	QPixelFormat__Alpha     = QPixelFormat__ColorModel(8)
)

//QPixelFormat::TypeInterpretation
type QPixelFormat__TypeInterpretation int64

const (
	QPixelFormat__UnsignedInteger = QPixelFormat__TypeInterpretation(0)
	QPixelFormat__UnsignedShort   = QPixelFormat__TypeInterpretation(1)
	QPixelFormat__UnsignedByte    = QPixelFormat__TypeInterpretation(2)
	QPixelFormat__FloatingPoint   = QPixelFormat__TypeInterpretation(3)
)

//QPixelFormat::YUVLayout
type QPixelFormat__YUVLayout int64

const (
	QPixelFormat__YUV444   = QPixelFormat__YUVLayout(0)
	QPixelFormat__YUV422   = QPixelFormat__YUVLayout(1)
	QPixelFormat__YUV411   = QPixelFormat__YUVLayout(2)
	QPixelFormat__YUV420P  = QPixelFormat__YUVLayout(3)
	QPixelFormat__YUV420SP = QPixelFormat__YUVLayout(4)
	QPixelFormat__YV12     = QPixelFormat__YUVLayout(5)
	QPixelFormat__UYVY     = QPixelFormat__YUVLayout(6)
	QPixelFormat__YUYV     = QPixelFormat__YUVLayout(7)
	QPixelFormat__NV12     = QPixelFormat__YUVLayout(8)
	QPixelFormat__NV21     = QPixelFormat__YUVLayout(9)
	QPixelFormat__IMC1     = QPixelFormat__YUVLayout(10)
	QPixelFormat__IMC2     = QPixelFormat__YUVLayout(11)
	QPixelFormat__IMC3     = QPixelFormat__YUVLayout(12)
	QPixelFormat__IMC4     = QPixelFormat__YUVLayout(13)
	QPixelFormat__Y8       = QPixelFormat__YUVLayout(14)
	QPixelFormat__Y16      = QPixelFormat__YUVLayout(15)
)

type QPixelFormat struct {
	ptr unsafe.Pointer
}

type QPixelFormat_ITF interface {
	QPixelFormat_PTR() *QPixelFormat
}

func (p *QPixelFormat) QPixelFormat_PTR() *QPixelFormat {
	return p
}

func (p *QPixelFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPixelFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPixelFormat(ptr QPixelFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixelFormat_PTR().Pointer()
	}
	return nil
}

func NewQPixelFormatFromPointer(ptr unsafe.Pointer) *QPixelFormat {
	var n = new(QPixelFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPixelFormat) DestroyQPixelFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQPixelFormat() *QPixelFormat {
	var tmpValue = NewQPixelFormatFromPointer(C.QPixelFormat_NewQPixelFormat())
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func NewQPixelFormat2(colorModel QPixelFormat__ColorModel, firstSize string, secondSize string, thirdSize string, fourthSize string, fifthSize string, alphaSize string, alphaUsage QPixelFormat__AlphaUsage, alphaPosition QPixelFormat__AlphaPosition, premultiplied QPixelFormat__AlphaPremultiplied, typeInterpretation QPixelFormat__TypeInterpretation, byteOrder QPixelFormat__ByteOrder, subEnum string) *QPixelFormat {
	var firstSizeC = C.CString(firstSize)
	defer C.free(unsafe.Pointer(firstSizeC))
	var secondSizeC = C.CString(secondSize)
	defer C.free(unsafe.Pointer(secondSizeC))
	var thirdSizeC = C.CString(thirdSize)
	defer C.free(unsafe.Pointer(thirdSizeC))
	var fourthSizeC = C.CString(fourthSize)
	defer C.free(unsafe.Pointer(fourthSizeC))
	var fifthSizeC = C.CString(fifthSize)
	defer C.free(unsafe.Pointer(fifthSizeC))
	var alphaSizeC = C.CString(alphaSize)
	defer C.free(unsafe.Pointer(alphaSizeC))
	var subEnumC = C.CString(subEnum)
	defer C.free(unsafe.Pointer(subEnumC))
	var tmpValue = NewQPixelFormatFromPointer(C.QPixelFormat_NewQPixelFormat2(C.longlong(colorModel), firstSizeC, secondSizeC, thirdSizeC, fourthSizeC, fifthSizeC, alphaSizeC, C.longlong(alphaUsage), C.longlong(alphaPosition), C.longlong(premultiplied), C.longlong(typeInterpretation), C.longlong(byteOrder), subEnumC))
	runtime.SetFinalizer(tmpValue, (*QPixelFormat).DestroyQPixelFormat)
	return tmpValue
}

func (ptr *QPixelFormat) AlphaPosition() QPixelFormat__AlphaPosition {
	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaPosition(C.QPixelFormat_AlphaPosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) AlphaSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_AlphaSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) AlphaUsage() QPixelFormat__AlphaUsage {
	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaUsage(C.QPixelFormat_AlphaUsage(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) BitsPerPixel() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BitsPerPixel(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) BlackSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BlackSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) BlueSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BlueSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) BrightnessSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_BrightnessSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) ByteOrder() QPixelFormat__ByteOrder {
	if ptr.Pointer() != nil {
		return QPixelFormat__ByteOrder(C.QPixelFormat_ByteOrder(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) ChannelCount() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_ChannelCount(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) ColorModel() QPixelFormat__ColorModel {
	if ptr.Pointer() != nil {
		return QPixelFormat__ColorModel(C.QPixelFormat_ColorModel(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) CyanSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_CyanSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) GreenSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_GreenSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) HueSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_HueSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) LightnessSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_LightnessSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) MagentaSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_MagentaSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) Premultiplied() QPixelFormat__AlphaPremultiplied {
	if ptr.Pointer() != nil {
		return QPixelFormat__AlphaPremultiplied(C.QPixelFormat_Premultiplied(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) RedSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_RedSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) SaturationSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_SaturationSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) TypeInterpretation() QPixelFormat__TypeInterpretation {
	if ptr.Pointer() != nil {
		return QPixelFormat__TypeInterpretation(C.QPixelFormat_TypeInterpretation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixelFormat) YellowSize() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPixelFormat_YellowSize(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPixelFormat) YuvLayout() QPixelFormat__YUVLayout {
	if ptr.Pointer() != nil {
		return QPixelFormat__YUVLayout(C.QPixelFormat_YuvLayout(ptr.Pointer()))
	}
	return 0
}

type QPixmap struct {
	QPaintDevice
}

type QPixmap_ITF interface {
	QPaintDevice_ITF
	QPixmap_PTR() *QPixmap
}

func (p *QPixmap) QPixmap_PTR() *QPixmap {
	return p
}

func (p *QPixmap) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDevice_PTR().Pointer()
	}
	return nil
}

func (p *QPixmap) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQPixmap(ptr QPixmap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixmap_PTR().Pointer()
	}
	return nil
}

func NewQPixmapFromPointer(ptr unsafe.Pointer) *QPixmap {
	var n = new(QPixmap)
	n.SetPointer(ptr)
	return n
}
func NewQPixmap3(width int, height int) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_NewQPixmap3(C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) Copy(rectangle core.QRect_ITF) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Copy(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Depth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPixmap_Depth(ptr.Pointer())))
	}
	return 0
}

func QPixmap_FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) FromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func QPixmap_FromImageReader(imageReader QImageReader_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImageReader(PointerFromQImageReader(imageReader), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) FromImageReader(imageReader QImageReader_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImageReader(PointerFromQImageReader(imageReader), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPixmap_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPixmap) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) IsQBitmap() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_IsQBitmap(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) LoadFromData(data string, len uint, format string, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPixmap_LoadFromData(ptr.Pointer(), dataC, C.uint(uint32(len)), formatC, C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) Mask() *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QPixmap_Mask(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Rect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPixmap_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Scaled(size core.QSize_ITF, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Scaled(ptr.Pointer(), core.PointerFromQSize(size), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) ScaledToHeight(height int, mode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_ScaledToHeight(ptr.Pointer(), C.int(int32(height)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) ScaledToWidth(width int, mode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_ScaledToWidth(ptr.Pointer(), C.int(int32(width)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QPixmap_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func QPixmap_TrueMatrix(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QPixmap_QPixmap_TrueMatrix(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QPixmap) TrueMatrix(matrix QTransform_ITF, width int, height int) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QPixmap_QPixmap_TrueMatrix(PointerFromQTransform(matrix), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QPixmap) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPixmap_Width(ptr.Pointer())))
	}
	return 0
}

func NewQPixmap() *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_NewQPixmap())
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func NewQPixmap7(pixmap QPixmap_ITF) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_NewQPixmap7(PointerFromQPixmap(pixmap)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func NewQPixmap4(size core.QSize_ITF) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_NewQPixmap4(core.PointerFromQSize(size)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func NewQPixmap5(fileName string, format string, flags core.Qt__ImageConversionFlag) *QPixmap {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_NewQPixmap5(fileNameC, formatC, C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) CacheKey() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QPixmap_CacheKey(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixmap) ConvertFromImage(image QImage_ITF, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_ConvertFromImage(ptr.Pointer(), PointerFromQImage(image), C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) Copy2(x int, y int, width int, height int) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Copy2(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height))))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) CreateHeuristicMask(clipTight bool) *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QPixmap_CreateHeuristicMask(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(clipTight)))))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) CreateMaskFromColor(maskColor QColor_ITF, mode core.Qt__MaskMode) *QBitmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitmapFromPointer(C.QPixmap_CreateMaskFromColor(ptr.Pointer(), PointerFromQColor(maskColor), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QBitmap).DestroyQBitmap)
		return tmpValue
	}
	return nil
}

func QPixmap_DefaultDepth() int {
	return int(int32(C.QPixmap_QPixmap_DefaultDepth()))
}

func (ptr *QPixmap) DefaultDepth() int {
	return int(int32(C.QPixmap_QPixmap_DefaultDepth()))
}

func (ptr *QPixmap) Detach() {
	if ptr.Pointer() != nil {
		C.QPixmap_Detach(ptr.Pointer())
	}
}

func (ptr *QPixmap) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPixmap_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPixmap) Fill(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Fill(ptr.Pointer(), PointerFromQColor(color))
	}
}

func QPixmap_FromImage2(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage2(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) FromImage2(image QImage_ITF, flags core.Qt__ImageConversionFlag) *QPixmap {
	var tmpValue = NewQPixmapFromPointer(C.QPixmap_QPixmap_FromImage2(PointerFromQImage(image), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
	return tmpValue
}

func (ptr *QPixmap) HasAlpha() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_HasAlpha(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) HasAlphaChannel() bool {
	if ptr.Pointer() != nil {
		return C.QPixmap_HasAlphaChannel(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPixmap) Load(fileName string, format string, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPixmap_Load(ptr.Pointer(), fileNameC, formatC, C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) LoadFromData2(data core.QByteArray_ITF, format string, flags core.Qt__ImageConversionFlag) bool {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPixmap_LoadFromData2(ptr.Pointer(), core.PointerFromQByteArray(data), formatC, C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QPixmap) Save2(device core.QIODevice_ITF, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPixmap_Save2(ptr.Pointer(), core.PointerFromQIODevice(device), formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QPixmap) Save(fileName string, format string, quality int) bool {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return C.QPixmap_Save(ptr.Pointer(), fileNameC, formatC, C.int(int32(quality))) != 0
	}
	return false
}

func (ptr *QPixmap) Scaled2(width int, height int, aspectRatioMode core.Qt__AspectRatioMode, transformMode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Scaled2(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)), C.longlong(aspectRatioMode), C.longlong(transformMode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Scroll2(dx int, dy int, rect core.QRect_ITF, exposed QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Scroll2(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)), core.PointerFromQRect(rect), PointerFromQRegion(exposed))
	}
}

func (ptr *QPixmap) Scroll(dx int, dy int, x int, y int, width int, height int, exposed QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Scroll(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)), PointerFromQRegion(exposed))
	}
}

func (ptr *QPixmap) SetDevicePixelRatio(scaleFactor float64) {
	if ptr.Pointer() != nil {
		C.QPixmap_SetDevicePixelRatio(ptr.Pointer(), C.double(scaleFactor))
	}
}

func (ptr *QPixmap) SetMask(mask QBitmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_SetMask(ptr.Pointer(), PointerFromQBitmap(mask))
	}
}

func (ptr *QPixmap) Swap(other QPixmap_ITF) {
	if ptr.Pointer() != nil {
		C.QPixmap_Swap(ptr.Pointer(), PointerFromQPixmap(other))
	}
}

func (ptr *QPixmap) ToImage() *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QPixmap_ToImage(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) Transformed(transform QTransform_ITF, mode core.Qt__TransformationMode) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QPixmap_Transformed(ptr.Pointer(), PointerFromQTransform(transform), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QPixmap) DestroyQPixmap() {
	if ptr.Pointer() != nil {
		C.QPixmap_DestroyQPixmap(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//export callbackQPixmap_Metric
func callbackQPixmap_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPixmap::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQPixmapFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QPixmap) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPixmap::metric", f)
	}
}

func (ptr *QPixmap) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPixmap::metric")
	}
}

func (ptr *QPixmap) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPixmap_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QPixmap) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPixmap_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQPixmap_PaintEngine
func callbackQPixmap_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPixmap::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQPixmapFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QPixmap) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPixmap::paintEngine", f)
	}
}

func (ptr *QPixmap) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPixmap::paintEngine")
	}
}

func (ptr *QPixmap) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPixmap_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPixmap) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QPixmap_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

type QPixmapCache struct {
	ptr unsafe.Pointer
}

type QPixmapCache_ITF interface {
	QPixmapCache_PTR() *QPixmapCache
}

func (p *QPixmapCache) QPixmapCache_PTR() *QPixmapCache {
	return p
}

func (p *QPixmapCache) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPixmapCache) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPixmapCache(ptr QPixmapCache_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPixmapCache_PTR().Pointer()
	}
	return nil
}

func NewQPixmapCacheFromPointer(ptr unsafe.Pointer) *QPixmapCache {
	var n = new(QPixmapCache)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPixmapCache) DestroyQPixmapCache() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QPixmapCache_CacheLimit() int {
	return int(int32(C.QPixmapCache_QPixmapCache_CacheLimit()))
}

func (ptr *QPixmapCache) CacheLimit() int {
	return int(int32(C.QPixmapCache_QPixmapCache_CacheLimit()))
}

func QPixmapCache_Clear() {
	C.QPixmapCache_QPixmapCache_Clear()
}

func (ptr *QPixmapCache) Clear() {
	C.QPixmapCache_QPixmapCache_Clear()
}

func QPixmapCache_Find(key string, pixmap QPixmap_ITF) bool {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	return C.QPixmapCache_QPixmapCache_Find(keyC, PointerFromQPixmap(pixmap)) != 0
}

func (ptr *QPixmapCache) Find(key string, pixmap QPixmap_ITF) bool {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	return C.QPixmapCache_QPixmapCache_Find(keyC, PointerFromQPixmap(pixmap)) != 0
}

func QPixmapCache_Insert(key string, pixmap QPixmap_ITF) bool {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	return C.QPixmapCache_QPixmapCache_Insert(keyC, PointerFromQPixmap(pixmap)) != 0
}

func (ptr *QPixmapCache) Insert(key string, pixmap QPixmap_ITF) bool {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	return C.QPixmapCache_QPixmapCache_Insert(keyC, PointerFromQPixmap(pixmap)) != 0
}

func QPixmapCache_Remove(key string) {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	C.QPixmapCache_QPixmapCache_Remove(keyC)
}

func (ptr *QPixmapCache) Remove(key string) {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	C.QPixmapCache_QPixmapCache_Remove(keyC)
}

func QPixmapCache_SetCacheLimit(n int) {
	C.QPixmapCache_QPixmapCache_SetCacheLimit(C.int(int32(n)))
}

func (ptr *QPixmapCache) SetCacheLimit(n int) {
	C.QPixmapCache_QPixmapCache_SetCacheLimit(C.int(int32(n)))
}

//QPlatformGraphicsBuffer::AccessType
type QPlatformGraphicsBuffer__AccessType int64

const (
	QPlatformGraphicsBuffer__None          = QPlatformGraphicsBuffer__AccessType(0x00)
	QPlatformGraphicsBuffer__SWReadAccess  = QPlatformGraphicsBuffer__AccessType(0x01)
	QPlatformGraphicsBuffer__SWWriteAccess = QPlatformGraphicsBuffer__AccessType(0x02)
	QPlatformGraphicsBuffer__TextureAccess = QPlatformGraphicsBuffer__AccessType(0x04)
	QPlatformGraphicsBuffer__HWCompositor  = QPlatformGraphicsBuffer__AccessType(0x08)
)

//QPlatformGraphicsBuffer::Origin
type QPlatformGraphicsBuffer__Origin int64

const (
	QPlatformGraphicsBuffer__OriginBottomLeft = QPlatformGraphicsBuffer__Origin(0)
	QPlatformGraphicsBuffer__OriginTopLeft    = QPlatformGraphicsBuffer__Origin(1)
)

type QPlatformGraphicsBuffer struct {
	core.QObject
}

type QPlatformGraphicsBuffer_ITF interface {
	core.QObject_ITF
	QPlatformGraphicsBuffer_PTR() *QPlatformGraphicsBuffer
}

func (p *QPlatformGraphicsBuffer) QPlatformGraphicsBuffer_PTR() *QPlatformGraphicsBuffer {
	return p
}

func (p *QPlatformGraphicsBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QPlatformGraphicsBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQPlatformGraphicsBuffer(ptr QPlatformGraphicsBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformGraphicsBuffer_PTR().Pointer()
	}
	return nil
}

func NewQPlatformGraphicsBufferFromPointer(ptr unsafe.Pointer) *QPlatformGraphicsBuffer {
	var n = new(QPlatformGraphicsBuffer)
	n.SetPointer(ptr)
	return n
}

//QPlatformSurfaceEvent::SurfaceEventType
type QPlatformSurfaceEvent__SurfaceEventType int64

const (
	QPlatformSurfaceEvent__SurfaceCreated            = QPlatformSurfaceEvent__SurfaceEventType(0)
	QPlatformSurfaceEvent__SurfaceAboutToBeDestroyed = QPlatformSurfaceEvent__SurfaceEventType(1)
)

type QPlatformSurfaceEvent struct {
	core.QEvent
}

type QPlatformSurfaceEvent_ITF interface {
	core.QEvent_ITF
	QPlatformSurfaceEvent_PTR() *QPlatformSurfaceEvent
}

func (p *QPlatformSurfaceEvent) QPlatformSurfaceEvent_PTR() *QPlatformSurfaceEvent {
	return p
}

func (p *QPlatformSurfaceEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QPlatformSurfaceEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQPlatformSurfaceEvent(ptr QPlatformSurfaceEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformSurfaceEvent_PTR().Pointer()
	}
	return nil
}

func NewQPlatformSurfaceEventFromPointer(ptr unsafe.Pointer) *QPlatformSurfaceEvent {
	var n = new(QPlatformSurfaceEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPlatformSurfaceEvent) DestroyQPlatformSurfaceEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQPlatformSurfaceEvent(surfaceEventType QPlatformSurfaceEvent__SurfaceEventType) *QPlatformSurfaceEvent {
	var tmpValue = NewQPlatformSurfaceEventFromPointer(C.QPlatformSurfaceEvent_NewQPlatformSurfaceEvent(C.longlong(surfaceEventType)))
	runtime.SetFinalizer(tmpValue, (*QPlatformSurfaceEvent).DestroyQPlatformSurfaceEvent)
	return tmpValue
}

func (ptr *QPlatformSurfaceEvent) SurfaceEventType() QPlatformSurfaceEvent__SurfaceEventType {
	if ptr.Pointer() != nil {
		return QPlatformSurfaceEvent__SurfaceEventType(C.QPlatformSurfaceEvent_SurfaceEventType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPlatformSurfaceEvent) M_surfaceEventType() QPlatformSurfaceEvent__SurfaceEventType {
	if ptr.Pointer() != nil {
		return QPlatformSurfaceEvent__SurfaceEventType(C.QPlatformSurfaceEvent_M_surfaceEventType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPlatformSurfaceEvent) SetM_surfaceEventType(vsu QPlatformSurfaceEvent__SurfaceEventType) {
	if ptr.Pointer() != nil {
		C.QPlatformSurfaceEvent_SetM_surfaceEventType(ptr.Pointer(), C.longlong(vsu))
	}
}

//QPlatformSystemTrayIcon::ActivationReason
type QPlatformSystemTrayIcon__ActivationReason int64

const (
	QPlatformSystemTrayIcon__Unknown     = QPlatformSystemTrayIcon__ActivationReason(0)
	QPlatformSystemTrayIcon__Context     = QPlatformSystemTrayIcon__ActivationReason(1)
	QPlatformSystemTrayIcon__DoubleClick = QPlatformSystemTrayIcon__ActivationReason(2)
	QPlatformSystemTrayIcon__Trigger     = QPlatformSystemTrayIcon__ActivationReason(3)
	QPlatformSystemTrayIcon__MiddleClick = QPlatformSystemTrayIcon__ActivationReason(4)
)

//QPlatformSystemTrayIcon::MessageIcon
type QPlatformSystemTrayIcon__MessageIcon int64

const (
	QPlatformSystemTrayIcon__NoIcon      = QPlatformSystemTrayIcon__MessageIcon(0)
	QPlatformSystemTrayIcon__Information = QPlatformSystemTrayIcon__MessageIcon(1)
	QPlatformSystemTrayIcon__Warning     = QPlatformSystemTrayIcon__MessageIcon(2)
	QPlatformSystemTrayIcon__Critical    = QPlatformSystemTrayIcon__MessageIcon(3)
)

type QPlatformSystemTrayIcon struct {
	core.QObject
}

type QPlatformSystemTrayIcon_ITF interface {
	core.QObject_ITF
	QPlatformSystemTrayIcon_PTR() *QPlatformSystemTrayIcon
}

func (p *QPlatformSystemTrayIcon) QPlatformSystemTrayIcon_PTR() *QPlatformSystemTrayIcon {
	return p
}

func (p *QPlatformSystemTrayIcon) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QPlatformSystemTrayIcon) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQPlatformSystemTrayIcon(ptr QPlatformSystemTrayIcon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPlatformSystemTrayIcon_PTR().Pointer()
	}
	return nil
}

func NewQPlatformSystemTrayIconFromPointer(ptr unsafe.Pointer) *QPlatformSystemTrayIcon {
	var n = new(QPlatformSystemTrayIcon)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPlatformSystemTrayIcon) DestroyQPlatformSystemTrayIcon() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

type QPolygon struct {
	core.QVector
}

type QPolygon_ITF interface {
	core.QVector_ITF
	QPolygon_PTR() *QPolygon
}

func (p *QPolygon) QPolygon_PTR() *QPolygon {
	return p
}

func (p *QPolygon) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVector_PTR().Pointer()
	}
	return nil
}

func (p *QPolygon) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVector_PTR().SetPointer(ptr)
	}
}

func PointerFromQPolygon(ptr QPolygon_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPolygon_PTR().Pointer()
	}
	return nil
}

func NewQPolygonFromPointer(ptr unsafe.Pointer) *QPolygon {
	var n = new(QPolygon)
	n.SetPointer(ptr)
	return n
}
func NewQPolygon5(rectangle core.QRect_ITF, closed bool) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon5(core.PointerFromQRect(rectangle), C.char(int8(qt.GoBoolToInt(closed)))))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func (ptr *QPolygon) ContainsPoint(point core.QPoint_ITF, fillRule core.Qt__FillRule) bool {
	if ptr.Pointer() != nil {
		return C.QPolygon_ContainsPoint(ptr.Pointer(), core.PointerFromQPoint(point), C.longlong(fillRule)) != 0
	}
	return false
}

func (ptr *QPolygon) PutPoints3(index int, nPoints int, fromPolygon QPolygon_ITF, fromIndex int) {
	if ptr.Pointer() != nil {
		C.QPolygon_PutPoints3(ptr.Pointer(), C.int(int32(index)), C.int(int32(nPoints)), PointerFromQPolygon(fromPolygon), C.int(int32(fromIndex)))
	}
}

func NewQPolygon() *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon())
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon8(other QPolygon_ITF) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon8(PointerFromQPolygon(other)))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon7(polygon QPolygon_ITF) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon7(PointerFromQPolygon(polygon)))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func NewQPolygon2(size int) *QPolygon {
	var tmpValue = NewQPolygonFromPointer(C.QPolygon_NewQPolygon2(C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
	return tmpValue
}

func (ptr *QPolygon) BoundingRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QPolygon_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Intersected(r QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Intersected(ptr.Pointer(), PointerFromQPolygon(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Point2(index int) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QPolygon_Point2(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Point(index int, x int, y int) {
	if ptr.Pointer() != nil {
		C.QPolygon_Point(ptr.Pointer(), C.int(int32(index)), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPolygon) SetPoint2(index int, point core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon_SetPoint2(ptr.Pointer(), C.int(int32(index)), core.PointerFromQPoint(point))
	}
}

func (ptr *QPolygon) SetPoint(index int, x int, y int) {
	if ptr.Pointer() != nil {
		C.QPolygon_SetPoint(ptr.Pointer(), C.int(int32(index)), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QPolygon) SetPoints(nPoints int, points int) {
	if ptr.Pointer() != nil {
		C.QPolygon_SetPoints(ptr.Pointer(), C.int(int32(nPoints)), C.int(int32(points)))
	}
}

func (ptr *QPolygon) Subtracted(r QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Subtracted(ptr.Pointer(), PointerFromQPolygon(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Swap(other QPolygon_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon_Swap(ptr.Pointer(), PointerFromQPolygon(other))
	}
}

func (ptr *QPolygon) Translate2(offset core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygon_Translate2(ptr.Pointer(), core.PointerFromQPoint(offset))
	}
}

func (ptr *QPolygon) Translate(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QPolygon_Translate(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QPolygon) Translated2(offset core.QPoint_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Translated2(ptr.Pointer(), core.PointerFromQPoint(offset)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) Translated(dx int, dy int) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_Translated(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy))))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) United(r QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygon_United(ptr.Pointer(), PointerFromQPolygon(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygon) DestroyQPolygon() {
	if ptr.Pointer() != nil {
		C.QPolygon_DestroyQPolygon(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QPolygonF struct {
	core.QVector
}

type QPolygonF_ITF interface {
	core.QVector_ITF
	QPolygonF_PTR() *QPolygonF
}

func (p *QPolygonF) QPolygonF_PTR() *QPolygonF {
	return p
}

func (p *QPolygonF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVector_PTR().Pointer()
	}
	return nil
}

func (p *QPolygonF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVector_PTR().SetPointer(ptr)
	}
}

func PointerFromQPolygonF(ptr QPolygonF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPolygonF_PTR().Pointer()
	}
	return nil
}

func NewQPolygonFFromPointer(ptr unsafe.Pointer) *QPolygonF {
	var n = new(QPolygonF)
	n.SetPointer(ptr)
	return n
}
func NewQPolygonF6(polygon QPolygon_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF6(PointerFromQPolygon(polygon)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF5(rectangle core.QRectF_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF5(core.PointerFromQRectF(rectangle)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func (ptr *QPolygonF) ContainsPoint(point core.QPointF_ITF, fillRule core.Qt__FillRule) bool {
	if ptr.Pointer() != nil {
		return C.QPolygonF_ContainsPoint(ptr.Pointer(), core.PointerFromQPointF(point), C.longlong(fillRule)) != 0
	}
	return false
}

func NewQPolygonF() *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF())
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF8(other QPolygonF_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF8(PointerFromQPolygonF(other)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF7(polygon QPolygonF_ITF) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF7(PointerFromQPolygonF(polygon)))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func NewQPolygonF2(size int) *QPolygonF {
	var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_NewQPolygonF2(C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
	return tmpValue
}

func (ptr *QPolygonF) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QPolygonF_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Intersected(r QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Intersected(ptr.Pointer(), PointerFromQPolygonF(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) IsClosed() bool {
	if ptr.Pointer() != nil {
		return C.QPolygonF_IsClosed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPolygonF) Subtracted(r QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Subtracted(ptr.Pointer(), PointerFromQPolygonF(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Swap(other QPolygonF_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF_Swap(ptr.Pointer(), PointerFromQPolygonF(other))
	}
}

func (ptr *QPolygonF) ToPolygon() *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QPolygonF_ToPolygon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Translate(offset core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QPolygonF_Translate(ptr.Pointer(), core.PointerFromQPointF(offset))
	}
}

func (ptr *QPolygonF) Translate2(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QPolygonF_Translate2(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QPolygonF) Translated(offset core.QPointF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Translated(ptr.Pointer(), core.PointerFromQPointF(offset)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) Translated2(dx float64, dy float64) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_Translated2(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) United(r QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QPolygonF_United(ptr.Pointer(), PointerFromQPolygonF(r)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QPolygonF) DestroyQPolygonF() {
	if ptr.Pointer() != nil {
		C.QPolygonF_DestroyQPolygonF(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QQuaternion struct {
	ptr unsafe.Pointer
}

type QQuaternion_ITF interface {
	QQuaternion_PTR() *QQuaternion
}

func (p *QQuaternion) QQuaternion_PTR() *QQuaternion {
	return p
}

func (p *QQuaternion) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QQuaternion) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQQuaternion(ptr QQuaternion_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QQuaternion_PTR().Pointer()
	}
	return nil
}

func NewQQuaternionFromPointer(ptr unsafe.Pointer) *QQuaternion {
	var n = new(QQuaternion)
	n.SetPointer(ptr)
	return n
}

func (ptr *QQuaternion) DestroyQQuaternion() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQQuaternion() *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion())
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func NewQQuaternion5(vector QVector4D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion5(PointerFromQVector4D(vector)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func NewQQuaternion4(scalar float32, vector QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion4(C.float(scalar), PointerFromQVector3D(vector)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func NewQQuaternion3(scalar float32, xpos float32, ypos float32, zpos float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_NewQQuaternion3(C.float(scalar), C.float(xpos), C.float(ypos), C.float(zpos)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) Conjugated() *QQuaternion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_Conjugated(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
		return tmpValue
	}
	return nil
}

func QQuaternion_DotProduct(q1 QQuaternion_ITF, q2 QQuaternion_ITF) float32 {
	return float32(C.QQuaternion_QQuaternion_DotProduct(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2)))
}

func (ptr *QQuaternion) DotProduct(q1 QQuaternion_ITF, q2 QQuaternion_ITF) float32 {
	return float32(C.QQuaternion_QQuaternion_DotProduct(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2)))
}

func QQuaternion_FromAxes(xAxis QVector3D_ITF, yAxis QVector3D_ITF, zAxis QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxes(PointerFromQVector3D(xAxis), PointerFromQVector3D(yAxis), PointerFromQVector3D(zAxis)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromAxes(xAxis QVector3D_ITF, yAxis QVector3D_ITF, zAxis QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxes(PointerFromQVector3D(xAxis), PointerFromQVector3D(yAxis), PointerFromQVector3D(zAxis)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromAxisAndAngle(axis QVector3D_ITF, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle(PointerFromQVector3D(axis), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromAxisAndAngle(axis QVector3D_ITF, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle(PointerFromQVector3D(axis), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromAxisAndAngle2(x float32, y float32, z float32, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle2(C.float(x), C.float(y), C.float(z), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromAxisAndAngle2(x float32, y float32, z float32, angle float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromAxisAndAngle2(C.float(x), C.float(y), C.float(z), C.float(angle)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromDirection(direction QVector3D_ITF, up QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromDirection(PointerFromQVector3D(direction), PointerFromQVector3D(up)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromDirection(direction QVector3D_ITF, up QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromDirection(PointerFromQVector3D(direction), PointerFromQVector3D(up)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromEulerAngles2(eulerAngles QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles2(PointerFromQVector3D(eulerAngles)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromEulerAngles2(eulerAngles QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles2(PointerFromQVector3D(eulerAngles)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func QQuaternion_FromEulerAngles(pitch float32, yaw float32, roll float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles(C.float(pitch), C.float(yaw), C.float(roll)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) FromEulerAngles(pitch float32, yaw float32, roll float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_FromEulerAngles(C.float(pitch), C.float(yaw), C.float(roll)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) GetAxes(xAxis QVector3D_ITF, yAxis QVector3D_ITF, zAxis QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetAxes(ptr.Pointer(), PointerFromQVector3D(xAxis), PointerFromQVector3D(yAxis), PointerFromQVector3D(zAxis))
	}
}

func (ptr *QQuaternion) GetAxisAndAngle2(axis QVector3D_ITF, angle float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetAxisAndAngle2(ptr.Pointer(), PointerFromQVector3D(axis), C.float(angle))
	}
}

func (ptr *QQuaternion) GetAxisAndAngle(x float32, y float32, z float32, angle float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetAxisAndAngle(ptr.Pointer(), C.float(x), C.float(y), C.float(z), C.float(angle))
	}
}

func (ptr *QQuaternion) GetEulerAngles(pitch float32, yaw float32, roll float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_GetEulerAngles(ptr.Pointer(), C.float(pitch), C.float(yaw), C.float(roll))
	}
}

func (ptr *QQuaternion) Inverted() *QQuaternion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_Inverted(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) IsIdentity() bool {
	if ptr.Pointer() != nil {
		return C.QQuaternion_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QQuaternion) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QQuaternion_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QQuaternion) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func QQuaternion_Nlerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Nlerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) Nlerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Nlerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) Normalize() {
	if ptr.Pointer() != nil {
		C.QQuaternion_Normalize(ptr.Pointer())
	}
}

func (ptr *QQuaternion) Normalized() *QQuaternion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) RotatedVector(vector QVector3D_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QQuaternion_RotatedVector(ptr.Pointer(), PointerFromQVector3D(vector)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func QQuaternion_RotationTo(from QVector3D_ITF, to QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_RotationTo(PointerFromQVector3D(from), PointerFromQVector3D(to)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) RotationTo(from QVector3D_ITF, to QVector3D_ITF) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_RotationTo(PointerFromQVector3D(from), PointerFromQVector3D(to)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) Scalar() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Scalar(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) SetScalar(scalar float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetScalar(ptr.Pointer(), C.float(scalar))
	}
}

func (ptr *QQuaternion) SetVector(vector QVector3D_ITF) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetVector(ptr.Pointer(), PointerFromQVector3D(vector))
	}
}

func (ptr *QQuaternion) SetVector2(x float32, y float32, z float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetVector2(ptr.Pointer(), C.float(x), C.float(y), C.float(z))
	}
}

func (ptr *QQuaternion) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QQuaternion) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QQuaternion) SetZ(z float32) {
	if ptr.Pointer() != nil {
		C.QQuaternion_SetZ(ptr.Pointer(), C.float(z))
	}
}

func QQuaternion_Slerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Slerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) Slerp(q1 QQuaternion_ITF, q2 QQuaternion_ITF, t float32) *QQuaternion {
	var tmpValue = NewQQuaternionFromPointer(C.QQuaternion_QQuaternion_Slerp(PointerFromQQuaternion(q1), PointerFromQQuaternion(q2), C.float(t)))
	runtime.SetFinalizer(tmpValue, (*QQuaternion).DestroyQQuaternion)
	return tmpValue
}

func (ptr *QQuaternion) ToEulerAngles() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QQuaternion_ToEulerAngles(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) ToVector4D() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QQuaternion_ToVector4D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) Vector() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QQuaternion_Vector(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QQuaternion) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QQuaternion) Z() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QQuaternion_Z(ptr.Pointer()))
	}
	return 0
}

type QRadialGradient struct {
	QGradient
}

type QRadialGradient_ITF interface {
	QGradient_ITF
	QRadialGradient_PTR() *QRadialGradient
}

func (p *QRadialGradient) QRadialGradient_PTR() *QRadialGradient {
	return p
}

func (p *QRadialGradient) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGradient_PTR().Pointer()
	}
	return nil
}

func (p *QRadialGradient) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGradient_PTR().SetPointer(ptr)
	}
}

func PointerFromQRadialGradient(ptr QRadialGradient_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRadialGradient_PTR().Pointer()
	}
	return nil
}

func NewQRadialGradientFromPointer(ptr unsafe.Pointer) *QRadialGradient {
	var n = new(QRadialGradient)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRadialGradient) DestroyQRadialGradient() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQRadialGradient() *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient())
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient6(center core.QPointF_ITF, centerRadius float64, focalPoint core.QPointF_ITF, focalRadius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient6(core.PointerFromQPointF(center), C.double(centerRadius), core.PointerFromQPointF(focalPoint), C.double(focalRadius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient4(center core.QPointF_ITF, radius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient4(core.PointerFromQPointF(center), C.double(radius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient2(center core.QPointF_ITF, radius float64, focalPoint core.QPointF_ITF) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient2(core.PointerFromQPointF(center), C.double(radius), core.PointerFromQPointF(focalPoint)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient7(cx float64, cy float64, centerRadius float64, fx float64, fy float64, focalRadius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient7(C.double(cx), C.double(cy), C.double(centerRadius), C.double(fx), C.double(fy), C.double(focalRadius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient5(cx float64, cy float64, radius float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient5(C.double(cx), C.double(cy), C.double(radius)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func NewQRadialGradient3(cx float64, cy float64, radius float64, fx float64, fy float64) *QRadialGradient {
	var tmpValue = NewQRadialGradientFromPointer(C.QRadialGradient_NewQRadialGradient3(C.double(cx), C.double(cy), C.double(radius), C.double(fx), C.double(fy)))
	runtime.SetFinalizer(tmpValue, (*QRadialGradient).DestroyQRadialGradient)
	return tmpValue
}

func (ptr *QRadialGradient) Center() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QRadialGradient_Center(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRadialGradient) CenterRadius() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_CenterRadius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) FocalPoint() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QRadialGradient_FocalPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRadialGradient) FocalRadius() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_FocalRadius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) Radius() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRadialGradient_Radius(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRadialGradient) SetCenter(center core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenter(ptr.Pointer(), core.PointerFromQPointF(center))
	}
}

func (ptr *QRadialGradient) SetCenter2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenter2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QRadialGradient) SetCenterRadius(radius float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetCenterRadius(ptr.Pointer(), C.double(radius))
	}
}

func (ptr *QRadialGradient) SetFocalPoint(focalPoint core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalPoint(ptr.Pointer(), core.PointerFromQPointF(focalPoint))
	}
}

func (ptr *QRadialGradient) SetFocalPoint2(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalPoint2(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QRadialGradient) SetFocalRadius(radius float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetFocalRadius(ptr.Pointer(), C.double(radius))
	}
}

func (ptr *QRadialGradient) SetRadius(radius float64) {
	if ptr.Pointer() != nil {
		C.QRadialGradient_SetRadius(ptr.Pointer(), C.double(radius))
	}
}

type QRasterPaintEngine struct {
	QPaintEngine
}

type QRasterPaintEngine_ITF interface {
	QPaintEngine_ITF
	QRasterPaintEngine_PTR() *QRasterPaintEngine
}

func (p *QRasterPaintEngine) QRasterPaintEngine_PTR() *QRasterPaintEngine {
	return p
}

func (p *QRasterPaintEngine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintEngine_PTR().Pointer()
	}
	return nil
}

func (p *QRasterPaintEngine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintEngine_PTR().SetPointer(ptr)
	}
}

func PointerFromQRasterPaintEngine(ptr QRasterPaintEngine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRasterPaintEngine_PTR().Pointer()
	}
	return nil
}

func NewQRasterPaintEngineFromPointer(ptr unsafe.Pointer) *QRasterPaintEngine {
	var n = new(QRasterPaintEngine)
	n.SetPointer(ptr)
	return n
}

type QRasterWindow struct {
	QPaintDeviceWindow
}

type QRasterWindow_ITF interface {
	QPaintDeviceWindow_ITF
	QRasterWindow_PTR() *QRasterWindow
}

func (p *QRasterWindow) QRasterWindow_PTR() *QRasterWindow {
	return p
}

func (p *QRasterWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QPaintDeviceWindow_PTR().Pointer()
	}
	return nil
}

func (p *QRasterWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QPaintDeviceWindow_PTR().SetPointer(ptr)
	}
}

func PointerFromQRasterWindow(ptr QRasterWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRasterWindow_PTR().Pointer()
	}
	return nil
}

func NewQRasterWindowFromPointer(ptr unsafe.Pointer) *QRasterWindow {
	var n = new(QRasterWindow)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRasterWindow) DestroyQRasterWindow() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func NewQRasterWindow(parent QWindow_ITF) *QRasterWindow {
	var tmpValue = NewQRasterWindowFromPointer(C.QRasterWindow_NewQRasterWindow(PointerFromQWindow(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQRasterWindow_PaintEvent
func callbackQRasterWindow_PaintEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::paintEvent"); signal != nil {
		signal.(func(*QPaintEvent))(NewQPaintEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).PaintEventDefault(NewQPaintEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectPaintEvent(f func(event *QPaintEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::paintEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectPaintEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::paintEvent")
	}
}

func (ptr *QRasterWindow) PaintEvent(event QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_PaintEvent(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

func (ptr *QRasterWindow) PaintEventDefault(event QPaintEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_PaintEventDefault(ptr.Pointer(), PointerFromQPaintEvent(event))
	}
}

//export callbackQRasterWindow_Update3
func callbackQRasterWindow_Update3(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::update3"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).Update3Default()
	}
}

func (ptr *QRasterWindow) ConnectUpdate3(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::update3", f)
	}
}

func (ptr *QRasterWindow) DisconnectUpdate3() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::update3")
	}
}

func (ptr *QRasterWindow) Update3() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_Update3(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) Update3Default() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_Update3Default(ptr.Pointer())
	}
}

//export callbackQRasterWindow_SetHeight
func callbackQRasterWindow_SetHeight(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setHeight"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetHeightDefault(int(int32(arg)))
	}
}

func (ptr *QRasterWindow) ConnectSetHeight(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setHeight", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setHeight")
	}
}

func (ptr *QRasterWindow) SetHeight(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetHeight(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QRasterWindow) SetHeightDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetHeightDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQRasterWindow_SetMaximumHeight
func callbackQRasterWindow_SetMaximumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setMaximumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetMaximumHeightDefault(int(int32(h)))
	}
}

func (ptr *QRasterWindow) ConnectSetMaximumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMaximumHeight", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMaximumHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMaximumHeight")
	}
}

func (ptr *QRasterWindow) SetMaximumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMaximumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QRasterWindow) SetMaximumHeightDefault(h int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMaximumHeightDefault(ptr.Pointer(), C.int(int32(h)))
	}
}

//export callbackQRasterWindow_SetMaximumWidth
func callbackQRasterWindow_SetMaximumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setMaximumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetMaximumWidthDefault(int(int32(w)))
	}
}

func (ptr *QRasterWindow) ConnectSetMaximumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMaximumWidth", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMaximumWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMaximumWidth")
	}
}

func (ptr *QRasterWindow) SetMaximumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMaximumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QRasterWindow) SetMaximumWidthDefault(w int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMaximumWidthDefault(ptr.Pointer(), C.int(int32(w)))
	}
}

//export callbackQRasterWindow_SetMinimumHeight
func callbackQRasterWindow_SetMinimumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setMinimumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetMinimumHeightDefault(int(int32(h)))
	}
}

func (ptr *QRasterWindow) ConnectSetMinimumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMinimumHeight", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMinimumHeight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMinimumHeight")
	}
}

func (ptr *QRasterWindow) SetMinimumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMinimumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

func (ptr *QRasterWindow) SetMinimumHeightDefault(h int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMinimumHeightDefault(ptr.Pointer(), C.int(int32(h)))
	}
}

//export callbackQRasterWindow_SetMinimumWidth
func callbackQRasterWindow_SetMinimumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setMinimumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetMinimumWidthDefault(int(int32(w)))
	}
}

func (ptr *QRasterWindow) ConnectSetMinimumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMinimumWidth", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetMinimumWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setMinimumWidth")
	}
}

func (ptr *QRasterWindow) SetMinimumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMinimumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QRasterWindow) SetMinimumWidthDefault(w int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetMinimumWidthDefault(ptr.Pointer(), C.int(int32(w)))
	}
}

//export callbackQRasterWindow_SetTitle
func callbackQRasterWindow_SetTitle(ptr unsafe.Pointer, vqs C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setTitle"); signal != nil {
		signal.(func(string))(cGoUnpackString(vqs))
	} else {
		NewQRasterWindowFromPointer(ptr).SetTitleDefault(cGoUnpackString(vqs))
	}
}

func (ptr *QRasterWindow) ConnectSetTitle(f func(vqs string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setTitle", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetTitle() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setTitle")
	}
}

func (ptr *QRasterWindow) SetTitle(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QRasterWindow_SetTitle(ptr.Pointer(), vqsC)
	}
}

func (ptr *QRasterWindow) SetTitleDefault(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QRasterWindow_SetTitleDefault(ptr.Pointer(), vqsC)
	}
}

//export callbackQRasterWindow_SetVisible
func callbackQRasterWindow_SetVisible(ptr unsafe.Pointer, visible C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setVisible"); signal != nil {
		signal.(func(bool))(int8(visible) != 0)
	} else {
		NewQRasterWindowFromPointer(ptr).SetVisibleDefault(int8(visible) != 0)
	}
}

func (ptr *QRasterWindow) ConnectSetVisible(f func(visible bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setVisible", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetVisible() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setVisible")
	}
}

func (ptr *QRasterWindow) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QRasterWindow) SetVisibleDefault(visible bool) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetVisibleDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQRasterWindow_SetWidth
func callbackQRasterWindow_SetWidth(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setWidth"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetWidthDefault(int(int32(arg)))
	}
}

func (ptr *QRasterWindow) ConnectSetWidth(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setWidth", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetWidth() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setWidth")
	}
}

func (ptr *QRasterWindow) SetWidth(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetWidth(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QRasterWindow) SetWidthDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetWidthDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQRasterWindow_SetX
func callbackQRasterWindow_SetX(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setX"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetXDefault(int(int32(arg)))
	}
}

func (ptr *QRasterWindow) ConnectSetX(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setX", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetX() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setX")
	}
}

func (ptr *QRasterWindow) SetX(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetX(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QRasterWindow) SetXDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetXDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQRasterWindow_SetY
func callbackQRasterWindow_SetY(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::setY"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	} else {
		NewQRasterWindowFromPointer(ptr).SetYDefault(int(int32(arg)))
	}
}

func (ptr *QRasterWindow) ConnectSetY(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setY", f)
	}
}

func (ptr *QRasterWindow) DisconnectSetY() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::setY")
	}
}

func (ptr *QRasterWindow) SetY(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetY(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QRasterWindow) SetYDefault(arg int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_SetYDefault(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQRasterWindow_Alert
func callbackQRasterWindow_Alert(ptr unsafe.Pointer, msec C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::alert"); signal != nil {
		signal.(func(int))(int(int32(msec)))
	} else {
		NewQRasterWindowFromPointer(ptr).AlertDefault(int(int32(msec)))
	}
}

func (ptr *QRasterWindow) ConnectAlert(f func(msec int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::alert", f)
	}
}

func (ptr *QRasterWindow) DisconnectAlert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::alert")
	}
}

func (ptr *QRasterWindow) Alert(msec int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_Alert(ptr.Pointer(), C.int(int32(msec)))
	}
}

func (ptr *QRasterWindow) AlertDefault(msec int) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_AlertDefault(ptr.Pointer(), C.int(int32(msec)))
	}
}

//export callbackQRasterWindow_Close
func callbackQRasterWindow_Close(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRasterWindowFromPointer(ptr).CloseDefault())))
}

func (ptr *QRasterWindow) ConnectClose(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::close", f)
	}
}

func (ptr *QRasterWindow) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::close")
	}
}

func (ptr *QRasterWindow) Close() bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_Close(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRasterWindow) CloseDefault() bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_CloseDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRasterWindow_Event
func callbackQRasterWindow_Event(ptr unsafe.Pointer, ev unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(ev)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRasterWindowFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev)))))
}

func (ptr *QRasterWindow) ConnectEvent(f func(ev *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::event", f)
	}
}

func (ptr *QRasterWindow) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::event")
	}
}

func (ptr *QRasterWindow) Event(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_Event(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

func (ptr *QRasterWindow) EventDefault(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

//export callbackQRasterWindow_ExposeEvent
func callbackQRasterWindow_ExposeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::exposeEvent"); signal != nil {
		signal.(func(*QExposeEvent))(NewQExposeEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).ExposeEventDefault(NewQExposeEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectExposeEvent(f func(ev *QExposeEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::exposeEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectExposeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::exposeEvent")
	}
}

func (ptr *QRasterWindow) ExposeEvent(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ExposeEvent(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QRasterWindow) ExposeEventDefault(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ExposeEventDefault(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

//export callbackQRasterWindow_FocusInEvent
func callbackQRasterWindow_FocusInEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::focusInEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).FocusInEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectFocusInEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::focusInEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectFocusInEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::focusInEvent")
	}
}

func (ptr *QRasterWindow) FocusInEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusInEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QRasterWindow) FocusInEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusInEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQRasterWindow_FocusObject
func callbackQRasterWindow_FocusObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::focusObject"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQRasterWindowFromPointer(ptr).FocusObjectDefault())
}

func (ptr *QRasterWindow) ConnectFocusObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::focusObject", f)
	}
}

func (ptr *QRasterWindow) DisconnectFocusObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::focusObject")
	}
}

func (ptr *QRasterWindow) FocusObject() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QRasterWindow_FocusObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QRasterWindow) FocusObjectDefault() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QRasterWindow_FocusObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQRasterWindow_FocusOutEvent
func callbackQRasterWindow_FocusOutEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::focusOutEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).FocusOutEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectFocusOutEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::focusOutEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectFocusOutEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::focusOutEvent")
	}
}

func (ptr *QRasterWindow) FocusOutEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusOutEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QRasterWindow) FocusOutEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_FocusOutEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQRasterWindow_Format
func callbackQRasterWindow_Format(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQRasterWindowFromPointer(ptr).FormatDefault())
}

func (ptr *QRasterWindow) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::format", f)
	}
}

func (ptr *QRasterWindow) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::format")
	}
}

func (ptr *QRasterWindow) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QRasterWindow_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QRasterWindow) FormatDefault() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QRasterWindow_FormatDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

//export callbackQRasterWindow_Hide
func callbackQRasterWindow_Hide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::hide"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).HideDefault()
	}
}

func (ptr *QRasterWindow) ConnectHide(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::hide", f)
	}
}

func (ptr *QRasterWindow) DisconnectHide() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::hide")
	}
}

func (ptr *QRasterWindow) Hide() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_Hide(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) HideDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_HideDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_HideEvent
func callbackQRasterWindow_HideEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::hideEvent"); signal != nil {
		signal.(func(*QHideEvent))(NewQHideEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).HideEventDefault(NewQHideEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectHideEvent(f func(ev *QHideEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::hideEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectHideEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::hideEvent")
	}
}

func (ptr *QRasterWindow) HideEvent(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_HideEvent(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QRasterWindow) HideEventDefault(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_HideEventDefault(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

//export callbackQRasterWindow_KeyPressEvent
func callbackQRasterWindow_KeyPressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::keyPressEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).KeyPressEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectKeyPressEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::keyPressEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectKeyPressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::keyPressEvent")
	}
}

func (ptr *QRasterWindow) KeyPressEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyPressEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QRasterWindow) KeyPressEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyPressEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQRasterWindow_KeyReleaseEvent
func callbackQRasterWindow_KeyReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::keyReleaseEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).KeyReleaseEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectKeyReleaseEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::keyReleaseEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectKeyReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::keyReleaseEvent")
	}
}

func (ptr *QRasterWindow) KeyReleaseEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyReleaseEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QRasterWindow) KeyReleaseEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_KeyReleaseEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQRasterWindow_Lower
func callbackQRasterWindow_Lower(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::lower"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).LowerDefault()
	}
}

func (ptr *QRasterWindow) ConnectLower(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::lower", f)
	}
}

func (ptr *QRasterWindow) DisconnectLower() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::lower")
	}
}

func (ptr *QRasterWindow) Lower() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_Lower(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) LowerDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_LowerDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_MouseDoubleClickEvent
func callbackQRasterWindow_MouseDoubleClickEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::mouseDoubleClickEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MouseDoubleClickEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMouseDoubleClickEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mouseDoubleClickEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMouseDoubleClickEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mouseDoubleClickEvent")
	}
}

func (ptr *QRasterWindow) MouseDoubleClickEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MouseDoubleClickEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MouseMoveEvent
func callbackQRasterWindow_MouseMoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::mouseMoveEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MouseMoveEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMouseMoveEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mouseMoveEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMouseMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mouseMoveEvent")
	}
}

func (ptr *QRasterWindow) MouseMoveEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseMoveEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MouseMoveEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseMoveEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MousePressEvent
func callbackQRasterWindow_MousePressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::mousePressEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MousePressEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMousePressEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mousePressEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMousePressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mousePressEvent")
	}
}

func (ptr *QRasterWindow) MousePressEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MousePressEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MousePressEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MousePressEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MouseReleaseEvent
func callbackQRasterWindow_MouseReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::mouseReleaseEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MouseReleaseEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMouseReleaseEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mouseReleaseEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMouseReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::mouseReleaseEvent")
	}
}

func (ptr *QRasterWindow) MouseReleaseEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseReleaseEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QRasterWindow) MouseReleaseEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQRasterWindow_MoveEvent
func callbackQRasterWindow_MoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::moveEvent"); signal != nil {
		signal.(func(*QMoveEvent))(NewQMoveEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).MoveEventDefault(NewQMoveEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectMoveEvent(f func(ev *QMoveEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::moveEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::moveEvent")
	}
}

func (ptr *QRasterWindow) MoveEvent(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MoveEvent(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

func (ptr *QRasterWindow) MoveEventDefault(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_MoveEventDefault(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

//export callbackQRasterWindow_NativeEvent
func callbackQRasterWindow_NativeEvent(ptr unsafe.Pointer, eventType unsafe.Pointer, message unsafe.Pointer, result C.long) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::nativeEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QByteArray, unsafe.Pointer, int) bool)(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRasterWindowFromPointer(ptr).NativeEventDefault(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
}

func (ptr *QRasterWindow) ConnectNativeEvent(f func(eventType *core.QByteArray, message unsafe.Pointer, result int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::nativeEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectNativeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::nativeEvent")
	}
}

func (ptr *QRasterWindow) NativeEvent(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_NativeEvent(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

func (ptr *QRasterWindow) NativeEventDefault(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_NativeEventDefault(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

//export callbackQRasterWindow_Raise
func callbackQRasterWindow_Raise(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::raise"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).RaiseDefault()
	}
}

func (ptr *QRasterWindow) ConnectRaise(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::raise", f)
	}
}

func (ptr *QRasterWindow) DisconnectRaise() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::raise")
	}
}

func (ptr *QRasterWindow) Raise() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_Raise(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) RaiseDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_RaiseDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_RequestActivate
func callbackQRasterWindow_RequestActivate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::requestActivate"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).RequestActivateDefault()
	}
}

func (ptr *QRasterWindow) ConnectRequestActivate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::requestActivate", f)
	}
}

func (ptr *QRasterWindow) DisconnectRequestActivate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::requestActivate")
	}
}

func (ptr *QRasterWindow) RequestActivate() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_RequestActivate(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) RequestActivateDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_RequestActivateDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_RequestUpdate
func callbackQRasterWindow_RequestUpdate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::requestUpdate"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).RequestUpdateDefault()
	}
}

func (ptr *QRasterWindow) ConnectRequestUpdate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::requestUpdate", f)
	}
}

func (ptr *QRasterWindow) DisconnectRequestUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::requestUpdate")
	}
}

func (ptr *QRasterWindow) RequestUpdate() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_RequestUpdate(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) RequestUpdateDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_RequestUpdateDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ResizeEvent
func callbackQRasterWindow_ResizeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::resizeEvent"); signal != nil {
		signal.(func(*QResizeEvent))(NewQResizeEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).ResizeEventDefault(NewQResizeEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectResizeEvent(f func(ev *QResizeEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::resizeEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectResizeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::resizeEvent")
	}
}

func (ptr *QRasterWindow) ResizeEvent(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ResizeEvent(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QRasterWindow) ResizeEventDefault(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ResizeEventDefault(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

//export callbackQRasterWindow_Show
func callbackQRasterWindow_Show(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::show"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).ShowDefault()
	}
}

func (ptr *QRasterWindow) ConnectShow(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::show", f)
	}
}

func (ptr *QRasterWindow) DisconnectShow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::show")
	}
}

func (ptr *QRasterWindow) Show() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_Show(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) ShowDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowEvent
func callbackQRasterWindow_ShowEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::showEvent"); signal != nil {
		signal.(func(*QShowEvent))(NewQShowEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).ShowEventDefault(NewQShowEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectShowEvent(f func(ev *QShowEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showEvent")
	}
}

func (ptr *QRasterWindow) ShowEvent(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowEvent(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

func (ptr *QRasterWindow) ShowEventDefault(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowEventDefault(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

//export callbackQRasterWindow_ShowFullScreen
func callbackQRasterWindow_ShowFullScreen(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::showFullScreen"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).ShowFullScreenDefault()
	}
}

func (ptr *QRasterWindow) ConnectShowFullScreen(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showFullScreen", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowFullScreen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showFullScreen")
	}
}

func (ptr *QRasterWindow) ShowFullScreen() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowFullScreen(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) ShowFullScreenDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowFullScreenDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowMaximized
func callbackQRasterWindow_ShowMaximized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::showMaximized"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).ShowMaximizedDefault()
	}
}

func (ptr *QRasterWindow) ConnectShowMaximized(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showMaximized", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowMaximized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showMaximized")
	}
}

func (ptr *QRasterWindow) ShowMaximized() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowMaximized(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) ShowMaximizedDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowMaximizedDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowMinimized
func callbackQRasterWindow_ShowMinimized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::showMinimized"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).ShowMinimizedDefault()
	}
}

func (ptr *QRasterWindow) ConnectShowMinimized(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showMinimized", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowMinimized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showMinimized")
	}
}

func (ptr *QRasterWindow) ShowMinimized() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowMinimized(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) ShowMinimizedDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowMinimizedDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_ShowNormal
func callbackQRasterWindow_ShowNormal(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::showNormal"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).ShowNormalDefault()
	}
}

func (ptr *QRasterWindow) ConnectShowNormal(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showNormal", f)
	}
}

func (ptr *QRasterWindow) DisconnectShowNormal() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::showNormal")
	}
}

func (ptr *QRasterWindow) ShowNormal() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowNormal(ptr.Pointer())
	}
}

func (ptr *QRasterWindow) ShowNormalDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ShowNormalDefault(ptr.Pointer())
	}
}

//export callbackQRasterWindow_Size
func callbackQRasterWindow_Size(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQRasterWindowFromPointer(ptr).SizeDefault())
}

func (ptr *QRasterWindow) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::size", f)
	}
}

func (ptr *QRasterWindow) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::size")
	}
}

func (ptr *QRasterWindow) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QRasterWindow_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QRasterWindow) SizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QRasterWindow_SizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQRasterWindow_SurfaceType
func callbackQRasterWindow_SurfaceType(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(NewQRasterWindowFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QRasterWindow) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::surfaceType", f)
	}
}

func (ptr *QRasterWindow) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::surfaceType")
	}
}

func (ptr *QRasterWindow) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QRasterWindow_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRasterWindow) SurfaceTypeDefault() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QRasterWindow_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQRasterWindow_TabletEvent
func callbackQRasterWindow_TabletEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::tabletEvent"); signal != nil {
		signal.(func(*QTabletEvent))(NewQTabletEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).TabletEventDefault(NewQTabletEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectTabletEvent(f func(ev *QTabletEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::tabletEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectTabletEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::tabletEvent")
	}
}

func (ptr *QRasterWindow) TabletEvent(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_TabletEvent(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

func (ptr *QRasterWindow) TabletEventDefault(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_TabletEventDefault(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

//export callbackQRasterWindow_TouchEvent
func callbackQRasterWindow_TouchEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::touchEvent"); signal != nil {
		signal.(func(*QTouchEvent))(NewQTouchEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).TouchEventDefault(NewQTouchEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectTouchEvent(f func(ev *QTouchEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::touchEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectTouchEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::touchEvent")
	}
}

func (ptr *QRasterWindow) TouchEvent(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_TouchEvent(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QRasterWindow) TouchEventDefault(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_TouchEventDefault(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

//export callbackQRasterWindow_WheelEvent
func callbackQRasterWindow_WheelEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::wheelEvent"); signal != nil {
		signal.(func(*QWheelEvent))(NewQWheelEventFromPointer(ev))
	} else {
		NewQRasterWindowFromPointer(ptr).WheelEventDefault(NewQWheelEventFromPointer(ev))
	}
}

func (ptr *QRasterWindow) ConnectWheelEvent(f func(ev *QWheelEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::wheelEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::wheelEvent")
	}
}

func (ptr *QRasterWindow) WheelEvent(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_WheelEvent(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QRasterWindow) WheelEventDefault(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_WheelEventDefault(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

//export callbackQRasterWindow_TimerEvent
func callbackQRasterWindow_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::timerEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::timerEvent")
	}
}

func (ptr *QRasterWindow) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRasterWindow) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRasterWindow_ChildEvent
func callbackQRasterWindow_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::childEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::childEvent")
	}
}

func (ptr *QRasterWindow) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRasterWindow) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRasterWindow_ConnectNotify
func callbackQRasterWindow_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRasterWindowFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRasterWindow) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::connectNotify", f)
	}
}

func (ptr *QRasterWindow) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::connectNotify")
	}
}

func (ptr *QRasterWindow) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRasterWindow) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRasterWindow_CustomEvent
func callbackQRasterWindow_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRasterWindowFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRasterWindow) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::customEvent", f)
	}
}

func (ptr *QRasterWindow) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::customEvent")
	}
}

func (ptr *QRasterWindow) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRasterWindow) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRasterWindow_DeleteLater
func callbackQRasterWindow_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQRasterWindowFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QRasterWindow) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::deleteLater", f)
	}
}

func (ptr *QRasterWindow) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::deleteLater")
	}
}

func (ptr *QRasterWindow) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRasterWindow) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QRasterWindow_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRasterWindow_DisconnectNotify
func callbackQRasterWindow_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRasterWindowFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRasterWindow) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::disconnectNotify", f)
	}
}

func (ptr *QRasterWindow) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::disconnectNotify")
	}
}

func (ptr *QRasterWindow) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRasterWindow) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRasterWindow_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRasterWindow_EventFilter
func callbackQRasterWindow_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRasterWindowFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QRasterWindow) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::eventFilter", f)
	}
}

func (ptr *QRasterWindow) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::eventFilter")
	}
}

func (ptr *QRasterWindow) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRasterWindow) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRasterWindow_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRasterWindow_MetaObject
func callbackQRasterWindow_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRasterWindowFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRasterWindow) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::metaObject", f)
	}
}

func (ptr *QRasterWindow) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::metaObject")
	}
}

func (ptr *QRasterWindow) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRasterWindow_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRasterWindow) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRasterWindow_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//export callbackQRasterWindow_Metric
func callbackQRasterWindow_Metric(ptr unsafe.Pointer, metric C.longlong) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::metric"); signal != nil {
		return C.int(int32(signal.(func(QPaintDevice__PaintDeviceMetric) int)(QPaintDevice__PaintDeviceMetric(metric))))
	}

	return C.int(int32(NewQRasterWindowFromPointer(ptr).MetricDefault(QPaintDevice__PaintDeviceMetric(metric))))
}

func (ptr *QRasterWindow) ConnectMetric(f func(metric QPaintDevice__PaintDeviceMetric) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::metric", f)
	}
}

func (ptr *QRasterWindow) DisconnectMetric() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::metric")
	}
}

func (ptr *QRasterWindow) Metric(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRasterWindow_Metric(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

func (ptr *QRasterWindow) MetricDefault(metric QPaintDevice__PaintDeviceMetric) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRasterWindow_MetricDefault(ptr.Pointer(), C.longlong(metric))))
	}
	return 0
}

//export callbackQRasterWindow_PaintEngine
func callbackQRasterWindow_PaintEngine(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRasterWindow::paintEngine"); signal != nil {
		return PointerFromQPaintEngine(signal.(func() *QPaintEngine)())
	}

	return PointerFromQPaintEngine(NewQRasterWindowFromPointer(ptr).PaintEngineDefault())
}

func (ptr *QRasterWindow) ConnectPaintEngine(f func() *QPaintEngine) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::paintEngine", f)
	}
}

func (ptr *QRasterWindow) DisconnectPaintEngine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRasterWindow::paintEngine")
	}
}

func (ptr *QRasterWindow) PaintEngine() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QRasterWindow_PaintEngine(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRasterWindow) PaintEngineDefault() *QPaintEngine {
	if ptr.Pointer() != nil {
		return NewQPaintEngineFromPointer(C.QRasterWindow_PaintEngineDefault(ptr.Pointer()))
	}
	return nil
}

//QRawFont::AntialiasingType
type QRawFont__AntialiasingType int64

const (
	QRawFont__PixelAntialiasing    = QRawFont__AntialiasingType(0)
	QRawFont__SubPixelAntialiasing = QRawFont__AntialiasingType(1)
)

//QRawFont::LayoutFlag
type QRawFont__LayoutFlag int64

const (
	QRawFont__SeparateAdvances = QRawFont__LayoutFlag(0)
	QRawFont__KernedAdvances   = QRawFont__LayoutFlag(1)
	QRawFont__UseDesignMetrics = QRawFont__LayoutFlag(2)
)

type QRawFont struct {
	ptr unsafe.Pointer
}

type QRawFont_ITF interface {
	QRawFont_PTR() *QRawFont
}

func (p *QRawFont) QRawFont_PTR() *QRawFont {
	return p
}

func (p *QRawFont) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRawFont) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRawFont(ptr QRawFont_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRawFont_PTR().Pointer()
	}
	return nil
}

func NewQRawFontFromPointer(ptr unsafe.Pointer) *QRawFont {
	var n = new(QRawFont)
	n.SetPointer(ptr)
	return n
}
func NewQRawFont() *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont())
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func NewQRawFont3(fontData core.QByteArray_ITF, pixelSize float64, hintingPreference QFont__HintingPreference) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont3(core.PointerFromQByteArray(fontData), C.double(pixelSize), C.longlong(hintingPreference)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func NewQRawFont4(other QRawFont_ITF) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont4(PointerFromQRawFont(other)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func NewQRawFont2(fileName string, pixelSize float64, hintingPreference QFont__HintingPreference) *QRawFont {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_NewQRawFont2(fileNameC, C.double(pixelSize), C.longlong(hintingPreference)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func (ptr *QRawFont) AdvancesForGlyphIndexes3(glyphIndexes uint, advances core.QPointF_ITF, numGlyphs int) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_AdvancesForGlyphIndexes3(ptr.Pointer(), C.uint(uint32(glyphIndexes)), core.PointerFromQPointF(advances), C.int(int32(numGlyphs))) != 0
	}
	return false
}

func (ptr *QRawFont) AdvancesForGlyphIndexes4(glyphIndexes uint, advances core.QPointF_ITF, numGlyphs int, layoutFlags QRawFont__LayoutFlag) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_AdvancesForGlyphIndexes4(ptr.Pointer(), C.uint(uint32(glyphIndexes)), core.PointerFromQPointF(advances), C.int(int32(numGlyphs)), C.longlong(layoutFlags)) != 0
	}
	return false
}

func (ptr *QRawFont) AlphaMapForGlyph(glyphIndex uint, antialiasingType QRawFont__AntialiasingType, transform QTransform_ITF) *QImage {
	if ptr.Pointer() != nil {
		var tmpValue = NewQImageFromPointer(C.QRawFont_AlphaMapForGlyph(ptr.Pointer(), C.uint(uint32(glyphIndex)), C.longlong(antialiasingType), PointerFromQTransform(transform)))
		runtime.SetFinalizer(tmpValue, (*QImage).DestroyQImage)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) AverageCharWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_AverageCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) BoundingRect(glyphIndex uint) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QRawFont_BoundingRect(ptr.Pointer(), C.uint(uint32(glyphIndex))))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) FamilyName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRawFont_FamilyName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRawFont) FontTable(tagName string) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tagNameC = C.CString(tagName)
		defer C.free(unsafe.Pointer(tagNameC))
		var tmpValue = core.NewQByteArrayFromPointer(C.QRawFont_FontTable(ptr.Pointer(), tagNameC))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func QRawFont_FromFont(font QFont_ITF, writingSystem QFontDatabase__WritingSystem) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_QRawFont_FromFont(PointerFromQFont(font), C.longlong(writingSystem)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func (ptr *QRawFont) FromFont(font QFont_ITF, writingSystem QFontDatabase__WritingSystem) *QRawFont {
	var tmpValue = NewQRawFontFromPointer(C.QRawFont_QRawFont_FromFont(PointerFromQFont(font), C.longlong(writingSystem)))
	runtime.SetFinalizer(tmpValue, (*QRawFont).DestroyQRawFont)
	return tmpValue
}

func (ptr *QRawFont) GlyphIndexesForChars(chars core.QChar_ITF, numChars int, glyphIndexes uint, numGlyphs int) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_GlyphIndexesForChars(ptr.Pointer(), core.PointerFromQChar(chars), C.int(int32(numChars)), C.uint(uint32(glyphIndexes)), C.int(int32(numGlyphs))) != 0
	}
	return false
}

func (ptr *QRawFont) HintingPreference() QFont__HintingPreference {
	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QRawFont_HintingPreference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRawFont) Leading() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) LineThickness() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_LineThickness(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) LoadFromData(fontData core.QByteArray_ITF, pixelSize float64, hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		C.QRawFont_LoadFromData(ptr.Pointer(), core.PointerFromQByteArray(fontData), C.double(pixelSize), C.longlong(hintingPreference))
	}
}

func (ptr *QRawFont) LoadFromFile(fileName string, pixelSize float64, hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QRawFont_LoadFromFile(ptr.Pointer(), fileNameC, C.double(pixelSize), C.longlong(hintingPreference))
	}
}

func (ptr *QRawFont) MaxCharWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_MaxCharWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) PathForGlyph(glyphIndex uint) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QRawFont_PathForGlyph(ptr.Pointer(), C.uint(uint32(glyphIndex))))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QRawFont) PixelSize() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_PixelSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) SetPixelSize(pixelSize float64) {
	if ptr.Pointer() != nil {
		C.QRawFont_SetPixelSize(ptr.Pointer(), C.double(pixelSize))
	}
}

func (ptr *QRawFont) Style() QFont__Style {
	if ptr.Pointer() != nil {
		return QFont__Style(C.QRawFont_Style(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) StyleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRawFont_StyleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRawFont) SupportsCharacter(character core.QChar_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_SupportsCharacter(ptr.Pointer(), core.PointerFromQChar(character)) != 0
	}
	return false
}

func (ptr *QRawFont) SupportsCharacter2(ucs4 uint) bool {
	if ptr.Pointer() != nil {
		return C.QRawFont_SupportsCharacter2(ptr.Pointer(), C.uint(uint32(ucs4))) != 0
	}
	return false
}

func (ptr *QRawFont) Swap(other QRawFont_ITF) {
	if ptr.Pointer() != nil {
		C.QRawFont_Swap(ptr.Pointer(), PointerFromQRawFont(other))
	}
}

func (ptr *QRawFont) UnderlinePosition() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_UnderlinePosition(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) UnitsPerEm() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_UnitsPerEm(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) Weight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRawFont_Weight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRawFont) XHeight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRawFont_XHeight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRawFont) DestroyQRawFont() {
	if ptr.Pointer() != nil {
		C.QRawFont_DestroyQRawFont(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QRegExpValidator struct {
	QValidator
}

type QRegExpValidator_ITF interface {
	QValidator_ITF
	QRegExpValidator_PTR() *QRegExpValidator
}

func (p *QRegExpValidator) QRegExpValidator_PTR() *QRegExpValidator {
	return p
}

func (p *QRegExpValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QRegExpValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQRegExpValidator(ptr QRegExpValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegExpValidator_PTR().Pointer()
	}
	return nil
}

func NewQRegExpValidatorFromPointer(ptr unsafe.Pointer) *QRegExpValidator {
	var n = new(QRegExpValidator)
	n.SetPointer(ptr)
	return n
}
func (ptr *QRegExpValidator) SetRegExp(rx core.QRegExp_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_SetRegExp(ptr.Pointer(), core.PointerFromQRegExp(rx))
	}
}

func NewQRegExpValidator(parent core.QObject_ITF) *QRegExpValidator {
	var tmpValue = NewQRegExpValidatorFromPointer(C.QRegExpValidator_NewQRegExpValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQRegExpValidator2(rx core.QRegExp_ITF, parent core.QObject_ITF) *QRegExpValidator {
	var tmpValue = NewQRegExpValidatorFromPointer(C.QRegExpValidator_NewQRegExpValidator2(core.PointerFromQRegExp(rx), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QRegExpValidator) RegExp() *core.QRegExp {
	if ptr.Pointer() != nil {
		return core.NewQRegExpFromPointer(C.QRegExpValidator_RegExp(ptr.Pointer()))
	}
	return nil
}

//export callbackQRegExpValidator_Validate
func callbackQRegExpValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQRegExpValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QRegExpValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::validate", f)
	}
}

func (ptr *QRegExpValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::validate")
	}
}

func (ptr *QRegExpValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QRegExpValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QRegExpValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QRegExpValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QRegExpValidator) DestroyQRegExpValidator() {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_DestroyQRegExpValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRegExpValidator_Fixup
func callbackQRegExpValidator_Fixup(ptr unsafe.Pointer, input C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::fixup"); signal != nil {
		signal.(func(string))(cGoUnpackString(input))
	} else {
		NewQRegExpValidatorFromPointer(ptr).FixupDefault(cGoUnpackString(input))
	}
}

func (ptr *QRegExpValidator) ConnectFixup(f func(input string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::fixup", f)
	}
}

func (ptr *QRegExpValidator) DisconnectFixup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::fixup")
	}
}

func (ptr *QRegExpValidator) Fixup(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QRegExpValidator_Fixup(ptr.Pointer(), inputC)
	}
}

func (ptr *QRegExpValidator) FixupDefault(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QRegExpValidator_FixupDefault(ptr.Pointer(), inputC)
	}
}

//export callbackQRegExpValidator_TimerEvent
func callbackQRegExpValidator_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRegExpValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRegExpValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::timerEvent", f)
	}
}

func (ptr *QRegExpValidator) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::timerEvent")
	}
}

func (ptr *QRegExpValidator) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRegExpValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRegExpValidator_ChildEvent
func callbackQRegExpValidator_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRegExpValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRegExpValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::childEvent", f)
	}
}

func (ptr *QRegExpValidator) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::childEvent")
	}
}

func (ptr *QRegExpValidator) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRegExpValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRegExpValidator_ConnectNotify
func callbackQRegExpValidator_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegExpValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegExpValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::connectNotify", f)
	}
}

func (ptr *QRegExpValidator) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::connectNotify")
	}
}

func (ptr *QRegExpValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegExpValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegExpValidator_CustomEvent
func callbackQRegExpValidator_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRegExpValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRegExpValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::customEvent", f)
	}
}

func (ptr *QRegExpValidator) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::customEvent")
	}
}

func (ptr *QRegExpValidator) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRegExpValidator) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRegExpValidator_DeleteLater
func callbackQRegExpValidator_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQRegExpValidatorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QRegExpValidator) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::deleteLater", f)
	}
}

func (ptr *QRegExpValidator) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::deleteLater")
	}
}

func (ptr *QRegExpValidator) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRegExpValidator) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRegExpValidator_DisconnectNotify
func callbackQRegExpValidator_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegExpValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegExpValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::disconnectNotify", f)
	}
}

func (ptr *QRegExpValidator) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::disconnectNotify")
	}
}

func (ptr *QRegExpValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegExpValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExpValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegExpValidator_Event
func callbackQRegExpValidator_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRegExpValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QRegExpValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::event", f)
	}
}

func (ptr *QRegExpValidator) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::event")
	}
}

func (ptr *QRegExpValidator) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegExpValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRegExpValidator) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegExpValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRegExpValidator_EventFilter
func callbackQRegExpValidator_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRegExpValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QRegExpValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::eventFilter", f)
	}
}

func (ptr *QRegExpValidator) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::eventFilter")
	}
}

func (ptr *QRegExpValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegExpValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRegExpValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegExpValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRegExpValidator_MetaObject
func callbackQRegExpValidator_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegExpValidator::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRegExpValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRegExpValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::metaObject", f)
	}
}

func (ptr *QRegExpValidator) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegExpValidator::metaObject")
	}
}

func (ptr *QRegExpValidator) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegExpValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRegExpValidator) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegExpValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QRegion::RegionType
type QRegion__RegionType int64

const (
	QRegion__Rectangle = QRegion__RegionType(0)
	QRegion__Ellipse   = QRegion__RegionType(1)
)

type QRegion struct {
	ptr unsafe.Pointer
}

type QRegion_ITF interface {
	QRegion_PTR() *QRegion
}

func (p *QRegion) QRegion_PTR() *QRegion {
	return p
}

func (p *QRegion) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRegion) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRegion(ptr QRegion_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegion_PTR().Pointer()
	}
	return nil
}

func NewQRegionFromPointer(ptr unsafe.Pointer) *QRegion {
	var n = new(QRegion)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRegion) DestroyQRegion() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQRegion() *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion())
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion7(bm QBitmap_ITF) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion7(PointerFromQBitmap(bm)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion4(a QPolygon_ITF, fillRule core.Qt__FillRule) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion4(PointerFromQPolygon(a), C.longlong(fillRule)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion3(r core.QRect_ITF, t QRegion__RegionType) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion3(core.PointerFromQRect(r), C.longlong(t)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion5(r QRegion_ITF) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion5(PointerFromQRegion(r)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func (ptr *QRegion) BoundingRect() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QRegion_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Contains(p core.QPoint_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Contains(ptr.Pointer(), core.PointerFromQPoint(p)) != 0
	}
	return false
}

func (ptr *QRegion) Contains2(r core.QRect_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Contains2(ptr.Pointer(), core.PointerFromQRect(r)) != 0
	}
	return false
}

func (ptr *QRegion) Intersected2(rect core.QRect_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Intersected2(ptr.Pointer(), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Intersected(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Intersected(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Intersects2(rect core.QRect_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Intersects2(ptr.Pointer(), core.PointerFromQRect(rect)) != 0
	}
	return false
}

func (ptr *QRegion) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QRegion_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegion) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QRegion_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegion) RectCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegion_RectCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRegion) Rects() []*core.QRect {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*core.QRect {
			var out = make([]*core.QRect, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQRegionFromPointer(l.data).rects_atList(i)
			}
			return out
		}(C.QRegion_Rects(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRegion) SetRects(rects core.QRect_ITF, number int) {
	if ptr.Pointer() != nil {
		C.QRegion_SetRects(ptr.Pointer(), core.PointerFromQRect(rects), C.int(int32(number)))
	}
}

func (ptr *QRegion) Subtracted(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Subtracted(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Translate(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QRegion_Translate(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QRegion) United2(rect core.QRect_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_United2(ptr.Pointer(), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) United(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_United(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Xored(r QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Xored(ptr.Pointer(), PointerFromQRegion(r)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func NewQRegion6(other QRegion_ITF) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion6(PointerFromQRegion(other)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func NewQRegion2(x int, y int, w int, h int, t QRegion__RegionType) *QRegion {
	var tmpValue = NewQRegionFromPointer(C.QRegion_NewQRegion2(C.int(int32(x)), C.int(int32(y)), C.int(int32(w)), C.int(int32(h)), C.longlong(t)))
	runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
	return tmpValue
}

func (ptr *QRegion) Intersects(region QRegion_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegion_Intersects(ptr.Pointer(), PointerFromQRegion(region)) != 0
	}
	return false
}

func (ptr *QRegion) Swap(other QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QRegion_Swap(ptr.Pointer(), PointerFromQRegion(other))
	}
}

func (ptr *QRegion) Translate2(point core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRegion_Translate2(ptr.Pointer(), core.PointerFromQPoint(point))
	}
}

func (ptr *QRegion) Translated2(p core.QPoint_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Translated2(ptr.Pointer(), core.PointerFromQPoint(p)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) Translated(dx int, dy int) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QRegion_Translated(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy))))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QRegion) rects_atList(i int) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QRegion_rects_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

type QRegularExpressionValidator struct {
	QValidator
}

type QRegularExpressionValidator_ITF interface {
	QValidator_ITF
	QRegularExpressionValidator_PTR() *QRegularExpressionValidator
}

func (p *QRegularExpressionValidator) QRegularExpressionValidator_PTR() *QRegularExpressionValidator {
	return p
}

func (p *QRegularExpressionValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QValidator_PTR().Pointer()
	}
	return nil
}

func (p *QRegularExpressionValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QValidator_PTR().SetPointer(ptr)
	}
}

func PointerFromQRegularExpressionValidator(ptr QRegularExpressionValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegularExpressionValidator_PTR().Pointer()
	}
	return nil
}

func NewQRegularExpressionValidatorFromPointer(ptr unsafe.Pointer) *QRegularExpressionValidator {
	var n = new(QRegularExpressionValidator)
	n.SetPointer(ptr)
	return n
}
func (ptr *QRegularExpressionValidator) RegularExpression() *core.QRegularExpression {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRegularExpressionFromPointer(C.QRegularExpressionValidator_RegularExpression(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRegularExpression).DestroyQRegularExpression)
		return tmpValue
	}
	return nil
}

//export callbackQRegularExpressionValidator_SetRegularExpression
func callbackQRegularExpressionValidator_SetRegularExpression(ptr unsafe.Pointer, re unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::setRegularExpression"); signal != nil {
		signal.(func(*core.QRegularExpression))(core.NewQRegularExpressionFromPointer(re))
	}

}

func (ptr *QRegularExpressionValidator) ConnectSetRegularExpression(f func(re *core.QRegularExpression)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::setRegularExpression", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectSetRegularExpression(re core.QRegularExpression_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::setRegularExpression")
	}
}

func (ptr *QRegularExpressionValidator) SetRegularExpression(re core.QRegularExpression_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_SetRegularExpression(ptr.Pointer(), core.PointerFromQRegularExpression(re))
	}
}

func NewQRegularExpressionValidator(parent core.QObject_ITF) *QRegularExpressionValidator {
	var tmpValue = NewQRegularExpressionValidatorFromPointer(C.QRegularExpressionValidator_NewQRegularExpressionValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQRegularExpressionValidator2(re core.QRegularExpression_ITF, parent core.QObject_ITF) *QRegularExpressionValidator {
	var tmpValue = NewQRegularExpressionValidatorFromPointer(C.QRegularExpressionValidator_NewQRegularExpressionValidator2(core.PointerFromQRegularExpression(re), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQRegularExpressionValidator_RegularExpressionChanged
func callbackQRegularExpressionValidator_RegularExpressionChanged(ptr unsafe.Pointer, re unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::regularExpressionChanged"); signal != nil {
		signal.(func(*core.QRegularExpression))(core.NewQRegularExpressionFromPointer(re))
	}

}

func (ptr *QRegularExpressionValidator) ConnectRegularExpressionChanged(f func(re *core.QRegularExpression)) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ConnectRegularExpressionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::regularExpressionChanged", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectRegularExpressionChanged() {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DisconnectRegularExpressionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::regularExpressionChanged")
	}
}

func (ptr *QRegularExpressionValidator) RegularExpressionChanged(re core.QRegularExpression_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_RegularExpressionChanged(ptr.Pointer(), core.PointerFromQRegularExpression(re))
	}
}

//export callbackQRegularExpressionValidator_Validate
func callbackQRegularExpressionValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(NewQRegularExpressionValidatorFromPointer(ptr).ValidateDefault(cGoUnpackString(input), int(int32(pos))))
}

func (ptr *QRegularExpressionValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::validate", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectValidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::validate")
	}
}

func (ptr *QRegularExpressionValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QRegularExpressionValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QRegularExpressionValidator) ValidateDefault(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QRegularExpressionValidator_ValidateDefault(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QRegularExpressionValidator) DestroyQRegularExpressionValidator() {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DestroyQRegularExpressionValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRegularExpressionValidator_Fixup
func callbackQRegularExpressionValidator_Fixup(ptr unsafe.Pointer, input C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::fixup"); signal != nil {
		signal.(func(string))(cGoUnpackString(input))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).FixupDefault(cGoUnpackString(input))
	}
}

func (ptr *QRegularExpressionValidator) ConnectFixup(f func(input string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::fixup", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectFixup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::fixup")
	}
}

func (ptr *QRegularExpressionValidator) Fixup(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QRegularExpressionValidator_Fixup(ptr.Pointer(), inputC)
	}
}

func (ptr *QRegularExpressionValidator) FixupDefault(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QRegularExpressionValidator_FixupDefault(ptr.Pointer(), inputC)
	}
}

//export callbackQRegularExpressionValidator_TimerEvent
func callbackQRegularExpressionValidator_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QRegularExpressionValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::timerEvent", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::timerEvent")
	}
}

func (ptr *QRegularExpressionValidator) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QRegularExpressionValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQRegularExpressionValidator_ChildEvent
func callbackQRegularExpressionValidator_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QRegularExpressionValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::childEvent", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::childEvent")
	}
}

func (ptr *QRegularExpressionValidator) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QRegularExpressionValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQRegularExpressionValidator_ConnectNotify
func callbackQRegularExpressionValidator_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegularExpressionValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::connectNotify", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::connectNotify")
	}
}

func (ptr *QRegularExpressionValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegularExpressionValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegularExpressionValidator_CustomEvent
func callbackQRegularExpressionValidator_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QRegularExpressionValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::customEvent", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::customEvent")
	}
}

func (ptr *QRegularExpressionValidator) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QRegularExpressionValidator) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQRegularExpressionValidator_DeleteLater
func callbackQRegularExpressionValidator_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QRegularExpressionValidator) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::deleteLater", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::deleteLater")
	}
}

func (ptr *QRegularExpressionValidator) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRegularExpressionValidator) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQRegularExpressionValidator_DisconnectNotify
func callbackQRegularExpressionValidator_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQRegularExpressionValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QRegularExpressionValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::disconnectNotify", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::disconnectNotify")
	}
}

func (ptr *QRegularExpressionValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QRegularExpressionValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQRegularExpressionValidator_Event
func callbackQRegularExpressionValidator_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRegularExpressionValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QRegularExpressionValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::event", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::event")
	}
}

func (ptr *QRegularExpressionValidator) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QRegularExpressionValidator) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQRegularExpressionValidator_EventFilter
func callbackQRegularExpressionValidator_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQRegularExpressionValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QRegularExpressionValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::eventFilter", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::eventFilter")
	}
}

func (ptr *QRegularExpressionValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QRegularExpressionValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpressionValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQRegularExpressionValidator_MetaObject
func callbackQRegularExpressionValidator_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRegularExpressionValidator::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQRegularExpressionValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QRegularExpressionValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::metaObject", f)
	}
}

func (ptr *QRegularExpressionValidator) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRegularExpressionValidator::metaObject")
	}
}

func (ptr *QRegularExpressionValidator) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegularExpressionValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QRegularExpressionValidator) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QRegularExpressionValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QResizeEvent struct {
	core.QEvent
}

type QResizeEvent_ITF interface {
	core.QEvent_ITF
	QResizeEvent_PTR() *QResizeEvent
}

func (p *QResizeEvent) QResizeEvent_PTR() *QResizeEvent {
	return p
}

func (p *QResizeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QResizeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQResizeEvent(ptr QResizeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QResizeEvent_PTR().Pointer()
	}
	return nil
}

func NewQResizeEventFromPointer(ptr unsafe.Pointer) *QResizeEvent {
	var n = new(QResizeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QResizeEvent) DestroyQResizeEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQResizeEvent(size core.QSize_ITF, oldSize core.QSize_ITF) *QResizeEvent {
	var tmpValue = NewQResizeEventFromPointer(C.QResizeEvent_NewQResizeEvent(core.PointerFromQSize(size), core.PointerFromQSize(oldSize)))
	runtime.SetFinalizer(tmpValue, (*QResizeEvent).DestroyQResizeEvent)
	return tmpValue
}

func (ptr *QResizeEvent) OldSize() *core.QSize {
	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QResizeEvent_OldSize(ptr.Pointer()))
	}
	return nil
}

func (ptr *QResizeEvent) Size() *core.QSize {
	if ptr.Pointer() != nil {
		return core.NewQSizeFromPointer(C.QResizeEvent_Size(ptr.Pointer()))
	}
	return nil
}

type QRgba64 struct {
	ptr unsafe.Pointer
}

type QRgba64_ITF interface {
	QRgba64_PTR() *QRgba64
}

func (p *QRgba64) QRgba64_PTR() *QRgba64 {
	return p
}

func (p *QRgba64) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRgba64) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRgba64(ptr QRgba64_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRgba64_PTR().Pointer()
	}
	return nil
}

func NewQRgba64FromPointer(ptr unsafe.Pointer) *QRgba64 {
	var n = new(QRgba64)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRgba64) DestroyQRgba64() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QRgba64) Alpha() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Alpha(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Alpha8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Alpha8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) Blue() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Blue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Blue8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Blue8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) Green() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Green(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Green8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Green8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) IsOpaque() bool {
	if ptr.Pointer() != nil {
		return C.QRgba64_IsOpaque(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRgba64) IsTransparent() bool {
	if ptr.Pointer() != nil {
		return C.QRgba64_IsTransparent(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRgba64) Red() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_Red(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRgba64) Red8() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRgba64_Red8(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRgba64) SetAlpha(alpha uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetAlpha(ptr.Pointer(), C.ushort(alpha))
	}
}

func (ptr *QRgba64) SetBlue(blue uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetBlue(ptr.Pointer(), C.ushort(blue))
	}
}

func (ptr *QRgba64) SetGreen(green uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetGreen(ptr.Pointer(), C.ushort(green))
	}
}

func (ptr *QRgba64) SetRed(red uint16) {
	if ptr.Pointer() != nil {
		C.QRgba64_SetRed(ptr.Pointer(), C.ushort(red))
	}
}

func (ptr *QRgba64) ToArgb32() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QRgba64_ToArgb32(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRgba64) ToRgb16() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QRgba64_ToRgb16(ptr.Pointer()))
	}
	return 0
}

type QScreen struct {
	core.QObject
}

type QScreen_ITF interface {
	core.QObject_ITF
	QScreen_PTR() *QScreen
}

func (p *QScreen) QScreen_PTR() *QScreen {
	return p
}

func (p *QScreen) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QScreen) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQScreen(ptr QScreen_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScreen_PTR().Pointer()
	}
	return nil
}

func NewQScreenFromPointer(ptr unsafe.Pointer) *QScreen {
	var n = new(QScreen)
	n.SetPointer(ptr)
	return n
}
func (ptr *QScreen) AvailableGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_AvailableGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) AvailableSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_AvailableSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) AvailableVirtualGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_AvailableVirtualGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) AvailableVirtualSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_AvailableVirtualSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) Depth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QScreen_Depth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QScreen) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) LogicalDotsPerInch() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) LogicalDotsPerInchX() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInchX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) LogicalDotsPerInchY() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_LogicalDotsPerInchY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QScreen_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QScreen) NativeOrientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_NativeOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Orientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_Orientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInch() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInchX() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInchX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalDotsPerInchY() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_PhysicalDotsPerInchY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) PhysicalSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QScreen_PhysicalSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) PrimaryOrientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_PrimaryOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) RefreshRate() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QScreen_RefreshRate(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScreen) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) VirtualGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_VirtualGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) VirtualSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QScreen_VirtualSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) AngleBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QScreen_AngleBetween(ptr.Pointer(), C.longlong(a), C.longlong(b))))
	}
	return 0
}

//export callbackQScreen_AvailableGeometryChanged
func callbackQScreen_AvailableGeometryChanged(ptr unsafe.Pointer, geometry unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::availableGeometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(geometry))
	}

}

func (ptr *QScreen) ConnectAvailableGeometryChanged(f func(geometry *core.QRect)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectAvailableGeometryChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::availableGeometryChanged", f)
	}
}

func (ptr *QScreen) DisconnectAvailableGeometryChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectAvailableGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::availableGeometryChanged")
	}
}

func (ptr *QScreen) AvailableGeometryChanged(geometry core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_AvailableGeometryChanged(ptr.Pointer(), core.PointerFromQRect(geometry))
	}
}

//export callbackQScreen_GeometryChanged
func callbackQScreen_GeometryChanged(ptr unsafe.Pointer, geometry unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::geometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(geometry))
	}

}

func (ptr *QScreen) ConnectGeometryChanged(f func(geometry *core.QRect)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectGeometryChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::geometryChanged", f)
	}
}

func (ptr *QScreen) DisconnectGeometryChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::geometryChanged")
	}
}

func (ptr *QScreen) GeometryChanged(geometry core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_GeometryChanged(ptr.Pointer(), core.PointerFromQRect(geometry))
	}
}

func (ptr *QScreen) GrabWindow(window uintptr, x int, y int, width int, height int) *QPixmap {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPixmapFromPointer(C.QScreen_GrabWindow(ptr.Pointer(), C.uintptr_t(window), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height))))
		runtime.SetFinalizer(tmpValue, (*QPixmap).DestroyQPixmap)
		return tmpValue
	}
	return nil
}

func (ptr *QScreen) IsLandscape(o core.Qt__ScreenOrientation) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_IsLandscape(ptr.Pointer(), C.longlong(o)) != 0
	}
	return false
}

func (ptr *QScreen) IsPortrait(o core.Qt__ScreenOrientation) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_IsPortrait(ptr.Pointer(), C.longlong(o)) != 0
	}
	return false
}

//export callbackQScreen_LogicalDotsPerInchChanged
func callbackQScreen_LogicalDotsPerInchChanged(ptr unsafe.Pointer, dpi C.double) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::logicalDotsPerInchChanged"); signal != nil {
		signal.(func(float64))(float64(dpi))
	}

}

func (ptr *QScreen) ConnectLogicalDotsPerInchChanged(f func(dpi float64)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectLogicalDotsPerInchChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::logicalDotsPerInchChanged", f)
	}
}

func (ptr *QScreen) DisconnectLogicalDotsPerInchChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectLogicalDotsPerInchChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::logicalDotsPerInchChanged")
	}
}

func (ptr *QScreen) LogicalDotsPerInchChanged(dpi float64) {
	if ptr.Pointer() != nil {
		C.QScreen_LogicalDotsPerInchChanged(ptr.Pointer(), C.double(dpi))
	}
}

func (ptr *QScreen) MapBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation, rect core.QRect_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QScreen_MapBetween(ptr.Pointer(), C.longlong(a), C.longlong(b), core.PointerFromQRect(rect)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

//export callbackQScreen_OrientationChanged
func callbackQScreen_OrientationChanged(ptr unsafe.Pointer, orientation C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::orientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QScreen) ConnectOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectOrientationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::orientationChanged", f)
	}
}

func (ptr *QScreen) DisconnectOrientationChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::orientationChanged")
	}
}

func (ptr *QScreen) OrientationChanged(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QScreen_OrientationChanged(ptr.Pointer(), C.longlong(orientation))
	}
}

func (ptr *QScreen) OrientationUpdateMask() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QScreen_OrientationUpdateMask(ptr.Pointer()))
	}
	return 0
}

//export callbackQScreen_PhysicalDotsPerInchChanged
func callbackQScreen_PhysicalDotsPerInchChanged(ptr unsafe.Pointer, dpi C.double) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::physicalDotsPerInchChanged"); signal != nil {
		signal.(func(float64))(float64(dpi))
	}

}

func (ptr *QScreen) ConnectPhysicalDotsPerInchChanged(f func(dpi float64)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectPhysicalDotsPerInchChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::physicalDotsPerInchChanged", f)
	}
}

func (ptr *QScreen) DisconnectPhysicalDotsPerInchChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPhysicalDotsPerInchChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::physicalDotsPerInchChanged")
	}
}

func (ptr *QScreen) PhysicalDotsPerInchChanged(dpi float64) {
	if ptr.Pointer() != nil {
		C.QScreen_PhysicalDotsPerInchChanged(ptr.Pointer(), C.double(dpi))
	}
}

//export callbackQScreen_PhysicalSizeChanged
func callbackQScreen_PhysicalSizeChanged(ptr unsafe.Pointer, size unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::physicalSizeChanged"); signal != nil {
		signal.(func(*core.QSizeF))(core.NewQSizeFFromPointer(size))
	}

}

func (ptr *QScreen) ConnectPhysicalSizeChanged(f func(size *core.QSizeF)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectPhysicalSizeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::physicalSizeChanged", f)
	}
}

func (ptr *QScreen) DisconnectPhysicalSizeChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPhysicalSizeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::physicalSizeChanged")
	}
}

func (ptr *QScreen) PhysicalSizeChanged(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_PhysicalSizeChanged(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

//export callbackQScreen_PrimaryOrientationChanged
func callbackQScreen_PrimaryOrientationChanged(ptr unsafe.Pointer, orientation C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::primaryOrientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QScreen) ConnectPrimaryOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectPrimaryOrientationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::primaryOrientationChanged", f)
	}
}

func (ptr *QScreen) DisconnectPrimaryOrientationChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectPrimaryOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::primaryOrientationChanged")
	}
}

func (ptr *QScreen) PrimaryOrientationChanged(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QScreen_PrimaryOrientationChanged(ptr.Pointer(), C.longlong(orientation))
	}
}

//export callbackQScreen_RefreshRateChanged
func callbackQScreen_RefreshRateChanged(ptr unsafe.Pointer, refreshRate C.double) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::refreshRateChanged"); signal != nil {
		signal.(func(float64))(float64(refreshRate))
	}

}

func (ptr *QScreen) ConnectRefreshRateChanged(f func(refreshRate float64)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectRefreshRateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::refreshRateChanged", f)
	}
}

func (ptr *QScreen) DisconnectRefreshRateChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectRefreshRateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::refreshRateChanged")
	}
}

func (ptr *QScreen) RefreshRateChanged(refreshRate float64) {
	if ptr.Pointer() != nil {
		C.QScreen_RefreshRateChanged(ptr.Pointer(), C.double(refreshRate))
	}
}

func (ptr *QScreen) SetOrientationUpdateMask(mask core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QScreen_SetOrientationUpdateMask(ptr.Pointer(), C.longlong(mask))
	}
}

func (ptr *QScreen) TransformBetween(a core.Qt__ScreenOrientation, b core.Qt__ScreenOrientation, target core.QRect_ITF) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QScreen_TransformBetween(ptr.Pointer(), C.longlong(a), C.longlong(b), core.PointerFromQRect(target)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

//export callbackQScreen_VirtualGeometryChanged
func callbackQScreen_VirtualGeometryChanged(ptr unsafe.Pointer, rect unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::virtualGeometryChanged"); signal != nil {
		signal.(func(*core.QRect))(core.NewQRectFromPointer(rect))
	}

}

func (ptr *QScreen) ConnectVirtualGeometryChanged(f func(rect *core.QRect)) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectVirtualGeometryChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::virtualGeometryChanged", f)
	}
}

func (ptr *QScreen) DisconnectVirtualGeometryChanged() {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectVirtualGeometryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::virtualGeometryChanged")
	}
}

func (ptr *QScreen) VirtualGeometryChanged(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_VirtualGeometryChanged(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QScreen) VirtualSiblings() []*QScreen {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QScreen {
			var out = make([]*QScreen, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQScreenFromPointer(l.data).virtualSiblings_atList(i)
			}
			return out
		}(C.QScreen_VirtualSiblings(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) DestroyQScreen() {
	if ptr.Pointer() != nil {
		C.QScreen_DestroyQScreen(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QScreen) virtualSiblings_atList(i int) *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QScreen_virtualSiblings_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQScreen_TimerEvent
func callbackQScreen_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QScreen) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::timerEvent", f)
	}
}

func (ptr *QScreen) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::timerEvent")
	}
}

func (ptr *QScreen) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QScreen) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQScreen_ChildEvent
func callbackQScreen_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QScreen) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::childEvent", f)
	}
}

func (ptr *QScreen) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::childEvent")
	}
}

func (ptr *QScreen) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QScreen) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQScreen_ConnectNotify
func callbackQScreen_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQScreenFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QScreen) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::connectNotify", f)
	}
}

func (ptr *QScreen) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::connectNotify")
	}
}

func (ptr *QScreen) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QScreen) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQScreen_CustomEvent
func callbackQScreen_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQScreenFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QScreen) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::customEvent", f)
	}
}

func (ptr *QScreen) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::customEvent")
	}
}

func (ptr *QScreen) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QScreen) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQScreen_DeleteLater
func callbackQScreen_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQScreenFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QScreen) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::deleteLater", f)
	}
}

func (ptr *QScreen) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::deleteLater")
	}
}

func (ptr *QScreen) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QScreen_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QScreen) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QScreen_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQScreen_DisconnectNotify
func callbackQScreen_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQScreenFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QScreen) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::disconnectNotify", f)
	}
}

func (ptr *QScreen) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::disconnectNotify")
	}
}

func (ptr *QScreen) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QScreen) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QScreen_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQScreen_Event
func callbackQScreen_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQScreenFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QScreen) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::event", f)
	}
}

func (ptr *QScreen) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::event")
	}
}

func (ptr *QScreen) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QScreen) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQScreen_EventFilter
func callbackQScreen_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQScreenFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QScreen) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::eventFilter", f)
	}
}

func (ptr *QScreen) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::eventFilter")
	}
}

func (ptr *QScreen) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QScreen) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QScreen_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQScreen_MetaObject
func callbackQScreen_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QScreen::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQScreenFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QScreen) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::metaObject", f)
	}
}

func (ptr *QScreen) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QScreen::metaObject")
	}
}

func (ptr *QScreen) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QScreen_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QScreen) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QScreen_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QScrollEvent::ScrollState
type QScrollEvent__ScrollState int64

const (
	QScrollEvent__ScrollStarted  = QScrollEvent__ScrollState(0)
	QScrollEvent__ScrollUpdated  = QScrollEvent__ScrollState(1)
	QScrollEvent__ScrollFinished = QScrollEvent__ScrollState(2)
)

type QScrollEvent struct {
	core.QEvent
}

type QScrollEvent_ITF interface {
	core.QEvent_ITF
	QScrollEvent_PTR() *QScrollEvent
}

func (p *QScrollEvent) QScrollEvent_PTR() *QScrollEvent {
	return p
}

func (p *QScrollEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QScrollEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQScrollEvent(ptr QScrollEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScrollEvent_PTR().Pointer()
	}
	return nil
}

func NewQScrollEventFromPointer(ptr unsafe.Pointer) *QScrollEvent {
	var n = new(QScrollEvent)
	n.SetPointer(ptr)
	return n
}
func NewQScrollEvent(contentPos core.QPointF_ITF, overshootDistance core.QPointF_ITF, scrollState QScrollEvent__ScrollState) *QScrollEvent {
	var tmpValue = NewQScrollEventFromPointer(C.QScrollEvent_NewQScrollEvent(core.PointerFromQPointF(contentPos), core.PointerFromQPointF(overshootDistance), C.longlong(scrollState)))
	runtime.SetFinalizer(tmpValue, (*QScrollEvent).DestroyQScrollEvent)
	return tmpValue
}

func (ptr *QScrollEvent) ContentPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollEvent_ContentPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollEvent) OvershootDistance() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollEvent_OvershootDistance(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollEvent) ScrollState() QScrollEvent__ScrollState {
	if ptr.Pointer() != nil {
		return QScrollEvent__ScrollState(C.QScrollEvent_ScrollState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QScrollEvent) DestroyQScrollEvent() {
	if ptr.Pointer() != nil {
		C.QScrollEvent_DestroyQScrollEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QScrollPrepareEvent struct {
	core.QEvent
}

type QScrollPrepareEvent_ITF interface {
	core.QEvent_ITF
	QScrollPrepareEvent_PTR() *QScrollPrepareEvent
}

func (p *QScrollPrepareEvent) QScrollPrepareEvent_PTR() *QScrollPrepareEvent {
	return p
}

func (p *QScrollPrepareEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QScrollPrepareEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQScrollPrepareEvent(ptr QScrollPrepareEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScrollPrepareEvent_PTR().Pointer()
	}
	return nil
}

func NewQScrollPrepareEventFromPointer(ptr unsafe.Pointer) *QScrollPrepareEvent {
	var n = new(QScrollPrepareEvent)
	n.SetPointer(ptr)
	return n
}
func NewQScrollPrepareEvent(startPos core.QPointF_ITF) *QScrollPrepareEvent {
	var tmpValue = NewQScrollPrepareEventFromPointer(C.QScrollPrepareEvent_NewQScrollPrepareEvent(core.PointerFromQPointF(startPos)))
	runtime.SetFinalizer(tmpValue, (*QScrollPrepareEvent).DestroyQScrollPrepareEvent)
	return tmpValue
}

func (ptr *QScrollPrepareEvent) ContentPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollPrepareEvent_ContentPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollPrepareEvent) ContentPosRange() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QScrollPrepareEvent_ContentPosRange(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollPrepareEvent) SetContentPos(pos core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetContentPos(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QScrollPrepareEvent) SetContentPosRange(rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetContentPosRange(ptr.Pointer(), core.PointerFromQRectF(rect))
	}
}

func (ptr *QScrollPrepareEvent) SetViewportSize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_SetViewportSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QScrollPrepareEvent) StartPos() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QScrollPrepareEvent_StartPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollPrepareEvent) ViewportSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QScrollPrepareEvent_ViewportSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QScrollPrepareEvent) DestroyQScrollPrepareEvent() {
	if ptr.Pointer() != nil {
		C.QScrollPrepareEvent_DestroyQScrollPrepareEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QSessionManager::RestartHint
type QSessionManager__RestartHint int64

const (
	QSessionManager__RestartIfRunning   = QSessionManager__RestartHint(0)
	QSessionManager__RestartAnyway      = QSessionManager__RestartHint(1)
	QSessionManager__RestartImmediately = QSessionManager__RestartHint(2)
	QSessionManager__RestartNever       = QSessionManager__RestartHint(3)
)

type QSessionManager struct {
	core.QObject
}

type QSessionManager_ITF interface {
	core.QObject_ITF
	QSessionManager_PTR() *QSessionManager
}

func (p *QSessionManager) QSessionManager_PTR() *QSessionManager {
	return p
}

func (p *QSessionManager) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSessionManager) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSessionManager(ptr QSessionManager_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSessionManager_PTR().Pointer()
	}
	return nil
}

func NewQSessionManagerFromPointer(ptr unsafe.Pointer) *QSessionManager {
	var n = new(QSessionManager)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSessionManager) DestroyQSessionManager() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QSessionManager) RestartHint() QSessionManager__RestartHint {
	if ptr.Pointer() != nil {
		return QSessionManager__RestartHint(C.QSessionManager_RestartHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSessionManager) SessionKey() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSessionManager_SessionKey(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSessionManager) AllowsErrorInteraction() bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_AllowsErrorInteraction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) AllowsInteraction() bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_AllowsInteraction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) Cancel() {
	if ptr.Pointer() != nil {
		C.QSessionManager_Cancel(ptr.Pointer())
	}
}

func (ptr *QSessionManager) DiscardCommand() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSessionManager_DiscardCommand(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSessionManager) IsPhase2() bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_IsPhase2(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSessionManager) Release() {
	if ptr.Pointer() != nil {
		C.QSessionManager_Release(ptr.Pointer())
	}
}

func (ptr *QSessionManager) RequestPhase2() {
	if ptr.Pointer() != nil {
		C.QSessionManager_RequestPhase2(ptr.Pointer())
	}
}

func (ptr *QSessionManager) RestartCommand() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSessionManager_RestartCommand(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSessionManager) SessionId() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSessionManager_SessionId(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSessionManager) SetDiscardCommand(command []string) {
	if ptr.Pointer() != nil {
		var commandC = C.CString(strings.Join(command, "|"))
		defer C.free(unsafe.Pointer(commandC))
		C.QSessionManager_SetDiscardCommand(ptr.Pointer(), commandC)
	}
}

func (ptr *QSessionManager) SetManagerProperty2(name string, value string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var valueC = C.CString(value)
		defer C.free(unsafe.Pointer(valueC))
		C.QSessionManager_SetManagerProperty2(ptr.Pointer(), nameC, valueC)
	}
}

func (ptr *QSessionManager) SetManagerProperty(name string, value []string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var valueC = C.CString(strings.Join(value, "|"))
		defer C.free(unsafe.Pointer(valueC))
		C.QSessionManager_SetManagerProperty(ptr.Pointer(), nameC, valueC)
	}
}

func (ptr *QSessionManager) SetRestartCommand(command []string) {
	if ptr.Pointer() != nil {
		var commandC = C.CString(strings.Join(command, "|"))
		defer C.free(unsafe.Pointer(commandC))
		C.QSessionManager_SetRestartCommand(ptr.Pointer(), commandC)
	}
}

func (ptr *QSessionManager) SetRestartHint(hint QSessionManager__RestartHint) {
	if ptr.Pointer() != nil {
		C.QSessionManager_SetRestartHint(ptr.Pointer(), C.longlong(hint))
	}
}

//export callbackQSessionManager_TimerEvent
func callbackQSessionManager_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSessionManager) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::timerEvent", f)
	}
}

func (ptr *QSessionManager) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::timerEvent")
	}
}

func (ptr *QSessionManager) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QSessionManager) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSessionManager_ChildEvent
func callbackQSessionManager_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSessionManager) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::childEvent", f)
	}
}

func (ptr *QSessionManager) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::childEvent")
	}
}

func (ptr *QSessionManager) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QSessionManager) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSessionManager_ConnectNotify
func callbackQSessionManager_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSessionManagerFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSessionManager) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::connectNotify", f)
	}
}

func (ptr *QSessionManager) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::connectNotify")
	}
}

func (ptr *QSessionManager) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSessionManager) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSessionManager_CustomEvent
func callbackQSessionManager_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSessionManagerFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSessionManager) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::customEvent", f)
	}
}

func (ptr *QSessionManager) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::customEvent")
	}
}

func (ptr *QSessionManager) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QSessionManager) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSessionManager_DeleteLater
func callbackQSessionManager_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSessionManagerFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSessionManager) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::deleteLater", f)
	}
}

func (ptr *QSessionManager) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::deleteLater")
	}
}

func (ptr *QSessionManager) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSessionManager_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSessionManager) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSessionManager_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSessionManager_DisconnectNotify
func callbackQSessionManager_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSessionManagerFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSessionManager) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::disconnectNotify", f)
	}
}

func (ptr *QSessionManager) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::disconnectNotify")
	}
}

func (ptr *QSessionManager) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSessionManager) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSessionManager_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSessionManager_Event
func callbackQSessionManager_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSessionManagerFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QSessionManager) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::event", f)
	}
}

func (ptr *QSessionManager) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::event")
	}
}

func (ptr *QSessionManager) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSessionManager) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSessionManager_EventFilter
func callbackQSessionManager_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSessionManagerFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QSessionManager) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::eventFilter", f)
	}
}

func (ptr *QSessionManager) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::eventFilter")
	}
}

func (ptr *QSessionManager) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSessionManager) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSessionManager_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSessionManager_MetaObject
func callbackQSessionManager_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSessionManager::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSessionManagerFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSessionManager) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::metaObject", f)
	}
}

func (ptr *QSessionManager) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSessionManager::metaObject")
	}
}

func (ptr *QSessionManager) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSessionManager_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSessionManager) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSessionManager_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QShortcutEvent struct {
	core.QEvent
}

type QShortcutEvent_ITF interface {
	core.QEvent_ITF
	QShortcutEvent_PTR() *QShortcutEvent
}

func (p *QShortcutEvent) QShortcutEvent_PTR() *QShortcutEvent {
	return p
}

func (p *QShortcutEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QShortcutEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQShortcutEvent(ptr QShortcutEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QShortcutEvent_PTR().Pointer()
	}
	return nil
}

func NewQShortcutEventFromPointer(ptr unsafe.Pointer) *QShortcutEvent {
	var n = new(QShortcutEvent)
	n.SetPointer(ptr)
	return n
}
func NewQShortcutEvent(key QKeySequence_ITF, id int, ambiguous bool) *QShortcutEvent {
	var tmpValue = NewQShortcutEventFromPointer(C.QShortcutEvent_NewQShortcutEvent(PointerFromQKeySequence(key), C.int(int32(id)), C.char(int8(qt.GoBoolToInt(ambiguous)))))
	runtime.SetFinalizer(tmpValue, (*QShortcutEvent).DestroyQShortcutEvent)
	return tmpValue
}

func (ptr *QShortcutEvent) IsAmbiguous() bool {
	if ptr.Pointer() != nil {
		return C.QShortcutEvent_IsAmbiguous(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QShortcutEvent) Key() *QKeySequence {
	if ptr.Pointer() != nil {
		return NewQKeySequenceFromPointer(C.QShortcutEvent_Key(ptr.Pointer()))
	}
	return nil
}

func (ptr *QShortcutEvent) ShortcutId() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QShortcutEvent_ShortcutId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QShortcutEvent) DestroyQShortcutEvent() {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_DestroyQShortcutEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QShortcutEvent) Ambig() bool {
	if ptr.Pointer() != nil {
		return C.QShortcutEvent_Ambig(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QShortcutEvent) SetAmbig(vbo bool) {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_SetAmbig(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func (ptr *QShortcutEvent) Sequence() *QKeySequence {
	if ptr.Pointer() != nil {
		var tmpValue = NewQKeySequenceFromPointer(C.QShortcutEvent_Sequence(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QKeySequence).DestroyQKeySequence)
		return tmpValue
	}
	return nil
}

func (ptr *QShortcutEvent) SetSequence(vqk QKeySequence_ITF) {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_SetSequence(ptr.Pointer(), PointerFromQKeySequence(vqk))
	}
}

func (ptr *QShortcutEvent) Sid() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QShortcutEvent_Sid(ptr.Pointer())))
	}
	return 0
}

func (ptr *QShortcutEvent) SetSid(vin int) {
	if ptr.Pointer() != nil {
		C.QShortcutEvent_SetSid(ptr.Pointer(), C.int(int32(vin)))
	}
}

type QShowEvent struct {
	core.QEvent
}

type QShowEvent_ITF interface {
	core.QEvent_ITF
	QShowEvent_PTR() *QShowEvent
}

func (p *QShowEvent) QShowEvent_PTR() *QShowEvent {
	return p
}

func (p *QShowEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QShowEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQShowEvent(ptr QShowEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QShowEvent_PTR().Pointer()
	}
	return nil
}

func NewQShowEventFromPointer(ptr unsafe.Pointer) *QShowEvent {
	var n = new(QShowEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QShowEvent) DestroyQShowEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQShowEvent() *QShowEvent {
	var tmpValue = NewQShowEventFromPointer(C.QShowEvent_NewQShowEvent())
	runtime.SetFinalizer(tmpValue, (*QShowEvent).DestroyQShowEvent)
	return tmpValue
}

//QStandardItem::ItemType
type QStandardItem__ItemType int64

const (
	QStandardItem__Type     = QStandardItem__ItemType(0)
	QStandardItem__UserType = QStandardItem__ItemType(1000)
)

type QStandardItem struct {
	ptr unsafe.Pointer
}

type QStandardItem_ITF interface {
	QStandardItem_PTR() *QStandardItem
}

func (p *QStandardItem) QStandardItem_PTR() *QStandardItem {
	return p
}

func (p *QStandardItem) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStandardItem) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStandardItem(ptr QStandardItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStandardItem_PTR().Pointer()
	}
	return nil
}

func NewQStandardItemFromPointer(ptr unsafe.Pointer) *QStandardItem {
	var n = new(QStandardItem)
	n.SetPointer(ptr)
	return n
}
func NewQStandardItem() *QStandardItem {
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem())
}

func NewQStandardItem3(icon QIcon_ITF, text string) *QStandardItem {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem3(PointerFromQIcon(icon), textC))
}

func NewQStandardItem2(text string) *QStandardItem {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem2(textC))
}

func NewQStandardItem4(rows int, columns int) *QStandardItem {
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem4(C.int(int32(rows)), C.int(int32(columns))))
}

func NewQStandardItem5(other QStandardItem_ITF) *QStandardItem {
	return NewQStandardItemFromPointer(C.QStandardItem_NewQStandardItem5(PointerFromQStandardItem(other)))
}

func (ptr *QStandardItem) AccessibleDescription() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_AccessibleDescription(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) AccessibleText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_AccessibleText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) AppendRow2(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_AppendRow2(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) Background() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QStandardItem_Background(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) CheckState() core.Qt__CheckState {
	if ptr.Pointer() != nil {
		return core.Qt__CheckState(C.QStandardItem_CheckState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) Child(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Child(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

//export callbackQStandardItem_Clone
func callbackQStandardItem_Clone(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItem::clone"); signal != nil {
		return PointerFromQStandardItem(signal.(func() *QStandardItem)())
	}

	return PointerFromQStandardItem(NewQStandardItemFromPointer(ptr).CloneDefault())
}

func (ptr *QStandardItem) ConnectClone(f func() *QStandardItem) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::clone", f)
	}
}

func (ptr *QStandardItem) DisconnectClone() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::clone")
	}
}

func (ptr *QStandardItem) Clone() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Clone(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) CloneDefault() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_CloneDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) Column() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_Column(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) ColumnCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_ColumnCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQStandardItem_Data
func callbackQStandardItem_Data(ptr unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItem::data"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int) *core.QVariant)(int(int32(role))))
	}

	return core.PointerFromQVariant(NewQStandardItemFromPointer(ptr).DataDefault(int(int32(role))))
}

func (ptr *QStandardItem) ConnectData(f func(role int) *core.QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::data", f)
	}
}

func (ptr *QStandardItem) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::data")
	}
}

func (ptr *QStandardItem) Data(role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItem_Data(ptr.Pointer(), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) DataDefault(role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItem_DataDefault(ptr.Pointer(), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) EmitDataChanged() {
	if ptr.Pointer() != nil {
		C.QStandardItem_EmitDataChanged(ptr.Pointer())
	}
}

func (ptr *QStandardItem) Flags() core.Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return core.Qt__ItemFlag(C.QStandardItem_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QStandardItem_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Foreground() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QStandardItem_Foreground(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) HasChildren() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_HasChildren(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) Icon() *QIcon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIconFromPointer(C.QStandardItem_Icon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Index() *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItem_Index(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) InsertColumns(column int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)))
	}
}

func (ptr *QStandardItem) InsertRow2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRow2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) InsertRows2(row int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_InsertRows2(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)))
	}
}

func (ptr *QStandardItem) IsAutoTristate() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsAutoTristate(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsCheckable() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsCheckable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsDragEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsDragEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsDropEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsDropEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsEditable() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsEditable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsSelectable() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsSelectable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) IsUserTristate() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItem_IsUserTristate(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItem) Model() *QStandardItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStandardItemModelFromPointer(C.QStandardItem_Model(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) Parent() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_Parent(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItem) RemoveColumn(column int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveColumn(ptr.Pointer(), C.int(int32(column)))
	}
}

func (ptr *QStandardItem) RemoveColumns(column int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)))
	}
}

func (ptr *QStandardItem) RemoveRow(row int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveRow(ptr.Pointer(), C.int(int32(row)))
	}
}

func (ptr *QStandardItem) RemoveRows(row int, count int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)))
	}
}

func (ptr *QStandardItem) Row() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_Row(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) RowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_RowCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) SetAccessibleDescription(accessibleDescription string) {
	if ptr.Pointer() != nil {
		var accessibleDescriptionC = C.CString(accessibleDescription)
		defer C.free(unsafe.Pointer(accessibleDescriptionC))
		C.QStandardItem_SetAccessibleDescription(ptr.Pointer(), accessibleDescriptionC)
	}
}

func (ptr *QStandardItem) SetAccessibleText(accessibleText string) {
	if ptr.Pointer() != nil {
		var accessibleTextC = C.CString(accessibleText)
		defer C.free(unsafe.Pointer(accessibleTextC))
		C.QStandardItem_SetAccessibleText(ptr.Pointer(), accessibleTextC)
	}
}

func (ptr *QStandardItem) SetAutoTristate(tristate bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetAutoTristate(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(tristate))))
	}
}

func (ptr *QStandardItem) SetBackground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QStandardItem) SetCheckState(state core.Qt__CheckState) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetCheckState(ptr.Pointer(), C.longlong(state))
	}
}

func (ptr *QStandardItem) SetCheckable(checkable bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetCheckable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(checkable))))
	}
}

func (ptr *QStandardItem) SetChild2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetChild2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) SetChild(row int, column int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetChild(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItem) SetColumnCount(columns int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetColumnCount(ptr.Pointer(), C.int(int32(columns)))
	}
}

//export callbackQStandardItem_SetData
func callbackQStandardItem_SetData(ptr unsafe.Pointer, value unsafe.Pointer, role C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItem::setData"); signal != nil {
		signal.(func(*core.QVariant, int))(core.NewQVariantFromPointer(value), int(int32(role)))
	} else {
		NewQStandardItemFromPointer(ptr).SetDataDefault(core.NewQVariantFromPointer(value), int(int32(role)))
	}
}

func (ptr *QStandardItem) ConnectSetData(f func(value *core.QVariant, role int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::setData", f)
	}
}

func (ptr *QStandardItem) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::setData")
	}
}

func (ptr *QStandardItem) SetData(value core.QVariant_ITF, role int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetData(ptr.Pointer(), core.PointerFromQVariant(value), C.int(int32(role)))
	}
}

func (ptr *QStandardItem) SetDataDefault(value core.QVariant_ITF, role int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetDataDefault(ptr.Pointer(), core.PointerFromQVariant(value), C.int(int32(role)))
	}
}

func (ptr *QStandardItem) SetDragEnabled(dragEnabled bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetDragEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(dragEnabled))))
	}
}

func (ptr *QStandardItem) SetDropEnabled(dropEnabled bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetDropEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(dropEnabled))))
	}
}

func (ptr *QStandardItem) SetEditable(editable bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetEditable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(editable))))
	}
}

func (ptr *QStandardItem) SetEnabled(enabled bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QStandardItem) SetFlags(flags core.Qt__ItemFlag) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QStandardItem) SetFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QStandardItem) SetForeground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetForeground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QStandardItem) SetIcon(icon QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetIcon(ptr.Pointer(), PointerFromQIcon(icon))
	}
}

func (ptr *QStandardItem) SetRowCount(rows int) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetRowCount(ptr.Pointer(), C.int(int32(rows)))
	}
}

func (ptr *QStandardItem) SetSelectable(selectable bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetSelectable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(selectable))))
	}
}

func (ptr *QStandardItem) SetSizeHint(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetSizeHint(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QStandardItem) SetStatusTip(statusTip string) {
	if ptr.Pointer() != nil {
		var statusTipC = C.CString(statusTip)
		defer C.free(unsafe.Pointer(statusTipC))
		C.QStandardItem_SetStatusTip(ptr.Pointer(), statusTipC)
	}
}

func (ptr *QStandardItem) SetText(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QStandardItem_SetText(ptr.Pointer(), textC)
	}
}

func (ptr *QStandardItem) SetTextAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetTextAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QStandardItem) SetToolTip(toolTip string) {
	if ptr.Pointer() != nil {
		var toolTipC = C.CString(toolTip)
		defer C.free(unsafe.Pointer(toolTipC))
		C.QStandardItem_SetToolTip(ptr.Pointer(), toolTipC)
	}
}

func (ptr *QStandardItem) SetUserTristate(tristate bool) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SetUserTristate(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(tristate))))
	}
}

func (ptr *QStandardItem) SetWhatsThis(whatsThis string) {
	if ptr.Pointer() != nil {
		var whatsThisC = C.CString(whatsThis)
		defer C.free(unsafe.Pointer(whatsThisC))
		C.QStandardItem_SetWhatsThis(ptr.Pointer(), whatsThisC)
	}
}

func (ptr *QStandardItem) SizeHint() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QStandardItem_SizeHint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItem) SortChildren(column int, order core.Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QStandardItem_SortChildren(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QStandardItem) StatusTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_StatusTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) TakeChild(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_TakeChild(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItem) TakeColumn(column int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemFromPointer(l.data).takeColumn_atList(i)
			}
			return out
		}(C.QStandardItem_TakeColumn(ptr.Pointer(), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItem) TakeRow(row int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemFromPointer(l.data).takeRow_atList(i)
			}
			return out
		}(C.QStandardItem_TakeRow(ptr.Pointer(), C.int(int32(row))))
	}
	return nil
}

func (ptr *QStandardItem) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStandardItem) TextAlignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QStandardItem_TextAlignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItem) ToolTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_ToolTip(ptr.Pointer()))
	}
	return ""
}

//export callbackQStandardItem_Type
func callbackQStandardItem_Type(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItem::type"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQStandardItemFromPointer(ptr).TypeDefault()))
}

func (ptr *QStandardItem) ConnectType(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::type", f)
	}
}

func (ptr *QStandardItem) DisconnectType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::type")
	}
}

func (ptr *QStandardItem) Type() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) TypeDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItem_TypeDefault(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStandardItem) WhatsThis() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStandardItem_WhatsThis(ptr.Pointer()))
	}
	return ""
}

//export callbackQStandardItem_DestroyQStandardItem
func callbackQStandardItem_DestroyQStandardItem(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItem::~QStandardItem"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemFromPointer(ptr).DestroyQStandardItemDefault()
	}
}

func (ptr *QStandardItem) ConnectDestroyQStandardItem(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::~QStandardItem", f)
	}
}

func (ptr *QStandardItem) DisconnectDestroyQStandardItem() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItem::~QStandardItem")
	}
}

func (ptr *QStandardItem) DestroyQStandardItem() {
	if ptr.Pointer() != nil {
		C.QStandardItem_DestroyQStandardItem(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItem) DestroyQStandardItemDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItem_DestroyQStandardItemDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItem) takeColumn_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_takeColumn_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItem) takeRow_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItem_takeRow_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

type QStandardItemModel struct {
	core.QAbstractItemModel
}

type QStandardItemModel_ITF interface {
	core.QAbstractItemModel_ITF
	QStandardItemModel_PTR() *QStandardItemModel
}

func (p *QStandardItemModel) QStandardItemModel_PTR() *QStandardItemModel {
	return p
}

func (p *QStandardItemModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractItemModel_PTR().Pointer()
	}
	return nil
}

func (p *QStandardItemModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractItemModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQStandardItemModel(ptr QStandardItemModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStandardItemModel_PTR().Pointer()
	}
	return nil
}

func NewQStandardItemModelFromPointer(ptr unsafe.Pointer) *QStandardItemModel {
	var n = new(QStandardItemModel)
	n.SetPointer(ptr)
	return n
}
func (ptr *QStandardItemModel) SetSortRole(role int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetSortRole(ptr.Pointer(), C.int(int32(role)))
	}
}

func (ptr *QStandardItemModel) SortRole() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_SortRole(ptr.Pointer())))
	}
	return 0
}

func NewQStandardItemModel(parent core.QObject_ITF) *QStandardItemModel {
	var tmpValue = NewQStandardItemModelFromPointer(C.QStandardItemModel_NewQStandardItemModel(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQStandardItemModel2(rows int, columns int, parent core.QObject_ITF) *QStandardItemModel {
	var tmpValue = NewQStandardItemModelFromPointer(C.QStandardItemModel_NewQStandardItemModel2(C.int(int32(rows)), C.int(int32(columns)), core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QStandardItemModel) AppendRow2(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_AppendRow2(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) Clear() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_Clear(ptr.Pointer())
	}
}

func (ptr *QStandardItemModel) ColumnCount(parent core.QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_ColumnCount(ptr.Pointer(), core.PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QStandardItemModel) Data(index core.QModelIndex_ITF, role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItemModel_Data(ptr.Pointer(), core.PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) DropMimeData(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_DropMimeData(ptr.Pointer(), core.PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) FindItems(text string, flags core.Qt__MatchFlag, column int) []*QStandardItem {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).findItems_atList(i)
			}
			return out
		}(C.QStandardItemModel_FindItems(ptr.Pointer(), textC, C.longlong(flags), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) Flags(index core.QModelIndex_ITF) core.Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return core.Qt__ItemFlag(C.QStandardItemModel_Flags(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QStandardItemModel) HasChildren(parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_HasChildren(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) HeaderData(section int, orientation core.Qt__Orientation, role int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QStandardItemModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) HorizontalHeaderItem(column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_HorizontalHeaderItem(ptr.Pointer(), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) Index(row int, column int, parent core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) IndexFromItem(item QStandardItem_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_IndexFromItem(ptr.Pointer(), PointerFromQStandardItem(item)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) InsertColumn2(column int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertColumn2(ptr.Pointer(), C.int(int32(column)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InsertColumns(column int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InsertRow3(row int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertRow3(ptr.Pointer(), C.int(int32(row)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InsertRow2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_InsertRow2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) InsertRows(row int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) InvisibleRootItem() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_InvisibleRootItem(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItemModel) Item(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_Item(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

//export callbackQStandardItemModel_ItemChanged
func callbackQStandardItemModel_ItemChanged(ptr unsafe.Pointer, item unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::itemChanged"); signal != nil {
		signal.(func(*QStandardItem))(NewQStandardItemFromPointer(item))
	}

}

func (ptr *QStandardItemModel) ConnectItemChanged(f func(item *QStandardItem)) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ConnectItemChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::itemChanged", f)
	}
}

func (ptr *QStandardItemModel) DisconnectItemChanged() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectItemChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::itemChanged")
	}
}

func (ptr *QStandardItemModel) ItemChanged(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ItemChanged(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) ItemFromIndex(index core.QModelIndex_ITF) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_ItemFromIndex(ptr.Pointer(), core.PointerFromQModelIndex(index)))
	}
	return nil
}

func (ptr *QStandardItemModel) ItemPrototype() *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_ItemPrototype(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItemModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QStandardItemModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QStandardItemModel) Parent(child core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_Parent(ptr.Pointer(), core.PointerFromQModelIndex(child)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) RemoveColumns(column int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) RemoveRows(row int, count int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) RowCount(parent core.QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStandardItemModel_RowCount(ptr.Pointer(), core.PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QStandardItemModel) SetColumnCount(columns int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetColumnCount(ptr.Pointer(), C.int(int32(columns)))
	}
}

func (ptr *QStandardItemModel) SetData(index core.QModelIndex_ITF, value core.QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetData(ptr.Pointer(), core.PointerFromQModelIndex(index), core.PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QStandardItemModel) SetHeaderData(section int, orientation core.Qt__Orientation, value core.QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), core.PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QStandardItemModel) SetHorizontalHeaderItem(column int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetHorizontalHeaderItem(ptr.Pointer(), C.int(int32(column)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetHorizontalHeaderLabels(labels []string) {
	if ptr.Pointer() != nil {
		var labelsC = C.CString(strings.Join(labels, "|"))
		defer C.free(unsafe.Pointer(labelsC))
		C.QStandardItemModel_SetHorizontalHeaderLabels(ptr.Pointer(), labelsC)
	}
}

func (ptr *QStandardItemModel) SetItem2(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItem2(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetItem(row int, column int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItem(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetItemPrototype(item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetItemPrototype(ptr.Pointer(), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetRowCount(rows int) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetRowCount(ptr.Pointer(), C.int(int32(rows)))
	}
}

func (ptr *QStandardItemModel) SetVerticalHeaderItem(row int, item QStandardItem_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_SetVerticalHeaderItem(ptr.Pointer(), C.int(int32(row)), PointerFromQStandardItem(item))
	}
}

func (ptr *QStandardItemModel) SetVerticalHeaderLabels(labels []string) {
	if ptr.Pointer() != nil {
		var labelsC = C.CString(strings.Join(labels, "|"))
		defer C.free(unsafe.Pointer(labelsC))
		C.QStandardItemModel_SetVerticalHeaderLabels(ptr.Pointer(), labelsC)
	}
}

func (ptr *QStandardItemModel) Sibling(row int, column int, idx core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) Sort(column int, order core.Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QStandardItemModel) SupportedDropActions() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItemModel) TakeColumn(column int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).takeColumn_atList(i)
			}
			return out
		}(C.QStandardItemModel_TakeColumn(ptr.Pointer(), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeHorizontalHeaderItem(column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeHorizontalHeaderItem(ptr.Pointer(), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeItem(row int, column int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeItem(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeRow(row int) []*QStandardItem {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QStandardItem {
			var out = make([]*QStandardItem, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStandardItemModelFromPointer(l.data).takeRow_atList(i)
			}
			return out
		}(C.QStandardItemModel_TakeRow(ptr.Pointer(), C.int(int32(row))))
	}
	return nil
}

func (ptr *QStandardItemModel) TakeVerticalHeaderItem(row int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_TakeVerticalHeaderItem(ptr.Pointer(), C.int(int32(row))))
	}
	return nil
}

func (ptr *QStandardItemModel) VerticalHeaderItem(row int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_VerticalHeaderItem(ptr.Pointer(), C.int(int32(row))))
	}
	return nil
}

func (ptr *QStandardItemModel) DestroyQStandardItemModel() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DestroyQStandardItemModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItemModel) findItems_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_findItems_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) takeColumn_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_takeColumn_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

func (ptr *QStandardItemModel) takeRow_atList(i int) *QStandardItem {
	if ptr.Pointer() != nil {
		return NewQStandardItemFromPointer(C.QStandardItemModel_takeRow_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

//export callbackQStandardItemModel_Buddy
func callbackQStandardItemModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::buddy"); signal != nil {
		return core.PointerFromQModelIndex(signal.(func(*core.QModelIndex) *core.QModelIndex)(core.NewQModelIndexFromPointer(index)))
	}

	return core.PointerFromQModelIndex(NewQStandardItemModelFromPointer(ptr).BuddyDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) ConnectBuddy(f func(index *core.QModelIndex) *core.QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::buddy", f)
	}
}

func (ptr *QStandardItemModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::buddy")
	}
}

func (ptr *QStandardItemModel) Buddy(index core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_Buddy(ptr.Pointer(), core.PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) BuddyDefault(index core.QModelIndex_ITF) *core.QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQModelIndexFromPointer(C.QStandardItemModel_BuddyDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*core.QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_CanDropMimeData
func callbackQStandardItemModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QMimeData, core.Qt__DropAction, int, int, *core.QModelIndex) bool)(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).CanDropMimeDataDefault(core.NewQMimeDataFromPointer(data), core.Qt__DropAction(action), int(int32(row)), int(int32(column)), core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) ConnectCanDropMimeData(f func(data *core.QMimeData, action core.Qt__DropAction, row int, column int, parent *core.QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::canDropMimeData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::canDropMimeData")
	}
}

func (ptr *QStandardItemModel) CanDropMimeData(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanDropMimeData(ptr.Pointer(), core.PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) CanDropMimeDataDefault(data core.QMimeData_ITF, action core.Qt__DropAction, row int, column int, parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanDropMimeDataDefault(ptr.Pointer(), core.PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_CanFetchMore
func callbackQStandardItemModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex) bool)(core.NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).CanFetchMoreDefault(core.NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStandardItemModel) ConnectCanFetchMore(f func(parent *core.QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::canFetchMore", f)
	}
}

func (ptr *QStandardItemModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::canFetchMore")
	}
}

func (ptr *QStandardItemModel) CanFetchMore(parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanFetchMore(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) CanFetchMoreDefault(parent core.QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_CanFetchMoreDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStandardItemModel_FetchMore
func callbackQStandardItemModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::fetchMore"); signal != nil {
		signal.(func(*core.QModelIndex))(core.NewQModelIndexFromPointer(parent))
	} else {
		NewQStandardItemModelFromPointer(ptr).FetchMoreDefault(core.NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QStandardItemModel) ConnectFetchMore(f func(parent *core.QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::fetchMore", f)
	}
}

func (ptr *QStandardItemModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::fetchMore")
	}
}

func (ptr *QStandardItemModel) FetchMore(parent core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_FetchMore(ptr.Pointer(), core.PointerFromQModelIndex(parent))
	}
}

func (ptr *QStandardItemModel) FetchMoreDefault(parent core.QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_FetchMoreDefault(ptr.Pointer(), core.PointerFromQModelIndex(parent))
	}
}

//export callbackQStandardItemModel_MoveColumns
func callbackQStandardItemModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int) bool)(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).MoveColumnsDefault(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QStandardItemModel) ConnectMoveColumns(f func(sourceParent *core.QModelIndex, sourceColumn int, count int, destinationParent *core.QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::moveColumns", f)
	}
}

func (ptr *QStandardItemModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::moveColumns")
	}
}

func (ptr *QStandardItemModel) MoveColumns(sourceParent core.QModelIndex_ITF, sourceColumn int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveColumns(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), core.PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QStandardItemModel) MoveColumnsDefault(sourceParent core.QModelIndex_ITF, sourceColumn int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveColumnsDefault(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), core.PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQStandardItemModel_MoveRows
func callbackQStandardItemModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QModelIndex, int, int, *core.QModelIndex, int) bool)(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).MoveRowsDefault(core.NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), core.NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QStandardItemModel) ConnectMoveRows(f func(sourceParent *core.QModelIndex, sourceRow int, count int, destinationParent *core.QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::moveRows", f)
	}
}

func (ptr *QStandardItemModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::moveRows")
	}
}

func (ptr *QStandardItemModel) MoveRows(sourceParent core.QModelIndex_ITF, sourceRow int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveRows(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), core.PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QStandardItemModel) MoveRowsDefault(sourceParent core.QModelIndex_ITF, sourceRow int, count int, destinationParent core.QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_MoveRowsDefault(ptr.Pointer(), core.PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), core.PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQStandardItemModel_ResetInternalData
func callbackQStandardItemModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::resetInternalData"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemModelFromPointer(ptr).ResetInternalDataDefault()
	}
}

func (ptr *QStandardItemModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::resetInternalData", f)
	}
}

func (ptr *QStandardItemModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::resetInternalData")
	}
}

func (ptr *QStandardItemModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ResetInternalData(ptr.Pointer())
	}
}

func (ptr *QStandardItemModel) ResetInternalDataDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ResetInternalDataDefault(ptr.Pointer())
	}
}

//export callbackQStandardItemModel_Revert
func callbackQStandardItemModel_Revert(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QStandardItemModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::revert", f)
	}
}

func (ptr *QStandardItemModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::revert")
	}
}

func (ptr *QStandardItemModel) Revert() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_Revert(ptr.Pointer())
	}
}

func (ptr *QStandardItemModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQStandardItemModel_Span
func callbackQStandardItemModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::span"); signal != nil {
		return core.PointerFromQSize(signal.(func(*core.QModelIndex) *core.QSize)(core.NewQModelIndexFromPointer(index)))
	}

	return core.PointerFromQSize(NewQStandardItemModelFromPointer(ptr).SpanDefault(core.NewQModelIndexFromPointer(index)))
}

func (ptr *QStandardItemModel) ConnectSpan(f func(index *core.QModelIndex) *core.QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::span", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::span")
	}
}

func (ptr *QStandardItemModel) Span(index core.QModelIndex_ITF) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QStandardItemModel_Span(ptr.Pointer(), core.PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QStandardItemModel) SpanDefault(index core.QModelIndex_ITF) *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QStandardItemModel_SpanDefault(ptr.Pointer(), core.PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQStandardItemModel_Submit
func callbackQStandardItemModel_Submit(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QStandardItemModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::submit", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::submit")
	}
}

func (ptr *QStandardItemModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStandardItemModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStandardItemModel_SupportedDragActions
func callbackQStandardItemModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() core.Qt__DropAction)())
	}

	return C.longlong(NewQStandardItemModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QStandardItemModel) ConnectSupportedDragActions(f func() core.Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::supportedDragActions", f)
	}
}

func (ptr *QStandardItemModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::supportedDragActions")
	}
}

func (ptr *QStandardItemModel) SupportedDragActions() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStandardItemModel) SupportedDragActionsDefault() core.Qt__DropAction {
	if ptr.Pointer() != nil {
		return core.Qt__DropAction(C.QStandardItemModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQStandardItemModel_TimerEvent
func callbackQStandardItemModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::timerEvent", f)
	}
}

func (ptr *QStandardItemModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::timerEvent")
	}
}

func (ptr *QStandardItemModel) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QStandardItemModel) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQStandardItemModel_ChildEvent
func callbackQStandardItemModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::childEvent", f)
	}
}

func (ptr *QStandardItemModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::childEvent")
	}
}

func (ptr *QStandardItemModel) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QStandardItemModel) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQStandardItemModel_ConnectNotify
func callbackQStandardItemModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStandardItemModelFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStandardItemModel) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::connectNotify", f)
	}
}

func (ptr *QStandardItemModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::connectNotify")
	}
}

func (ptr *QStandardItemModel) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStandardItemModel) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStandardItemModel_CustomEvent
func callbackQStandardItemModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQStandardItemModelFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QStandardItemModel) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::customEvent", f)
	}
}

func (ptr *QStandardItemModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::customEvent")
	}
}

func (ptr *QStandardItemModel) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QStandardItemModel) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQStandardItemModel_DeleteLater
func callbackQStandardItemModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQStandardItemModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QStandardItemModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::deleteLater", f)
	}
}

func (ptr *QStandardItemModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::deleteLater")
	}
}

func (ptr *QStandardItemModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStandardItemModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQStandardItemModel_DisconnectNotify
func callbackQStandardItemModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStandardItemModelFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStandardItemModel) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::disconnectNotify", f)
	}
}

func (ptr *QStandardItemModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::disconnectNotify")
	}
}

func (ptr *QStandardItemModel) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStandardItemModel) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStandardItemModel_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStandardItemModel_Event
func callbackQStandardItemModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QStandardItemModel) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::event", f)
	}
}

func (ptr *QStandardItemModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::event")
	}
}

func (ptr *QStandardItemModel) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStandardItemModel_EventFilter
func callbackQStandardItemModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStandardItemModelFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QStandardItemModel) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::eventFilter", f)
	}
}

func (ptr *QStandardItemModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::eventFilter")
	}
}

func (ptr *QStandardItemModel) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QStandardItemModel) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStandardItemModel_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQStandardItemModel_MetaObject
func callbackQStandardItemModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStandardItemModel::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQStandardItemModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStandardItemModel) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::metaObject", f)
	}
}

func (ptr *QStandardItemModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStandardItemModel::metaObject")
	}
}

func (ptr *QStandardItemModel) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStandardItemModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStandardItemModel) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStandardItemModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QStaticText::PerformanceHint
type QStaticText__PerformanceHint int64

const (
	QStaticText__ModerateCaching   = QStaticText__PerformanceHint(0)
	QStaticText__AggressiveCaching = QStaticText__PerformanceHint(1)
)

type QStaticText struct {
	ptr unsafe.Pointer
}

type QStaticText_ITF interface {
	QStaticText_PTR() *QStaticText
}

func (p *QStaticText) QStaticText_PTR() *QStaticText {
	return p
}

func (p *QStaticText) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStaticText) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStaticText(ptr QStaticText_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStaticText_PTR().Pointer()
	}
	return nil
}

func NewQStaticTextFromPointer(ptr unsafe.Pointer) *QStaticText {
	var n = new(QStaticText)
	n.SetPointer(ptr)
	return n
}
func NewQStaticText() *QStaticText {
	var tmpValue = NewQStaticTextFromPointer(C.QStaticText_NewQStaticText())
	runtime.SetFinalizer(tmpValue, (*QStaticText).DestroyQStaticText)
	return tmpValue
}

func NewQStaticText3(other QStaticText_ITF) *QStaticText {
	var tmpValue = NewQStaticTextFromPointer(C.QStaticText_NewQStaticText3(PointerFromQStaticText(other)))
	runtime.SetFinalizer(tmpValue, (*QStaticText).DestroyQStaticText)
	return tmpValue
}

func NewQStaticText2(text string) *QStaticText {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQStaticTextFromPointer(C.QStaticText_NewQStaticText2(textC))
	runtime.SetFinalizer(tmpValue, (*QStaticText).DestroyQStaticText)
	return tmpValue
}

func (ptr *QStaticText) PerformanceHint() QStaticText__PerformanceHint {
	if ptr.Pointer() != nil {
		return QStaticText__PerformanceHint(C.QStaticText_PerformanceHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) Prepare(matrix QTransform_ITF, font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QStaticText_Prepare(ptr.Pointer(), PointerFromQTransform(matrix), PointerFromQFont(font))
	}
}

func (ptr *QStaticText) SetPerformanceHint(performanceHint QStaticText__PerformanceHint) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetPerformanceHint(ptr.Pointer(), C.longlong(performanceHint))
	}
}

func (ptr *QStaticText) SetText(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QStaticText_SetText(ptr.Pointer(), textC)
	}
}

func (ptr *QStaticText) SetTextFormat(textFormat core.Qt__TextFormat) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetTextFormat(ptr.Pointer(), C.longlong(textFormat))
	}
}

func (ptr *QStaticText) SetTextOption(textOption QTextOption_ITF) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetTextOption(ptr.Pointer(), PointerFromQTextOption(textOption))
	}
}

func (ptr *QStaticText) SetTextWidth(textWidth float64) {
	if ptr.Pointer() != nil {
		C.QStaticText_SetTextWidth(ptr.Pointer(), C.double(textWidth))
	}
}

func (ptr *QStaticText) Size() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QStaticText_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QStaticText) Swap(other QStaticText_ITF) {
	if ptr.Pointer() != nil {
		C.QStaticText_Swap(ptr.Pointer(), PointerFromQStaticText(other))
	}
}

func (ptr *QStaticText) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStaticText_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStaticText) TextFormat() core.Qt__TextFormat {
	if ptr.Pointer() != nil {
		return core.Qt__TextFormat(C.QStaticText_TextFormat(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) TextOption() *QTextOption {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextOptionFromPointer(C.QStaticText_TextOption(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
		return tmpValue
	}
	return nil
}

func (ptr *QStaticText) TextWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QStaticText_TextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStaticText) DestroyQStaticText() {
	if ptr.Pointer() != nil {
		C.QStaticText_DestroyQStaticText(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QStatusTipEvent struct {
	core.QEvent
}

type QStatusTipEvent_ITF interface {
	core.QEvent_ITF
	QStatusTipEvent_PTR() *QStatusTipEvent
}

func (p *QStatusTipEvent) QStatusTipEvent_PTR() *QStatusTipEvent {
	return p
}

func (p *QStatusTipEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QStatusTipEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQStatusTipEvent(ptr QStatusTipEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStatusTipEvent_PTR().Pointer()
	}
	return nil
}

func NewQStatusTipEventFromPointer(ptr unsafe.Pointer) *QStatusTipEvent {
	var n = new(QStatusTipEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStatusTipEvent) DestroyQStatusTipEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQStatusTipEvent(tip string) *QStatusTipEvent {
	var tipC = C.CString(tip)
	defer C.free(unsafe.Pointer(tipC))
	var tmpValue = NewQStatusTipEventFromPointer(C.QStatusTipEvent_NewQStatusTipEvent(tipC))
	runtime.SetFinalizer(tmpValue, (*QStatusTipEvent).DestroyQStatusTipEvent)
	return tmpValue
}

func (ptr *QStatusTipEvent) Tip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStatusTipEvent_Tip(ptr.Pointer()))
	}
	return ""
}

type QStyleHints struct {
	core.QObject
}

type QStyleHints_ITF interface {
	core.QObject_ITF
	QStyleHints_PTR() *QStyleHints
}

func (p *QStyleHints) QStyleHints_PTR() *QStyleHints {
	return p
}

func (p *QStyleHints) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QStyleHints) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQStyleHints(ptr QStyleHints_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStyleHints_PTR().Pointer()
	}
	return nil
}

func NewQStyleHintsFromPointer(ptr unsafe.Pointer) *QStyleHints {
	var n = new(QStyleHints)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStyleHints) DestroyQStyleHints() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QStyleHints) CursorFlashTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_CursorFlashTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) FontSmoothingGamma() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QStyleHints_FontSmoothingGamma(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) KeyboardAutoRepeatRate() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_KeyboardAutoRepeatRate(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) KeyboardInputInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_KeyboardInputInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) MouseDoubleClickInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_MouseDoubleClickInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) MousePressAndHoldInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_MousePressAndHoldInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) PasswordMaskCharacter() *core.QChar {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQCharFromPointer(C.QStyleHints_PasswordMaskCharacter(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QStyleHints) PasswordMaskDelay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_PasswordMaskDelay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) SetFocusOnTouchRelease() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_SetFocusOnTouchRelease(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) ShowIsFullScreen() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_ShowIsFullScreen(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) ShowIsMaximized() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_ShowIsMaximized(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) SingleClickActivation() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_SingleClickActivation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStyleHints) StartDragDistance() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_StartDragDistance(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) StartDragTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_StartDragTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) StartDragVelocity() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStyleHints_StartDragVelocity(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStyleHints) TabFocusBehavior() core.Qt__TabFocusBehavior {
	if ptr.Pointer() != nil {
		return core.Qt__TabFocusBehavior(C.QStyleHints_TabFocusBehavior(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStyleHints) UseRtlExtensions() bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_UseRtlExtensions(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStyleHints_CursorFlashTimeChanged
func callbackQStyleHints_CursorFlashTimeChanged(ptr unsafe.Pointer, cursorFlashTime C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::cursorFlashTimeChanged"); signal != nil {
		signal.(func(int))(int(int32(cursorFlashTime)))
	}

}

func (ptr *QStyleHints) ConnectCursorFlashTimeChanged(f func(cursorFlashTime int)) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectCursorFlashTimeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::cursorFlashTimeChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectCursorFlashTimeChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectCursorFlashTimeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::cursorFlashTimeChanged")
	}
}

func (ptr *QStyleHints) CursorFlashTimeChanged(cursorFlashTime int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_CursorFlashTimeChanged(ptr.Pointer(), C.int(int32(cursorFlashTime)))
	}
}

//export callbackQStyleHints_KeyboardInputIntervalChanged
func callbackQStyleHints_KeyboardInputIntervalChanged(ptr unsafe.Pointer, keyboardInputInterval C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::keyboardInputIntervalChanged"); signal != nil {
		signal.(func(int))(int(int32(keyboardInputInterval)))
	}

}

func (ptr *QStyleHints) ConnectKeyboardInputIntervalChanged(f func(keyboardInputInterval int)) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectKeyboardInputIntervalChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::keyboardInputIntervalChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectKeyboardInputIntervalChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectKeyboardInputIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::keyboardInputIntervalChanged")
	}
}

func (ptr *QStyleHints) KeyboardInputIntervalChanged(keyboardInputInterval int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_KeyboardInputIntervalChanged(ptr.Pointer(), C.int(int32(keyboardInputInterval)))
	}
}

//export callbackQStyleHints_MouseDoubleClickIntervalChanged
func callbackQStyleHints_MouseDoubleClickIntervalChanged(ptr unsafe.Pointer, mouseDoubleClickInterval C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::mouseDoubleClickIntervalChanged"); signal != nil {
		signal.(func(int))(int(int32(mouseDoubleClickInterval)))
	}

}

func (ptr *QStyleHints) ConnectMouseDoubleClickIntervalChanged(f func(mouseDoubleClickInterval int)) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectMouseDoubleClickIntervalChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::mouseDoubleClickIntervalChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectMouseDoubleClickIntervalChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectMouseDoubleClickIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::mouseDoubleClickIntervalChanged")
	}
}

func (ptr *QStyleHints) MouseDoubleClickIntervalChanged(mouseDoubleClickInterval int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_MouseDoubleClickIntervalChanged(ptr.Pointer(), C.int(int32(mouseDoubleClickInterval)))
	}
}

//export callbackQStyleHints_MousePressAndHoldIntervalChanged
func callbackQStyleHints_MousePressAndHoldIntervalChanged(ptr unsafe.Pointer, mousePressAndHoldInterval C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::mousePressAndHoldIntervalChanged"); signal != nil {
		signal.(func(int))(int(int32(mousePressAndHoldInterval)))
	}

}

func (ptr *QStyleHints) ConnectMousePressAndHoldIntervalChanged(f func(mousePressAndHoldInterval int)) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectMousePressAndHoldIntervalChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::mousePressAndHoldIntervalChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectMousePressAndHoldIntervalChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectMousePressAndHoldIntervalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::mousePressAndHoldIntervalChanged")
	}
}

func (ptr *QStyleHints) MousePressAndHoldIntervalChanged(mousePressAndHoldInterval int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_MousePressAndHoldIntervalChanged(ptr.Pointer(), C.int(int32(mousePressAndHoldInterval)))
	}
}

//export callbackQStyleHints_StartDragDistanceChanged
func callbackQStyleHints_StartDragDistanceChanged(ptr unsafe.Pointer, startDragDistance C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::startDragDistanceChanged"); signal != nil {
		signal.(func(int))(int(int32(startDragDistance)))
	}

}

func (ptr *QStyleHints) ConnectStartDragDistanceChanged(f func(startDragDistance int)) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectStartDragDistanceChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::startDragDistanceChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectStartDragDistanceChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectStartDragDistanceChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::startDragDistanceChanged")
	}
}

func (ptr *QStyleHints) StartDragDistanceChanged(startDragDistance int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_StartDragDistanceChanged(ptr.Pointer(), C.int(int32(startDragDistance)))
	}
}

//export callbackQStyleHints_StartDragTimeChanged
func callbackQStyleHints_StartDragTimeChanged(ptr unsafe.Pointer, startDragTime C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::startDragTimeChanged"); signal != nil {
		signal.(func(int))(int(int32(startDragTime)))
	}

}

func (ptr *QStyleHints) ConnectStartDragTimeChanged(f func(startDragTime int)) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectStartDragTimeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::startDragTimeChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectStartDragTimeChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectStartDragTimeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::startDragTimeChanged")
	}
}

func (ptr *QStyleHints) StartDragTimeChanged(startDragTime int) {
	if ptr.Pointer() != nil {
		C.QStyleHints_StartDragTimeChanged(ptr.Pointer(), C.int(int32(startDragTime)))
	}
}

//export callbackQStyleHints_TabFocusBehaviorChanged
func callbackQStyleHints_TabFocusBehaviorChanged(ptr unsafe.Pointer, tabFocusBehavior C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::tabFocusBehaviorChanged"); signal != nil {
		signal.(func(core.Qt__TabFocusBehavior))(core.Qt__TabFocusBehavior(tabFocusBehavior))
	}

}

func (ptr *QStyleHints) ConnectTabFocusBehaviorChanged(f func(tabFocusBehavior core.Qt__TabFocusBehavior)) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectTabFocusBehaviorChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::tabFocusBehaviorChanged", f)
	}
}

func (ptr *QStyleHints) DisconnectTabFocusBehaviorChanged() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectTabFocusBehaviorChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::tabFocusBehaviorChanged")
	}
}

func (ptr *QStyleHints) TabFocusBehaviorChanged(tabFocusBehavior core.Qt__TabFocusBehavior) {
	if ptr.Pointer() != nil {
		C.QStyleHints_TabFocusBehaviorChanged(ptr.Pointer(), C.longlong(tabFocusBehavior))
	}
}

//export callbackQStyleHints_TimerEvent
func callbackQStyleHints_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStyleHints) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::timerEvent", f)
	}
}

func (ptr *QStyleHints) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::timerEvent")
	}
}

func (ptr *QStyleHints) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QStyleHints) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQStyleHints_ChildEvent
func callbackQStyleHints_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QStyleHints) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::childEvent", f)
	}
}

func (ptr *QStyleHints) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::childEvent")
	}
}

func (ptr *QStyleHints) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QStyleHints) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQStyleHints_ConnectNotify
func callbackQStyleHints_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleHintsFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyleHints) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::connectNotify", f)
	}
}

func (ptr *QStyleHints) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::connectNotify")
	}
}

func (ptr *QStyleHints) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStyleHints) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyleHints_CustomEvent
func callbackQStyleHints_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQStyleHintsFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QStyleHints) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::customEvent", f)
	}
}

func (ptr *QStyleHints) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::customEvent")
	}
}

func (ptr *QStyleHints) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QStyleHints) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQStyleHints_DeleteLater
func callbackQStyleHints_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQStyleHintsFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QStyleHints) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::deleteLater", f)
	}
}

func (ptr *QStyleHints) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::deleteLater")
	}
}

func (ptr *QStyleHints) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStyleHints) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QStyleHints_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQStyleHints_DisconnectNotify
func callbackQStyleHints_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQStyleHintsFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStyleHints) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::disconnectNotify", f)
	}
}

func (ptr *QStyleHints) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::disconnectNotify")
	}
}

func (ptr *QStyleHints) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStyleHints) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStyleHints_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQStyleHints_Event
func callbackQStyleHints_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStyleHintsFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QStyleHints) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::event", f)
	}
}

func (ptr *QStyleHints) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::event")
	}
}

func (ptr *QStyleHints) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QStyleHints) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStyleHints_EventFilter
func callbackQStyleHints_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStyleHintsFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QStyleHints) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::eventFilter", f)
	}
}

func (ptr *QStyleHints) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::eventFilter")
	}
}

func (ptr *QStyleHints) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QStyleHints) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStyleHints_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQStyleHints_MetaObject
func callbackQStyleHints_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStyleHints::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQStyleHintsFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStyleHints) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::metaObject", f)
	}
}

func (ptr *QStyleHints) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStyleHints::metaObject")
	}
}

func (ptr *QStyleHints) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStyleHints_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStyleHints) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QStyleHints_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSupportedWritingSystems struct {
	ptr unsafe.Pointer
}

type QSupportedWritingSystems_ITF interface {
	QSupportedWritingSystems_PTR() *QSupportedWritingSystems
}

func (p *QSupportedWritingSystems) QSupportedWritingSystems_PTR() *QSupportedWritingSystems {
	return p
}

func (p *QSupportedWritingSystems) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSupportedWritingSystems) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSupportedWritingSystems(ptr QSupportedWritingSystems_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSupportedWritingSystems_PTR().Pointer()
	}
	return nil
}

func NewQSupportedWritingSystemsFromPointer(ptr unsafe.Pointer) *QSupportedWritingSystems {
	var n = new(QSupportedWritingSystems)
	n.SetPointer(ptr)
	return n
}

//QSurface::SurfaceClass
type QSurface__SurfaceClass int64

const (
	QSurface__Window    = QSurface__SurfaceClass(0)
	QSurface__Offscreen = QSurface__SurfaceClass(1)
)

//QSurface::SurfaceType
type QSurface__SurfaceType int64

const (
	QSurface__RasterSurface   = QSurface__SurfaceType(0)
	QSurface__OpenGLSurface   = QSurface__SurfaceType(1)
	QSurface__RasterGLSurface = QSurface__SurfaceType(2)
)

type QSurface struct {
	ptr unsafe.Pointer
}

type QSurface_ITF interface {
	QSurface_PTR() *QSurface
}

func (p *QSurface) QSurface_PTR() *QSurface {
	return p
}

func (p *QSurface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSurface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSurface(ptr QSurface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSurface_PTR().Pointer()
	}
	return nil
}

func NewQSurfaceFromPointer(ptr unsafe.Pointer) *QSurface {
	var n = new(QSurface)
	n.SetPointer(ptr)
	return n
}

//export callbackQSurface_Format
func callbackQSurface_Format(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSurface::format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(nil)
}

func (ptr *QSurface) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::format", f)
	}
}

func (ptr *QSurface) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::format")
	}
}

func (ptr *QSurface) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QSurface_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

//export callbackQSurface_Size
func callbackQSurface_Size(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSurface::size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(nil)
}

func (ptr *QSurface) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::size", f)
	}
}

func (ptr *QSurface) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::size")
	}
}

func (ptr *QSurface) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QSurface_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSurface) SupportsOpenGL() bool {
	if ptr.Pointer() != nil {
		return C.QSurface_SupportsOpenGL(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurface) SurfaceClass() QSurface__SurfaceClass {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceClass(C.QSurface_SurfaceClass(ptr.Pointer()))
	}
	return 0
}

//export callbackQSurface_SurfaceType
func callbackQSurface_SurfaceType(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSurface::surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(0)
}

func (ptr *QSurface) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::surfaceType", f)
	}
}

func (ptr *QSurface) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::surfaceType")
	}
}

func (ptr *QSurface) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QSurface_SurfaceType(ptr.Pointer()))
	}
	return 0
}

//export callbackQSurface_DestroyQSurface
func callbackQSurface_DestroyQSurface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSurface::~QSurface"); signal != nil {
		signal.(func())()
	} else {
		NewQSurfaceFromPointer(ptr).DestroyQSurfaceDefault()
	}
}

func (ptr *QSurface) ConnectDestroyQSurface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::~QSurface", f)
	}
}

func (ptr *QSurface) DisconnectDestroyQSurface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSurface::~QSurface")
	}
}

func (ptr *QSurface) DestroyQSurface() {
	if ptr.Pointer() != nil {
		C.QSurface_DestroyQSurface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSurface) DestroyQSurfaceDefault() {
	if ptr.Pointer() != nil {
		C.QSurface_DestroyQSurfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSurface) M_type() QSurface__SurfaceClass {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceClass(C.QSurface_M_type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurface) SetM_type(vsu QSurface__SurfaceClass) {
	if ptr.Pointer() != nil {
		C.QSurface_SetM_type(ptr.Pointer(), C.longlong(vsu))
	}
}

//QSurfaceFormat::FormatOption
type QSurfaceFormat__FormatOption int64

const (
	QSurfaceFormat__StereoBuffers       = QSurfaceFormat__FormatOption(0x0001)
	QSurfaceFormat__DebugContext        = QSurfaceFormat__FormatOption(0x0002)
	QSurfaceFormat__DeprecatedFunctions = QSurfaceFormat__FormatOption(0x0004)
	QSurfaceFormat__ResetNotification   = QSurfaceFormat__FormatOption(0x0008)
)

//QSurfaceFormat::OpenGLContextProfile
type QSurfaceFormat__OpenGLContextProfile int64

const (
	QSurfaceFormat__NoProfile            = QSurfaceFormat__OpenGLContextProfile(0)
	QSurfaceFormat__CoreProfile          = QSurfaceFormat__OpenGLContextProfile(1)
	QSurfaceFormat__CompatibilityProfile = QSurfaceFormat__OpenGLContextProfile(2)
)

//QSurfaceFormat::RenderableType
type QSurfaceFormat__RenderableType int64

const (
	QSurfaceFormat__DefaultRenderableType = QSurfaceFormat__RenderableType(0x0)
	QSurfaceFormat__OpenGL                = QSurfaceFormat__RenderableType(0x1)
	QSurfaceFormat__OpenGLES              = QSurfaceFormat__RenderableType(0x2)
	QSurfaceFormat__OpenVG                = QSurfaceFormat__RenderableType(0x4)
)

//QSurfaceFormat::SwapBehavior
type QSurfaceFormat__SwapBehavior int64

const (
	QSurfaceFormat__DefaultSwapBehavior = QSurfaceFormat__SwapBehavior(0)
	QSurfaceFormat__SingleBuffer        = QSurfaceFormat__SwapBehavior(1)
	QSurfaceFormat__DoubleBuffer        = QSurfaceFormat__SwapBehavior(2)
	QSurfaceFormat__TripleBuffer        = QSurfaceFormat__SwapBehavior(3)
)

type QSurfaceFormat struct {
	ptr unsafe.Pointer
}

type QSurfaceFormat_ITF interface {
	QSurfaceFormat_PTR() *QSurfaceFormat
}

func (p *QSurfaceFormat) QSurfaceFormat_PTR() *QSurfaceFormat {
	return p
}

func (p *QSurfaceFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSurfaceFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSurfaceFormat(ptr QSurfaceFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSurfaceFormat_PTR().Pointer()
	}
	return nil
}

func NewQSurfaceFormatFromPointer(ptr unsafe.Pointer) *QSurfaceFormat {
	var n = new(QSurfaceFormat)
	n.SetPointer(ptr)
	return n
}
func NewQSurfaceFormat() *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat())
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func NewQSurfaceFormat2(options QSurfaceFormat__FormatOption) *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat2(C.longlong(options)))
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func NewQSurfaceFormat3(other QSurfaceFormat_ITF) *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_NewQSurfaceFormat3(PointerFromQSurfaceFormat(other)))
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func (ptr *QSurfaceFormat) AlphaBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_AlphaBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) BlueBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_BlueBufferSize(ptr.Pointer())))
	}
	return 0
}

func QSurfaceFormat_DefaultFormat() *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_QSurfaceFormat_DefaultFormat())
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func (ptr *QSurfaceFormat) DefaultFormat() *QSurfaceFormat {
	var tmpValue = NewQSurfaceFormatFromPointer(C.QSurfaceFormat_QSurfaceFormat_DefaultFormat())
	runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
	return tmpValue
}

func (ptr *QSurfaceFormat) DepthBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_DepthBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) GreenBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_GreenBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) HasAlpha() bool {
	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_HasAlpha(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) MajorVersion() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_MajorVersion(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) MinorVersion() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_MinorVersion(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) Options() QSurfaceFormat__FormatOption {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__FormatOption(C.QSurfaceFormat_Options(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) Profile() QSurfaceFormat__OpenGLContextProfile {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__OpenGLContextProfile(C.QSurfaceFormat_Profile(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) RedBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_RedBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) RenderableType() QSurfaceFormat__RenderableType {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__RenderableType(C.QSurfaceFormat_RenderableType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) Samples() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_Samples(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) SetAlphaBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetAlphaBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetBlueBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetBlueBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func QSurfaceFormat_SetDefaultFormat(format QSurfaceFormat_ITF) {
	C.QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(PointerFromQSurfaceFormat(format))
}

func (ptr *QSurfaceFormat) SetDefaultFormat(format QSurfaceFormat_ITF) {
	C.QSurfaceFormat_QSurfaceFormat_SetDefaultFormat(PointerFromQSurfaceFormat(format))
}

func (ptr *QSurfaceFormat) SetDepthBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetDepthBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetGreenBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetGreenBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetMajorVersion(major int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetMajorVersion(ptr.Pointer(), C.int(int32(major)))
	}
}

func (ptr *QSurfaceFormat) SetMinorVersion(minor int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetMinorVersion(ptr.Pointer(), C.int(int32(minor)))
	}
}

func (ptr *QSurfaceFormat) SetOption(option QSurfaceFormat__FormatOption, on bool) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetOption(ptr.Pointer(), C.longlong(option), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QSurfaceFormat) SetOptions(options QSurfaceFormat__FormatOption) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetOptions(ptr.Pointer(), C.longlong(options))
	}
}

func (ptr *QSurfaceFormat) SetProfile(profile QSurfaceFormat__OpenGLContextProfile) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetProfile(ptr.Pointer(), C.longlong(profile))
	}
}

func (ptr *QSurfaceFormat) SetRedBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetRedBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetRenderableType(ty QSurfaceFormat__RenderableType) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetRenderableType(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QSurfaceFormat) SetSamples(numSamples int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSamples(ptr.Pointer(), C.int(int32(numSamples)))
	}
}

func (ptr *QSurfaceFormat) SetStencilBufferSize(size int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetStencilBufferSize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QSurfaceFormat) SetStereo(enable bool) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetStereo(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QSurfaceFormat) SetSwapBehavior(behavior QSurfaceFormat__SwapBehavior) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSwapBehavior(ptr.Pointer(), C.longlong(behavior))
	}
}

func (ptr *QSurfaceFormat) SetSwapInterval(interval int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetSwapInterval(ptr.Pointer(), C.int(int32(interval)))
	}
}

func (ptr *QSurfaceFormat) SetVersion(major int, minor int) {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_SetVersion(ptr.Pointer(), C.int(int32(major)), C.int(int32(minor)))
	}
}

func (ptr *QSurfaceFormat) StencilBufferSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_StencilBufferSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) Stereo() bool {
	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_Stereo(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) SwapBehavior() QSurfaceFormat__SwapBehavior {
	if ptr.Pointer() != nil {
		return QSurfaceFormat__SwapBehavior(C.QSurfaceFormat_SwapBehavior(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSurfaceFormat) SwapInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSurfaceFormat_SwapInterval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSurfaceFormat) TestOption(option QSurfaceFormat__FormatOption) bool {
	if ptr.Pointer() != nil {
		return C.QSurfaceFormat_TestOption(ptr.Pointer(), C.longlong(option)) != 0
	}
	return false
}

func (ptr *QSurfaceFormat) DestroyQSurfaceFormat() {
	if ptr.Pointer() != nil {
		C.QSurfaceFormat_DestroyQSurfaceFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QSyntaxHighlighter struct {
	core.QObject
}

type QSyntaxHighlighter_ITF interface {
	core.QObject_ITF
	QSyntaxHighlighter_PTR() *QSyntaxHighlighter
}

func (p *QSyntaxHighlighter) QSyntaxHighlighter_PTR() *QSyntaxHighlighter {
	return p
}

func (p *QSyntaxHighlighter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSyntaxHighlighter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSyntaxHighlighter(ptr QSyntaxHighlighter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSyntaxHighlighter_PTR().Pointer()
	}
	return nil
}

func NewQSyntaxHighlighterFromPointer(ptr unsafe.Pointer) *QSyntaxHighlighter {
	var n = new(QSyntaxHighlighter)
	n.SetPointer(ptr)
	return n
}
func (ptr *QSyntaxHighlighter) Format(position int) *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QSyntaxHighlighter_Format(ptr.Pointer(), C.int(int32(position))))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func NewQSyntaxHighlighter(parent core.QObject_ITF) *QSyntaxHighlighter {
	var tmpValue = NewQSyntaxHighlighterFromPointer(C.QSyntaxHighlighter_NewQSyntaxHighlighter(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSyntaxHighlighter2(parent QTextDocument_ITF) *QSyntaxHighlighter {
	var tmpValue = NewQSyntaxHighlighterFromPointer(C.QSyntaxHighlighter_NewQSyntaxHighlighter2(PointerFromQTextDocument(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QSyntaxHighlighter) CurrentBlock() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QSyntaxHighlighter_CurrentBlock(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QSyntaxHighlighter) CurrentBlockState() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSyntaxHighlighter_CurrentBlockState(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSyntaxHighlighter) CurrentBlockUserData() *QTextBlockUserData {
	if ptr.Pointer() != nil {
		return NewQTextBlockUserDataFromPointer(C.QSyntaxHighlighter_CurrentBlockUserData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSyntaxHighlighter) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QSyntaxHighlighter_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQSyntaxHighlighter_HighlightBlock
func callbackQSyntaxHighlighter_HighlightBlock(ptr unsafe.Pointer, text C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::highlightBlock"); signal != nil {
		signal.(func(string))(cGoUnpackString(text))
	}

}

func (ptr *QSyntaxHighlighter) ConnectHighlightBlock(f func(text string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::highlightBlock", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectHighlightBlock(text string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::highlightBlock")
	}
}

func (ptr *QSyntaxHighlighter) HighlightBlock(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QSyntaxHighlighter_HighlightBlock(ptr.Pointer(), textC)
	}
}

func (ptr *QSyntaxHighlighter) PreviousBlockState() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSyntaxHighlighter_PreviousBlockState(ptr.Pointer())))
	}
	return 0
}

//export callbackQSyntaxHighlighter_Rehighlight
func callbackQSyntaxHighlighter_Rehighlight(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::rehighlight"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSyntaxHighlighter) ConnectRehighlight(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::rehighlight", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectRehighlight() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::rehighlight")
	}
}

func (ptr *QSyntaxHighlighter) Rehighlight() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_Rehighlight(ptr.Pointer())
	}
}

//export callbackQSyntaxHighlighter_RehighlightBlock
func callbackQSyntaxHighlighter_RehighlightBlock(ptr unsafe.Pointer, block unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::rehighlightBlock"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	}

}

func (ptr *QSyntaxHighlighter) ConnectRehighlightBlock(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::rehighlightBlock", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectRehighlightBlock(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::rehighlightBlock")
	}
}

func (ptr *QSyntaxHighlighter) RehighlightBlock(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_RehighlightBlock(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QSyntaxHighlighter) SetCurrentBlockState(newState int) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetCurrentBlockState(ptr.Pointer(), C.int(int32(newState)))
	}
}

func (ptr *QSyntaxHighlighter) SetCurrentBlockUserData(data QTextBlockUserData_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetCurrentBlockUserData(ptr.Pointer(), PointerFromQTextBlockUserData(data))
	}
}

func (ptr *QSyntaxHighlighter) SetDocument(doc QTextDocument_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetDocument(ptr.Pointer(), PointerFromQTextDocument(doc))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat2(start int, count int, color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat2(ptr.Pointer(), C.int(int32(start)), C.int(int32(count)), PointerFromQColor(color))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat3(start int, count int, font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat3(ptr.Pointer(), C.int(int32(start)), C.int(int32(count)), PointerFromQFont(font))
	}
}

func (ptr *QSyntaxHighlighter) SetFormat(start int, count int, format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_SetFormat(ptr.Pointer(), C.int(int32(start)), C.int(int32(count)), PointerFromQTextCharFormat(format))
	}
}

//export callbackQSyntaxHighlighter_DestroyQSyntaxHighlighter
func callbackQSyntaxHighlighter_DestroyQSyntaxHighlighter(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::~QSyntaxHighlighter"); signal != nil {
		signal.(func())()
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).DestroyQSyntaxHighlighterDefault()
	}
}

func (ptr *QSyntaxHighlighter) ConnectDestroyQSyntaxHighlighter(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::~QSyntaxHighlighter", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectDestroyQSyntaxHighlighter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::~QSyntaxHighlighter")
	}
}

func (ptr *QSyntaxHighlighter) DestroyQSyntaxHighlighter() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DestroyQSyntaxHighlighter(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSyntaxHighlighter) DestroyQSyntaxHighlighterDefault() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DestroyQSyntaxHighlighterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSyntaxHighlighter_TimerEvent
func callbackQSyntaxHighlighter_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::timerEvent", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::timerEvent")
	}
}

func (ptr *QSyntaxHighlighter) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QSyntaxHighlighter) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQSyntaxHighlighter_ChildEvent
func callbackQSyntaxHighlighter_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::childEvent", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::childEvent")
	}
}

func (ptr *QSyntaxHighlighter) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QSyntaxHighlighter) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQSyntaxHighlighter_ConnectNotify
func callbackQSyntaxHighlighter_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSyntaxHighlighter) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::connectNotify", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::connectNotify")
	}
}

func (ptr *QSyntaxHighlighter) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSyntaxHighlighter) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSyntaxHighlighter_CustomEvent
func callbackQSyntaxHighlighter_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QSyntaxHighlighter) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::customEvent", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::customEvent")
	}
}

func (ptr *QSyntaxHighlighter) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QSyntaxHighlighter) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQSyntaxHighlighter_DeleteLater
func callbackQSyntaxHighlighter_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSyntaxHighlighter) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::deleteLater", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::deleteLater")
	}
}

func (ptr *QSyntaxHighlighter) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSyntaxHighlighter) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSyntaxHighlighter_DisconnectNotify
func callbackQSyntaxHighlighter_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQSyntaxHighlighterFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSyntaxHighlighter) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::disconnectNotify", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::disconnectNotify")
	}
}

func (ptr *QSyntaxHighlighter) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSyntaxHighlighter) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSyntaxHighlighter_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQSyntaxHighlighter_Event
func callbackQSyntaxHighlighter_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSyntaxHighlighterFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QSyntaxHighlighter) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::event", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::event")
	}
}

func (ptr *QSyntaxHighlighter) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSyntaxHighlighter) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSyntaxHighlighter_EventFilter
func callbackQSyntaxHighlighter_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSyntaxHighlighterFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QSyntaxHighlighter) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::eventFilter", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::eventFilter")
	}
}

func (ptr *QSyntaxHighlighter) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSyntaxHighlighter) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSyntaxHighlighter_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSyntaxHighlighter_MetaObject
func callbackQSyntaxHighlighter_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSyntaxHighlighter::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQSyntaxHighlighterFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSyntaxHighlighter) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::metaObject", f)
	}
}

func (ptr *QSyntaxHighlighter) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSyntaxHighlighter::metaObject")
	}
}

func (ptr *QSyntaxHighlighter) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSyntaxHighlighter_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSyntaxHighlighter) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QSyntaxHighlighter_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTabletEvent::PointerType
type QTabletEvent__PointerType int64

const (
	QTabletEvent__UnknownPointer = QTabletEvent__PointerType(0)
	QTabletEvent__Pen            = QTabletEvent__PointerType(1)
	QTabletEvent__Cursor         = QTabletEvent__PointerType(2)
	QTabletEvent__Eraser         = QTabletEvent__PointerType(3)
)

//QTabletEvent::TabletDevice
type QTabletEvent__TabletDevice int64

const (
	QTabletEvent__NoDevice       = QTabletEvent__TabletDevice(0)
	QTabletEvent__Puck           = QTabletEvent__TabletDevice(1)
	QTabletEvent__Stylus         = QTabletEvent__TabletDevice(2)
	QTabletEvent__Airbrush       = QTabletEvent__TabletDevice(3)
	QTabletEvent__FourDMouse     = QTabletEvent__TabletDevice(4)
	QTabletEvent__XFreeEraser    = QTabletEvent__TabletDevice(5)
	QTabletEvent__RotationStylus = QTabletEvent__TabletDevice(6)
)

type QTabletEvent struct {
	QInputEvent
}

type QTabletEvent_ITF interface {
	QInputEvent_ITF
	QTabletEvent_PTR() *QTabletEvent
}

func (p *QTabletEvent) QTabletEvent_PTR() *QTabletEvent {
	return p
}

func (p *QTabletEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QTabletEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQTabletEvent(ptr QTabletEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTabletEvent_PTR().Pointer()
	}
	return nil
}

func NewQTabletEventFromPointer(ptr unsafe.Pointer) *QTabletEvent {
	var n = new(QTabletEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTabletEvent) DestroyQTabletEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTabletEvent(ty core.QEvent__Type, pos core.QPointF_ITF, globalPos core.QPointF_ITF, device int, pointerType int, pressure float64, xTilt int, yTilt int, tangentialPressure float64, rotation float64, z int, keyState core.Qt__KeyboardModifier, uniqueID int64, button core.Qt__MouseButton, buttons core.Qt__MouseButton) *QTabletEvent {
	var tmpValue = NewQTabletEventFromPointer(C.QTabletEvent_NewQTabletEvent(C.longlong(ty), core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), C.int(int32(device)), C.int(int32(pointerType)), C.double(pressure), C.int(int32(xTilt)), C.int(int32(yTilt)), C.double(tangentialPressure), C.double(rotation), C.int(int32(z)), C.longlong(keyState), C.longlong(uniqueID), C.longlong(button), C.longlong(buttons)))
	runtime.SetFinalizer(tmpValue, (*QTabletEvent).DestroyQTabletEvent)
	return tmpValue
}

func (ptr *QTabletEvent) Button() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QTabletEvent_Button(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QTabletEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Device() QTabletEvent__TabletDevice {
	if ptr.Pointer() != nil {
		return QTabletEvent__TabletDevice(C.QTabletEvent_Device(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QTabletEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QTabletEvent) GlobalPosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTabletEvent_GlobalPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) HiResGlobalX() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_HiResGlobalX(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) HiResGlobalY() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_HiResGlobalY(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) PointerType() QTabletEvent__PointerType {
	if ptr.Pointer() != nil {
		return QTabletEvent__PointerType(C.QTabletEvent_PointerType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QTabletEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QTabletEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QTabletEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) Pressure() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_Pressure(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) Rotation() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_Rotation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) TangentialPressure() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTabletEvent_TangentialPressure(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) UniqueId() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTabletEvent_UniqueId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) XTilt() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_XTilt(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_Y(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) YTilt() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_YTilt(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) Z() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTabletEvent_Z(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTabletEvent) MExtra() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QTabletEvent_MExtra(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTabletEvent) SetMExtra(vvo unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QTabletEvent_SetMExtra(ptr.Pointer(), vvo)
	}
}

func (ptr *QTabletEvent) MUnique() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTabletEvent_MUnique(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTabletEvent) SetMUnique(vqi int64) {
	if ptr.Pointer() != nil {
		C.QTabletEvent_SetMUnique(ptr.Pointer(), C.longlong(vqi))
	}
}

type QTextBlock struct {
	ptr unsafe.Pointer
}

type QTextBlock_ITF interface {
	QTextBlock_PTR() *QTextBlock
}

func (p *QTextBlock) QTextBlock_PTR() *QTextBlock {
	return p
}

func (p *QTextBlock) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextBlock) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextBlock(ptr QTextBlock_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlock_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockFromPointer(ptr unsafe.Pointer) *QTextBlock {
	var n = new(QTextBlock)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextBlock) DestroyQTextBlock() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QTextBlock) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextBlock_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func NewQTextBlock(other QTextBlock_ITF) *QTextBlock {
	var tmpValue = NewQTextBlockFromPointer(C.QTextBlock_NewQTextBlock(PointerFromQTextBlock(other)))
	runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
	return tmpValue
}

func (ptr *QTextBlock) BlockFormat() *QTextBlockFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFormatFromPointer(C.QTextBlock_BlockFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) BlockFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_BlockFormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) CharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextBlock_CharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) CharFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_CharFormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) ClearLayout() {
	if ptr.Pointer() != nil {
		C.QTextBlock_ClearLayout(ptr.Pointer())
	}
}

func (ptr *QTextBlock) Contains(position int) bool {
	if ptr.Pointer() != nil {
		return C.QTextBlock_Contains(ptr.Pointer(), C.int(int32(position))) != 0
	}
	return false
}

func (ptr *QTextBlock) BlockNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_BlockNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextBlock_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) FirstLineNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_FirstLineNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) IsVisible() bool {
	if ptr.Pointer() != nil {
		return C.QTextBlock_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlock) Layout() *QTextLayout {
	if ptr.Pointer() != nil {
		return NewQTextLayoutFromPointer(C.QTextBlock_Layout(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) Length() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_Length(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) LineCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_LineCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) Next() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextBlock_Next(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) Previous() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextBlock_Previous(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) Revision() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_Revision(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlock) SetLineCount(count int) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetLineCount(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextBlock) SetRevision(rev int) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetRevision(ptr.Pointer(), C.int(int32(rev)))
	}
}

func (ptr *QTextBlock) SetUserData(data QTextBlockUserData_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetUserData(ptr.Pointer(), PointerFromQTextBlockUserData(data))
	}
}

func (ptr *QTextBlock) SetUserState(state int) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetUserState(ptr.Pointer(), C.int(int32(state)))
	}
}

func (ptr *QTextBlock) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QTextBlock_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

func (ptr *QTextBlock) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextBlock_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextBlock) TextDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextBlock_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlock) TextList() *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextBlock_TextList(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextBlock) UserData() *QTextBlockUserData {
	if ptr.Pointer() != nil {
		return NewQTextBlockUserDataFromPointer(C.QTextBlock_UserData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlock) UserState() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlock_UserState(ptr.Pointer())))
	}
	return 0
}

//QTextBlockFormat::LineHeightTypes
type QTextBlockFormat__LineHeightTypes int64

const (
	QTextBlockFormat__SingleHeight       = QTextBlockFormat__LineHeightTypes(0)
	QTextBlockFormat__ProportionalHeight = QTextBlockFormat__LineHeightTypes(1)
	QTextBlockFormat__FixedHeight        = QTextBlockFormat__LineHeightTypes(2)
	QTextBlockFormat__MinimumHeight      = QTextBlockFormat__LineHeightTypes(3)
	QTextBlockFormat__LineDistanceHeight = QTextBlockFormat__LineHeightTypes(4)
)

type QTextBlockFormat struct {
	QTextFormat
}

type QTextBlockFormat_ITF interface {
	QTextFormat_ITF
	QTextBlockFormat_PTR() *QTextBlockFormat
}

func (p *QTextBlockFormat) QTextBlockFormat_PTR() *QTextBlockFormat {
	return p
}

func (p *QTextBlockFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextBlockFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextBlockFormat(ptr QTextBlockFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockFormatFromPointer(ptr unsafe.Pointer) *QTextBlockFormat {
	var n = new(QTextBlockFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextBlockFormat) DestroyQTextBlockFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextBlockFormat() *QTextBlockFormat {
	var tmpValue = NewQTextBlockFormatFromPointer(C.QTextBlockFormat_NewQTextBlockFormat())
	runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
	return tmpValue
}

func (ptr *QTextBlockFormat) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextBlockFormat_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) BottomMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_BottomMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) Indent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlockFormat_Indent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlockFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextBlockFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlockFormat) LeftMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LeftMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeight2() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LineHeight2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeight(scriptLineHeight float64, scaling float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_LineHeight(ptr.Pointer(), C.double(scriptLineHeight), C.double(scaling)))
	}
	return 0
}

func (ptr *QTextBlockFormat) LineHeightType() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBlockFormat_LineHeightType(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBlockFormat) NonBreakableLines() bool {
	if ptr.Pointer() != nil {
		return C.QTextBlockFormat_NonBreakableLines(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBlockFormat) PageBreakPolicy() QTextFormat__PageBreakFlag {
	if ptr.Pointer() != nil {
		return QTextFormat__PageBreakFlag(C.QTextBlockFormat_PageBreakPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) RightMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_RightMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextBlockFormat) SetBottomMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetBottomMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetIndent(indentation int) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetIndent(ptr.Pointer(), C.int(int32(indentation)))
	}
}

func (ptr *QTextBlockFormat) SetLeftMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetLeftMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetLineHeight(height float64, heightType int) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetLineHeight(ptr.Pointer(), C.double(height), C.int(int32(heightType)))
	}
}

func (ptr *QTextBlockFormat) SetNonBreakableLines(b bool) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetNonBreakableLines(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTextBlockFormat) SetPageBreakPolicy(policy QTextFormat__PageBreakFlag) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetPageBreakPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QTextBlockFormat) SetRightMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetRightMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) SetTextIndent(indent float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetTextIndent(ptr.Pointer(), C.double(indent))
	}
}

func (ptr *QTextBlockFormat) SetTopMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextBlockFormat_SetTopMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextBlockFormat) TextIndent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_TextIndent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBlockFormat) TopMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextBlockFormat_TopMargin(ptr.Pointer()))
	}
	return 0
}

type QTextBlockGroup struct {
	QTextObject
}

type QTextBlockGroup_ITF interface {
	QTextObject_ITF
	QTextBlockGroup_PTR() *QTextBlockGroup
}

func (p *QTextBlockGroup) QTextBlockGroup_PTR() *QTextBlockGroup {
	return p
}

func (p *QTextBlockGroup) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextBlockGroup) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextBlockGroup(ptr QTextBlockGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockGroup_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockGroupFromPointer(ptr unsafe.Pointer) *QTextBlockGroup {
	var n = new(QTextBlockGroup)
	n.SetPointer(ptr)
	return n
}
func NewQTextBlockGroup(document QTextDocument_ITF) *QTextBlockGroup {
	var tmpValue = NewQTextBlockGroupFromPointer(C.QTextBlockGroup_NewQTextBlockGroup(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQTextBlockGroup_BlockFormatChanged
func callbackQTextBlockGroup_BlockFormatChanged(ptr unsafe.Pointer, block unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::blockFormatChanged"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockFormatChangedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockFormatChanged(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::blockFormatChanged", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockFormatChanged() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::blockFormatChanged")
	}
}

func (ptr *QTextBlockGroup) BlockFormatChanged(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockFormatChanged(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockFormatChangedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockFormatChangedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextBlockGroup_BlockInserted
func callbackQTextBlockGroup_BlockInserted(ptr unsafe.Pointer, block unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::blockInserted"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockInsertedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockInserted(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::blockInserted", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockInserted() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::blockInserted")
	}
}

func (ptr *QTextBlockGroup) BlockInserted(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockInserted(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockInsertedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockInsertedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockList() []*QTextBlock {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QTextBlock {
			var out = make([]*QTextBlock, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextBlockGroupFromPointer(l.data).blockList_atList(i)
			}
			return out
		}(C.QTextBlockGroup_BlockList(ptr.Pointer()))
	}
	return nil
}

//export callbackQTextBlockGroup_BlockRemoved
func callbackQTextBlockGroup_BlockRemoved(ptr unsafe.Pointer, block unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::blockRemoved"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextBlockGroupFromPointer(ptr).BlockRemovedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextBlockGroup) ConnectBlockRemoved(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::blockRemoved", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectBlockRemoved() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::blockRemoved")
	}
}

func (ptr *QTextBlockGroup) BlockRemoved(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockRemoved(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) BlockRemovedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_BlockRemovedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextBlockGroup) DestroyQTextBlockGroup() {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DestroyQTextBlockGroup(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextBlockGroup) blockList_atList(i int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextBlockGroup_blockList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

//export callbackQTextBlockGroup_TimerEvent
func callbackQTextBlockGroup_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextBlockGroupFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextBlockGroup) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::timerEvent", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::timerEvent")
	}
}

func (ptr *QTextBlockGroup) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextBlockGroup) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextBlockGroup_ChildEvent
func callbackQTextBlockGroup_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextBlockGroupFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextBlockGroup) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::childEvent", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::childEvent")
	}
}

func (ptr *QTextBlockGroup) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextBlockGroup) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextBlockGroup_ConnectNotify
func callbackQTextBlockGroup_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextBlockGroupFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextBlockGroup) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::connectNotify", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::connectNotify")
	}
}

func (ptr *QTextBlockGroup) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextBlockGroup) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextBlockGroup_CustomEvent
func callbackQTextBlockGroup_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextBlockGroupFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextBlockGroup) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::customEvent", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::customEvent")
	}
}

func (ptr *QTextBlockGroup) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextBlockGroup) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextBlockGroup_DeleteLater
func callbackQTextBlockGroup_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextBlockGroupFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextBlockGroup) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::deleteLater", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::deleteLater")
	}
}

func (ptr *QTextBlockGroup) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextBlockGroup) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextBlockGroup_DisconnectNotify
func callbackQTextBlockGroup_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextBlockGroupFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextBlockGroup) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::disconnectNotify", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::disconnectNotify")
	}
}

func (ptr *QTextBlockGroup) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextBlockGroup) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextBlockGroup_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextBlockGroup_Event
func callbackQTextBlockGroup_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextBlockGroupFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextBlockGroup) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::event", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::event")
	}
}

func (ptr *QTextBlockGroup) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextBlockGroup) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextBlockGroup_EventFilter
func callbackQTextBlockGroup_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextBlockGroupFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextBlockGroup) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::eventFilter", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::eventFilter")
	}
}

func (ptr *QTextBlockGroup) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextBlockGroup) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextBlockGroup_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextBlockGroup_MetaObject
func callbackQTextBlockGroup_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockGroup::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextBlockGroupFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextBlockGroup) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::metaObject", f)
	}
}

func (ptr *QTextBlockGroup) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockGroup::metaObject")
	}
}

func (ptr *QTextBlockGroup) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextBlockGroup_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextBlockGroup) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextBlockGroup_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextBlockUserData struct {
	ptr unsafe.Pointer
}

type QTextBlockUserData_ITF interface {
	QTextBlockUserData_PTR() *QTextBlockUserData
}

func (p *QTextBlockUserData) QTextBlockUserData_PTR() *QTextBlockUserData {
	return p
}

func (p *QTextBlockUserData) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextBlockUserData) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextBlockUserData(ptr QTextBlockUserData_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBlockUserData_PTR().Pointer()
	}
	return nil
}

func NewQTextBlockUserDataFromPointer(ptr unsafe.Pointer) *QTextBlockUserData {
	var n = new(QTextBlockUserData)
	n.SetPointer(ptr)
	return n
}

//export callbackQTextBlockUserData_DestroyQTextBlockUserData
func callbackQTextBlockUserData_DestroyQTextBlockUserData(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextBlockUserData::~QTextBlockUserData"); signal != nil {
		signal.(func())()
	} else {
		NewQTextBlockUserDataFromPointer(ptr).DestroyQTextBlockUserDataDefault()
	}
}

func (ptr *QTextBlockUserData) ConnectDestroyQTextBlockUserData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockUserData::~QTextBlockUserData", f)
	}
}

func (ptr *QTextBlockUserData) DisconnectDestroyQTextBlockUserData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextBlockUserData::~QTextBlockUserData")
	}
}

func (ptr *QTextBlockUserData) DestroyQTextBlockUserData() {
	if ptr.Pointer() != nil {
		C.QTextBlockUserData_DestroyQTextBlockUserData(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextBlockUserData) DestroyQTextBlockUserDataDefault() {
	if ptr.Pointer() != nil {
		C.QTextBlockUserData_DestroyQTextBlockUserDataDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//QTextCharFormat::FontPropertiesInheritanceBehavior
type QTextCharFormat__FontPropertiesInheritanceBehavior int64

const (
	QTextCharFormat__FontPropertiesSpecifiedOnly = QTextCharFormat__FontPropertiesInheritanceBehavior(0)
	QTextCharFormat__FontPropertiesAll           = QTextCharFormat__FontPropertiesInheritanceBehavior(1)
)

//QTextCharFormat::UnderlineStyle
type QTextCharFormat__UnderlineStyle int64

var (
	QTextCharFormat__NoUnderline         = QTextCharFormat__UnderlineStyle(0)
	QTextCharFormat__SingleUnderline     = QTextCharFormat__UnderlineStyle(1)
	QTextCharFormat__DashUnderline       = QTextCharFormat__UnderlineStyle(2)
	QTextCharFormat__DotLine             = QTextCharFormat__UnderlineStyle(3)
	QTextCharFormat__DashDotLine         = QTextCharFormat__UnderlineStyle(4)
	QTextCharFormat__DashDotDotLine      = QTextCharFormat__UnderlineStyle(5)
	QTextCharFormat__WaveUnderline       = QTextCharFormat__UnderlineStyle(6)
	QTextCharFormat__SpellCheckUnderline = QTextCharFormat__UnderlineStyle(7)
)

//QTextCharFormat::VerticalAlignment
type QTextCharFormat__VerticalAlignment int64

const (
	QTextCharFormat__AlignNormal      = QTextCharFormat__VerticalAlignment(0)
	QTextCharFormat__AlignSuperScript = QTextCharFormat__VerticalAlignment(1)
	QTextCharFormat__AlignSubScript   = QTextCharFormat__VerticalAlignment(2)
	QTextCharFormat__AlignMiddle      = QTextCharFormat__VerticalAlignment(3)
	QTextCharFormat__AlignTop         = QTextCharFormat__VerticalAlignment(4)
	QTextCharFormat__AlignBottom      = QTextCharFormat__VerticalAlignment(5)
	QTextCharFormat__AlignBaseline    = QTextCharFormat__VerticalAlignment(6)
)

type QTextCharFormat struct {
	QTextFormat
}

type QTextCharFormat_ITF interface {
	QTextFormat_ITF
	QTextCharFormat_PTR() *QTextCharFormat
}

func (p *QTextCharFormat) QTextCharFormat_PTR() *QTextCharFormat {
	return p
}

func (p *QTextCharFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextCharFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextCharFormat(ptr QTextCharFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextCharFormatFromPointer(ptr unsafe.Pointer) *QTextCharFormat {
	var n = new(QTextCharFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextCharFormat) DestroyQTextCharFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextCharFormat() *QTextCharFormat {
	var tmpValue = NewQTextCharFormatFromPointer(C.QTextCharFormat_NewQTextCharFormat())
	runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
	return tmpValue
}

func (ptr *QTextCharFormat) AnchorNames() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QTextCharFormat_AnchorNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QTextCharFormat) FontUnderline() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontUnderline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) SetUnderlineStyle(style QTextCharFormat__UnderlineStyle) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetUnderlineStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextCharFormat) AnchorHref() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCharFormat_AnchorHref(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextCharFormat_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCharFormat) FontCapitalization() QFont__Capitalization {
	if ptr.Pointer() != nil {
		return QFont__Capitalization(C.QTextCharFormat_FontCapitalization(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontFamily() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCharFormat_FontFamily(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) FontFixedPitch() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontFixedPitch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontHintingPreference() QFont__HintingPreference {
	if ptr.Pointer() != nil {
		return QFont__HintingPreference(C.QTextCharFormat_FontHintingPreference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontItalic() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontItalic(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontKerning() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontKerning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontLetterSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontLetterSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontLetterSpacingType() QFont__SpacingType {
	if ptr.Pointer() != nil {
		return QFont__SpacingType(C.QTextCharFormat_FontLetterSpacingType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontOverline() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontOverline(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontPointSize() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontPointSize(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStretch() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCharFormat_FontStretch(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStrikeOut() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_FontStrikeOut(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) FontStyleHint() QFont__StyleHint {
	if ptr.Pointer() != nil {
		return QFont__StyleHint(C.QTextCharFormat_FontStyleHint(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontStyleStrategy() QFont__StyleStrategy {
	if ptr.Pointer() != nil {
		return QFont__StyleStrategy(C.QTextCharFormat_FontStyleStrategy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) FontWeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCharFormat_FontWeight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCharFormat) FontWordSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextCharFormat_FontWordSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) IsAnchor() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_IsAnchor(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextCharFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCharFormat) SetAnchor(anchor bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetAnchor(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(anchor))))
	}
}

func (ptr *QTextCharFormat) SetAnchorHref(value string) {
	if ptr.Pointer() != nil {
		var valueC = C.CString(value)
		defer C.free(unsafe.Pointer(valueC))
		C.QTextCharFormat_SetAnchorHref(ptr.Pointer(), valueC)
	}
}

func (ptr *QTextCharFormat) SetAnchorNames(names []string) {
	if ptr.Pointer() != nil {
		var namesC = C.CString(strings.Join(names, "|"))
		defer C.free(unsafe.Pointer(namesC))
		C.QTextCharFormat_SetAnchorNames(ptr.Pointer(), namesC)
	}
}

func (ptr *QTextCharFormat) SetFont2(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFont2(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextCharFormat) SetFont(font QFont_ITF, behavior QTextCharFormat__FontPropertiesInheritanceBehavior) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFont(ptr.Pointer(), PointerFromQFont(font), C.longlong(behavior))
	}
}

func (ptr *QTextCharFormat) SetFontCapitalization(capitalization QFont__Capitalization) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontCapitalization(ptr.Pointer(), C.longlong(capitalization))
	}
}

func (ptr *QTextCharFormat) SetFontFamily(family string) {
	if ptr.Pointer() != nil {
		var familyC = C.CString(family)
		defer C.free(unsafe.Pointer(familyC))
		C.QTextCharFormat_SetFontFamily(ptr.Pointer(), familyC)
	}
}

func (ptr *QTextCharFormat) SetFontFixedPitch(fixedPitch bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontFixedPitch(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(fixedPitch))))
	}
}

func (ptr *QTextCharFormat) SetFontHintingPreference(hintingPreference QFont__HintingPreference) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontHintingPreference(ptr.Pointer(), C.longlong(hintingPreference))
	}
}

func (ptr *QTextCharFormat) SetFontItalic(italic bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontItalic(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(italic))))
	}
}

func (ptr *QTextCharFormat) SetFontKerning(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontKerning(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextCharFormat) SetFontLetterSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontLetterSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextCharFormat) SetFontLetterSpacingType(letterSpacingType QFont__SpacingType) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontLetterSpacingType(ptr.Pointer(), C.longlong(letterSpacingType))
	}
}

func (ptr *QTextCharFormat) SetFontOverline(overline bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontOverline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(overline))))
	}
}

func (ptr *QTextCharFormat) SetFontPointSize(size float64) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontPointSize(ptr.Pointer(), C.double(size))
	}
}

func (ptr *QTextCharFormat) SetFontStretch(factor int) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStretch(ptr.Pointer(), C.int(int32(factor)))
	}
}

func (ptr *QTextCharFormat) SetFontStrikeOut(strikeOut bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStrikeOut(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(strikeOut))))
	}
}

func (ptr *QTextCharFormat) SetFontStyleHint(hint QFont__StyleHint, strategy QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStyleHint(ptr.Pointer(), C.longlong(hint), C.longlong(strategy))
	}
}

func (ptr *QTextCharFormat) SetFontStyleStrategy(strategy QFont__StyleStrategy) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontStyleStrategy(ptr.Pointer(), C.longlong(strategy))
	}
}

func (ptr *QTextCharFormat) SetFontUnderline(underline bool) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontUnderline(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(underline))))
	}
}

func (ptr *QTextCharFormat) SetFontWeight(weight int) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontWeight(ptr.Pointer(), C.int(int32(weight)))
	}
}

func (ptr *QTextCharFormat) SetFontWordSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetFontWordSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextCharFormat) SetTextOutline(pen QPen_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetTextOutline(ptr.Pointer(), PointerFromQPen(pen))
	}
}

func (ptr *QTextCharFormat) SetToolTip(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QTextCharFormat_SetToolTip(ptr.Pointer(), textC)
	}
}

func (ptr *QTextCharFormat) SetUnderlineColor(color QColor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetUnderlineColor(ptr.Pointer(), PointerFromQColor(color))
	}
}

func (ptr *QTextCharFormat) SetVerticalAlignment(alignment QTextCharFormat__VerticalAlignment) {
	if ptr.Pointer() != nil {
		C.QTextCharFormat_SetVerticalAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextCharFormat) TextOutline() *QPen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPenFromPointer(C.QTextCharFormat_TextOutline(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCharFormat) ToolTip() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCharFormat_ToolTip(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCharFormat) UnderlineColor() *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QTextCharFormat_UnderlineColor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCharFormat) UnderlineStyle() QTextCharFormat__UnderlineStyle {
	if ptr.Pointer() != nil {
		return QTextCharFormat__UnderlineStyle(C.QTextCharFormat_UnderlineStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextCharFormat) VerticalAlignment() QTextCharFormat__VerticalAlignment {
	if ptr.Pointer() != nil {
		return QTextCharFormat__VerticalAlignment(C.QTextCharFormat_VerticalAlignment(ptr.Pointer()))
	}
	return 0
}

//QTextCursor::MoveMode
type QTextCursor__MoveMode int64

const (
	QTextCursor__MoveAnchor = QTextCursor__MoveMode(0)
	QTextCursor__KeepAnchor = QTextCursor__MoveMode(1)
)

//QTextCursor::MoveOperation
type QTextCursor__MoveOperation int64

const (
	QTextCursor__NoMove            = QTextCursor__MoveOperation(0)
	QTextCursor__Start             = QTextCursor__MoveOperation(1)
	QTextCursor__Up                = QTextCursor__MoveOperation(2)
	QTextCursor__StartOfLine       = QTextCursor__MoveOperation(3)
	QTextCursor__StartOfBlock      = QTextCursor__MoveOperation(4)
	QTextCursor__StartOfWord       = QTextCursor__MoveOperation(5)
	QTextCursor__PreviousBlock     = QTextCursor__MoveOperation(6)
	QTextCursor__PreviousCharacter = QTextCursor__MoveOperation(7)
	QTextCursor__PreviousWord      = QTextCursor__MoveOperation(8)
	QTextCursor__Left              = QTextCursor__MoveOperation(9)
	QTextCursor__WordLeft          = QTextCursor__MoveOperation(10)
	QTextCursor__End               = QTextCursor__MoveOperation(11)
	QTextCursor__Down              = QTextCursor__MoveOperation(12)
	QTextCursor__EndOfLine         = QTextCursor__MoveOperation(13)
	QTextCursor__EndOfWord         = QTextCursor__MoveOperation(14)
	QTextCursor__EndOfBlock        = QTextCursor__MoveOperation(15)
	QTextCursor__NextBlock         = QTextCursor__MoveOperation(16)
	QTextCursor__NextCharacter     = QTextCursor__MoveOperation(17)
	QTextCursor__NextWord          = QTextCursor__MoveOperation(18)
	QTextCursor__Right             = QTextCursor__MoveOperation(19)
	QTextCursor__WordRight         = QTextCursor__MoveOperation(20)
	QTextCursor__NextCell          = QTextCursor__MoveOperation(21)
	QTextCursor__PreviousCell      = QTextCursor__MoveOperation(22)
	QTextCursor__NextRow           = QTextCursor__MoveOperation(23)
	QTextCursor__PreviousRow       = QTextCursor__MoveOperation(24)
)

//QTextCursor::SelectionType
type QTextCursor__SelectionType int64

const (
	QTextCursor__WordUnderCursor  = QTextCursor__SelectionType(0)
	QTextCursor__LineUnderCursor  = QTextCursor__SelectionType(1)
	QTextCursor__BlockUnderCursor = QTextCursor__SelectionType(2)
	QTextCursor__Document         = QTextCursor__SelectionType(3)
)

type QTextCursor struct {
	ptr unsafe.Pointer
}

type QTextCursor_ITF interface {
	QTextCursor_PTR() *QTextCursor
}

func (p *QTextCursor) QTextCursor_PTR() *QTextCursor {
	return p
}

func (p *QTextCursor) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextCursor) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextCursor(ptr QTextCursor_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCursor_PTR().Pointer()
	}
	return nil
}

func NewQTextCursorFromPointer(ptr unsafe.Pointer) *QTextCursor {
	var n = new(QTextCursor)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTextCursor) InsertBlock3(format QTextBlockFormat_ITF, charFormat QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock3(ptr.Pointer(), PointerFromQTextBlockFormat(format), PointerFromQTextCharFormat(charFormat))
	}
}

func (ptr *QTextCursor) InsertTable2(rows int, columns int) *QTextTable {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFromPointer(C.QTextCursor_InsertTable2(ptr.Pointer(), C.int(int32(rows)), C.int(int32(columns))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertTable(rows int, columns int, format QTextTableFormat_ITF) *QTextTable {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFromPointer(C.QTextCursor_InsertTable(ptr.Pointer(), C.int(int32(rows)), C.int(int32(columns)), PointerFromQTextTableFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertText2(text string, format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QTextCursor_InsertText2(ptr.Pointer(), textC, PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) MovePosition(operation QTextCursor__MoveOperation, mode QTextCursor__MoveMode, n int) bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_MovePosition(ptr.Pointer(), C.longlong(operation), C.longlong(mode), C.int(int32(n))) != 0
	}
	return false
}

func NewQTextCursor() *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor())
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor2(document QTextDocument_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor2(PointerFromQTextDocument(document)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor5(frame QTextFrame_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor5(PointerFromQTextFrame(frame)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor6(block QTextBlock_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor6(PointerFromQTextBlock(block)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func NewQTextCursor7(cursor QTextCursor_ITF) *QTextCursor {
	var tmpValue = NewQTextCursorFromPointer(C.QTextCursor_NewQTextCursor7(PointerFromQTextCursor(cursor)))
	runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
	return tmpValue
}

func (ptr *QTextCursor) Anchor() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_Anchor(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) AtBlockEnd() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtBlockEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtBlockStart() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtBlockStart(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) AtStart() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_AtStart(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) BeginEditBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_BeginEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) Block() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextCursor_Block(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) BlockCharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextCursor_BlockCharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) BlockFormat() *QTextBlockFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFormatFromPointer(C.QTextCursor_BlockFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) BlockNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_BlockNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) CharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextCursor_CharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) ClearSelection() {
	if ptr.Pointer() != nil {
		C.QTextCursor_ClearSelection(ptr.Pointer())
	}
}

func (ptr *QTextCursor) ColumnNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_ColumnNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) CreateList2(style QTextListFormat__Style) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_CreateList2(ptr.Pointer(), C.longlong(style)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CreateList(format QTextListFormat_ITF) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_CreateList(ptr.Pointer(), PointerFromQTextListFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CurrentFrame() *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextCursor_CurrentFrame(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CurrentList() *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_CurrentList(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) CurrentTable() *QTextTable {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFromPointer(C.QTextCursor_CurrentTable(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) DeleteChar() {
	if ptr.Pointer() != nil {
		C.QTextCursor_DeleteChar(ptr.Pointer())
	}
}

func (ptr *QTextCursor) DeletePreviousChar() {
	if ptr.Pointer() != nil {
		C.QTextCursor_DeletePreviousChar(ptr.Pointer())
	}
}

func (ptr *QTextCursor) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextCursor_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) EndEditBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_EndEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) HasComplexSelection() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_HasComplexSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) HasSelection() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_HasSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) InsertBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) InsertBlock2(format QTextBlockFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertBlock2(ptr.Pointer(), PointerFromQTextBlockFormat(format))
	}
}

func (ptr *QTextCursor) InsertFragment(fragment QTextDocumentFragment_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertFragment(ptr.Pointer(), PointerFromQTextDocumentFragment(fragment))
	}
}

func (ptr *QTextCursor) InsertFrame(format QTextFrameFormat_ITF) *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextCursor_InsertFrame(ptr.Pointer(), PointerFromQTextFrameFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertHtml(html string) {
	if ptr.Pointer() != nil {
		var htmlC = C.CString(html)
		defer C.free(unsafe.Pointer(htmlC))
		C.QTextCursor_InsertHtml(ptr.Pointer(), htmlC)
	}
}

func (ptr *QTextCursor) InsertImage4(image QImage_ITF, name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QTextCursor_InsertImage4(ptr.Pointer(), PointerFromQImage(image), nameC)
	}
}

func (ptr *QTextCursor) InsertImage3(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QTextCursor_InsertImage3(ptr.Pointer(), nameC)
	}
}

func (ptr *QTextCursor) InsertImage(format QTextImageFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage(ptr.Pointer(), PointerFromQTextImageFormat(format))
	}
}

func (ptr *QTextCursor) InsertImage2(format QTextImageFormat_ITF, alignment QTextFrameFormat__Position) {
	if ptr.Pointer() != nil {
		C.QTextCursor_InsertImage2(ptr.Pointer(), PointerFromQTextImageFormat(format), C.longlong(alignment))
	}
}

func (ptr *QTextCursor) InsertList2(style QTextListFormat__Style) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_InsertList2(ptr.Pointer(), C.longlong(style)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertList(format QTextListFormat_ITF) *QTextList {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFromPointer(C.QTextCursor_InsertList(ptr.Pointer(), PointerFromQTextListFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) InsertText(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QTextCursor_InsertText(ptr.Pointer(), textC)
	}
}

func (ptr *QTextCursor) IsCopyOf(other QTextCursor_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_IsCopyOf(ptr.Pointer(), PointerFromQTextCursor(other)) != 0
	}
	return false
}

func (ptr *QTextCursor) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) JoinPreviousEditBlock() {
	if ptr.Pointer() != nil {
		C.QTextCursor_JoinPreviousEditBlock(ptr.Pointer())
	}
}

func (ptr *QTextCursor) KeepPositionOnInsert() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_KeepPositionOnInsert(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) MergeBlockCharFormat(modifier QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_MergeBlockCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(modifier))
	}
}

func (ptr *QTextCursor) MergeBlockFormat(modifier QTextBlockFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_MergeBlockFormat(ptr.Pointer(), PointerFromQTextBlockFormat(modifier))
	}
}

func (ptr *QTextCursor) MergeCharFormat(modifier QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_MergeCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(modifier))
	}
}

func (ptr *QTextCursor) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) PositionInBlock() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_PositionInBlock(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) RemoveSelectedText() {
	if ptr.Pointer() != nil {
		C.QTextCursor_RemoveSelectedText(ptr.Pointer())
	}
}

func (ptr *QTextCursor) Select(selection QTextCursor__SelectionType) {
	if ptr.Pointer() != nil {
		C.QTextCursor_Select(ptr.Pointer(), C.longlong(selection))
	}
}

func (ptr *QTextCursor) SelectedTableCells(firstRow int, numRows int, firstColumn int, numColumns int) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SelectedTableCells(ptr.Pointer(), C.int(int32(firstRow)), C.int(int32(numRows)), C.int(int32(firstColumn)), C.int(int32(numColumns)))
	}
}

func (ptr *QTextCursor) SelectedText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCursor_SelectedText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextCursor) Selection() *QTextDocumentFragment {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextCursor_Selection(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCursor) SelectionEnd() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_SelectionEnd(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) SelectionStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_SelectionStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) SetBlockCharFormat(format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetBlockCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) SetBlockFormat(format QTextBlockFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetBlockFormat(ptr.Pointer(), PointerFromQTextBlockFormat(format))
	}
}

func (ptr *QTextCursor) SetCharFormat(format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetCharFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextCursor) SetKeepPositionOnInsert(b bool) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetKeepPositionOnInsert(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTextCursor) SetPosition(pos int, m QTextCursor__MoveMode) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetPosition(ptr.Pointer(), C.int(int32(pos)), C.longlong(m))
	}
}

func (ptr *QTextCursor) SetVerticalMovementX(x int) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetVerticalMovementX(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QTextCursor) SetVisualNavigation(b bool) {
	if ptr.Pointer() != nil {
		C.QTextCursor_SetVisualNavigation(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTextCursor) Swap(other QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextCursor_Swap(ptr.Pointer(), PointerFromQTextCursor(other))
	}
}

func (ptr *QTextCursor) VerticalMovementX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCursor_VerticalMovementX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextCursor) VisualNavigation() bool {
	if ptr.Pointer() != nil {
		return C.QTextCursor_VisualNavigation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextCursor) DestroyQTextCursor() {
	if ptr.Pointer() != nil {
		C.QTextCursor_DestroyQTextCursor(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QTextDocument::FindFlag
type QTextDocument__FindFlag int64

const (
	QTextDocument__FindBackward        = QTextDocument__FindFlag(0x00001)
	QTextDocument__FindCaseSensitively = QTextDocument__FindFlag(0x00002)
	QTextDocument__FindWholeWords      = QTextDocument__FindFlag(0x00004)
)

//QTextDocument::MetaInformation
type QTextDocument__MetaInformation int64

const (
	QTextDocument__DocumentTitle = QTextDocument__MetaInformation(0)
	QTextDocument__DocumentUrl   = QTextDocument__MetaInformation(1)
)

//QTextDocument::ResourceType
type QTextDocument__ResourceType int64

const (
	QTextDocument__HtmlResource       = QTextDocument__ResourceType(1)
	QTextDocument__ImageResource      = QTextDocument__ResourceType(2)
	QTextDocument__StyleSheetResource = QTextDocument__ResourceType(3)
	QTextDocument__UserResource       = QTextDocument__ResourceType(100)
)

//QTextDocument::Stacks
type QTextDocument__Stacks int64

const (
	QTextDocument__UndoStack         = QTextDocument__Stacks(0x01)
	QTextDocument__RedoStack         = QTextDocument__Stacks(0x02)
	QTextDocument__UndoAndRedoStacks = QTextDocument__Stacks(QTextDocument__UndoStack | QTextDocument__RedoStack)
)

type QTextDocument struct {
	core.QObject
}

type QTextDocument_ITF interface {
	core.QObject_ITF
	QTextDocument_PTR() *QTextDocument
}

func (p *QTextDocument) QTextDocument_PTR() *QTextDocument {
	return p
}

func (p *QTextDocument) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextDocument) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextDocument(ptr QTextDocument_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocument_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentFromPointer(ptr unsafe.Pointer) *QTextDocument {
	var n = new(QTextDocument)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTextDocument) BaseUrl() *core.QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQUrlFromPointer(C.QTextDocument_BaseUrl(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) BlockCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_BlockCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQTextDocument_CreateObject
func callbackQTextDocument_CreateObject(ptr unsafe.Pointer, format unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::createObject"); signal != nil {
		return PointerFromQTextObject(signal.(func(*QTextFormat) *QTextObject)(NewQTextFormatFromPointer(format)))
	}

	return PointerFromQTextObject(NewQTextDocumentFromPointer(ptr).CreateObjectDefault(NewQTextFormatFromPointer(format)))
}

func (ptr *QTextDocument) ConnectCreateObject(f func(format *QTextFormat) *QTextObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::createObject", f)
	}
}

func (ptr *QTextDocument) DisconnectCreateObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::createObject")
	}
}

func (ptr *QTextDocument) CreateObject(format QTextFormat_ITF) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_CreateObject(ptr.Pointer(), PointerFromQTextFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) CreateObjectDefault(format QTextFormat_ITF) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_CreateObjectDefault(ptr.Pointer(), PointerFromQTextFormat(format)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) DefaultStyleSheet() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_DefaultStyleSheet(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocument) DocumentMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_DocumentMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) Find2(subString string, position int, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var subStringC = C.CString(subString)
		defer C.free(unsafe.Pointer(subStringC))
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find2(ptr.Pointer(), subStringC, C.int(int32(position)), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) IndentWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_IndentWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) IsModified() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsModified(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsUndoRedoEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsUndoRedoEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) MarkContentsDirty(position int, length int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_MarkContentsDirty(ptr.Pointer(), C.int(int32(position)), C.int(int32(length)))
	}
}

func (ptr *QTextDocument) MaximumBlockCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_MaximumBlockCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) PageSize() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QTextDocument_PageSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) SetBaseUrl(url core.QUrl_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetBaseUrl(ptr.Pointer(), core.PointerFromQUrl(url))
	}
}

func (ptr *QTextDocument) SetDefaultStyleSheet(sheet string) {
	if ptr.Pointer() != nil {
		var sheetC = C.CString(sheet)
		defer C.free(unsafe.Pointer(sheetC))
		C.QTextDocument_SetDefaultStyleSheet(ptr.Pointer(), sheetC)
	}
}

func (ptr *QTextDocument) SetDocumentMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDocumentMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextDocument) SetMaximumBlockCount(maximum int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetMaximumBlockCount(ptr.Pointer(), C.int(int32(maximum)))
	}
}

//export callbackQTextDocument_SetModified
func callbackQTextDocument_SetModified(ptr unsafe.Pointer, m C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::setModified"); signal != nil {
		signal.(func(bool))(int8(m) != 0)
	}

}

func (ptr *QTextDocument) ConnectSetModified(f func(m bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::setModified", f)
	}
}

func (ptr *QTextDocument) DisconnectSetModified(m bool) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::setModified")
	}
}

func (ptr *QTextDocument) SetModified(m bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetModified(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(m))))
	}
}

func (ptr *QTextDocument) SetPageSize(size core.QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetPageSize(ptr.Pointer(), core.PointerFromQSizeF(size))
	}
}

func (ptr *QTextDocument) SetTextWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetTextWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextDocument) SetUndoRedoEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetUndoRedoEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextDocument) SetUseDesignMetrics(b bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetUseDesignMetrics(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTextDocument) Size() *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QTextDocument_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) TextWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_TextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) UseDesignMetrics() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_UseDesignMetrics(ptr.Pointer()) != 0
	}
	return false
}

func NewQTextDocument(parent core.QObject_ITF) *QTextDocument {
	var tmpValue = NewQTextDocumentFromPointer(C.QTextDocument_NewQTextDocument(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQTextDocument2(text string, parent core.QObject_ITF) *QTextDocument {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQTextDocumentFromPointer(C.QTextDocument_NewQTextDocument2(textC, core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTextDocument) AddResource(ty int, name core.QUrl_ITF, resource core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_AddResource(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name), core.PointerFromQVariant(resource))
	}
}

func (ptr *QTextDocument) AdjustSize() {
	if ptr.Pointer() != nil {
		C.QTextDocument_AdjustSize(ptr.Pointer())
	}
}

func (ptr *QTextDocument) AllFormats() []*QTextFormat {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QTextFormat {
			var out = make([]*QTextFormat, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextDocumentFromPointer(l.data).allFormats_atList(i)
			}
			return out
		}(C.QTextDocument_AllFormats(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) AvailableRedoSteps() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_AvailableRedoSteps(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) AvailableUndoSteps() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_AvailableUndoSteps(ptr.Pointer())))
	}
	return 0
}

//export callbackQTextDocument_BaseUrlChanged
func callbackQTextDocument_BaseUrlChanged(ptr unsafe.Pointer, url unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::baseUrlChanged"); signal != nil {
		signal.(func(*core.QUrl))(core.NewQUrlFromPointer(url))
	}

}

func (ptr *QTextDocument) ConnectBaseUrlChanged(f func(url *core.QUrl)) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectBaseUrlChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::baseUrlChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectBaseUrlChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectBaseUrlChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::baseUrlChanged")
	}
}

func (ptr *QTextDocument) BaseUrlChanged(url core.QUrl_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_BaseUrlChanged(ptr.Pointer(), core.PointerFromQUrl(url))
	}
}

func (ptr *QTextDocument) Begin() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_Begin(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

//export callbackQTextDocument_BlockCountChanged
func callbackQTextDocument_BlockCountChanged(ptr unsafe.Pointer, newBlockCount C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::blockCountChanged"); signal != nil {
		signal.(func(int))(int(int32(newBlockCount)))
	}

}

func (ptr *QTextDocument) ConnectBlockCountChanged(f func(newBlockCount int)) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectBlockCountChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::blockCountChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectBlockCountChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectBlockCountChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::blockCountChanged")
	}
}

func (ptr *QTextDocument) BlockCountChanged(newBlockCount int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_BlockCountChanged(ptr.Pointer(), C.int(int32(newBlockCount)))
	}
}

func (ptr *QTextDocument) CharacterAt(pos int) *core.QChar {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQCharFromPointer(C.QTextDocument_CharacterAt(ptr.Pointer(), C.int(int32(pos))))
		runtime.SetFinalizer(tmpValue, (*core.QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) CharacterCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_CharacterCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQTextDocument_Clear
func callbackQTextDocument_Clear(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::clear"); signal != nil {
		signal.(func())()
	} else {
		NewQTextDocumentFromPointer(ptr).ClearDefault()
	}
}

func (ptr *QTextDocument) ConnectClear(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::clear", f)
	}
}

func (ptr *QTextDocument) DisconnectClear() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::clear")
	}
}

func (ptr *QTextDocument) Clear() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Clear(ptr.Pointer())
	}
}

func (ptr *QTextDocument) ClearDefault() {
	if ptr.Pointer() != nil {
		C.QTextDocument_ClearDefault(ptr.Pointer())
	}
}

func (ptr *QTextDocument) ClearUndoRedoStacks(stacksToClear QTextDocument__Stacks) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ClearUndoRedoStacks(ptr.Pointer(), C.longlong(stacksToClear))
	}
}

func (ptr *QTextDocument) Clone(parent core.QObject_ITF) *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextDocument_Clone(ptr.Pointer(), core.PointerFromQObject(parent)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQTextDocument_ContentsChange
func callbackQTextDocument_ContentsChange(ptr unsafe.Pointer, position C.int, charsRemoved C.int, charsAdded C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::contentsChange"); signal != nil {
		signal.(func(int, int, int))(int(int32(position)), int(int32(charsRemoved)), int(int32(charsAdded)))
	}

}

func (ptr *QTextDocument) ConnectContentsChange(f func(position int, charsRemoved int, charsAdded int)) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectContentsChange(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::contentsChange", f)
	}
}

func (ptr *QTextDocument) DisconnectContentsChange() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectContentsChange(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::contentsChange")
	}
}

func (ptr *QTextDocument) ContentsChange(position int, charsRemoved int, charsAdded int) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ContentsChange(ptr.Pointer(), C.int(int32(position)), C.int(int32(charsRemoved)), C.int(int32(charsAdded)))
	}
}

//export callbackQTextDocument_ContentsChanged
func callbackQTextDocument_ContentsChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::contentsChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectContentsChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectContentsChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::contentsChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectContentsChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectContentsChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::contentsChanged")
	}
}

func (ptr *QTextDocument) ContentsChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_ContentsChanged(ptr.Pointer())
	}
}

//export callbackQTextDocument_CursorPositionChanged
func callbackQTextDocument_CursorPositionChanged(ptr unsafe.Pointer, cursor unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::cursorPositionChanged"); signal != nil {
		signal.(func(*QTextCursor))(NewQTextCursorFromPointer(cursor))
	}

}

func (ptr *QTextDocument) ConnectCursorPositionChanged(f func(cursor *QTextCursor)) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectCursorPositionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::cursorPositionChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectCursorPositionChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectCursorPositionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::cursorPositionChanged")
	}
}

func (ptr *QTextDocument) CursorPositionChanged(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_CursorPositionChanged(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

func (ptr *QTextDocument) DefaultCursorMoveStyle() core.Qt__CursorMoveStyle {
	if ptr.Pointer() != nil {
		return core.Qt__CursorMoveStyle(C.QTextDocument_DefaultCursorMoveStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) DefaultFont() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextDocument_DefaultFont(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) DefaultTextOption() *QTextOption {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextOptionFromPointer(C.QTextDocument_DefaultTextOption(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) DocumentLayout() *QAbstractTextDocumentLayout {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractTextDocumentLayoutFromPointer(C.QTextDocument_DocumentLayout(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQTextDocument_DocumentLayoutChanged
func callbackQTextDocument_DocumentLayoutChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::documentLayoutChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectDocumentLayoutChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectDocumentLayoutChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::documentLayoutChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectDocumentLayoutChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectDocumentLayoutChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::documentLayoutChanged")
	}
}

func (ptr *QTextDocument) DocumentLayoutChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DocumentLayoutChanged(ptr.Pointer())
	}
}

func (ptr *QTextDocument) DrawContents(p QPainter_ITF, rect core.QRectF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_DrawContents(ptr.Pointer(), PointerFromQPainter(p), core.PointerFromQRectF(rect))
	}
}

func (ptr *QTextDocument) End() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_End(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find4(expr core.QRegExp_ITF, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find4(ptr.Pointer(), core.PointerFromQRegExp(expr), PointerFromQTextCursor(cursor), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find3(expr core.QRegExp_ITF, from int, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find3(ptr.Pointer(), core.PointerFromQRegExp(expr), C.int(int32(from)), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find6(expr core.QRegularExpression_ITF, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find6(ptr.Pointer(), core.PointerFromQRegularExpression(expr), PointerFromQTextCursor(cursor), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find5(expr core.QRegularExpression_ITF, from int, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find5(ptr.Pointer(), core.PointerFromQRegularExpression(expr), C.int(int32(from)), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Find(subString string, cursor QTextCursor_ITF, options QTextDocument__FindFlag) *QTextCursor {
	if ptr.Pointer() != nil {
		var subStringC = C.CString(subString)
		defer C.free(unsafe.Pointer(subStringC))
		var tmpValue = NewQTextCursorFromPointer(C.QTextDocument_Find(ptr.Pointer(), subStringC, PointerFromQTextCursor(cursor), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FindBlock(pos int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FindBlock(ptr.Pointer(), C.int(int32(pos))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FindBlockByLineNumber(lineNumber int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FindBlockByLineNumber(ptr.Pointer(), C.int(int32(lineNumber))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FindBlockByNumber(blockNumber int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FindBlockByNumber(ptr.Pointer(), C.int(int32(blockNumber))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) FirstBlock() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_FirstBlock(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) IdealWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextDocument_IdealWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextDocument) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsRedoAvailable() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsRedoAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) IsUndoAvailable() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_IsUndoAvailable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocument) LastBlock() *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextDocument_LastBlock(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) LineCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_LineCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQTextDocument_LoadResource
func callbackQTextDocument_LoadResource(ptr unsafe.Pointer, ty C.int, name unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::loadResource"); signal != nil {
		return core.PointerFromQVariant(signal.(func(int, *core.QUrl) *core.QVariant)(int(int32(ty)), core.NewQUrlFromPointer(name)))
	}

	return core.PointerFromQVariant(NewQTextDocumentFromPointer(ptr).LoadResourceDefault(int(int32(ty)), core.NewQUrlFromPointer(name)))
}

func (ptr *QTextDocument) ConnectLoadResource(f func(ty int, name *core.QUrl) *core.QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::loadResource", f)
	}
}

func (ptr *QTextDocument) DisconnectLoadResource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::loadResource")
	}
}

func (ptr *QTextDocument) LoadResource(ty int, name core.QUrl_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextDocument_LoadResource(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) LoadResourceDefault(ty int, name core.QUrl_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextDocument_LoadResourceDefault(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) MetaInformation(info QTextDocument__MetaInformation) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_MetaInformation(ptr.Pointer(), C.longlong(info)))
	}
	return ""
}

//export callbackQTextDocument_ModificationChanged
func callbackQTextDocument_ModificationChanged(ptr unsafe.Pointer, changed C.char) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::modificationChanged"); signal != nil {
		signal.(func(bool))(int8(changed) != 0)
	}

}

func (ptr *QTextDocument) ConnectModificationChanged(f func(changed bool)) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectModificationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::modificationChanged", f)
	}
}

func (ptr *QTextDocument) DisconnectModificationChanged() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectModificationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::modificationChanged")
	}
}

func (ptr *QTextDocument) ModificationChanged(changed bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ModificationChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(changed))))
	}
}

func (ptr *QTextDocument) Object(objectIndex int) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_Object(ptr.Pointer(), C.int(int32(objectIndex))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) ObjectForFormat(f QTextFormat_ITF) *QTextObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextObjectFromPointer(C.QTextDocument_ObjectForFormat(ptr.Pointer(), PointerFromQTextFormat(f)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) PageCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_PageCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) Print(printer QPagedPaintDevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_Print(ptr.Pointer(), PointerFromQPagedPaintDevice(printer))
	}
}

//export callbackQTextDocument_Redo2
func callbackQTextDocument_Redo2(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::redo2"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectRedo2(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::redo2", f)
	}
}

func (ptr *QTextDocument) DisconnectRedo2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::redo2")
	}
}

func (ptr *QTextDocument) Redo2() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Redo2(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Redo(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_Redo(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

//export callbackQTextDocument_RedoAvailable
func callbackQTextDocument_RedoAvailable(ptr unsafe.Pointer, available C.char) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::redoAvailable"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QTextDocument) ConnectRedoAvailable(f func(available bool)) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectRedoAvailable(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::redoAvailable", f)
	}
}

func (ptr *QTextDocument) DisconnectRedoAvailable() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectRedoAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::redoAvailable")
	}
}

func (ptr *QTextDocument) RedoAvailable(available bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_RedoAvailable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

func (ptr *QTextDocument) Resource(ty int, name core.QUrl_ITF) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextDocument_Resource(ptr.Pointer(), C.int(int32(ty)), core.PointerFromQUrl(name)))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) Revision() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextDocument_Revision(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextDocument) RootFrame() *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextDocument_RootFrame(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocument) SetDefaultCursorMoveStyle(style core.Qt__CursorMoveStyle) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultCursorMoveStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextDocument) SetDefaultFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextDocument) SetDefaultTextOption(option QTextOption_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDefaultTextOption(ptr.Pointer(), PointerFromQTextOption(option))
	}
}

func (ptr *QTextDocument) SetDocumentLayout(layout QAbstractTextDocumentLayout_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetDocumentLayout(ptr.Pointer(), PointerFromQAbstractTextDocumentLayout(layout))
	}
}

func (ptr *QTextDocument) SetHtml(html string) {
	if ptr.Pointer() != nil {
		var htmlC = C.CString(html)
		defer C.free(unsafe.Pointer(htmlC))
		C.QTextDocument_SetHtml(ptr.Pointer(), htmlC)
	}
}

func (ptr *QTextDocument) SetIndentWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextDocument_SetIndentWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextDocument) SetMetaInformation(info QTextDocument__MetaInformation, stri string) {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		C.QTextDocument_SetMetaInformation(ptr.Pointer(), C.longlong(info), striC)
	}
}

func (ptr *QTextDocument) SetPlainText(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QTextDocument_SetPlainText(ptr.Pointer(), textC)
	}
}

func (ptr *QTextDocument) ToHtml(encoding core.QByteArray_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_ToHtml(ptr.Pointer(), core.PointerFromQByteArray(encoding)))
	}
	return ""
}

func (ptr *QTextDocument) ToPlainText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocument_ToPlainText(ptr.Pointer()))
	}
	return ""
}

//export callbackQTextDocument_Undo2
func callbackQTextDocument_Undo2(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::undo2"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectUndo2(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::undo2", f)
	}
}

func (ptr *QTextDocument) DisconnectUndo2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::undo2")
	}
}

func (ptr *QTextDocument) Undo2() {
	if ptr.Pointer() != nil {
		C.QTextDocument_Undo2(ptr.Pointer())
	}
}

func (ptr *QTextDocument) Undo(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_Undo(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

//export callbackQTextDocument_UndoAvailable
func callbackQTextDocument_UndoAvailable(ptr unsafe.Pointer, available C.char) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::undoAvailable"); signal != nil {
		signal.(func(bool))(int8(available) != 0)
	}

}

func (ptr *QTextDocument) ConnectUndoAvailable(f func(available bool)) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectUndoAvailable(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::undoAvailable", f)
	}
}

func (ptr *QTextDocument) DisconnectUndoAvailable() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectUndoAvailable(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::undoAvailable")
	}
}

func (ptr *QTextDocument) UndoAvailable(available bool) {
	if ptr.Pointer() != nil {
		C.QTextDocument_UndoAvailable(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(available))))
	}
}

//export callbackQTextDocument_UndoCommandAdded
func callbackQTextDocument_UndoCommandAdded(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::undoCommandAdded"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTextDocument) ConnectUndoCommandAdded(f func()) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectUndoCommandAdded(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::undoCommandAdded", f)
	}
}

func (ptr *QTextDocument) DisconnectUndoCommandAdded() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectUndoCommandAdded(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::undoCommandAdded")
	}
}

func (ptr *QTextDocument) UndoCommandAdded() {
	if ptr.Pointer() != nil {
		C.QTextDocument_UndoCommandAdded(ptr.Pointer())
	}
}

func (ptr *QTextDocument) DestroyQTextDocument() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DestroyQTextDocument(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextDocument) allFormats_atList(i int) *QTextFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFormatFromPointer(C.QTextDocument_allFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
		return tmpValue
	}
	return nil
}

//export callbackQTextDocument_TimerEvent
func callbackQTextDocument_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextDocument) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::timerEvent", f)
	}
}

func (ptr *QTextDocument) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::timerEvent")
	}
}

func (ptr *QTextDocument) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextDocument) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextDocument_ChildEvent
func callbackQTextDocument_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextDocument) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::childEvent", f)
	}
}

func (ptr *QTextDocument) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::childEvent")
	}
}

func (ptr *QTextDocument) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextDocument) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextDocument_ConnectNotify
func callbackQTextDocument_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextDocumentFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextDocument) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::connectNotify", f)
	}
}

func (ptr *QTextDocument) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::connectNotify")
	}
}

func (ptr *QTextDocument) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextDocument) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextDocument_CustomEvent
func callbackQTextDocument_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextDocumentFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextDocument) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::customEvent", f)
	}
}

func (ptr *QTextDocument) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::customEvent")
	}
}

func (ptr *QTextDocument) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextDocument) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextDocument_DeleteLater
func callbackQTextDocument_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextDocumentFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextDocument) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::deleteLater", f)
	}
}

func (ptr *QTextDocument) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::deleteLater")
	}
}

func (ptr *QTextDocument) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextDocument) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextDocument_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextDocument_DisconnectNotify
func callbackQTextDocument_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextDocumentFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextDocument) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::disconnectNotify", f)
	}
}

func (ptr *QTextDocument) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::disconnectNotify")
	}
}

func (ptr *QTextDocument) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextDocument) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocument_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextDocument_Event
func callbackQTextDocument_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextDocumentFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextDocument) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::event", f)
	}
}

func (ptr *QTextDocument) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::event")
	}
}

func (ptr *QTextDocument) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextDocument) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextDocument_EventFilter
func callbackQTextDocument_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextDocumentFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextDocument) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::eventFilter", f)
	}
}

func (ptr *QTextDocument) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::eventFilter")
	}
}

func (ptr *QTextDocument) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextDocument) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocument_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextDocument_MetaObject
func callbackQTextDocument_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextDocument::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextDocumentFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextDocument) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::metaObject", f)
	}
}

func (ptr *QTextDocument) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextDocument::metaObject")
	}
}

func (ptr *QTextDocument) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextDocument_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocument) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextDocument_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextDocumentFragment struct {
	ptr unsafe.Pointer
}

type QTextDocumentFragment_ITF interface {
	QTextDocumentFragment_PTR() *QTextDocumentFragment
}

func (p *QTextDocumentFragment) QTextDocumentFragment_PTR() *QTextDocumentFragment {
	return p
}

func (p *QTextDocumentFragment) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextDocumentFragment) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextDocumentFragment(ptr QTextDocumentFragment_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocumentFragment_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentFragmentFromPointer(ptr unsafe.Pointer) *QTextDocumentFragment {
	var n = new(QTextDocumentFragment)
	n.SetPointer(ptr)
	return n
}
func NewQTextDocumentFragment4(other QTextDocumentFragment_ITF) *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment4(PointerFromQTextDocumentFragment(other)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func QTextDocumentFragment_FromHtml(text string) *QTextDocumentFragment {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml(textC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) FromHtml(text string) *QTextDocumentFragment {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml(textC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func QTextDocumentFragment_FromHtml2(text string, resourceProvider QTextDocument_ITF) *QTextDocumentFragment {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml2(textC, PointerFromQTextDocument(resourceProvider)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) FromHtml2(text string, resourceProvider QTextDocument_ITF) *QTextDocumentFragment {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromHtml2(textC, PointerFromQTextDocument(resourceProvider)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func NewQTextDocumentFragment() *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment())
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func NewQTextDocumentFragment3(cursor QTextCursor_ITF) *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment3(PointerFromQTextCursor(cursor)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func NewQTextDocumentFragment2(document QTextDocument_ITF) *QTextDocumentFragment {
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_NewQTextDocumentFragment2(PointerFromQTextDocument(document)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func QTextDocumentFragment_FromPlainText(plainText string) *QTextDocumentFragment {
	var plainTextC = C.CString(plainText)
	defer C.free(unsafe.Pointer(plainTextC))
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromPlainText(plainTextC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) FromPlainText(plainText string) *QTextDocumentFragment {
	var plainTextC = C.CString(plainText)
	defer C.free(unsafe.Pointer(plainTextC))
	var tmpValue = NewQTextDocumentFragmentFromPointer(C.QTextDocumentFragment_QTextDocumentFragment_FromPlainText(plainTextC))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentFragment).DestroyQTextDocumentFragment)
	return tmpValue
}

func (ptr *QTextDocumentFragment) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QTextDocumentFragment_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextDocumentFragment) ToHtml(encoding core.QByteArray_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocumentFragment_ToHtml(ptr.Pointer(), core.PointerFromQByteArray(encoding)))
	}
	return ""
}

func (ptr *QTextDocumentFragment) ToPlainText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocumentFragment_ToPlainText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocumentFragment) DestroyQTextDocumentFragment() {
	if ptr.Pointer() != nil {
		C.QTextDocumentFragment_DestroyQTextDocumentFragment(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextDocumentWriter struct {
	ptr unsafe.Pointer
}

type QTextDocumentWriter_ITF interface {
	QTextDocumentWriter_PTR() *QTextDocumentWriter
}

func (p *QTextDocumentWriter) QTextDocumentWriter_PTR() *QTextDocumentWriter {
	return p
}

func (p *QTextDocumentWriter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextDocumentWriter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextDocumentWriter(ptr QTextDocumentWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDocumentWriter_PTR().Pointer()
	}
	return nil
}

func NewQTextDocumentWriterFromPointer(ptr unsafe.Pointer) *QTextDocumentWriter {
	var n = new(QTextDocumentWriter)
	n.SetPointer(ptr)
	return n
}
func NewQTextDocumentWriter() *QTextDocumentWriter {
	var tmpValue = NewQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter())
	runtime.SetFinalizer(tmpValue, (*QTextDocumentWriter).DestroyQTextDocumentWriter)
	return tmpValue
}

func NewQTextDocumentWriter2(device core.QIODevice_ITF, format core.QByteArray_ITF) *QTextDocumentWriter {
	var tmpValue = NewQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter2(core.PointerFromQIODevice(device), core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentWriter).DestroyQTextDocumentWriter)
	return tmpValue
}

func NewQTextDocumentWriter3(fileName string, format core.QByteArray_ITF) *QTextDocumentWriter {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQTextDocumentWriterFromPointer(C.QTextDocumentWriter_NewQTextDocumentWriter3(fileNameC, core.PointerFromQByteArray(format)))
	runtime.SetFinalizer(tmpValue, (*QTextDocumentWriter).DestroyQTextDocumentWriter)
	return tmpValue
}

func (ptr *QTextDocumentWriter) Codec() *core.QTextCodec {
	if ptr.Pointer() != nil {
		return core.NewQTextCodecFromPointer(C.QTextDocumentWriter_Codec(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextDocumentWriter) Device() *core.QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQIODeviceFromPointer(C.QTextDocumentWriter_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocumentWriter) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDocumentWriter_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextDocumentWriter) Format() *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QTextDocumentWriter_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextDocumentWriter) SetCodec(codec core.QTextCodec_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetCodec(ptr.Pointer(), core.PointerFromQTextCodec(codec))
	}
}

func (ptr *QTextDocumentWriter) SetDevice(device core.QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetDevice(ptr.Pointer(), core.PointerFromQIODevice(device))
	}
}

func (ptr *QTextDocumentWriter) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QTextDocumentWriter_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QTextDocumentWriter) SetFormat(format core.QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_SetFormat(ptr.Pointer(), core.PointerFromQByteArray(format))
	}
}

func QTextDocumentWriter_SupportedDocumentFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTextDocumentWriterFromPointer(l.data).supportedDocumentFormats_atList(i)
		}
		return out
	}(C.QTextDocumentWriter_QTextDocumentWriter_SupportedDocumentFormats())
}

func (ptr *QTextDocumentWriter) SupportedDocumentFormats() []*core.QByteArray {
	return func(l C.struct_QtGui_PackedList) []*core.QByteArray {
		var out = make([]*core.QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTextDocumentWriterFromPointer(l.data).supportedDocumentFormats_atList(i)
		}
		return out
	}(C.QTextDocumentWriter_QTextDocumentWriter_SupportedDocumentFormats())
}

func (ptr *QTextDocumentWriter) Write(document QTextDocument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocumentWriter_Write(ptr.Pointer(), PointerFromQTextDocument(document)) != 0
	}
	return false
}

func (ptr *QTextDocumentWriter) Write2(fragment QTextDocumentFragment_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextDocumentWriter_Write2(ptr.Pointer(), PointerFromQTextDocumentFragment(fragment)) != 0
	}
	return false
}

func (ptr *QTextDocumentWriter) DestroyQTextDocumentWriter() {
	if ptr.Pointer() != nil {
		C.QTextDocumentWriter_DestroyQTextDocumentWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextDocumentWriter) supportedDocumentFormats_atList(i int) *core.QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQByteArrayFromPointer(C.QTextDocumentWriter_supportedDocumentFormats_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*core.QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//QTextFormat::FormatType
type QTextFormat__FormatType int64

const (
	QTextFormat__InvalidFormat = QTextFormat__FormatType(-1)
	QTextFormat__BlockFormat   = QTextFormat__FormatType(1)
	QTextFormat__CharFormat    = QTextFormat__FormatType(2)
	QTextFormat__ListFormat    = QTextFormat__FormatType(3)
	QTextFormat__TableFormat   = QTextFormat__FormatType(4)
	QTextFormat__FrameFormat   = QTextFormat__FormatType(5)
	QTextFormat__UserFormat    = QTextFormat__FormatType(100)
)

//QTextFormat::ObjectTypes
type QTextFormat__ObjectTypes int64

const (
	QTextFormat__NoObject        = QTextFormat__ObjectTypes(0)
	QTextFormat__ImageObject     = QTextFormat__ObjectTypes(1)
	QTextFormat__TableObject     = QTextFormat__ObjectTypes(2)
	QTextFormat__TableCellObject = QTextFormat__ObjectTypes(3)
	QTextFormat__UserObject      = QTextFormat__ObjectTypes(0x1000)
)

//QTextFormat::PageBreakFlag
type QTextFormat__PageBreakFlag int64

const (
	QTextFormat__PageBreak_Auto         = QTextFormat__PageBreakFlag(0)
	QTextFormat__PageBreak_AlwaysBefore = QTextFormat__PageBreakFlag(0x001)
	QTextFormat__PageBreak_AlwaysAfter  = QTextFormat__PageBreakFlag(0x010)
)

//QTextFormat::Property
type QTextFormat__Property int64

const (
	QTextFormat__ObjectIndex                       = QTextFormat__Property(0x0)
	QTextFormat__CssFloat                          = QTextFormat__Property(0x0800)
	QTextFormat__LayoutDirection                   = QTextFormat__Property(0x0801)
	QTextFormat__OutlinePen                        = QTextFormat__Property(0x810)
	QTextFormat__BackgroundBrush                   = QTextFormat__Property(0x820)
	QTextFormat__ForegroundBrush                   = QTextFormat__Property(0x821)
	QTextFormat__BackgroundImageUrl                = QTextFormat__Property(0x823)
	QTextFormat__BlockAlignment                    = QTextFormat__Property(0x1010)
	QTextFormat__BlockTopMargin                    = QTextFormat__Property(0x1030)
	QTextFormat__BlockBottomMargin                 = QTextFormat__Property(0x1031)
	QTextFormat__BlockLeftMargin                   = QTextFormat__Property(0x1032)
	QTextFormat__BlockRightMargin                  = QTextFormat__Property(0x1033)
	QTextFormat__TextIndent                        = QTextFormat__Property(0x1034)
	QTextFormat__TabPositions                      = QTextFormat__Property(0x1035)
	QTextFormat__BlockIndent                       = QTextFormat__Property(0x1040)
	QTextFormat__LineHeight                        = QTextFormat__Property(0x1048)
	QTextFormat__LineHeightType                    = QTextFormat__Property(0x1049)
	QTextFormat__BlockNonBreakableLines            = QTextFormat__Property(0x1050)
	QTextFormat__BlockTrailingHorizontalRulerWidth = QTextFormat__Property(0x1060)
	QTextFormat__FirstFontProperty                 = QTextFormat__Property(0x1FE0)
	QTextFormat__FontCapitalization                = QTextFormat__Property(QTextFormat__FirstFontProperty)
	QTextFormat__FontLetterSpacingType             = QTextFormat__Property(0x2033)
	QTextFormat__FontLetterSpacing                 = QTextFormat__Property(0x1FE1)
	QTextFormat__FontWordSpacing                   = QTextFormat__Property(0x1FE2)
	QTextFormat__FontStretch                       = QTextFormat__Property(0x2034)
	QTextFormat__FontStyleHint                     = QTextFormat__Property(0x1FE3)
	QTextFormat__FontStyleStrategy                 = QTextFormat__Property(0x1FE4)
	QTextFormat__FontKerning                       = QTextFormat__Property(0x1FE5)
	QTextFormat__FontHintingPreference             = QTextFormat__Property(0x1FE6)
	QTextFormat__FontFamily                        = QTextFormat__Property(0x2000)
	QTextFormat__FontPointSize                     = QTextFormat__Property(0x2001)
	QTextFormat__FontSizeAdjustment                = QTextFormat__Property(0x2002)
	QTextFormat__FontSizeIncrement                 = QTextFormat__Property(QTextFormat__FontSizeAdjustment)
	QTextFormat__FontWeight                        = QTextFormat__Property(0x2003)
	QTextFormat__FontItalic                        = QTextFormat__Property(0x2004)
	QTextFormat__FontUnderline                     = QTextFormat__Property(0x2005)
	QTextFormat__FontOverline                      = QTextFormat__Property(0x2006)
	QTextFormat__FontStrikeOut                     = QTextFormat__Property(0x2007)
	QTextFormat__FontFixedPitch                    = QTextFormat__Property(0x2008)
	QTextFormat__FontPixelSize                     = QTextFormat__Property(0x2009)
	QTextFormat__LastFontProperty                  = QTextFormat__Property(QTextFormat__FontPixelSize)
	QTextFormat__TextUnderlineColor                = QTextFormat__Property(0x2010)
	QTextFormat__TextVerticalAlignment             = QTextFormat__Property(0x2021)
	QTextFormat__TextOutline                       = QTextFormat__Property(0x2022)
	QTextFormat__TextUnderlineStyle                = QTextFormat__Property(0x2023)
	QTextFormat__TextToolTip                       = QTextFormat__Property(0x2024)
	QTextFormat__IsAnchor                          = QTextFormat__Property(0x2030)
	QTextFormat__AnchorHref                        = QTextFormat__Property(0x2031)
	QTextFormat__AnchorName                        = QTextFormat__Property(0x2032)
	QTextFormat__ObjectType                        = QTextFormat__Property(0x2f00)
	QTextFormat__ListStyle                         = QTextFormat__Property(0x3000)
	QTextFormat__ListIndent                        = QTextFormat__Property(0x3001)
	QTextFormat__ListNumberPrefix                  = QTextFormat__Property(0x3002)
	QTextFormat__ListNumberSuffix                  = QTextFormat__Property(0x3003)
	QTextFormat__FrameBorder                       = QTextFormat__Property(0x4000)
	QTextFormat__FrameMargin                       = QTextFormat__Property(0x4001)
	QTextFormat__FramePadding                      = QTextFormat__Property(0x4002)
	QTextFormat__FrameWidth                        = QTextFormat__Property(0x4003)
	QTextFormat__FrameHeight                       = QTextFormat__Property(0x4004)
	QTextFormat__FrameTopMargin                    = QTextFormat__Property(0x4005)
	QTextFormat__FrameBottomMargin                 = QTextFormat__Property(0x4006)
	QTextFormat__FrameLeftMargin                   = QTextFormat__Property(0x4007)
	QTextFormat__FrameRightMargin                  = QTextFormat__Property(0x4008)
	QTextFormat__FrameBorderBrush                  = QTextFormat__Property(0x4009)
	QTextFormat__FrameBorderStyle                  = QTextFormat__Property(0x4010)
	QTextFormat__TableColumns                      = QTextFormat__Property(0x4100)
	QTextFormat__TableColumnWidthConstraints       = QTextFormat__Property(0x4101)
	QTextFormat__TableCellSpacing                  = QTextFormat__Property(0x4102)
	QTextFormat__TableCellPadding                  = QTextFormat__Property(0x4103)
	QTextFormat__TableHeaderRowCount               = QTextFormat__Property(0x4104)
	QTextFormat__TableCellRowSpan                  = QTextFormat__Property(0x4810)
	QTextFormat__TableCellColumnSpan               = QTextFormat__Property(0x4811)
	QTextFormat__TableCellTopPadding               = QTextFormat__Property(0x4812)
	QTextFormat__TableCellBottomPadding            = QTextFormat__Property(0x4813)
	QTextFormat__TableCellLeftPadding              = QTextFormat__Property(0x4814)
	QTextFormat__TableCellRightPadding             = QTextFormat__Property(0x4815)
	QTextFormat__ImageName                         = QTextFormat__Property(0x5000)
	QTextFormat__ImageWidth                        = QTextFormat__Property(0x5010)
	QTextFormat__ImageHeight                       = QTextFormat__Property(0x5011)
	QTextFormat__FullWidthSelection                = QTextFormat__Property(0x06000)
	QTextFormat__PageBreakPolicy                   = QTextFormat__Property(0x7000)
	QTextFormat__UserProperty                      = QTextFormat__Property(0x100000)
)

type QTextFormat struct {
	ptr unsafe.Pointer
}

type QTextFormat_ITF interface {
	QTextFormat_PTR() *QTextFormat
}

func (p *QTextFormat) QTextFormat_PTR() *QTextFormat {
	return p
}

func (p *QTextFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextFormat(ptr QTextFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextFormatFromPointer(ptr unsafe.Pointer) *QTextFormat {
	var n = new(QTextFormat)
	n.SetPointer(ptr)
	return n
}
func NewQTextFormat3(other QTextFormat_ITF) *QTextFormat {
	var tmpValue = NewQTextFormatFromPointer(C.QTextFormat_NewQTextFormat3(PointerFromQTextFormat(other)))
	runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
	return tmpValue
}

func (ptr *QTextFormat) SetObjectIndex(index int) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetObjectIndex(ptr.Pointer(), C.int(int32(index)))
	}
}

func NewQTextFormat() *QTextFormat {
	var tmpValue = NewQTextFormatFromPointer(C.QTextFormat_NewQTextFormat())
	runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
	return tmpValue
}

func NewQTextFormat2(ty int) *QTextFormat {
	var tmpValue = NewQTextFormatFromPointer(C.QTextFormat_NewQTextFormat2(C.int(int32(ty))))
	runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
	return tmpValue
}

func (ptr *QTextFormat) Background() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFormat_Background(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) BoolProperty(propertyId int) bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_BoolProperty(ptr.Pointer(), C.int(int32(propertyId))) != 0
	}
	return false
}

func (ptr *QTextFormat) BrushProperty(propertyId int) *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFormat_BrushProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ClearBackground() {
	if ptr.Pointer() != nil {
		C.QTextFormat_ClearBackground(ptr.Pointer())
	}
}

func (ptr *QTextFormat) ClearForeground() {
	if ptr.Pointer() != nil {
		C.QTextFormat_ClearForeground(ptr.Pointer())
	}
}

func (ptr *QTextFormat) ClearProperty(propertyId int) {
	if ptr.Pointer() != nil {
		C.QTextFormat_ClearProperty(ptr.Pointer(), C.int(int32(propertyId)))
	}
}

func (ptr *QTextFormat) ColorProperty(propertyId int) *QColor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQColorFromPointer(C.QTextFormat_ColorProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QColor).DestroyQColor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) DoubleProperty(propertyId int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFormat_DoubleProperty(ptr.Pointer(), C.int(int32(propertyId))))
	}
	return 0
}

func (ptr *QTextFormat) Foreground() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFormat_Foreground(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) HasProperty(propertyId int) bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_HasProperty(ptr.Pointer(), C.int(int32(propertyId))) != 0
	}
	return false
}

func (ptr *QTextFormat) IntProperty(propertyId int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_IntProperty(ptr.Pointer(), C.int(int32(propertyId)))))
	}
	return 0
}

func (ptr *QTextFormat) IsBlockFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsBlockFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsCharFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsCharFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsFrameFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsFrameFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsImageFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsImageFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsListFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsListFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsTableCellFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsTableCellFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsTableFormat() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsTableFormat(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFormat) LayoutDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextFormat_LayoutDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFormat) LengthProperty(propertyId int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFormat_LengthProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) Merge(other QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_Merge(ptr.Pointer(), PointerFromQTextFormat(other))
	}
}

func (ptr *QTextFormat) ObjectIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_ObjectIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) ObjectType() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_ObjectType(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) PenProperty(propertyId int) *QPen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPenFromPointer(C.QTextFormat_PenProperty(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*QPen).DestroyQPen)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) Property(propertyId int) *core.QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQVariantFromPointer(C.QTextFormat_Property(ptr.Pointer(), C.int(int32(propertyId))))
		runtime.SetFinalizer(tmpValue, (*core.QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) PropertyCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_PropertyCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) SetBackground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetBackground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFormat) SetForeground(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetForeground(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFormat) SetLayoutDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetLayoutDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QTextFormat) SetObjectType(ty int) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetObjectType(ptr.Pointer(), C.int(int32(ty)))
	}
}

func (ptr *QTextFormat) SetProperty(propertyId int, value core.QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_SetProperty(ptr.Pointer(), C.int(int32(propertyId)), core.PointerFromQVariant(value))
	}
}

func (ptr *QTextFormat) StringProperty(propertyId int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextFormat_StringProperty(ptr.Pointer(), C.int(int32(propertyId))))
	}
	return ""
}

func (ptr *QTextFormat) Swap(other QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFormat_Swap(ptr.Pointer(), PointerFromQTextFormat(other))
	}
}

func (ptr *QTextFormat) ToBlockFormat() *QTextBlockFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFormatFromPointer(C.QTextFormat_ToBlockFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextBlockFormat).DestroyQTextBlockFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToCharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextFormat_ToCharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToFrameFormat() *QTextFrameFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFormatFromPointer(C.QTextFormat_ToFrameFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFrameFormat).DestroyQTextFrameFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToImageFormat() *QTextImageFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextImageFormatFromPointer(C.QTextFormat_ToImageFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextImageFormat).DestroyQTextImageFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToListFormat() *QTextListFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFormatFromPointer(C.QTextFormat_ToListFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextListFormat).DestroyQTextListFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToTableCellFormat() *QTextTableCellFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFormatFromPointer(C.QTextFormat_ToTableCellFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextTableCellFormat).DestroyQTextTableCellFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) ToTableFormat() *QTextTableFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFormatFromPointer(C.QTextFormat_ToTableFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextTableFormat).DestroyQTextTableFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFormat) Type() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFormat_Type(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFormat) DestroyQTextFormat() {
	if ptr.Pointer() != nil {
		C.QTextFormat_DestroyQTextFormat(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextFormat) lengthVectorProperty_atList(i int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFormat_lengthVectorProperty_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

type QTextFragment struct {
	ptr unsafe.Pointer
}

type QTextFragment_ITF interface {
	QTextFragment_PTR() *QTextFragment
}

func (p *QTextFragment) QTextFragment_PTR() *QTextFragment {
	return p
}

func (p *QTextFragment) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextFragment) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextFragment(ptr QTextFragment_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFragment_PTR().Pointer()
	}
	return nil
}

func NewQTextFragmentFromPointer(ptr unsafe.Pointer) *QTextFragment {
	var n = new(QTextFragment)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextFragment) DestroyQTextFragment() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextFragment() *QTextFragment {
	var tmpValue = NewQTextFragmentFromPointer(C.QTextFragment_NewQTextFragment())
	runtime.SetFinalizer(tmpValue, (*QTextFragment).DestroyQTextFragment)
	return tmpValue
}

func NewQTextFragment3(other QTextFragment_ITF) *QTextFragment {
	var tmpValue = NewQTextFragmentFromPointer(C.QTextFragment_NewQTextFragment3(PointerFromQTextFragment(other)))
	runtime.SetFinalizer(tmpValue, (*QTextFragment).DestroyQTextFragment)
	return tmpValue
}

func (ptr *QTextFragment) CharFormat() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextFragment_CharFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFragment) CharFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFragment_CharFormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFragment) Contains(position int) bool {
	if ptr.Pointer() != nil {
		return C.QTextFragment_Contains(ptr.Pointer(), C.int(int32(position))) != 0
	}
	return false
}

func (ptr *QTextFragment) GlyphRuns(pos int, len int) []*QGlyphRun {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QGlyphRun {
			var out = make([]*QGlyphRun, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextFragmentFromPointer(l.data).glyphRuns_atList(i)
			}
			return out
		}(C.QTextFragment_GlyphRuns(ptr.Pointer(), C.int(int32(pos)), C.int(int32(len))))
	}
	return nil
}

func (ptr *QTextFragment) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextFragment_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFragment) Length() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFragment_Length(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFragment) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFragment_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFragment) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextFragment_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextFragment) glyphRuns_atList(i int) *QGlyphRun {
	if ptr.Pointer() != nil {
		var tmpValue = NewQGlyphRunFromPointer(C.QTextFragment_glyphRuns_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
		return tmpValue
	}
	return nil
}

type QTextFrame struct {
	QTextObject
}

type QTextFrame_ITF interface {
	QTextObject_ITF
	QTextFrame_PTR() *QTextFrame
}

func (p *QTextFrame) QTextFrame_PTR() *QTextFrame {
	return p
}

func (p *QTextFrame) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextFrame) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextFrame(ptr QTextFrame_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrame_PTR().Pointer()
	}
	return nil
}

func NewQTextFrameFromPointer(ptr unsafe.Pointer) *QTextFrame {
	var n = new(QTextFrame)
	n.SetPointer(ptr)
	return n
}
func NewQTextFrame(document QTextDocument_ITF) *QTextFrame {
	var tmpValue = NewQTextFrameFromPointer(C.QTextFrame_NewQTextFrame(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTextFrame) ChildFrames() []*QTextFrame {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QTextFrame {
			var out = make([]*QTextFrame, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextFrameFromPointer(l.data).childFrames_atList(i)
			}
			return out
		}(C.QTextFrame_ChildFrames(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFrame) FirstCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextFrame_FirstCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) FirstPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFrame_FirstPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFrame) FrameFormat() *QTextFrameFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFormatFromPointer(C.QTextFrame_FrameFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFrameFormat).DestroyQTextFrameFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) LastCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextFrame_LastCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) LastPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextFrame_LastPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextFrame) ParentFrame() *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextFrame_ParentFrame(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrame) SetFrameFormat(format QTextFrameFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_SetFrameFormat(ptr.Pointer(), PointerFromQTextFrameFormat(format))
	}
}

func (ptr *QTextFrame) DestroyQTextFrame() {
	if ptr.Pointer() != nil {
		C.QTextFrame_DestroyQTextFrame(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextFrame) childFrames_atList(i int) *QTextFrame {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFrameFromPointer(C.QTextFrame_childFrames_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQTextFrame_TimerEvent
func callbackQTextFrame_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextFrameFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextFrame) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::timerEvent", f)
	}
}

func (ptr *QTextFrame) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::timerEvent")
	}
}

func (ptr *QTextFrame) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextFrame) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextFrame_ChildEvent
func callbackQTextFrame_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextFrameFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextFrame) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::childEvent", f)
	}
}

func (ptr *QTextFrame) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::childEvent")
	}
}

func (ptr *QTextFrame) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextFrame) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextFrame_ConnectNotify
func callbackQTextFrame_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextFrameFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextFrame) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::connectNotify", f)
	}
}

func (ptr *QTextFrame) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::connectNotify")
	}
}

func (ptr *QTextFrame) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextFrame) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextFrame_CustomEvent
func callbackQTextFrame_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextFrameFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextFrame) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::customEvent", f)
	}
}

func (ptr *QTextFrame) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::customEvent")
	}
}

func (ptr *QTextFrame) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextFrame) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextFrame_DeleteLater
func callbackQTextFrame_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextFrameFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextFrame) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::deleteLater", f)
	}
}

func (ptr *QTextFrame) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::deleteLater")
	}
}

func (ptr *QTextFrame) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTextFrame_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextFrame) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextFrame_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextFrame_DisconnectNotify
func callbackQTextFrame_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextFrameFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextFrame) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::disconnectNotify", f)
	}
}

func (ptr *QTextFrame) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::disconnectNotify")
	}
}

func (ptr *QTextFrame) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextFrame) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrame_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextFrame_Event
func callbackQTextFrame_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextFrameFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextFrame) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::event", f)
	}
}

func (ptr *QTextFrame) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::event")
	}
}

func (ptr *QTextFrame) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextFrame_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextFrame) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextFrame_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextFrame_EventFilter
func callbackQTextFrame_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextFrameFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextFrame) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::eventFilter", f)
	}
}

func (ptr *QTextFrame) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::eventFilter")
	}
}

func (ptr *QTextFrame) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextFrame_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextFrame) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextFrame_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextFrame_MetaObject
func callbackQTextFrame_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextFrame::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextFrameFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextFrame) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::metaObject", f)
	}
}

func (ptr *QTextFrame) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextFrame::metaObject")
	}
}

func (ptr *QTextFrame) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextFrame_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextFrame) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextFrame_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTextFrameFormat::BorderStyle
type QTextFrameFormat__BorderStyle int64

var (
	QTextFrameFormat__BorderStyle_None       = QTextFrameFormat__BorderStyle(0)
	QTextFrameFormat__BorderStyle_Dotted     = QTextFrameFormat__BorderStyle(1)
	QTextFrameFormat__BorderStyle_Dashed     = QTextFrameFormat__BorderStyle(2)
	QTextFrameFormat__BorderStyle_Solid      = QTextFrameFormat__BorderStyle(3)
	QTextFrameFormat__BorderStyle_Double     = QTextFrameFormat__BorderStyle(4)
	QTextFrameFormat__BorderStyle_DotDash    = QTextFrameFormat__BorderStyle(5)
	QTextFrameFormat__BorderStyle_DotDotDash = QTextFrameFormat__BorderStyle(6)
	QTextFrameFormat__BorderStyle_Groove     = QTextFrameFormat__BorderStyle(7)
	QTextFrameFormat__BorderStyle_Ridge      = QTextFrameFormat__BorderStyle(8)
	QTextFrameFormat__BorderStyle_Inset      = QTextFrameFormat__BorderStyle(9)
	QTextFrameFormat__BorderStyle_Outset     = QTextFrameFormat__BorderStyle(10)
)

//QTextFrameFormat::Position
type QTextFrameFormat__Position int64

const (
	QTextFrameFormat__InFlow     = QTextFrameFormat__Position(0)
	QTextFrameFormat__FloatLeft  = QTextFrameFormat__Position(1)
	QTextFrameFormat__FloatRight = QTextFrameFormat__Position(2)
)

type QTextFrameFormat struct {
	QTextFormat
}

type QTextFrameFormat_ITF interface {
	QTextFormat_ITF
	QTextFrameFormat_PTR() *QTextFrameFormat
}

func (p *QTextFrameFormat) QTextFrameFormat_PTR() *QTextFrameFormat {
	return p
}

func (p *QTextFrameFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextFrameFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextFrameFormat(ptr QTextFrameFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextFrameFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextFrameFormatFromPointer(ptr unsafe.Pointer) *QTextFrameFormat {
	var n = new(QTextFrameFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextFrameFormat) DestroyQTextFrameFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextFrameFormat() *QTextFrameFormat {
	var tmpValue = NewQTextFrameFormatFromPointer(C.QTextFrameFormat_NewQTextFrameFormat())
	runtime.SetFinalizer(tmpValue, (*QTextFrameFormat).DestroyQTextFrameFormat)
	return tmpValue
}

func (ptr *QTextFrameFormat) BottomMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_BottomMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) LeftMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_LeftMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) RightMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_RightMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) SetMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) TopMargin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_TopMargin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Border() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Border(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) BorderBrush() *QBrush {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBrushFromPointer(C.QTextFrameFormat_BorderBrush(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBrush).DestroyQBrush)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrameFormat) BorderStyle() QTextFrameFormat__BorderStyle {
	if ptr.Pointer() != nil {
		return QTextFrameFormat__BorderStyle(C.QTextFrameFormat_BorderStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Height() *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFrameFormat_Height(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

func (ptr *QTextFrameFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextFrameFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextFrameFormat) Margin() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Margin(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Padding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextFrameFormat_Padding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) PageBreakPolicy() QTextFormat__PageBreakFlag {
	if ptr.Pointer() != nil {
		return QTextFormat__PageBreakFlag(C.QTextFrameFormat_PageBreakPolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) Position() QTextFrameFormat__Position {
	if ptr.Pointer() != nil {
		return QTextFrameFormat__Position(C.QTextFrameFormat_Position(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextFrameFormat) SetBorder(width float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorder(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) SetBorderBrush(brush QBrush_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorderBrush(ptr.Pointer(), PointerFromQBrush(brush))
	}
}

func (ptr *QTextFrameFormat) SetBorderStyle(style QTextFrameFormat__BorderStyle) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBorderStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextFrameFormat) SetBottomMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetBottomMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetHeight(height QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetHeight(ptr.Pointer(), PointerFromQTextLength(height))
	}
}

func (ptr *QTextFrameFormat) SetHeight2(height float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetHeight2(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QTextFrameFormat) SetLeftMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetLeftMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetPadding(width float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPadding(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) SetPageBreakPolicy(policy QTextFormat__PageBreakFlag) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPageBreakPolicy(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QTextFrameFormat) SetPosition(policy QTextFrameFormat__Position) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetPosition(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QTextFrameFormat) SetRightMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetRightMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetTopMargin(margin float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetTopMargin(ptr.Pointer(), C.double(margin))
	}
}

func (ptr *QTextFrameFormat) SetWidth(width QTextLength_ITF) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetWidth(ptr.Pointer(), PointerFromQTextLength(width))
	}
}

func (ptr *QTextFrameFormat) SetWidth2(width float64) {
	if ptr.Pointer() != nil {
		C.QTextFrameFormat_SetWidth2(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextFrameFormat) Width() *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextFrameFormat_Width(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

type QTextImageFormat struct {
	QTextCharFormat
}

type QTextImageFormat_ITF interface {
	QTextCharFormat_ITF
	QTextImageFormat_PTR() *QTextImageFormat
}

func (p *QTextImageFormat) QTextImageFormat_PTR() *QTextImageFormat {
	return p
}

func (p *QTextImageFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextImageFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextCharFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextImageFormat(ptr QTextImageFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextImageFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextImageFormatFromPointer(ptr unsafe.Pointer) *QTextImageFormat {
	var n = new(QTextImageFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextImageFormat) DestroyQTextImageFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextImageFormat() *QTextImageFormat {
	var tmpValue = NewQTextImageFormatFromPointer(C.QTextImageFormat_NewQTextImageFormat())
	runtime.SetFinalizer(tmpValue, (*QTextImageFormat).DestroyQTextImageFormat)
	return tmpValue
}

func (ptr *QTextImageFormat) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextImageFormat_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextImageFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextImageFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextImageFormat) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextImageFormat_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextImageFormat) SetHeight(height float64) {
	if ptr.Pointer() != nil {
		C.QTextImageFormat_SetHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QTextImageFormat) SetName(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QTextImageFormat_SetName(ptr.Pointer(), nameC)
	}
}

func (ptr *QTextImageFormat) SetWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextImageFormat_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextImageFormat) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextImageFormat_Width(ptr.Pointer()))
	}
	return 0
}

type QTextInlineObject struct {
	ptr unsafe.Pointer
}

type QTextInlineObject_ITF interface {
	QTextInlineObject_PTR() *QTextInlineObject
}

func (p *QTextInlineObject) QTextInlineObject_PTR() *QTextInlineObject {
	return p
}

func (p *QTextInlineObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextInlineObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextInlineObject(ptr QTextInlineObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextInlineObject_PTR().Pointer()
	}
	return nil
}

func NewQTextInlineObjectFromPointer(ptr unsafe.Pointer) *QTextInlineObject {
	var n = new(QTextInlineObject)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextInlineObject) DestroyQTextInlineObject() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QTextInlineObject) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) Format() *QTextFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFormatFromPointer(C.QTextInlineObject_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextInlineObject) FormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextInlineObject_FormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextInlineObject) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextInlineObject_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextInlineObject) Rect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextInlineObject_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextInlineObject) SetAscent(a float64) {
	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetAscent(ptr.Pointer(), C.double(a))
	}
}

func (ptr *QTextInlineObject) SetDescent(d float64) {
	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetDescent(ptr.Pointer(), C.double(d))
	}
}

func (ptr *QTextInlineObject) SetWidth(w float64) {
	if ptr.Pointer() != nil {
		C.QTextInlineObject_SetWidth(ptr.Pointer(), C.double(w))
	}
}

func (ptr *QTextInlineObject) TextDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextInlineObject_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextInlineObject) TextPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextInlineObject_TextPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextInlineObject) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextInlineObject_Width(ptr.Pointer()))
	}
	return 0
}

//QTextItem::RenderFlag
type QTextItem__RenderFlag int64

const (
	QTextItem__RightToLeft = QTextItem__RenderFlag(0x1)
	QTextItem__Overline    = QTextItem__RenderFlag(0x10)
	QTextItem__Underline   = QTextItem__RenderFlag(0x20)
	QTextItem__StrikeOut   = QTextItem__RenderFlag(0x40)
	QTextItem__Dummy       = QTextItem__RenderFlag(0xffffffff)
)

type QTextItem struct {
	ptr unsafe.Pointer
}

type QTextItem_ITF interface {
	QTextItem_PTR() *QTextItem
}

func (p *QTextItem) QTextItem_PTR() *QTextItem {
	return p
}

func (p *QTextItem) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextItem) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextItem(ptr QTextItem_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextItem_PTR().Pointer()
	}
	return nil
}

func NewQTextItemFromPointer(ptr unsafe.Pointer) *QTextItem {
	var n = new(QTextItem)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextItem) DestroyQTextItem() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QTextItem) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextItem_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextItem) RenderFlags() QTextItem__RenderFlag {
	if ptr.Pointer() != nil {
		return QTextItem__RenderFlag(C.QTextItem_RenderFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextItem) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextItem_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextItem) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextItem_Width(ptr.Pointer()))
	}
	return 0
}

//QTextLayout::CursorMode
type QTextLayout__CursorMode int64

const (
	QTextLayout__SkipCharacters = QTextLayout__CursorMode(0)
	QTextLayout__SkipWords      = QTextLayout__CursorMode(1)
)

type QTextLayout struct {
	ptr unsafe.Pointer
}

type QTextLayout_ITF interface {
	QTextLayout_PTR() *QTextLayout
}

func (p *QTextLayout) QTextLayout_PTR() *QTextLayout {
	return p
}

func (p *QTextLayout) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextLayout) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextLayout(ptr QTextLayout_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLayout_PTR().Pointer()
	}
	return nil
}

func NewQTextLayoutFromPointer(ptr unsafe.Pointer) *QTextLayout {
	var n = new(QTextLayout)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTextLayout) DrawCursor2(painter QPainter_ITF, position core.QPointF_ITF, cursorPosition int) {
	if ptr.Pointer() != nil {
		C.QTextLayout_DrawCursor2(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQPointF(position), C.int(int32(cursorPosition)))
	}
}

func (ptr *QTextLayout) DrawCursor(painter QPainter_ITF, position core.QPointF_ITF, cursorPosition int, width int) {
	if ptr.Pointer() != nil {
		C.QTextLayout_DrawCursor(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQPointF(position), C.int(int32(cursorPosition)), C.int(int32(width)))
	}
}

func NewQTextLayout() *QTextLayout {
	var tmpValue = NewQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout())
	runtime.SetFinalizer(tmpValue, (*QTextLayout).DestroyQTextLayout)
	return tmpValue
}

func NewQTextLayout2(text string) *QTextLayout {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout2(textC))
	runtime.SetFinalizer(tmpValue, (*QTextLayout).DestroyQTextLayout)
	return tmpValue
}

func NewQTextLayout3(text string, font QFont_ITF, paintdevice QPaintDevice_ITF) *QTextLayout {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQTextLayoutFromPointer(C.QTextLayout_NewQTextLayout3(textC, PointerFromQFont(font), PointerFromQPaintDevice(paintdevice)))
	runtime.SetFinalizer(tmpValue, (*QTextLayout).DestroyQTextLayout)
	return tmpValue
}

func (ptr *QTextLayout) CreateLine() *QTextLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLineFromPointer(C.QTextLayout_CreateLine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) BeginLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_BeginLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) BoundingRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextLayout_BoundingRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) CacheEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QTextLayout_CacheEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLayout) ClearFormats() {
	if ptr.Pointer() != nil {
		C.QTextLayout_ClearFormats(ptr.Pointer())
	}
}

func (ptr *QTextLayout) ClearLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_ClearLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) CursorMoveStyle() core.Qt__CursorMoveStyle {
	if ptr.Pointer() != nil {
		return core.Qt__CursorMoveStyle(C.QTextLayout_CursorMoveStyle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) EndLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_EndLayout(ptr.Pointer())
	}
}

func (ptr *QTextLayout) Font() *QFont {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFontFromPointer(C.QTextLayout_Font(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QFont).DestroyQFont)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) GlyphRuns(from int, length int) []*QGlyphRun {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QGlyphRun {
			var out = make([]*QGlyphRun, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextLayoutFromPointer(l.data).glyphRuns_atList(i)
			}
			return out
		}(C.QTextLayout_GlyphRuns(ptr.Pointer(), C.int(int32(from)), C.int(int32(length))))
	}
	return nil
}

func (ptr *QTextLayout) IsValidCursorPosition(pos int) bool {
	if ptr.Pointer() != nil {
		return C.QTextLayout_IsValidCursorPosition(ptr.Pointer(), C.int(int32(pos))) != 0
	}
	return false
}

func (ptr *QTextLayout) LeftCursorPosition(oldPos int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_LeftCursorPosition(ptr.Pointer(), C.int(int32(oldPos)))))
	}
	return 0
}

func (ptr *QTextLayout) LineAt(i int) *QTextLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLineFromPointer(C.QTextLayout_LineAt(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) LineCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_LineCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLayout) LineForTextPosition(pos int) *QTextLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLineFromPointer(C.QTextLayout_LineForTextPosition(ptr.Pointer(), C.int(int32(pos))))
		runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) MaximumWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLayout_MaximumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) MinimumWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLayout_MinimumWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLayout) NextCursorPosition(oldPos int, mode QTextLayout__CursorMode) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_NextCursorPosition(ptr.Pointer(), C.int(int32(oldPos)), C.longlong(mode))))
	}
	return 0
}

func (ptr *QTextLayout) Position() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QTextLayout_Position(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLayout) PreeditAreaPosition() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_PreeditAreaPosition(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLayout) PreeditAreaText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextLayout_PreeditAreaText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextLayout) PreviousCursorPosition(oldPos int, mode QTextLayout__CursorMode) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_PreviousCursorPosition(ptr.Pointer(), C.int(int32(oldPos)), C.longlong(mode))))
	}
	return 0
}

func (ptr *QTextLayout) RightCursorPosition(oldPos int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLayout_RightCursorPosition(ptr.Pointer(), C.int(int32(oldPos)))))
	}
	return 0
}

func (ptr *QTextLayout) SetCacheEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetCacheEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextLayout) SetCursorMoveStyle(style core.Qt__CursorMoveStyle) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetCursorMoveStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextLayout) SetFont(font QFont_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetFont(ptr.Pointer(), PointerFromQFont(font))
	}
}

func (ptr *QTextLayout) SetPosition(p core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetPosition(ptr.Pointer(), core.PointerFromQPointF(p))
	}
}

func (ptr *QTextLayout) SetPreeditArea(position int, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QTextLayout_SetPreeditArea(ptr.Pointer(), C.int(int32(position)), textC)
	}
}

func (ptr *QTextLayout) SetText(stri string) {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		C.QTextLayout_SetText(ptr.Pointer(), striC)
	}
}

func (ptr *QTextLayout) SetTextOption(option QTextOption_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLayout_SetTextOption(ptr.Pointer(), PointerFromQTextOption(option))
	}
}

func (ptr *QTextLayout) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextLayout_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextLayout) TextOption() *QTextOption {
	if ptr.Pointer() != nil {
		return NewQTextOptionFromPointer(C.QTextLayout_TextOption(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextLayout) DestroyQTextLayout() {
	if ptr.Pointer() != nil {
		C.QTextLayout_DestroyQTextLayout(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextLayout) glyphRuns_atList(i int) *QGlyphRun {
	if ptr.Pointer() != nil {
		var tmpValue = NewQGlyphRunFromPointer(C.QTextLayout_glyphRuns_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
		return tmpValue
	}
	return nil
}

//QTextLength::Type
type QTextLength__Type int64

const (
	QTextLength__VariableLength   = QTextLength__Type(0)
	QTextLength__FixedLength      = QTextLength__Type(1)
	QTextLength__PercentageLength = QTextLength__Type(2)
)

type QTextLength struct {
	ptr unsafe.Pointer
}

type QTextLength_ITF interface {
	QTextLength_PTR() *QTextLength
}

func (p *QTextLength) QTextLength_PTR() *QTextLength {
	return p
}

func (p *QTextLength) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextLength) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextLength(ptr QTextLength_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLength_PTR().Pointer()
	}
	return nil
}

func NewQTextLengthFromPointer(ptr unsafe.Pointer) *QTextLength {
	var n = new(QTextLength)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextLength) DestroyQTextLength() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextLength() *QTextLength {
	var tmpValue = NewQTextLengthFromPointer(C.QTextLength_NewQTextLength())
	runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
	return tmpValue
}

func NewQTextLength2(ty QTextLength__Type, value float64) *QTextLength {
	var tmpValue = NewQTextLengthFromPointer(C.QTextLength_NewQTextLength2(C.longlong(ty), C.double(value)))
	runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
	return tmpValue
}

func (ptr *QTextLength) RawValue() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLength_RawValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLength) Type() QTextLength__Type {
	if ptr.Pointer() != nil {
		return QTextLength__Type(C.QTextLength_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLength) Value(maximumLength float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLength_Value(ptr.Pointer(), C.double(maximumLength)))
	}
	return 0
}

//QTextLine::CursorPosition
type QTextLine__CursorPosition int64

const (
	QTextLine__CursorBetweenCharacters = QTextLine__CursorPosition(0)
	QTextLine__CursorOnCharacter       = QTextLine__CursorPosition(1)
)

//QTextLine::Edge
type QTextLine__Edge int64

const (
	QTextLine__Leading  = QTextLine__Edge(0)
	QTextLine__Trailing = QTextLine__Edge(1)
)

type QTextLine struct {
	ptr unsafe.Pointer
}

type QTextLine_ITF interface {
	QTextLine_PTR() *QTextLine
}

func (p *QTextLine) QTextLine_PTR() *QTextLine {
	return p
}

func (p *QTextLine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextLine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextLine(ptr QTextLine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextLine_PTR().Pointer()
	}
	return nil
}

func NewQTextLineFromPointer(ptr unsafe.Pointer) *QTextLine {
	var n = new(QTextLine)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextLine) DestroyQTextLine() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QTextLine) XToCursor(x float64, cpos QTextLine__CursorPosition) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_XToCursor(ptr.Pointer(), C.double(x), C.longlong(cpos))))
	}
	return 0
}

func NewQTextLine() *QTextLine {
	var tmpValue = NewQTextLineFromPointer(C.QTextLine_NewQTextLine())
	runtime.SetFinalizer(tmpValue, (*QTextLine).DestroyQTextLine)
	return tmpValue
}

func (ptr *QTextLine) Ascent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Ascent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) CursorToX(cursorPos int, edge QTextLine__Edge) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_CursorToX(ptr.Pointer(), C.int(int32(cursorPos)), C.longlong(edge)))
	}
	return 0
}

func (ptr *QTextLine) CursorToX2(cursorPos int, edge QTextLine__Edge) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_CursorToX2(ptr.Pointer(), C.int(int32(cursorPos)), C.longlong(edge)))
	}
	return 0
}

func (ptr *QTextLine) Descent() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Descent(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) GlyphRuns(from int, length int) []*QGlyphRun {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtGui_PackedList) []*QGlyphRun {
			var out = make([]*QGlyphRun, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQTextLineFromPointer(l.data).glyphRuns_atList(i)
			}
			return out
		}(C.QTextLine_GlyphRuns(ptr.Pointer(), C.int(int32(from)), C.int(int32(length))))
	}
	return nil
}

func (ptr *QTextLine) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) HorizontalAdvance() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_HorizontalAdvance(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextLine_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLine) Leading() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Leading(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) LeadingIncluded() bool {
	if ptr.Pointer() != nil {
		return C.QTextLine_LeadingIncluded(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextLine) LineNumber() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_LineNumber(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLine) NaturalTextRect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextLine_NaturalTextRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLine) NaturalTextWidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_NaturalTextWidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Position() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QTextLine_Position(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLine) Rect() *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTextLine_Rect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTextLine) SetLeadingIncluded(included bool) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetLeadingIncluded(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(included))))
	}
}

func (ptr *QTextLine) SetLineWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetLineWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QTextLine) SetNumColumns(numColumns int) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetNumColumns(ptr.Pointer(), C.int(int32(numColumns)))
	}
}

func (ptr *QTextLine) SetNumColumns2(numColumns int, alignmentWidth float64) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetNumColumns2(ptr.Pointer(), C.int(int32(numColumns)), C.double(alignmentWidth))
	}
}

func (ptr *QTextLine) SetPosition(pos core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QTextLine_SetPosition(ptr.Pointer(), core.PointerFromQPointF(pos))
	}
}

func (ptr *QTextLine) TextLength() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_TextLength(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLine) TextStart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextLine_TextStart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextLine) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) X() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) Y() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextLine_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextLine) glyphRuns_atList(i int) *QGlyphRun {
	if ptr.Pointer() != nil {
		var tmpValue = NewQGlyphRunFromPointer(C.QTextLine_glyphRuns_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QGlyphRun).DestroyQGlyphRun)
		return tmpValue
	}
	return nil
}

type QTextList struct {
	QTextBlockGroup
}

type QTextList_ITF interface {
	QTextBlockGroup_ITF
	QTextList_PTR() *QTextList
}

func (p *QTextList) QTextList_PTR() *QTextList {
	return p
}

func (p *QTextList) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextBlockGroup_PTR().Pointer()
	}
	return nil
}

func (p *QTextList) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextBlockGroup_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextList(ptr QTextList_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextList_PTR().Pointer()
	}
	return nil
}

func NewQTextListFromPointer(ptr unsafe.Pointer) *QTextList {
	var n = new(QTextList)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextList) DestroyQTextList() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QTextList) ItemNumber(block QTextBlock_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextList_ItemNumber(ptr.Pointer(), PointerFromQTextBlock(block))))
	}
	return 0
}

func (ptr *QTextList) ItemText(block QTextBlock_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextList_ItemText(ptr.Pointer(), PointerFromQTextBlock(block)))
	}
	return ""
}

func (ptr *QTextList) Add(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_Add(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextList_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextList) Format() *QTextListFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextListFormatFromPointer(C.QTextList_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextListFormat).DestroyQTextListFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextList) Item(i int) *QTextBlock {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextBlockFromPointer(C.QTextList_Item(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextBlock).DestroyQTextBlock)
		return tmpValue
	}
	return nil
}

func (ptr *QTextList) Remove(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_Remove(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) RemoveItem(i int) {
	if ptr.Pointer() != nil {
		C.QTextList_RemoveItem(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QTextList) SetFormat(format QTextListFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_SetFormat(ptr.Pointer(), PointerFromQTextListFormat(format))
	}
}

//export callbackQTextList_BlockFormatChanged
func callbackQTextList_BlockFormatChanged(ptr unsafe.Pointer, block unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::blockFormatChanged"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextListFromPointer(ptr).BlockFormatChangedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextList) ConnectBlockFormatChanged(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::blockFormatChanged", f)
	}
}

func (ptr *QTextList) DisconnectBlockFormatChanged() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::blockFormatChanged")
	}
}

func (ptr *QTextList) BlockFormatChanged(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_BlockFormatChanged(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) BlockFormatChangedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_BlockFormatChangedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextList_BlockInserted
func callbackQTextList_BlockInserted(ptr unsafe.Pointer, block unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::blockInserted"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextListFromPointer(ptr).BlockInsertedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextList) ConnectBlockInserted(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::blockInserted", f)
	}
}

func (ptr *QTextList) DisconnectBlockInserted() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::blockInserted")
	}
}

func (ptr *QTextList) BlockInserted(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_BlockInserted(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) BlockInsertedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_BlockInsertedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextList_BlockRemoved
func callbackQTextList_BlockRemoved(ptr unsafe.Pointer, block unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::blockRemoved"); signal != nil {
		signal.(func(*QTextBlock))(NewQTextBlockFromPointer(block))
	} else {
		NewQTextListFromPointer(ptr).BlockRemovedDefault(NewQTextBlockFromPointer(block))
	}
}

func (ptr *QTextList) ConnectBlockRemoved(f func(block *QTextBlock)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::blockRemoved", f)
	}
}

func (ptr *QTextList) DisconnectBlockRemoved() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::blockRemoved")
	}
}

func (ptr *QTextList) BlockRemoved(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_BlockRemoved(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

func (ptr *QTextList) BlockRemovedDefault(block QTextBlock_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_BlockRemovedDefault(ptr.Pointer(), PointerFromQTextBlock(block))
	}
}

//export callbackQTextList_TimerEvent
func callbackQTextList_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextListFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextList) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::timerEvent", f)
	}
}

func (ptr *QTextList) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::timerEvent")
	}
}

func (ptr *QTextList) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextList) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextList_ChildEvent
func callbackQTextList_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextListFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextList) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::childEvent", f)
	}
}

func (ptr *QTextList) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::childEvent")
	}
}

func (ptr *QTextList) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextList) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextList_ConnectNotify
func callbackQTextList_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextListFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextList) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::connectNotify", f)
	}
}

func (ptr *QTextList) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::connectNotify")
	}
}

func (ptr *QTextList) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextList) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextList_CustomEvent
func callbackQTextList_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextListFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextList) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::customEvent", f)
	}
}

func (ptr *QTextList) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::customEvent")
	}
}

func (ptr *QTextList) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextList) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextList_DeleteLater
func callbackQTextList_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextListFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextList) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::deleteLater", f)
	}
}

func (ptr *QTextList) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::deleteLater")
	}
}

func (ptr *QTextList) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTextList_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextList) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextList_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextList_DisconnectNotify
func callbackQTextList_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextListFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextList) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::disconnectNotify", f)
	}
}

func (ptr *QTextList) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::disconnectNotify")
	}
}

func (ptr *QTextList) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextList) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextList_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextList_Event
func callbackQTextList_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextListFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextList) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::event", f)
	}
}

func (ptr *QTextList) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::event")
	}
}

func (ptr *QTextList) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextList_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextList) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextList_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextList_EventFilter
func callbackQTextList_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextListFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextList) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::eventFilter", f)
	}
}

func (ptr *QTextList) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::eventFilter")
	}
}

func (ptr *QTextList) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextList_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextList) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextList_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextList_MetaObject
func callbackQTextList_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextList::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextListFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextList) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::metaObject", f)
	}
}

func (ptr *QTextList) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextList::metaObject")
	}
}

func (ptr *QTextList) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextList_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextList) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextList_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTextListFormat::Style
type QTextListFormat__Style int64

var (
	QTextListFormat__ListDisc           = QTextListFormat__Style(-1)
	QTextListFormat__ListCircle         = QTextListFormat__Style(-2)
	QTextListFormat__ListSquare         = QTextListFormat__Style(-3)
	QTextListFormat__ListDecimal        = QTextListFormat__Style(-4)
	QTextListFormat__ListLowerAlpha     = QTextListFormat__Style(-5)
	QTextListFormat__ListUpperAlpha     = QTextListFormat__Style(-6)
	QTextListFormat__ListLowerRoman     = QTextListFormat__Style(-7)
	QTextListFormat__ListUpperRoman     = QTextListFormat__Style(-8)
	QTextListFormat__ListStyleUndefined = QTextListFormat__Style(0)
)

type QTextListFormat struct {
	QTextFormat
}

type QTextListFormat_ITF interface {
	QTextFormat_ITF
	QTextListFormat_PTR() *QTextListFormat
}

func (p *QTextListFormat) QTextListFormat_PTR() *QTextListFormat {
	return p
}

func (p *QTextListFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextListFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextListFormat(ptr QTextListFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextListFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextListFormatFromPointer(ptr unsafe.Pointer) *QTextListFormat {
	var n = new(QTextListFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextListFormat) DestroyQTextListFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextListFormat() *QTextListFormat {
	var tmpValue = NewQTextListFormatFromPointer(C.QTextListFormat_NewQTextListFormat())
	runtime.SetFinalizer(tmpValue, (*QTextListFormat).DestroyQTextListFormat)
	return tmpValue
}

func (ptr *QTextListFormat) Indent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextListFormat_Indent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextListFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextListFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextListFormat) NumberPrefix() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextListFormat_NumberPrefix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextListFormat) NumberSuffix() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextListFormat_NumberSuffix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextListFormat) SetIndent(indentation int) {
	if ptr.Pointer() != nil {
		C.QTextListFormat_SetIndent(ptr.Pointer(), C.int(int32(indentation)))
	}
}

func (ptr *QTextListFormat) SetNumberPrefix(numberPrefix string) {
	if ptr.Pointer() != nil {
		var numberPrefixC = C.CString(numberPrefix)
		defer C.free(unsafe.Pointer(numberPrefixC))
		C.QTextListFormat_SetNumberPrefix(ptr.Pointer(), numberPrefixC)
	}
}

func (ptr *QTextListFormat) SetNumberSuffix(numberSuffix string) {
	if ptr.Pointer() != nil {
		var numberSuffixC = C.CString(numberSuffix)
		defer C.free(unsafe.Pointer(numberSuffixC))
		C.QTextListFormat_SetNumberSuffix(ptr.Pointer(), numberSuffixC)
	}
}

func (ptr *QTextListFormat) SetStyle(style QTextListFormat__Style) {
	if ptr.Pointer() != nil {
		C.QTextListFormat_SetStyle(ptr.Pointer(), C.longlong(style))
	}
}

func (ptr *QTextListFormat) Style() QTextListFormat__Style {
	if ptr.Pointer() != nil {
		return QTextListFormat__Style(C.QTextListFormat_Style(ptr.Pointer()))
	}
	return 0
}

type QTextObject struct {
	core.QObject
}

type QTextObject_ITF interface {
	core.QObject_ITF
	QTextObject_PTR() *QTextObject
}

func (p *QTextObject) QTextObject_PTR() *QTextObject {
	return p
}

func (p *QTextObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QTextObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextObject(ptr QTextObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObject_PTR().Pointer()
	}
	return nil
}

func NewQTextObjectFromPointer(ptr unsafe.Pointer) *QTextObject {
	var n = new(QTextObject)
	n.SetPointer(ptr)
	return n
}
func NewQTextObject(document QTextDocument_ITF) *QTextObject {
	var tmpValue = NewQTextObjectFromPointer(C.QTextObject_NewQTextObject(PointerFromQTextDocument(document)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTextObject) Document() *QTextDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextDocumentFromPointer(C.QTextObject_Document(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) Format() *QTextFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextFormatFromPointer(C.QTextObject_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextFormat).DestroyQTextFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextObject) FormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextObject_FormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextObject) ObjectIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextObject_ObjectIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextObject) SetFormat(format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_SetFormat(ptr.Pointer(), PointerFromQTextFormat(format))
	}
}

func (ptr *QTextObject) DestroyQTextObject() {
	if ptr.Pointer() != nil {
		C.QTextObject_DestroyQTextObject(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextObject_TimerEvent
func callbackQTextObject_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextObject) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::timerEvent", f)
	}
}

func (ptr *QTextObject) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::timerEvent")
	}
}

func (ptr *QTextObject) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextObject) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextObject_ChildEvent
func callbackQTextObject_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextObject) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::childEvent", f)
	}
}

func (ptr *QTextObject) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::childEvent")
	}
}

func (ptr *QTextObject) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextObject) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextObject_ConnectNotify
func callbackQTextObject_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextObjectFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextObject) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::connectNotify", f)
	}
}

func (ptr *QTextObject) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::connectNotify")
	}
}

func (ptr *QTextObject) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextObject) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextObject_CustomEvent
func callbackQTextObject_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextObjectFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextObject) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::customEvent", f)
	}
}

func (ptr *QTextObject) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::customEvent")
	}
}

func (ptr *QTextObject) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextObject) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextObject_DeleteLater
func callbackQTextObject_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextObjectFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextObject) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::deleteLater", f)
	}
}

func (ptr *QTextObject) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::deleteLater")
	}
}

func (ptr *QTextObject) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTextObject_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextObject) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextObject_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextObject_DisconnectNotify
func callbackQTextObject_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextObjectFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextObject) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::disconnectNotify", f)
	}
}

func (ptr *QTextObject) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::disconnectNotify")
	}
}

func (ptr *QTextObject) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextObject) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObject_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextObject_Event
func callbackQTextObject_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextObjectFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextObject) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::event", f)
	}
}

func (ptr *QTextObject) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::event")
	}
}

func (ptr *QTextObject) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextObject_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextObject) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextObject_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextObject_EventFilter
func callbackQTextObject_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextObjectFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextObject) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::eventFilter", f)
	}
}

func (ptr *QTextObject) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::eventFilter")
	}
}

func (ptr *QTextObject) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextObject_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextObject) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextObject_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextObject_MetaObject
func callbackQTextObject_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObject::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextObjectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextObject) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::metaObject", f)
	}
}

func (ptr *QTextObject) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObject::metaObject")
	}
}

func (ptr *QTextObject) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextObject_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextObject) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextObject_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextObjectInterface struct {
	ptr unsafe.Pointer
}

type QTextObjectInterface_ITF interface {
	QTextObjectInterface_PTR() *QTextObjectInterface
}

func (p *QTextObjectInterface) QTextObjectInterface_PTR() *QTextObjectInterface {
	return p
}

func (p *QTextObjectInterface) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextObjectInterface) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextObjectInterface(ptr QTextObjectInterface_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextObjectInterface_PTR().Pointer()
	}
	return nil
}

func NewQTextObjectInterfaceFromPointer(ptr unsafe.Pointer) *QTextObjectInterface {
	var n = new(QTextObjectInterface)
	n.SetPointer(ptr)
	return n
}

//export callbackQTextObjectInterface_DestroyQTextObjectInterface
func callbackQTextObjectInterface_DestroyQTextObjectInterface(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObjectInterface::~QTextObjectInterface"); signal != nil {
		signal.(func())()
	} else {
		NewQTextObjectInterfaceFromPointer(ptr).DestroyQTextObjectInterfaceDefault()
	}
}

func (ptr *QTextObjectInterface) ConnectDestroyQTextObjectInterface(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObjectInterface::~QTextObjectInterface", f)
	}
}

func (ptr *QTextObjectInterface) DisconnectDestroyQTextObjectInterface() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObjectInterface::~QTextObjectInterface")
	}
}

func (ptr *QTextObjectInterface) DestroyQTextObjectInterface() {
	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DestroyQTextObjectInterface(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextObjectInterface) DestroyQTextObjectInterfaceDefault() {
	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DestroyQTextObjectInterfaceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextObjectInterface_DrawObject
func callbackQTextObjectInterface_DrawObject(ptr unsafe.Pointer, painter unsafe.Pointer, rect unsafe.Pointer, doc unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObjectInterface::drawObject"); signal != nil {
		signal.(func(*QPainter, *core.QRectF, *QTextDocument, int, *QTextFormat))(NewQPainterFromPointer(painter), core.NewQRectFFromPointer(rect), NewQTextDocumentFromPointer(doc), int(int32(posInDocument)), NewQTextFormatFromPointer(format))
	}

}

func (ptr *QTextObjectInterface) ConnectDrawObject(f func(painter *QPainter, rect *core.QRectF, doc *QTextDocument, posInDocument int, format *QTextFormat)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObjectInterface::drawObject", f)
	}
}

func (ptr *QTextObjectInterface) DisconnectDrawObject(painter QPainter_ITF, rect core.QRectF_ITF, doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObjectInterface::drawObject")
	}
}

func (ptr *QTextObjectInterface) DrawObject(painter QPainter_ITF, rect core.QRectF_ITF, doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextObjectInterface_DrawObject(ptr.Pointer(), PointerFromQPainter(painter), core.PointerFromQRectF(rect), PointerFromQTextDocument(doc), C.int(int32(posInDocument)), PointerFromQTextFormat(format))
	}
}

//export callbackQTextObjectInterface_IntrinsicSize
func callbackQTextObjectInterface_IntrinsicSize(ptr unsafe.Pointer, doc unsafe.Pointer, posInDocument C.int, format unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextObjectInterface::intrinsicSize"); signal != nil {
		return core.PointerFromQSizeF(signal.(func(*QTextDocument, int, *QTextFormat) *core.QSizeF)(NewQTextDocumentFromPointer(doc), int(int32(posInDocument)), NewQTextFormatFromPointer(format)))
	}

	return core.PointerFromQSizeF(nil)
}

func (ptr *QTextObjectInterface) ConnectIntrinsicSize(f func(doc *QTextDocument, posInDocument int, format *QTextFormat) *core.QSizeF) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObjectInterface::intrinsicSize", f)
	}
}

func (ptr *QTextObjectInterface) DisconnectIntrinsicSize(doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextObjectInterface::intrinsicSize")
	}
}

func (ptr *QTextObjectInterface) IntrinsicSize(doc QTextDocument_ITF, posInDocument int, format QTextFormat_ITF) *core.QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFFromPointer(C.QTextObjectInterface_IntrinsicSize(ptr.Pointer(), PointerFromQTextDocument(doc), C.int(int32(posInDocument)), PointerFromQTextFormat(format)))
		runtime.SetFinalizer(tmpValue, (*core.QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

//QTextOption::Flag
type QTextOption__Flag int64

const (
	QTextOption__ShowTabsAndSpaces                     = QTextOption__Flag(0x1)
	QTextOption__ShowLineAndParagraphSeparators        = QTextOption__Flag(0x2)
	QTextOption__AddSpaceForLineAndParagraphSeparators = QTextOption__Flag(0x4)
	QTextOption__SuppressColors                        = QTextOption__Flag(0x8)
	QTextOption__ShowDocumentTerminator                = QTextOption__Flag(0x10)
	QTextOption__IncludeTrailingSpaces                 = QTextOption__Flag(0x80000000)
)

//QTextOption::TabType
type QTextOption__TabType int64

const (
	QTextOption__LeftTab      = QTextOption__TabType(0)
	QTextOption__RightTab     = QTextOption__TabType(1)
	QTextOption__CenterTab    = QTextOption__TabType(2)
	QTextOption__DelimiterTab = QTextOption__TabType(3)
)

//QTextOption::WrapMode
type QTextOption__WrapMode int64

const (
	QTextOption__NoWrap                       = QTextOption__WrapMode(0)
	QTextOption__WordWrap                     = QTextOption__WrapMode(1)
	QTextOption__ManualWrap                   = QTextOption__WrapMode(2)
	QTextOption__WrapAnywhere                 = QTextOption__WrapMode(3)
	QTextOption__WrapAtWordBoundaryOrAnywhere = QTextOption__WrapMode(4)
)

type QTextOption struct {
	ptr unsafe.Pointer
}

type QTextOption_ITF interface {
	QTextOption_PTR() *QTextOption
}

func (p *QTextOption) QTextOption_PTR() *QTextOption {
	return p
}

func (p *QTextOption) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextOption) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextOption(ptr QTextOption_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextOption_PTR().Pointer()
	}
	return nil
}

func NewQTextOptionFromPointer(ptr unsafe.Pointer) *QTextOption {
	var n = new(QTextOption)
	n.SetPointer(ptr)
	return n
}
func NewQTextOption3(other QTextOption_ITF) *QTextOption {
	var tmpValue = NewQTextOptionFromPointer(C.QTextOption_NewQTextOption3(PointerFromQTextOption(other)))
	runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
	return tmpValue
}

func NewQTextOption() *QTextOption {
	var tmpValue = NewQTextOptionFromPointer(C.QTextOption_NewQTextOption())
	runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
	return tmpValue
}

func NewQTextOption2(alignment core.Qt__AlignmentFlag) *QTextOption {
	var tmpValue = NewQTextOptionFromPointer(C.QTextOption_NewQTextOption2(C.longlong(alignment)))
	runtime.SetFinalizer(tmpValue, (*QTextOption).DestroyQTextOption)
	return tmpValue
}

func (ptr *QTextOption) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextOption_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) Flags() QTextOption__Flag {
	if ptr.Pointer() != nil {
		return QTextOption__Flag(C.QTextOption_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextOption) SetFlags(flags QTextOption__Flag) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QTextOption) SetTabStop(tabStop float64) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetTabStop(ptr.Pointer(), C.double(tabStop))
	}
}

func (ptr *QTextOption) SetTextDirection(direction core.Qt__LayoutDirection) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetTextDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QTextOption) SetUseDesignMetrics(enable bool) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetUseDesignMetrics(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QTextOption) SetWrapMode(mode QTextOption__WrapMode) {
	if ptr.Pointer() != nil {
		C.QTextOption_SetWrapMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QTextOption) TabStop() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextOption_TabStop(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) TextDirection() core.Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return core.Qt__LayoutDirection(C.QTextOption_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) UseDesignMetrics() bool {
	if ptr.Pointer() != nil {
		return C.QTextOption_UseDesignMetrics(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextOption) WrapMode() QTextOption__WrapMode {
	if ptr.Pointer() != nil {
		return QTextOption__WrapMode(C.QTextOption_WrapMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextOption) DestroyQTextOption() {
	if ptr.Pointer() != nil {
		C.QTextOption_DestroyQTextOption(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextTable struct {
	QTextFrame
}

type QTextTable_ITF interface {
	QTextFrame_ITF
	QTextTable_PTR() *QTextTable
}

func (p *QTextTable) QTextTable_PTR() *QTextTable {
	return p
}

func (p *QTextTable) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFrame_PTR().Pointer()
	}
	return nil
}

func (p *QTextTable) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFrame_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextTable(ptr QTextTable_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTable_PTR().Pointer()
	}
	return nil
}

func NewQTextTableFromPointer(ptr unsafe.Pointer) *QTextTable {
	var n = new(QTextTable)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextTable) DestroyQTextTable() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func (ptr *QTextTable) CellAt3(cursor QTextCursor_ITF) *QTextTableCell {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFromPointer(C.QTextTable_CellAt3(ptr.Pointer(), PointerFromQTextCursor(cursor)))
		runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) CellAt(row int, column int) *QTextTableCell {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFromPointer(C.QTextTable_CellAt(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
		runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) InsertColumns(index int, columns int) {
	if ptr.Pointer() != nil {
		C.QTextTable_InsertColumns(ptr.Pointer(), C.int(int32(index)), C.int(int32(columns)))
	}
}

func (ptr *QTextTable) InsertRows(index int, rows int) {
	if ptr.Pointer() != nil {
		C.QTextTable_InsertRows(ptr.Pointer(), C.int(int32(index)), C.int(int32(rows)))
	}
}

func (ptr *QTextTable) RemoveColumns(index int, columns int) {
	if ptr.Pointer() != nil {
		C.QTextTable_RemoveColumns(ptr.Pointer(), C.int(int32(index)), C.int(int32(columns)))
	}
}

func (ptr *QTextTable) RemoveRows(index int, rows int) {
	if ptr.Pointer() != nil {
		C.QTextTable_RemoveRows(ptr.Pointer(), C.int(int32(index)), C.int(int32(rows)))
	}
}

func (ptr *QTextTable) Resize(rows int, columns int) {
	if ptr.Pointer() != nil {
		C.QTextTable_Resize(ptr.Pointer(), C.int(int32(rows)), C.int(int32(columns)))
	}
}

func (ptr *QTextTable) RowEnd(cursor QTextCursor_ITF) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTable_RowEnd(ptr.Pointer(), PointerFromQTextCursor(cursor)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) RowStart(cursor QTextCursor_ITF) *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTable_RowStart(ptr.Pointer(), PointerFromQTextCursor(cursor)))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) SetFormat(format QTextTableFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_SetFormat(ptr.Pointer(), PointerFromQTextTableFormat(format))
	}
}

func (ptr *QTextTable) AppendColumns(count int) {
	if ptr.Pointer() != nil {
		C.QTextTable_AppendColumns(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextTable) AppendRows(count int) {
	if ptr.Pointer() != nil {
		C.QTextTable_AppendRows(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextTable) CellAt2(position int) *QTextTableCell {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableCellFromPointer(C.QTextTable_CellAt2(ptr.Pointer(), C.int(int32(position))))
		runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) Columns() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTable_Columns(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTable) Format() *QTextTableFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextTableFormatFromPointer(C.QTextTable_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextTableFormat).DestroyQTextTableFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTable) MergeCells2(cursor QTextCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_MergeCells2(ptr.Pointer(), PointerFromQTextCursor(cursor))
	}
}

func (ptr *QTextTable) MergeCells(row int, column int, numRows int, numCols int) {
	if ptr.Pointer() != nil {
		C.QTextTable_MergeCells(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), C.int(int32(numRows)), C.int(int32(numCols)))
	}
}

func (ptr *QTextTable) Rows() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTable_Rows(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTable) SplitCell(row int, column int, numRows int, numCols int) {
	if ptr.Pointer() != nil {
		C.QTextTable_SplitCell(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), C.int(int32(numRows)), C.int(int32(numCols)))
	}
}

//export callbackQTextTable_TimerEvent
func callbackQTextTable_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQTextTableFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTextTable) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::timerEvent", f)
	}
}

func (ptr *QTextTable) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::timerEvent")
	}
}

func (ptr *QTextTable) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QTextTable) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQTextTable_ChildEvent
func callbackQTextTable_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQTextTableFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QTextTable) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::childEvent", f)
	}
}

func (ptr *QTextTable) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::childEvent")
	}
}

func (ptr *QTextTable) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QTextTable) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQTextTable_ConnectNotify
func callbackQTextTable_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextTableFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextTable) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::connectNotify", f)
	}
}

func (ptr *QTextTable) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::connectNotify")
	}
}

func (ptr *QTextTable) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextTable) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextTable_CustomEvent
func callbackQTextTable_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQTextTableFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QTextTable) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::customEvent", f)
	}
}

func (ptr *QTextTable) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::customEvent")
	}
}

func (ptr *QTextTable) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QTextTable) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQTextTable_DeleteLater
func callbackQTextTable_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTextTableFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTextTable) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::deleteLater", f)
	}
}

func (ptr *QTextTable) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::deleteLater")
	}
}

func (ptr *QTextTable) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTextTable_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextTable) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTextTable_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTextTable_DisconnectNotify
func callbackQTextTable_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQTextTableFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTextTable) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::disconnectNotify", f)
	}
}

func (ptr *QTextTable) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::disconnectNotify")
	}
}

func (ptr *QTextTable) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTextTable) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTable_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQTextTable_Event
func callbackQTextTable_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextTableFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QTextTable) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::event", f)
	}
}

func (ptr *QTextTable) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::event")
	}
}

func (ptr *QTextTable) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextTable_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTextTable) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextTable_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTextTable_EventFilter
func callbackQTextTable_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTextTableFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QTextTable) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::eventFilter", f)
	}
}

func (ptr *QTextTable) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::eventFilter")
	}
}

func (ptr *QTextTable) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextTable_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTextTable) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextTable_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTextTable_MetaObject
func callbackQTextTable_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextTable::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQTextTableFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTextTable) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::metaObject", f)
	}
}

func (ptr *QTextTable) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextTable::metaObject")
	}
}

func (ptr *QTextTable) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextTable_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextTable) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QTextTable_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTextTableCell struct {
	ptr unsafe.Pointer
}

type QTextTableCell_ITF interface {
	QTextTableCell_PTR() *QTextTableCell
}

func (p *QTextTableCell) QTextTableCell_PTR() *QTextTableCell {
	return p
}

func (p *QTextTableCell) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextTableCell) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextTableCell(ptr QTextTableCell_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableCell_PTR().Pointer()
	}
	return nil
}

func NewQTextTableCellFromPointer(ptr unsafe.Pointer) *QTextTableCell {
	var n = new(QTextTableCell)
	n.SetPointer(ptr)
	return n
}
func NewQTextTableCell() *QTextTableCell {
	var tmpValue = NewQTextTableCellFromPointer(C.QTextTableCell_NewQTextTableCell())
	runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
	return tmpValue
}

func NewQTextTableCell2(other QTextTableCell_ITF) *QTextTableCell {
	var tmpValue = NewQTextTableCellFromPointer(C.QTextTableCell_NewQTextTableCell2(PointerFromQTextTableCell(other)))
	runtime.SetFinalizer(tmpValue, (*QTextTableCell).DestroyQTextTableCell)
	return tmpValue
}

func (ptr *QTextTableCell) Column() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_Column(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) ColumnSpan() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_ColumnSpan(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) FirstCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTableCell_FirstCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableCell) Format() *QTextCharFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCharFormatFromPointer(C.QTextTableCell_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCharFormat).DestroyQTextCharFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableCell) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextTableCell_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextTableCell) LastCursorPosition() *QTextCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextCursorFromPointer(C.QTextTableCell_LastCursorPosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTextCursor).DestroyQTextCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QTextTableCell) Row() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_Row(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) RowSpan() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_RowSpan(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) SetFormat(format QTextCharFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QTextTableCell_SetFormat(ptr.Pointer(), PointerFromQTextCharFormat(format))
	}
}

func (ptr *QTextTableCell) TableCellFormatIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableCell_TableCellFormatIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableCell) DestroyQTextTableCell() {
	if ptr.Pointer() != nil {
		C.QTextTableCell_DestroyQTextTableCell(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextTableCellFormat struct {
	QTextCharFormat
}

type QTextTableCellFormat_ITF interface {
	QTextCharFormat_ITF
	QTextTableCellFormat_PTR() *QTextTableCellFormat
}

func (p *QTextTableCellFormat) QTextTableCellFormat_PTR() *QTextTableCellFormat {
	return p
}

func (p *QTextTableCellFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextCharFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextTableCellFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextCharFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextTableCellFormat(ptr QTextTableCellFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableCellFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextTableCellFormatFromPointer(ptr unsafe.Pointer) *QTextTableCellFormat {
	var n = new(QTextTableCellFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextTableCellFormat) DestroyQTextTableCellFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextTableCellFormat() *QTextTableCellFormat {
	var tmpValue = NewQTextTableCellFormatFromPointer(C.QTextTableCellFormat_NewQTextTableCellFormat())
	runtime.SetFinalizer(tmpValue, (*QTextTableCellFormat).DestroyQTextTableCellFormat)
	return tmpValue
}

func (ptr *QTextTableCellFormat) BottomPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_BottomPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextTableCellFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextTableCellFormat) LeftPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_LeftPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) RightPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_RightPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableCellFormat) SetBottomPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetBottomPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetLeftPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetLeftPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetRightPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetRightPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) SetTopPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableCellFormat_SetTopPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableCellFormat) TopPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableCellFormat_TopPadding(ptr.Pointer()))
	}
	return 0
}

type QTextTableFormat struct {
	QTextFrameFormat
}

type QTextTableFormat_ITF interface {
	QTextFrameFormat_ITF
	QTextTableFormat_PTR() *QTextTableFormat
}

func (p *QTextTableFormat) QTextTableFormat_PTR() *QTextTableFormat {
	return p
}

func (p *QTextTableFormat) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QTextFrameFormat_PTR().Pointer()
	}
	return nil
}

func (p *QTextTableFormat) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QTextFrameFormat_PTR().SetPointer(ptr)
	}
}

func PointerFromQTextTableFormat(ptr QTextTableFormat_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextTableFormat_PTR().Pointer()
	}
	return nil
}

func NewQTextTableFormatFromPointer(ptr unsafe.Pointer) *QTextTableFormat {
	var n = new(QTextTableFormat)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTextTableFormat) DestroyQTextTableFormat() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTextTableFormat() *QTextTableFormat {
	var tmpValue = NewQTextTableFormatFromPointer(C.QTextTableFormat_NewQTextTableFormat())
	runtime.SetFinalizer(tmpValue, (*QTextTableFormat).DestroyQTextTableFormat)
	return tmpValue
}

func (ptr *QTextTableFormat) Alignment() core.Qt__AlignmentFlag {
	if ptr.Pointer() != nil {
		return core.Qt__AlignmentFlag(C.QTextTableFormat_Alignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) CellPadding() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableFormat_CellPadding(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) CellSpacing() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTextTableFormat_CellSpacing(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextTableFormat) ClearColumnWidthConstraints() {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_ClearColumnWidthConstraints(ptr.Pointer())
	}
}

func (ptr *QTextTableFormat) Columns() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableFormat_Columns(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableFormat) HeaderRowCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextTableFormat_HeaderRowCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextTableFormat) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextTableFormat_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextTableFormat) SetAlignment(alignment core.Qt__AlignmentFlag) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetAlignment(ptr.Pointer(), C.longlong(alignment))
	}
}

func (ptr *QTextTableFormat) SetCellPadding(padding float64) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetCellPadding(ptr.Pointer(), C.double(padding))
	}
}

func (ptr *QTextTableFormat) SetCellSpacing(spacing float64) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetCellSpacing(ptr.Pointer(), C.double(spacing))
	}
}

func (ptr *QTextTableFormat) SetHeaderRowCount(count int) {
	if ptr.Pointer() != nil {
		C.QTextTableFormat_SetHeaderRowCount(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTextTableFormat) columnWidthConstraints_atList(i int) *QTextLength {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTextLengthFromPointer(C.QTextTableFormat_columnWidthConstraints_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QTextLength).DestroyQTextLength)
		return tmpValue
	}
	return nil
}

//QTouchDevice::CapabilityFlag
type QTouchDevice__CapabilityFlag int64

const (
	QTouchDevice__Position           = QTouchDevice__CapabilityFlag(0x0001)
	QTouchDevice__Area               = QTouchDevice__CapabilityFlag(0x0002)
	QTouchDevice__Pressure           = QTouchDevice__CapabilityFlag(0x0004)
	QTouchDevice__Velocity           = QTouchDevice__CapabilityFlag(0x0008)
	QTouchDevice__RawPositions       = QTouchDevice__CapabilityFlag(0x0010)
	QTouchDevice__NormalizedPosition = QTouchDevice__CapabilityFlag(0x0020)
	QTouchDevice__MouseEmulation     = QTouchDevice__CapabilityFlag(0x0040)
)

//QTouchDevice::DeviceType
type QTouchDevice__DeviceType int64

const (
	QTouchDevice__TouchScreen = QTouchDevice__DeviceType(0)
	QTouchDevice__TouchPad    = QTouchDevice__DeviceType(1)
)

type QTouchDevice struct {
	ptr unsafe.Pointer
}

type QTouchDevice_ITF interface {
	QTouchDevice_PTR() *QTouchDevice
}

func (p *QTouchDevice) QTouchDevice_PTR() *QTouchDevice {
	return p
}

func (p *QTouchDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTouchDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTouchDevice(ptr QTouchDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTouchDevice_PTR().Pointer()
	}
	return nil
}

func NewQTouchDeviceFromPointer(ptr unsafe.Pointer) *QTouchDevice {
	var n = new(QTouchDevice)
	n.SetPointer(ptr)
	return n
}
func NewQTouchDevice() *QTouchDevice {
	var tmpValue = NewQTouchDeviceFromPointer(C.QTouchDevice_NewQTouchDevice())
	runtime.SetFinalizer(tmpValue, (*QTouchDevice).DestroyQTouchDevice)
	return tmpValue
}

func (ptr *QTouchDevice) Capabilities() QTouchDevice__CapabilityFlag {
	if ptr.Pointer() != nil {
		return QTouchDevice__CapabilityFlag(C.QTouchDevice_Capabilities(ptr.Pointer()))
	}
	return 0
}

func QTouchDevice_Devices() []*QTouchDevice {
	return func(l C.struct_QtGui_PackedList) []*QTouchDevice {
		var out = make([]*QTouchDevice, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTouchDeviceFromPointer(l.data).devices_atList(i)
		}
		return out
	}(C.QTouchDevice_QTouchDevice_Devices())
}

func (ptr *QTouchDevice) Devices() []*QTouchDevice {
	return func(l C.struct_QtGui_PackedList) []*QTouchDevice {
		var out = make([]*QTouchDevice, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTouchDeviceFromPointer(l.data).devices_atList(i)
		}
		return out
	}(C.QTouchDevice_QTouchDevice_Devices())
}

func (ptr *QTouchDevice) MaximumTouchPoints() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTouchDevice_MaximumTouchPoints(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTouchDevice) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTouchDevice_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTouchDevice) SetCapabilities(caps QTouchDevice__CapabilityFlag) {
	if ptr.Pointer() != nil {
		C.QTouchDevice_SetCapabilities(ptr.Pointer(), C.longlong(caps))
	}
}

func (ptr *QTouchDevice) SetMaximumTouchPoints(max int) {
	if ptr.Pointer() != nil {
		C.QTouchDevice_SetMaximumTouchPoints(ptr.Pointer(), C.int(int32(max)))
	}
}

func (ptr *QTouchDevice) SetName(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QTouchDevice_SetName(ptr.Pointer(), nameC)
	}
}

func (ptr *QTouchDevice) SetType(devType QTouchDevice__DeviceType) {
	if ptr.Pointer() != nil {
		C.QTouchDevice_SetType(ptr.Pointer(), C.longlong(devType))
	}
}

func (ptr *QTouchDevice) Type() QTouchDevice__DeviceType {
	if ptr.Pointer() != nil {
		return QTouchDevice__DeviceType(C.QTouchDevice_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchDevice) DestroyQTouchDevice() {
	if ptr.Pointer() != nil {
		C.QTouchDevice_DestroyQTouchDevice(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTouchDevice) devices_atList(i int) *QTouchDevice {
	if ptr.Pointer() != nil {
		return NewQTouchDeviceFromPointer(C.QTouchDevice_devices_atList(ptr.Pointer(), C.int(int32(i))))
	}
	return nil
}

type QTouchEvent struct {
	QInputEvent
}

type QTouchEvent_ITF interface {
	QInputEvent_ITF
	QTouchEvent_PTR() *QTouchEvent
}

func (p *QTouchEvent) QTouchEvent_PTR() *QTouchEvent {
	return p
}

func (p *QTouchEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QTouchEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQTouchEvent(ptr QTouchEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTouchEvent_PTR().Pointer()
	}
	return nil
}

func NewQTouchEventFromPointer(ptr unsafe.Pointer) *QTouchEvent {
	var n = new(QTouchEvent)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTouchEvent) Device() *QTouchDevice {
	if ptr.Pointer() != nil {
		return NewQTouchDeviceFromPointer(C.QTouchEvent_Device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTouchEvent) Target() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTouchEvent_Target(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) TouchPointStates() core.Qt__TouchPointState {
	if ptr.Pointer() != nil {
		return core.Qt__TouchPointState(C.QTouchEvent_TouchPointStates(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchEvent) Window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QTouchEvent_Window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) DestroyQTouchEvent() {
	if ptr.Pointer() != nil {
		C.QTouchEvent_DestroyQTouchEvent(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTouchEvent) _device() *QTouchDevice {
	if ptr.Pointer() != nil {
		return NewQTouchDeviceFromPointer(C.QTouchEvent__device(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTouchEvent) Set_device(vqt QTouchDevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_device(ptr.Pointer(), PointerFromQTouchDevice(vqt))
	}
}

func (ptr *QTouchEvent) _target() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QTouchEvent__target(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) Set_target(vqo core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_target(ptr.Pointer(), core.PointerFromQObject(vqo))
	}
}

func (ptr *QTouchEvent) _touchPointStates() core.Qt__TouchPointState {
	if ptr.Pointer() != nil {
		return core.Qt__TouchPointState(C.QTouchEvent__touchPointStates(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTouchEvent) Set_touchPointStates(vqt core.Qt__TouchPointState) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_touchPointStates(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QTouchEvent) _window() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QTouchEvent__window(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTouchEvent) Set_window(vqw QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QTouchEvent_Set_window(ptr.Pointer(), PointerFromQWindow(vqw))
	}
}

//QTransform::TransformationType
type QTransform__TransformationType int64

const (
	QTransform__TxNone      = QTransform__TransformationType(0x00)
	QTransform__TxTranslate = QTransform__TransformationType(0x01)
	QTransform__TxScale     = QTransform__TransformationType(0x02)
	QTransform__TxRotate    = QTransform__TransformationType(0x04)
	QTransform__TxShear     = QTransform__TransformationType(0x08)
	QTransform__TxProject   = QTransform__TransformationType(0x10)
)

type QTransform struct {
	ptr unsafe.Pointer
}

type QTransform_ITF interface {
	QTransform_PTR() *QTransform
}

func (p *QTransform) QTransform_PTR() *QTransform {
	return p
}

func (p *QTransform) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTransform) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTransform(ptr QTransform_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTransform_PTR().Pointer()
	}
	return nil
}

func NewQTransformFromPointer(ptr unsafe.Pointer) *QTransform {
	var n = new(QTransform)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTransform) DestroyQTransform() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTransform3(m11 float64, m12 float64, m13 float64, m21 float64, m22 float64, m23 float64, m31 float64, m32 float64, m33 float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform3(C.double(m11), C.double(m12), C.double(m13), C.double(m21), C.double(m22), C.double(m23), C.double(m31), C.double(m32), C.double(m33)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform4(m11 float64, m12 float64, m21 float64, m22 float64, dx float64, dy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform4(C.double(m11), C.double(m12), C.double(m21), C.double(m22), C.double(dx), C.double(dy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QTransform) Map4(line core.QLineF_ITF) *core.QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLineFFromPointer(C.QTransform_Map4(ptr.Pointer(), core.PointerFromQLineF(line)))
		runtime.SetFinalizer(tmpValue, (*core.QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map10(point core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QTransform_Map10(ptr.Pointer(), core.PointerFromQPoint(point)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map6(polygon QPolygon_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QTransform_Map6(ptr.Pointer(), PointerFromQPolygon(polygon)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map5(polygon QPolygonF_ITF) *QPolygonF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFFromPointer(C.QTransform_Map5(ptr.Pointer(), PointerFromQPolygonF(polygon)))
		runtime.SetFinalizer(tmpValue, (*QPolygonF).DestroyQPolygonF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map7(region QRegion_ITF) *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QTransform_Map7(ptr.Pointer(), PointerFromQRegion(region)))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) MapRect2(rectangle core.QRect_ITF) *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QTransform_MapRect2(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) MapRect(rectangle core.QRectF_ITF) *core.QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFFromPointer(C.QTransform_MapRect(ptr.Pointer(), core.PointerFromQRectF(rectangle)))
		runtime.SetFinalizer(tmpValue, (*core.QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) MapToPolygon(rectangle core.QRect_ITF) *QPolygon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPolygonFromPointer(C.QTransform_MapToPolygon(ptr.Pointer(), core.PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QPolygon).DestroyQPolygon)
		return tmpValue
	}
	return nil
}

func QTransform_QuadToSquare(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToSquare(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) QuadToSquare(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToSquare(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) Rotate(angle float64, axis core.Qt__Axis) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Rotate(ptr.Pointer(), C.double(angle), C.longlong(axis)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) RotateRadians(angle float64, axis core.Qt__Axis) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_RotateRadians(ptr.Pointer(), C.double(angle), C.longlong(axis)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func NewQTransform() *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform())
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform6(other QTransform_ITF) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform6(PointerFromQTransform(other)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func NewQTransform7(other QTransform_ITF) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_NewQTransform7(PointerFromQTransform(other)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QTransform) Adjoint() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Adjoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Determinant() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_Determinant(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Dx() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_Dx(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Dy() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_Dy(ptr.Pointer()))
	}
	return 0
}

func QTransform_FromScale(sx float64, sy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromScale(C.double(sx), C.double(sy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QTransform) FromScale(sx float64, sy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromScale(C.double(sx), C.double(sy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func QTransform_FromTranslate(dx float64, dy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromTranslate(C.double(dx), C.double(dy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QTransform) FromTranslate(dx float64, dy float64) *QTransform {
	var tmpValue = NewQTransformFromPointer(C.QTransform_QTransform_FromTranslate(C.double(dx), C.double(dy)))
	runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
	return tmpValue
}

func (ptr *QTransform) Inverted(invertible bool) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Inverted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(invertible)))))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) IsAffine() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsAffine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsIdentity() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsIdentity(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsInvertible() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsInvertible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsRotating() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsRotating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsScaling() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsScaling(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) IsTranslating() bool {
	if ptr.Pointer() != nil {
		return C.QTransform_IsTranslating(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTransform) M11() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M11(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M12() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M12(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M13() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M13(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M21() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M21(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M22() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M22(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M23() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M23(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M31() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M31(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M32() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M32(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) M33() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTransform_M33(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTransform) Map3(l core.QLine_ITF) *core.QLine {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLineFromPointer(C.QTransform_Map3(ptr.Pointer(), core.PointerFromQLine(l)))
		runtime.SetFinalizer(tmpValue, (*core.QLine).DestroyQLine)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map8(path QPainterPath_ITF) *QPainterPath {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPainterPathFromPointer(C.QTransform_Map8(ptr.Pointer(), PointerFromQPainterPath(path)))
		runtime.SetFinalizer(tmpValue, (*QPainterPath).DestroyQPainterPath)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map2(p core.QPointF_ITF) *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QTransform_Map2(ptr.Pointer(), core.PointerFromQPointF(p)))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Map9(x int, y int, tx int, ty int) {
	if ptr.Pointer() != nil {
		C.QTransform_Map9(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(tx)), C.int(int32(ty)))
	}
}

func (ptr *QTransform) Map(x float64, y float64, tx float64, ty float64) {
	if ptr.Pointer() != nil {
		C.QTransform_Map(ptr.Pointer(), C.double(x), C.double(y), C.double(tx), C.double(ty))
	}
}

func QTransform_QuadToQuad(one QPolygonF_ITF, two QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToQuad(PointerFromQPolygonF(one), PointerFromQPolygonF(two), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) QuadToQuad(one QPolygonF_ITF, two QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_QuadToQuad(PointerFromQPolygonF(one), PointerFromQPolygonF(two), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) Reset() {
	if ptr.Pointer() != nil {
		C.QTransform_Reset(ptr.Pointer())
	}
}

func (ptr *QTransform) Scale(sx float64, sy float64) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Scale(ptr.Pointer(), C.double(sx), C.double(sy)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) SetMatrix(m11 float64, m12 float64, m13 float64, m21 float64, m22 float64, m23 float64, m31 float64, m32 float64, m33 float64) {
	if ptr.Pointer() != nil {
		C.QTransform_SetMatrix(ptr.Pointer(), C.double(m11), C.double(m12), C.double(m13), C.double(m21), C.double(m22), C.double(m23), C.double(m31), C.double(m32), C.double(m33))
	}
}

func (ptr *QTransform) Shear(sh float64, sv float64) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Shear(ptr.Pointer(), C.double(sh), C.double(sv)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func QTransform_SquareToQuad(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_SquareToQuad(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) SquareToQuad(quad QPolygonF_ITF, trans QTransform_ITF) bool {
	return C.QTransform_QTransform_SquareToQuad(PointerFromQPolygonF(quad), PointerFromQTransform(trans)) != 0
}

func (ptr *QTransform) Translate(dx float64, dy float64) *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Translate(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Transposed() *QTransform {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTransformFromPointer(C.QTransform_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTransform).DestroyQTransform)
		return tmpValue
	}
	return nil
}

func (ptr *QTransform) Type() QTransform__TransformationType {
	if ptr.Pointer() != nil {
		return QTransform__TransformationType(C.QTransform_Type(ptr.Pointer()))
	}
	return 0
}

//QValidator::State
type QValidator__State int64

const (
	QValidator__Invalid      = QValidator__State(0)
	QValidator__Intermediate = QValidator__State(1)
	QValidator__Acceptable   = QValidator__State(2)
)

type QValidator struct {
	core.QObject
}

type QValidator_ITF interface {
	core.QObject_ITF
	QValidator_PTR() *QValidator
}

func (p *QValidator) QValidator_PTR() *QValidator {
	return p
}

func (p *QValidator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QValidator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQValidator(ptr QValidator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QValidator_PTR().Pointer()
	}
	return nil
}

func NewQValidatorFromPointer(ptr unsafe.Pointer) *QValidator {
	var n = new(QValidator)
	n.SetPointer(ptr)
	return n
}

//export callbackQValidator_Fixup
func callbackQValidator_Fixup(ptr unsafe.Pointer, input C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::fixup"); signal != nil {
		signal.(func(string))(cGoUnpackString(input))
	} else {
		NewQValidatorFromPointer(ptr).FixupDefault(cGoUnpackString(input))
	}
}

func (ptr *QValidator) ConnectFixup(f func(input string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::fixup", f)
	}
}

func (ptr *QValidator) DisconnectFixup() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::fixup")
	}
}

func (ptr *QValidator) Fixup(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QValidator_Fixup(ptr.Pointer(), inputC)
	}
}

func (ptr *QValidator) FixupDefault(input string) {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		C.QValidator_FixupDefault(ptr.Pointer(), inputC)
	}
}

func NewQValidator(parent core.QObject_ITF) *QValidator {
	var tmpValue = NewQValidatorFromPointer(C.QValidator_NewQValidator(core.PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQValidator_Changed
func callbackQValidator_Changed(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::changed"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QValidator) ConnectChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QValidator_ConnectChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::changed", f)
	}
}

func (ptr *QValidator) DisconnectChanged() {
	if ptr.Pointer() != nil {
		C.QValidator_DisconnectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::changed")
	}
}

func (ptr *QValidator) Changed() {
	if ptr.Pointer() != nil {
		C.QValidator_Changed(ptr.Pointer())
	}
}

func (ptr *QValidator) Locale() *core.QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQLocaleFromPointer(C.QValidator_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

func (ptr *QValidator) SetLocale(locale core.QLocale_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_SetLocale(ptr.Pointer(), core.PointerFromQLocale(locale))
	}
}

//export callbackQValidator_Validate
func callbackQValidator_Validate(ptr unsafe.Pointer, input C.struct_QtGui_PackedString, pos C.int) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::validate"); signal != nil {
		return C.longlong(signal.(func(string, int) QValidator__State)(cGoUnpackString(input), int(int32(pos))))
	}

	return C.longlong(0)
}

func (ptr *QValidator) ConnectValidate(f func(input string, pos int) QValidator__State) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::validate", f)
	}
}

func (ptr *QValidator) DisconnectValidate(input string, pos int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::validate")
	}
}

func (ptr *QValidator) Validate(input string, pos int) QValidator__State {
	if ptr.Pointer() != nil {
		var inputC = C.CString(input)
		defer C.free(unsafe.Pointer(inputC))
		return QValidator__State(C.QValidator_Validate(ptr.Pointer(), inputC, C.int(int32(pos))))
	}
	return 0
}

func (ptr *QValidator) DestroyQValidator() {
	if ptr.Pointer() != nil {
		C.QValidator_DestroyQValidator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQValidator_TimerEvent
func callbackQValidator_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QValidator) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::timerEvent", f)
	}
}

func (ptr *QValidator) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::timerEvent")
	}
}

func (ptr *QValidator) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QValidator) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQValidator_ChildEvent
func callbackQValidator_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QValidator) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::childEvent", f)
	}
}

func (ptr *QValidator) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::childEvent")
	}
}

func (ptr *QValidator) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QValidator) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQValidator_ConnectNotify
func callbackQValidator_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQValidatorFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QValidator) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::connectNotify", f)
	}
}

func (ptr *QValidator) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::connectNotify")
	}
}

func (ptr *QValidator) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QValidator) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQValidator_CustomEvent
func callbackQValidator_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQValidatorFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QValidator) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::customEvent", f)
	}
}

func (ptr *QValidator) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::customEvent")
	}
}

func (ptr *QValidator) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QValidator) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQValidator_DeleteLater
func callbackQValidator_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQValidatorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QValidator) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::deleteLater", f)
	}
}

func (ptr *QValidator) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::deleteLater")
	}
}

func (ptr *QValidator) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QValidator_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QValidator) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QValidator_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQValidator_DisconnectNotify
func callbackQValidator_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQValidatorFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QValidator) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::disconnectNotify", f)
	}
}

func (ptr *QValidator) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::disconnectNotify")
	}
}

func (ptr *QValidator) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QValidator) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QValidator_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQValidator_Event
func callbackQValidator_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQValidatorFromPointer(ptr).EventDefault(core.NewQEventFromPointer(e)))))
}

func (ptr *QValidator) ConnectEvent(f func(e *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::event", f)
	}
}

func (ptr *QValidator) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::event")
	}
}

func (ptr *QValidator) Event(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QValidator_Event(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QValidator) EventDefault(e core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QValidator_EventDefault(ptr.Pointer(), core.PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQValidator_EventFilter
func callbackQValidator_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQValidatorFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QValidator) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::eventFilter", f)
	}
}

func (ptr *QValidator) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::eventFilter")
	}
}

func (ptr *QValidator) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QValidator_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QValidator) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QValidator_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQValidator_MetaObject
func callbackQValidator_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QValidator::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQValidatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QValidator) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::metaObject", f)
	}
}

func (ptr *QValidator) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QValidator::metaObject")
	}
}

func (ptr *QValidator) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QValidator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QValidator) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QValidator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVector2D struct {
	ptr unsafe.Pointer
}

type QVector2D_ITF interface {
	QVector2D_PTR() *QVector2D
}

func (p *QVector2D) QVector2D_PTR() *QVector2D {
	return p
}

func (p *QVector2D) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVector2D) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVector2D(ptr QVector2D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector2D_PTR().Pointer()
	}
	return nil
}

func NewQVector2DFromPointer(ptr unsafe.Pointer) *QVector2D {
	var n = new(QVector2D)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVector2D) DestroyQVector2D() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQVector2D() *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D())
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D4(point core.QPoint_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D4(core.PointerFromQPoint(point)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D5(point core.QPointF_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D5(core.PointerFromQPointF(point)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D6(vector QVector3D_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D6(PointerFromQVector3D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D7(vector QVector4D_ITF) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D7(PointerFromQVector4D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func NewQVector2D3(xpos float32, ypos float32) *QVector2D {
	var tmpValue = NewQVector2DFromPointer(C.QVector2D_NewQVector2D3(C.float(xpos), C.float(ypos)))
	runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
	return tmpValue
}

func (ptr *QVector2D) DistanceToLine(point QVector2D_ITF, direction QVector2D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_DistanceToLine(ptr.Pointer(), PointerFromQVector2D(point), PointerFromQVector2D(direction)))
	}
	return 0
}

func (ptr *QVector2D) DistanceToPoint(point QVector2D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_DistanceToPoint(ptr.Pointer(), PointerFromQVector2D(point)))
	}
	return 0
}

func QVector2D_DotProduct(v1 QVector2D_ITF, v2 QVector2D_ITF) float32 {
	return float32(C.QVector2D_QVector2D_DotProduct(PointerFromQVector2D(v1), PointerFromQVector2D(v2)))
}

func (ptr *QVector2D) DotProduct(v1 QVector2D_ITF, v2 QVector2D_ITF) float32 {
	return float32(C.QVector2D_QVector2D_DotProduct(PointerFromQVector2D(v1), PointerFromQVector2D(v2)))
}

func (ptr *QVector2D) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVector2D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector2D) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector2D) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector2D) Normalize() {
	if ptr.Pointer() != nil {
		C.QVector2D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector2D) Normalized() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector2D_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QVector2D_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QVector2D) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QVector2D_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QVector2D) ToPoint() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QVector2D_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) ToPointF() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QVector2D_ToPointF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) ToVector3D() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector2D_ToVector3D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) ToVector4D() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QVector2D_ToVector4D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector2D) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector2D) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector2D_Y(ptr.Pointer()))
	}
	return 0
}

type QVector3D struct {
	ptr unsafe.Pointer
}

type QVector3D_ITF interface {
	QVector3D_PTR() *QVector3D
}

func (p *QVector3D) QVector3D_PTR() *QVector3D {
	return p
}

func (p *QVector3D) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVector3D) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVector3D(ptr QVector3D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector3D_PTR().Pointer()
	}
	return nil
}

func NewQVector3DFromPointer(ptr unsafe.Pointer) *QVector3D {
	var n = new(QVector3D)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVector3D) DestroyQVector3D() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQVector3D() *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D())
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D4(point core.QPoint_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D4(core.PointerFromQPoint(point)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D5(point core.QPointF_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D5(core.PointerFromQPointF(point)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D6(vector QVector2D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D6(PointerFromQVector2D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D7(vector QVector2D_ITF, zpos float32) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D7(PointerFromQVector2D(vector), C.float(zpos)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D8(vector QVector4D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D8(PointerFromQVector4D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func NewQVector3D3(xpos float32, ypos float32, zpos float32) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_NewQVector3D3(C.float(xpos), C.float(ypos), C.float(zpos)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func QVector3D_CrossProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_CrossProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) CrossProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_CrossProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) DistanceToLine(point QVector3D_ITF, direction QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToLine(ptr.Pointer(), PointerFromQVector3D(point), PointerFromQVector3D(direction)))
	}
	return 0
}

func (ptr *QVector3D) DistanceToPlane(plane QVector3D_ITF, normal QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToPlane(ptr.Pointer(), PointerFromQVector3D(plane), PointerFromQVector3D(normal)))
	}
	return 0
}

func (ptr *QVector3D) DistanceToPlane2(plane1 QVector3D_ITF, plane2 QVector3D_ITF, plane3 QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToPlane2(ptr.Pointer(), PointerFromQVector3D(plane1), PointerFromQVector3D(plane2), PointerFromQVector3D(plane3)))
	}
	return 0
}

func (ptr *QVector3D) DistanceToPoint(point QVector3D_ITF) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_DistanceToPoint(ptr.Pointer(), PointerFromQVector3D(point)))
	}
	return 0
}

func QVector3D_DotProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) float32 {
	return float32(C.QVector3D_QVector3D_DotProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
}

func (ptr *QVector3D) DotProduct(v1 QVector3D_ITF, v2 QVector3D_ITF) float32 {
	return float32(C.QVector3D_QVector3D_DotProduct(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
}

func (ptr *QVector3D) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVector3D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector3D) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector3D) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func QVector3D_Normal(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) Normal(v1 QVector3D_ITF, v2 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal(PointerFromQVector3D(v1), PointerFromQVector3D(v2)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func QVector3D_Normal2(v1 QVector3D_ITF, v2 QVector3D_ITF, v3 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal2(PointerFromQVector3D(v1), PointerFromQVector3D(v2), PointerFromQVector3D(v3)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) Normal2(v1 QVector3D_ITF, v2 QVector3D_ITF, v3 QVector3D_ITF) *QVector3D {
	var tmpValue = NewQVector3DFromPointer(C.QVector3D_QVector3D_Normal2(PointerFromQVector3D(v1), PointerFromQVector3D(v2), PointerFromQVector3D(v3)))
	runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
	return tmpValue
}

func (ptr *QVector3D) Normalize() {
	if ptr.Pointer() != nil {
		C.QVector3D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector3D) Normalized() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector3D_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) Project(modelView QMatrix4x4_ITF, projection QMatrix4x4_ITF, viewport core.QRect_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector3D_Project(ptr.Pointer(), PointerFromQMatrix4x4(modelView), PointerFromQMatrix4x4(projection), core.PointerFromQRect(viewport)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QVector3D_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QVector3D) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QVector3D_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QVector3D) SetZ(z float32) {
	if ptr.Pointer() != nil {
		C.QVector3D_SetZ(ptr.Pointer(), C.float(z))
	}
}

func (ptr *QVector3D) ToPoint() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QVector3D_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) ToPointF() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QVector3D_ToPointF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) ToVector2D() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector3D_ToVector2D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) ToVector4D() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QVector3D_ToVector4D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) Unproject(modelView QMatrix4x4_ITF, projection QMatrix4x4_ITF, viewport core.QRect_ITF) *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector3D_Unproject(ptr.Pointer(), PointerFromQMatrix4x4(modelView), PointerFromQMatrix4x4(projection), core.PointerFromQRect(viewport)))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector3D) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector3D) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector3D) Z() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector3D_Z(ptr.Pointer()))
	}
	return 0
}

type QVector4D struct {
	ptr unsafe.Pointer
}

type QVector4D_ITF interface {
	QVector4D_PTR() *QVector4D
}

func (p *QVector4D) QVector4D_PTR() *QVector4D {
	return p
}

func (p *QVector4D) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVector4D) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVector4D(ptr QVector4D_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector4D_PTR().Pointer()
	}
	return nil
}

func NewQVector4DFromPointer(ptr unsafe.Pointer) *QVector4D {
	var n = new(QVector4D)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVector4D) DestroyQVector4D() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQVector4D() *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D())
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D4(point core.QPoint_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D4(core.PointerFromQPoint(point)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D5(point core.QPointF_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D5(core.PointerFromQPointF(point)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D6(vector QVector2D_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D6(PointerFromQVector2D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D7(vector QVector2D_ITF, zpos float32, wpos float32) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D7(PointerFromQVector2D(vector), C.float(zpos), C.float(wpos)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D8(vector QVector3D_ITF) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D8(PointerFromQVector3D(vector)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D9(vector QVector3D_ITF, wpos float32) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D9(PointerFromQVector3D(vector), C.float(wpos)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func NewQVector4D3(xpos float32, ypos float32, zpos float32, wpos float32) *QVector4D {
	var tmpValue = NewQVector4DFromPointer(C.QVector4D_NewQVector4D3(C.float(xpos), C.float(ypos), C.float(zpos), C.float(wpos)))
	runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
	return tmpValue
}

func QVector4D_DotProduct(v1 QVector4D_ITF, v2 QVector4D_ITF) float32 {
	return float32(C.QVector4D_QVector4D_DotProduct(PointerFromQVector4D(v1), PointerFromQVector4D(v2)))
}

func (ptr *QVector4D) DotProduct(v1 QVector4D_ITF, v2 QVector4D_ITF) float32 {
	return float32(C.QVector4D_QVector4D_DotProduct(PointerFromQVector4D(v1), PointerFromQVector4D(v2)))
}

func (ptr *QVector4D) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVector4D_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVector4D) Length() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) LengthSquared() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_LengthSquared(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) Normalize() {
	if ptr.Pointer() != nil {
		C.QVector4D_Normalize(ptr.Pointer())
	}
}

func (ptr *QVector4D) Normalized() *QVector4D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector4DFromPointer(C.QVector4D_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector4D).DestroyQVector4D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) SetW(w float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetW(ptr.Pointer(), C.float(w))
	}
}

func (ptr *QVector4D) SetX(x float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetX(ptr.Pointer(), C.float(x))
	}
}

func (ptr *QVector4D) SetY(y float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetY(ptr.Pointer(), C.float(y))
	}
}

func (ptr *QVector4D) SetZ(z float32) {
	if ptr.Pointer() != nil {
		C.QVector4D_SetZ(ptr.Pointer(), C.float(z))
	}
}

func (ptr *QVector4D) ToPoint() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QVector4D_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToPointF() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QVector4D_ToPointF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector2D() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector4D_ToVector2D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector2DAffine() *QVector2D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector2DFromPointer(C.QVector4D_ToVector2DAffine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector2D).DestroyQVector2D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector3D() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector4D_ToVector3D(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) ToVector3DAffine() *QVector3D {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVector3DFromPointer(C.QVector4D_ToVector3DAffine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVector3D).DestroyQVector3D)
		return tmpValue
	}
	return nil
}

func (ptr *QVector4D) W() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_W(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) X() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) Y() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_Y(ptr.Pointer()))
	}
	return 0
}

func (ptr *QVector4D) Z() float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVector4D_Z(ptr.Pointer()))
	}
	return 0
}

type QWhatsThisClickedEvent struct {
	core.QEvent
}

type QWhatsThisClickedEvent_ITF interface {
	core.QEvent_ITF
	QWhatsThisClickedEvent_PTR() *QWhatsThisClickedEvent
}

func (p *QWhatsThisClickedEvent) QWhatsThisClickedEvent_PTR() *QWhatsThisClickedEvent {
	return p
}

func (p *QWhatsThisClickedEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QWhatsThisClickedEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQWhatsThisClickedEvent(ptr QWhatsThisClickedEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWhatsThisClickedEvent_PTR().Pointer()
	}
	return nil
}

func NewQWhatsThisClickedEventFromPointer(ptr unsafe.Pointer) *QWhatsThisClickedEvent {
	var n = new(QWhatsThisClickedEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QWhatsThisClickedEvent) DestroyQWhatsThisClickedEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQWhatsThisClickedEvent(href string) *QWhatsThisClickedEvent {
	var hrefC = C.CString(href)
	defer C.free(unsafe.Pointer(hrefC))
	var tmpValue = NewQWhatsThisClickedEventFromPointer(C.QWhatsThisClickedEvent_NewQWhatsThisClickedEvent(hrefC))
	runtime.SetFinalizer(tmpValue, (*QWhatsThisClickedEvent).DestroyQWhatsThisClickedEvent)
	return tmpValue
}

func (ptr *QWhatsThisClickedEvent) Href() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWhatsThisClickedEvent_Href(ptr.Pointer()))
	}
	return ""
}

type QWheelEvent struct {
	QInputEvent
}

type QWheelEvent_ITF interface {
	QInputEvent_ITF
	QWheelEvent_PTR() *QWheelEvent
}

func (p *QWheelEvent) QWheelEvent_PTR() *QWheelEvent {
	return p
}

func (p *QWheelEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QInputEvent_PTR().Pointer()
	}
	return nil
}

func (p *QWheelEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QInputEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQWheelEvent(ptr QWheelEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWheelEvent_PTR().Pointer()
	}
	return nil
}

func NewQWheelEventFromPointer(ptr unsafe.Pointer) *QWheelEvent {
	var n = new(QWheelEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QWheelEvent) DestroyQWheelEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQWheelEvent(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier) *QWheelEvent {
	var tmpValue = NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers)))
	runtime.SetFinalizer(tmpValue, (*QWheelEvent).DestroyQWheelEvent)
	return tmpValue
}

func NewQWheelEvent4(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase) *QWheelEvent {
	var tmpValue = NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent4(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers), C.longlong(phase)))
	runtime.SetFinalizer(tmpValue, (*QWheelEvent).DestroyQWheelEvent)
	return tmpValue
}

func NewQWheelEvent5(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase, source core.Qt__MouseEventSource) *QWheelEvent {
	var tmpValue = NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent5(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers), C.longlong(phase), C.longlong(source)))
	runtime.SetFinalizer(tmpValue, (*QWheelEvent).DestroyQWheelEvent)
	return tmpValue
}

func NewQWheelEvent6(pos core.QPointF_ITF, globalPos core.QPointF_ITF, pixelDelta core.QPoint_ITF, angleDelta core.QPoint_ITF, qt4Delta int, qt4Orientation core.Qt__Orientation, buttons core.Qt__MouseButton, modifiers core.Qt__KeyboardModifier, phase core.Qt__ScrollPhase, source core.Qt__MouseEventSource, inverted bool) *QWheelEvent {
	var tmpValue = NewQWheelEventFromPointer(C.QWheelEvent_NewQWheelEvent6(core.PointerFromQPointF(pos), core.PointerFromQPointF(globalPos), core.PointerFromQPoint(pixelDelta), core.PointerFromQPoint(angleDelta), C.int(int32(qt4Delta)), C.longlong(qt4Orientation), C.longlong(buttons), C.longlong(modifiers), C.longlong(phase), C.longlong(source), C.char(int8(qt.GoBoolToInt(inverted)))))
	runtime.SetFinalizer(tmpValue, (*QWheelEvent).DestroyQWheelEvent)
	return tmpValue
}

func (ptr *QWheelEvent) AngleDelta() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_AngleDelta(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) Buttons() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QWheelEvent_Buttons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) GlobalPos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_GlobalPos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) GlobalPosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QWheelEvent_GlobalPosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) GlobalX() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_GlobalX(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) GlobalY() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_GlobalY(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) Inverted() bool {
	if ptr.Pointer() != nil {
		return C.QWheelEvent_Inverted(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWheelEvent) Phase() core.Qt__ScrollPhase {
	if ptr.Pointer() != nil {
		return core.Qt__ScrollPhase(C.QWheelEvent_Phase(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) PixelDelta() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_PixelDelta(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) Pos() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_Pos(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) PosF() *core.QPointF {
	if ptr.Pointer() != nil {
		return core.NewQPointFFromPointer(C.QWheelEvent_PosF(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWheelEvent) Source() core.Qt__MouseEventSource {
	if ptr.Pointer() != nil {
		return core.Qt__MouseEventSource(C.QWheelEvent_Source(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_Y(ptr.Pointer())))
	}
	return 0
}

func QWheelEvent_DefaultDeltasPerStep() int {
	return int(int32(C.QWheelEvent_QWheelEvent_DefaultDeltasPerStep()))
}

func (ptr *QWheelEvent) DefaultDeltasPerStep() int {
	return int(int32(C.QWheelEvent_QWheelEvent_DefaultDeltasPerStep()))
}

func (ptr *QWheelEvent) AngleD() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_AngleD(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetAngleD(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetAngleD(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

func (ptr *QWheelEvent) G() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QWheelEvent_G(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetG(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetG(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QWheelEvent) MouseState() core.Qt__MouseButton {
	if ptr.Pointer() != nil {
		return core.Qt__MouseButton(C.QWheelEvent_MouseState(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) SetMouseState(vqt core.Qt__MouseButton) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetMouseState(ptr.Pointer(), C.longlong(vqt))
	}
}

func (ptr *QWheelEvent) P() *core.QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFFromPointer(C.QWheelEvent_P(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetP(vqp core.QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetP(ptr.Pointer(), core.PointerFromQPointF(vqp))
	}
}

func (ptr *QWheelEvent) PixelD() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWheelEvent_PixelD(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWheelEvent) SetPixelD(vqp core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetPixelD(ptr.Pointer(), core.PointerFromQPoint(vqp))
	}
}

func (ptr *QWheelEvent) Qt4D() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWheelEvent_Qt4D(ptr.Pointer())))
	}
	return 0
}

func (ptr *QWheelEvent) SetQt4D(vin int) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetQt4D(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QWheelEvent) Qt4O() core.Qt__Orientation {
	if ptr.Pointer() != nil {
		return core.Qt__Orientation(C.QWheelEvent_Qt4O(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWheelEvent) SetQt4O(vqt core.Qt__Orientation) {
	if ptr.Pointer() != nil {
		C.QWheelEvent_SetQt4O(ptr.Pointer(), C.longlong(vqt))
	}
}

//QWindow::AncestorMode
type QWindow__AncestorMode int64

const (
	QWindow__ExcludeTransients = QWindow__AncestorMode(0)
	QWindow__IncludeTransients = QWindow__AncestorMode(1)
)

//QWindow::Visibility
type QWindow__Visibility int64

const (
	QWindow__Hidden              = QWindow__Visibility(0)
	QWindow__AutomaticVisibility = QWindow__Visibility(1)
	QWindow__Windowed            = QWindow__Visibility(2)
	QWindow__Minimized           = QWindow__Visibility(3)
	QWindow__Maximized           = QWindow__Visibility(4)
	QWindow__FullScreen          = QWindow__Visibility(5)
)

type QWindow struct {
	core.QObject
	QSurface
}

type QWindow_ITF interface {
	core.QObject_ITF
	QSurface_ITF
	QWindow_PTR() *QWindow
}

func (p *QWindow) QWindow_PTR() *QWindow {
	return p
}

func (p *QWindow) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QWindow) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
		p.QSurface_PTR().SetPointer(ptr)
	}
}

func PointerFromQWindow(ptr QWindow_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWindow_PTR().Pointer()
	}
	return nil
}

func NewQWindowFromPointer(ptr unsafe.Pointer) *QWindow {
	var n = new(QWindow)
	n.SetPointer(ptr)
	return n
}
func (ptr *QWindow) ContentOrientation() core.Qt__ScreenOrientation {
	if ptr.Pointer() != nil {
		return core.Qt__ScreenOrientation(C.QWindow_ContentOrientation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Flags() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWindow_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) IsVisible() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsVisible(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) MapFromGlobal(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_MapFromGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MapToGlobal(pos core.QPoint_ITF) *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_MapToGlobal(ptr.Pointer(), core.PointerFromQPoint(pos)))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Modality() core.Qt__WindowModality {
	if ptr.Pointer() != nil {
		return core.Qt__WindowModality(C.QWindow_Modality(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) Opacity() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QWindow_Opacity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) ReportContentOrientationChange(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QWindow_ReportContentOrientationChange(ptr.Pointer(), C.longlong(orientation))
	}
}

func (ptr *QWindow) SetFlags(flags core.Qt__WindowType) {
	if ptr.Pointer() != nil {
		C.QWindow_SetFlags(ptr.Pointer(), C.longlong(flags))
	}
}

//export callbackQWindow_SetHeight
func callbackQWindow_SetHeight(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setHeight"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectSetHeight(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setHeight", f)
	}
}

func (ptr *QWindow) DisconnectSetHeight(arg int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setHeight")
	}
}

func (ptr *QWindow) SetHeight(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetHeight(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_SetMaximumHeight
func callbackQWindow_SetMaximumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setMaximumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	}

}

func (ptr *QWindow) ConnectSetMaximumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMaximumHeight", f)
	}
}

func (ptr *QWindow) DisconnectSetMaximumHeight(h int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMaximumHeight")
	}
}

func (ptr *QWindow) SetMaximumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

//export callbackQWindow_SetMaximumWidth
func callbackQWindow_SetMaximumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setMaximumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	}

}

func (ptr *QWindow) ConnectSetMaximumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMaximumWidth", f)
	}
}

func (ptr *QWindow) DisconnectSetMaximumWidth(w int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMaximumWidth")
	}
}

func (ptr *QWindow) SetMaximumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

//export callbackQWindow_SetMinimumHeight
func callbackQWindow_SetMinimumHeight(ptr unsafe.Pointer, h C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setMinimumHeight"); signal != nil {
		signal.(func(int))(int(int32(h)))
	}

}

func (ptr *QWindow) ConnectSetMinimumHeight(f func(h int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMinimumHeight", f)
	}
}

func (ptr *QWindow) DisconnectSetMinimumHeight(h int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMinimumHeight")
	}
}

func (ptr *QWindow) SetMinimumHeight(h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumHeight(ptr.Pointer(), C.int(int32(h)))
	}
}

//export callbackQWindow_SetMinimumWidth
func callbackQWindow_SetMinimumWidth(ptr unsafe.Pointer, w C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setMinimumWidth"); signal != nil {
		signal.(func(int))(int(int32(w)))
	}

}

func (ptr *QWindow) ConnectSetMinimumWidth(f func(w int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMinimumWidth", f)
	}
}

func (ptr *QWindow) DisconnectSetMinimumWidth(w int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setMinimumWidth")
	}
}

func (ptr *QWindow) SetMinimumWidth(w int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumWidth(ptr.Pointer(), C.int(int32(w)))
	}
}

func (ptr *QWindow) SetModality(modality core.Qt__WindowModality) {
	if ptr.Pointer() != nil {
		C.QWindow_SetModality(ptr.Pointer(), C.longlong(modality))
	}
}

func (ptr *QWindow) SetOpacity(level float64) {
	if ptr.Pointer() != nil {
		C.QWindow_SetOpacity(ptr.Pointer(), C.double(level))
	}
}

//export callbackQWindow_SetTitle
func callbackQWindow_SetTitle(ptr unsafe.Pointer, vqs C.struct_QtGui_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setTitle"); signal != nil {
		signal.(func(string))(cGoUnpackString(vqs))
	}

}

func (ptr *QWindow) ConnectSetTitle(f func(vqs string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setTitle", f)
	}
}

func (ptr *QWindow) DisconnectSetTitle(vqs string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setTitle")
	}
}

func (ptr *QWindow) SetTitle(vqs string) {
	if ptr.Pointer() != nil {
		var vqsC = C.CString(vqs)
		defer C.free(unsafe.Pointer(vqsC))
		C.QWindow_SetTitle(ptr.Pointer(), vqsC)
	}
}

func (ptr *QWindow) SetVisibility(v QWindow__Visibility) {
	if ptr.Pointer() != nil {
		C.QWindow_SetVisibility(ptr.Pointer(), C.longlong(v))
	}
}

//export callbackQWindow_SetVisible
func callbackQWindow_SetVisible(ptr unsafe.Pointer, visible C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setVisible"); signal != nil {
		signal.(func(bool))(int8(visible) != 0)
	}

}

func (ptr *QWindow) ConnectSetVisible(f func(visible bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setVisible", f)
	}
}

func (ptr *QWindow) DisconnectSetVisible(visible bool) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setVisible")
	}
}

func (ptr *QWindow) SetVisible(visible bool) {
	if ptr.Pointer() != nil {
		C.QWindow_SetVisible(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(visible))))
	}
}

//export callbackQWindow_SetWidth
func callbackQWindow_SetWidth(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setWidth"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectSetWidth(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setWidth", f)
	}
}

func (ptr *QWindow) DisconnectSetWidth(arg int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setWidth")
	}
}

func (ptr *QWindow) SetWidth(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetWidth(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_SetX
func callbackQWindow_SetX(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setX"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectSetX(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setX", f)
	}
}

func (ptr *QWindow) DisconnectSetX(arg int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setX")
	}
}

func (ptr *QWindow) SetX(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetX(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_SetY
func callbackQWindow_SetY(ptr unsafe.Pointer, arg C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::setY"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectSetY(f func(arg int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setY", f)
	}
}

func (ptr *QWindow) DisconnectSetY(arg int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::setY")
	}
}

func (ptr *QWindow) SetY(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetY(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) Title() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWindow_Title(ptr.Pointer()))
	}
	return ""
}

func (ptr *QWindow) Visibility() QWindow__Visibility {
	if ptr.Pointer() != nil {
		return QWindow__Visibility(C.QWindow_Visibility(ptr.Pointer()))
	}
	return 0
}

func NewQWindow(targetScreen QScreen_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_NewQWindow(PointerFromQScreen(targetScreen)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQWindow2(parent QWindow_ITF) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_NewQWindow2(PointerFromQWindow(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQWindow_ActiveChanged
func callbackQWindow_ActiveChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::activeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectActiveChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectActiveChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::activeChanged", f)
	}
}

func (ptr *QWindow) DisconnectActiveChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectActiveChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::activeChanged")
	}
}

func (ptr *QWindow) ActiveChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_ActiveChanged(ptr.Pointer())
	}
}

//export callbackQWindow_Alert
func callbackQWindow_Alert(ptr unsafe.Pointer, msec C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::alert"); signal != nil {
		signal.(func(int))(int(int32(msec)))
	}

}

func (ptr *QWindow) ConnectAlert(f func(msec int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::alert", f)
	}
}

func (ptr *QWindow) DisconnectAlert(msec int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::alert")
	}
}

func (ptr *QWindow) Alert(msec int) {
	if ptr.Pointer() != nil {
		C.QWindow_Alert(ptr.Pointer(), C.int(int32(msec)))
	}
}

func (ptr *QWindow) BaseSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_BaseSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQWindow_Close
func callbackQWindow_Close(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::close"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QWindow) ConnectClose(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::close", f)
	}
}

func (ptr *QWindow) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::close")
	}
}

func (ptr *QWindow) Close() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_Close(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQWindow_ContentOrientationChanged
func callbackQWindow_ContentOrientationChanged(ptr unsafe.Pointer, orientation C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::contentOrientationChanged"); signal != nil {
		signal.(func(core.Qt__ScreenOrientation))(core.Qt__ScreenOrientation(orientation))
	}

}

func (ptr *QWindow) ConnectContentOrientationChanged(f func(orientation core.Qt__ScreenOrientation)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectContentOrientationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::contentOrientationChanged", f)
	}
}

func (ptr *QWindow) DisconnectContentOrientationChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectContentOrientationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::contentOrientationChanged")
	}
}

func (ptr *QWindow) ContentOrientationChanged(orientation core.Qt__ScreenOrientation) {
	if ptr.Pointer() != nil {
		C.QWindow_ContentOrientationChanged(ptr.Pointer(), C.longlong(orientation))
	}
}

func (ptr *QWindow) Create() {
	if ptr.Pointer() != nil {
		C.QWindow_Create(ptr.Pointer())
	}
}

func (ptr *QWindow) Cursor() *QCursor {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCursorFromPointer(C.QWindow_Cursor(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QCursor).DestroyQCursor)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Destroy() {
	if ptr.Pointer() != nil {
		C.QWindow_Destroy(ptr.Pointer())
	}
}

func (ptr *QWindow) DevicePixelRatio() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QWindow_DevicePixelRatio(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_Event
func callbackQWindow_Event(ptr unsafe.Pointer, ev unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QEvent) bool)(core.NewQEventFromPointer(ev)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWindowFromPointer(ptr).EventDefault(core.NewQEventFromPointer(ev)))))
}

func (ptr *QWindow) ConnectEvent(f func(ev *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::event", f)
	}
}

func (ptr *QWindow) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::event")
	}
}

func (ptr *QWindow) Event(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_Event(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

func (ptr *QWindow) EventDefault(ev core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_EventDefault(ptr.Pointer(), core.PointerFromQEvent(ev)) != 0
	}
	return false
}

//export callbackQWindow_ExposeEvent
func callbackQWindow_ExposeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::exposeEvent"); signal != nil {
		signal.(func(*QExposeEvent))(NewQExposeEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ExposeEventDefault(NewQExposeEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectExposeEvent(f func(ev *QExposeEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::exposeEvent", f)
	}
}

func (ptr *QWindow) DisconnectExposeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::exposeEvent")
	}
}

func (ptr *QWindow) ExposeEvent(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ExposeEvent(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QWindow) ExposeEventDefault(ev QExposeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ExposeEventDefault(ptr.Pointer(), PointerFromQExposeEvent(ev))
	}
}

func (ptr *QWindow) FilePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QWindow_FilePath(ptr.Pointer()))
	}
	return ""
}

//export callbackQWindow_FocusInEvent
func callbackQWindow_FocusInEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::focusInEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).FocusInEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectFocusInEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusInEvent", f)
	}
}

func (ptr *QWindow) DisconnectFocusInEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusInEvent")
	}
}

func (ptr *QWindow) FocusInEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusInEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QWindow) FocusInEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusInEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQWindow_FocusObject
func callbackQWindow_FocusObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::focusObject"); signal != nil {
		return core.PointerFromQObject(signal.(func() *core.QObject)())
	}

	return core.PointerFromQObject(NewQWindowFromPointer(ptr).FocusObjectDefault())
}

func (ptr *QWindow) ConnectFocusObject(f func() *core.QObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusObject", f)
	}
}

func (ptr *QWindow) DisconnectFocusObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusObject")
	}
}

func (ptr *QWindow) FocusObject() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow_FocusObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FocusObjectDefault() *core.QObject {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQObjectFromPointer(C.QWindow_FocusObjectDefault(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQWindow_FocusObjectChanged
func callbackQWindow_FocusObjectChanged(ptr unsafe.Pointer, object unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::focusObjectChanged"); signal != nil {
		signal.(func(*core.QObject))(core.NewQObjectFromPointer(object))
	}

}

func (ptr *QWindow) ConnectFocusObjectChanged(f func(object *core.QObject)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectFocusObjectChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusObjectChanged", f)
	}
}

func (ptr *QWindow) DisconnectFocusObjectChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectFocusObjectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusObjectChanged")
	}
}

func (ptr *QWindow) FocusObjectChanged(object core.QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusObjectChanged(ptr.Pointer(), core.PointerFromQObject(object))
	}
}

//export callbackQWindow_FocusOutEvent
func callbackQWindow_FocusOutEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::focusOutEvent"); signal != nil {
		signal.(func(*QFocusEvent))(NewQFocusEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).FocusOutEventDefault(NewQFocusEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectFocusOutEvent(f func(ev *QFocusEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusOutEvent", f)
	}
}

func (ptr *QWindow) DisconnectFocusOutEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::focusOutEvent")
	}
}

func (ptr *QWindow) FocusOutEvent(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusOutEvent(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

func (ptr *QWindow) FocusOutEventDefault(ev QFocusEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_FocusOutEventDefault(ptr.Pointer(), PointerFromQFocusEvent(ev))
	}
}

//export callbackQWindow_Format
func callbackQWindow_Format(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::format"); signal != nil {
		return PointerFromQSurfaceFormat(signal.(func() *QSurfaceFormat)())
	}

	return PointerFromQSurfaceFormat(NewQWindowFromPointer(ptr).FormatDefault())
}

func (ptr *QWindow) ConnectFormat(f func() *QSurfaceFormat) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::format", f)
	}
}

func (ptr *QWindow) DisconnectFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::format")
	}
}

func (ptr *QWindow) Format() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QWindow_Format(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FormatDefault() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QWindow_FormatDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FrameGeometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QWindow_FrameGeometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FrameMargins() *core.QMargins {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQMarginsFromPointer(C.QWindow_FrameMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) FramePosition() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_FramePosition(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func QWindow_FromWinId(id uintptr) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_QWindow_FromWinId(C.uintptr_t(id)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QWindow) FromWinId(id uintptr) *QWindow {
	var tmpValue = NewQWindowFromPointer(C.QWindow_QWindow_FromWinId(C.uintptr_t(id)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QWindow) Geometry() *core.QRect {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQRectFromPointer(C.QWindow_Geometry(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_Height(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_HeightChanged
func callbackQWindow_HeightChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::heightChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectHeightChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectHeightChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::heightChanged", f)
	}
}

func (ptr *QWindow) DisconnectHeightChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::heightChanged")
	}
}

func (ptr *QWindow) HeightChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_HeightChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_Hide
func callbackQWindow_Hide(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::hide"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectHide(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::hide", f)
	}
}

func (ptr *QWindow) DisconnectHide() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::hide")
	}
}

func (ptr *QWindow) Hide() {
	if ptr.Pointer() != nil {
		C.QWindow_Hide(ptr.Pointer())
	}
}

//export callbackQWindow_HideEvent
func callbackQWindow_HideEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::hideEvent"); signal != nil {
		signal.(func(*QHideEvent))(NewQHideEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).HideEventDefault(NewQHideEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectHideEvent(f func(ev *QHideEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::hideEvent", f)
	}
}

func (ptr *QWindow) DisconnectHideEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::hideEvent")
	}
}

func (ptr *QWindow) HideEvent(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_HideEvent(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QWindow) HideEventDefault(ev QHideEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_HideEventDefault(ptr.Pointer(), PointerFromQHideEvent(ev))
	}
}

func (ptr *QWindow) Icon() *QIcon {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIconFromPointer(C.QWindow_Icon(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QIcon).DestroyQIcon)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsAncestorOf(child QWindow_ITF, mode QWindow__AncestorMode) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsAncestorOf(ptr.Pointer(), PointerFromQWindow(child), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QWindow) IsExposed() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsExposed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsModal() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsModal(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QWindow) IsTopLevel() bool {
	if ptr.Pointer() != nil {
		return C.QWindow_IsTopLevel(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQWindow_KeyPressEvent
func callbackQWindow_KeyPressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::keyPressEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).KeyPressEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectKeyPressEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::keyPressEvent", f)
	}
}

func (ptr *QWindow) DisconnectKeyPressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::keyPressEvent")
	}
}

func (ptr *QWindow) KeyPressEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyPressEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QWindow) KeyPressEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyPressEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQWindow_KeyReleaseEvent
func callbackQWindow_KeyReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::keyReleaseEvent"); signal != nil {
		signal.(func(*QKeyEvent))(NewQKeyEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).KeyReleaseEventDefault(NewQKeyEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectKeyReleaseEvent(f func(ev *QKeyEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::keyReleaseEvent", f)
	}
}

func (ptr *QWindow) DisconnectKeyReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::keyReleaseEvent")
	}
}

func (ptr *QWindow) KeyReleaseEvent(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyReleaseEvent(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

func (ptr *QWindow) KeyReleaseEventDefault(ev QKeyEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_KeyReleaseEventDefault(ptr.Pointer(), PointerFromQKeyEvent(ev))
	}
}

//export callbackQWindow_Lower
func callbackQWindow_Lower(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::lower"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectLower(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::lower", f)
	}
}

func (ptr *QWindow) DisconnectLower() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::lower")
	}
}

func (ptr *QWindow) Lower() {
	if ptr.Pointer() != nil {
		C.QWindow_Lower(ptr.Pointer())
	}
}

func (ptr *QWindow) Mask() *QRegion {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegionFromPointer(C.QWindow_Mask(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegion).DestroyQRegion)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MaximumHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MaximumHeight(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_MaximumHeightChanged
func callbackQWindow_MaximumHeightChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::maximumHeightChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMaximumHeightChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectMaximumHeightChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::maximumHeightChanged", f)
	}
}

func (ptr *QWindow) DisconnectMaximumHeightChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMaximumHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::maximumHeightChanged")
	}
}

func (ptr *QWindow) MaximumHeightChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MaximumHeightChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) MaximumSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_MaximumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MaximumWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MaximumWidth(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_MaximumWidthChanged
func callbackQWindow_MaximumWidthChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::maximumWidthChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMaximumWidthChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectMaximumWidthChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::maximumWidthChanged", f)
	}
}

func (ptr *QWindow) DisconnectMaximumWidthChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMaximumWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::maximumWidthChanged")
	}
}

func (ptr *QWindow) MaximumWidthChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MaximumWidthChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) MinimumHeight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MinimumHeight(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_MinimumHeightChanged
func callbackQWindow_MinimumHeightChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::minimumHeightChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMinimumHeightChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectMinimumHeightChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::minimumHeightChanged", f)
	}
}

func (ptr *QWindow) DisconnectMinimumHeightChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMinimumHeightChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::minimumHeightChanged")
	}
}

func (ptr *QWindow) MinimumHeightChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MinimumHeightChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) MinimumSize() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_MinimumSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) MinimumWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_MinimumWidth(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_MinimumWidthChanged
func callbackQWindow_MinimumWidthChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::minimumWidthChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectMinimumWidthChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectMinimumWidthChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::minimumWidthChanged", f)
	}
}

func (ptr *QWindow) DisconnectMinimumWidthChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectMinimumWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::minimumWidthChanged")
	}
}

func (ptr *QWindow) MinimumWidthChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_MinimumWidthChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_ModalityChanged
func callbackQWindow_ModalityChanged(ptr unsafe.Pointer, modality C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::modalityChanged"); signal != nil {
		signal.(func(core.Qt__WindowModality))(core.Qt__WindowModality(modality))
	}

}

func (ptr *QWindow) ConnectModalityChanged(f func(modality core.Qt__WindowModality)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectModalityChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::modalityChanged", f)
	}
}

func (ptr *QWindow) DisconnectModalityChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectModalityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::modalityChanged")
	}
}

func (ptr *QWindow) ModalityChanged(modality core.Qt__WindowModality) {
	if ptr.Pointer() != nil {
		C.QWindow_ModalityChanged(ptr.Pointer(), C.longlong(modality))
	}
}

//export callbackQWindow_MouseDoubleClickEvent
func callbackQWindow_MouseDoubleClickEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::mouseDoubleClickEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseDoubleClickEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseDoubleClickEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mouseDoubleClickEvent", f)
	}
}

func (ptr *QWindow) DisconnectMouseDoubleClickEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mouseDoubleClickEvent")
	}
}

func (ptr *QWindow) MouseDoubleClickEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseDoubleClickEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseDoubleClickEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseDoubleClickEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MouseMoveEvent
func callbackQWindow_MouseMoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::mouseMoveEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseMoveEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseMoveEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mouseMoveEvent", f)
	}
}

func (ptr *QWindow) DisconnectMouseMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mouseMoveEvent")
	}
}

func (ptr *QWindow) MouseMoveEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseMoveEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseMoveEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseMoveEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MousePressEvent
func callbackQWindow_MousePressEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::mousePressEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MousePressEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMousePressEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mousePressEvent", f)
	}
}

func (ptr *QWindow) DisconnectMousePressEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mousePressEvent")
	}
}

func (ptr *QWindow) MousePressEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MousePressEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MousePressEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MousePressEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MouseReleaseEvent
func callbackQWindow_MouseReleaseEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::mouseReleaseEvent"); signal != nil {
		signal.(func(*QMouseEvent))(NewQMouseEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MouseReleaseEventDefault(NewQMouseEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMouseReleaseEvent(f func(ev *QMouseEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mouseReleaseEvent", f)
	}
}

func (ptr *QWindow) DisconnectMouseReleaseEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::mouseReleaseEvent")
	}
}

func (ptr *QWindow) MouseReleaseEvent(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseReleaseEvent(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

func (ptr *QWindow) MouseReleaseEventDefault(ev QMouseEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MouseReleaseEventDefault(ptr.Pointer(), PointerFromQMouseEvent(ev))
	}
}

//export callbackQWindow_MoveEvent
func callbackQWindow_MoveEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::moveEvent"); signal != nil {
		signal.(func(*QMoveEvent))(NewQMoveEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).MoveEventDefault(NewQMoveEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectMoveEvent(f func(ev *QMoveEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::moveEvent", f)
	}
}

func (ptr *QWindow) DisconnectMoveEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::moveEvent")
	}
}

func (ptr *QWindow) MoveEvent(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MoveEvent(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

func (ptr *QWindow) MoveEventDefault(ev QMoveEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_MoveEventDefault(ptr.Pointer(), PointerFromQMoveEvent(ev))
	}
}

//export callbackQWindow_NativeEvent
func callbackQWindow_NativeEvent(ptr unsafe.Pointer, eventType unsafe.Pointer, message unsafe.Pointer, result C.long) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::nativeEvent"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QByteArray, unsafe.Pointer, int) bool)(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWindowFromPointer(ptr).NativeEventDefault(core.NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
}

func (ptr *QWindow) ConnectNativeEvent(f func(eventType *core.QByteArray, message unsafe.Pointer, result int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::nativeEvent", f)
	}
}

func (ptr *QWindow) DisconnectNativeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::nativeEvent")
	}
}

func (ptr *QWindow) NativeEvent(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_NativeEvent(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

func (ptr *QWindow) NativeEventDefault(eventType core.QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_NativeEventDefault(ptr.Pointer(), core.PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

//export callbackQWindow_OpacityChanged
func callbackQWindow_OpacityChanged(ptr unsafe.Pointer, opacity C.double) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::opacityChanged"); signal != nil {
		signal.(func(float64))(float64(opacity))
	}

}

func (ptr *QWindow) ConnectOpacityChanged(f func(opacity float64)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectOpacityChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::opacityChanged", f)
	}
}

func (ptr *QWindow) DisconnectOpacityChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectOpacityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::opacityChanged")
	}
}

func (ptr *QWindow) OpacityChanged(opacity float64) {
	if ptr.Pointer() != nil {
		C.QWindow_OpacityChanged(ptr.Pointer(), C.double(opacity))
	}
}

func (ptr *QWindow) Parent() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QWindow_Parent(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Position() *core.QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQPointFromPointer(C.QWindow_Position(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

//export callbackQWindow_Raise
func callbackQWindow_Raise(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::raise"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectRaise(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::raise", f)
	}
}

func (ptr *QWindow) DisconnectRaise() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::raise")
	}
}

func (ptr *QWindow) Raise() {
	if ptr.Pointer() != nil {
		C.QWindow_Raise(ptr.Pointer())
	}
}

//export callbackQWindow_RequestActivate
func callbackQWindow_RequestActivate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::requestActivate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectRequestActivate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::requestActivate", f)
	}
}

func (ptr *QWindow) DisconnectRequestActivate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::requestActivate")
	}
}

func (ptr *QWindow) RequestActivate() {
	if ptr.Pointer() != nil {
		C.QWindow_RequestActivate(ptr.Pointer())
	}
}

//export callbackQWindow_RequestUpdate
func callbackQWindow_RequestUpdate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::requestUpdate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectRequestUpdate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::requestUpdate", f)
	}
}

func (ptr *QWindow) DisconnectRequestUpdate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::requestUpdate")
	}
}

func (ptr *QWindow) RequestUpdate() {
	if ptr.Pointer() != nil {
		C.QWindow_RequestUpdate(ptr.Pointer())
	}
}

func (ptr *QWindow) RequestedFormat() *QSurfaceFormat {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSurfaceFormatFromPointer(C.QWindow_RequestedFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSurfaceFormat).DestroyQSurfaceFormat)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Resize(newSize core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_Resize(ptr.Pointer(), core.PointerFromQSize(newSize))
	}
}

func (ptr *QWindow) Resize2(w int, h int) {
	if ptr.Pointer() != nil {
		C.QWindow_Resize2(ptr.Pointer(), C.int(int32(w)), C.int(int32(h)))
	}
}

//export callbackQWindow_ResizeEvent
func callbackQWindow_ResizeEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::resizeEvent"); signal != nil {
		signal.(func(*QResizeEvent))(NewQResizeEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ResizeEventDefault(NewQResizeEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectResizeEvent(f func(ev *QResizeEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::resizeEvent", f)
	}
}

func (ptr *QWindow) DisconnectResizeEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::resizeEvent")
	}
}

func (ptr *QWindow) ResizeEvent(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ResizeEvent(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QWindow) ResizeEventDefault(ev QResizeEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ResizeEventDefault(ptr.Pointer(), PointerFromQResizeEvent(ev))
	}
}

func (ptr *QWindow) Screen() *QScreen {
	if ptr.Pointer() != nil {
		var tmpValue = NewQScreenFromPointer(C.QWindow_Screen(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQWindow_ScreenChanged
func callbackQWindow_ScreenChanged(ptr unsafe.Pointer, screen unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::screenChanged"); signal != nil {
		signal.(func(*QScreen))(NewQScreenFromPointer(screen))
	}

}

func (ptr *QWindow) ConnectScreenChanged(f func(screen *QScreen)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectScreenChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::screenChanged", f)
	}
}

func (ptr *QWindow) DisconnectScreenChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectScreenChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::screenChanged")
	}
}

func (ptr *QWindow) ScreenChanged(screen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ScreenChanged(ptr.Pointer(), PointerFromQScreen(screen))
	}
}

func (ptr *QWindow) SetBaseSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetBaseSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetCursor(cursor QCursor_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetCursor(ptr.Pointer(), PointerFromQCursor(cursor))
	}
}

func (ptr *QWindow) SetFilePath(filePath string) {
	if ptr.Pointer() != nil {
		var filePathC = C.CString(filePath)
		defer C.free(unsafe.Pointer(filePathC))
		C.QWindow_SetFilePath(ptr.Pointer(), filePathC)
	}
}

func (ptr *QWindow) SetFormat(format QSurfaceFormat_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetFormat(ptr.Pointer(), PointerFromQSurfaceFormat(format))
	}
}

func (ptr *QWindow) SetFramePosition(point core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetFramePosition(ptr.Pointer(), core.PointerFromQPoint(point))
	}
}

func (ptr *QWindow) SetGeometry2(rect core.QRect_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetGeometry2(ptr.Pointer(), core.PointerFromQRect(rect))
	}
}

func (ptr *QWindow) SetGeometry(posx int, posy int, w int, h int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetGeometry(ptr.Pointer(), C.int(int32(posx)), C.int(int32(posy)), C.int(int32(w)), C.int(int32(h)))
	}
}

func (ptr *QWindow) SetIcon(icon QIcon_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetIcon(ptr.Pointer(), PointerFromQIcon(icon))
	}
}

func (ptr *QWindow) SetKeyboardGrabEnabled(grab bool) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_SetKeyboardGrabEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(grab)))) != 0
	}
	return false
}

func (ptr *QWindow) SetMask(region QRegion_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMask(ptr.Pointer(), PointerFromQRegion(region))
	}
}

func (ptr *QWindow) SetMaximumSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMaximumSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetMinimumSize(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetMinimumSize(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetMouseGrabEnabled(grab bool) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_SetMouseGrabEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(grab)))) != 0
	}
	return false
}

func (ptr *QWindow) SetParent(parent QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetParent(ptr.Pointer(), PointerFromQWindow(parent))
	}
}

func (ptr *QWindow) SetPosition(pt core.QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetPosition(ptr.Pointer(), core.PointerFromQPoint(pt))
	}
}

func (ptr *QWindow) SetPosition2(posx int, posy int) {
	if ptr.Pointer() != nil {
		C.QWindow_SetPosition2(ptr.Pointer(), C.int(int32(posx)), C.int(int32(posy)))
	}
}

func (ptr *QWindow) SetScreen(newScreen QScreen_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetScreen(ptr.Pointer(), PointerFromQScreen(newScreen))
	}
}

func (ptr *QWindow) SetSizeIncrement(size core.QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetSizeIncrement(ptr.Pointer(), core.PointerFromQSize(size))
	}
}

func (ptr *QWindow) SetSurfaceType(surfaceType QSurface__SurfaceType) {
	if ptr.Pointer() != nil {
		C.QWindow_SetSurfaceType(ptr.Pointer(), C.longlong(surfaceType))
	}
}

func (ptr *QWindow) SetTransientParent(parent QWindow_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_SetTransientParent(ptr.Pointer(), PointerFromQWindow(parent))
	}
}

func (ptr *QWindow) SetWindowState(state core.Qt__WindowState) {
	if ptr.Pointer() != nil {
		C.QWindow_SetWindowState(ptr.Pointer(), C.longlong(state))
	}
}

//export callbackQWindow_Show
func callbackQWindow_Show(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::show"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShow(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::show", f)
	}
}

func (ptr *QWindow) DisconnectShow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::show")
	}
}

func (ptr *QWindow) Show() {
	if ptr.Pointer() != nil {
		C.QWindow_Show(ptr.Pointer())
	}
}

//export callbackQWindow_ShowEvent
func callbackQWindow_ShowEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::showEvent"); signal != nil {
		signal.(func(*QShowEvent))(NewQShowEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).ShowEventDefault(NewQShowEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectShowEvent(f func(ev *QShowEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showEvent", f)
	}
}

func (ptr *QWindow) DisconnectShowEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showEvent")
	}
}

func (ptr *QWindow) ShowEvent(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ShowEvent(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

func (ptr *QWindow) ShowEventDefault(ev QShowEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ShowEventDefault(ptr.Pointer(), PointerFromQShowEvent(ev))
	}
}

//export callbackQWindow_ShowFullScreen
func callbackQWindow_ShowFullScreen(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::showFullScreen"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowFullScreen(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showFullScreen", f)
	}
}

func (ptr *QWindow) DisconnectShowFullScreen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showFullScreen")
	}
}

func (ptr *QWindow) ShowFullScreen() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowFullScreen(ptr.Pointer())
	}
}

//export callbackQWindow_ShowMaximized
func callbackQWindow_ShowMaximized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::showMaximized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowMaximized(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showMaximized", f)
	}
}

func (ptr *QWindow) DisconnectShowMaximized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showMaximized")
	}
}

func (ptr *QWindow) ShowMaximized() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowMaximized(ptr.Pointer())
	}
}

//export callbackQWindow_ShowMinimized
func callbackQWindow_ShowMinimized(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::showMinimized"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowMinimized(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showMinimized", f)
	}
}

func (ptr *QWindow) DisconnectShowMinimized() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showMinimized")
	}
}

func (ptr *QWindow) ShowMinimized() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowMinimized(ptr.Pointer())
	}
}

//export callbackQWindow_ShowNormal
func callbackQWindow_ShowNormal(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::showNormal"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QWindow) ConnectShowNormal(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showNormal", f)
	}
}

func (ptr *QWindow) DisconnectShowNormal() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::showNormal")
	}
}

func (ptr *QWindow) ShowNormal() {
	if ptr.Pointer() != nil {
		C.QWindow_ShowNormal(ptr.Pointer())
	}
}

//export callbackQWindow_Size
func callbackQWindow_Size(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::size"); signal != nil {
		return core.PointerFromQSize(signal.(func() *core.QSize)())
	}

	return core.PointerFromQSize(NewQWindowFromPointer(ptr).SizeDefault())
}

func (ptr *QWindow) ConnectSize(f func() *core.QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::size", f)
	}
}

func (ptr *QWindow) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::size")
	}
}

func (ptr *QWindow) Size() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) SizeDefault() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_SizeDefault(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) SizeIncrement() *core.QSize {
	if ptr.Pointer() != nil {
		var tmpValue = core.NewQSizeFromPointer(C.QWindow_SizeIncrement(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*core.QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQWindow_SurfaceType
func callbackQWindow_SurfaceType(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::surfaceType"); signal != nil {
		return C.longlong(signal.(func() QSurface__SurfaceType)())
	}

	return C.longlong(NewQWindowFromPointer(ptr).SurfaceTypeDefault())
}

func (ptr *QWindow) ConnectSurfaceType(f func() QSurface__SurfaceType) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::surfaceType", f)
	}
}

func (ptr *QWindow) DisconnectSurfaceType() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::surfaceType")
	}
}

func (ptr *QWindow) SurfaceType() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QWindow_SurfaceType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) SurfaceTypeDefault() QSurface__SurfaceType {
	if ptr.Pointer() != nil {
		return QSurface__SurfaceType(C.QWindow_SurfaceTypeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_TabletEvent
func callbackQWindow_TabletEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::tabletEvent"); signal != nil {
		signal.(func(*QTabletEvent))(NewQTabletEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).TabletEventDefault(NewQTabletEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectTabletEvent(f func(ev *QTabletEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::tabletEvent", f)
	}
}

func (ptr *QWindow) DisconnectTabletEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::tabletEvent")
	}
}

func (ptr *QWindow) TabletEvent(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TabletEvent(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

func (ptr *QWindow) TabletEventDefault(ev QTabletEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TabletEventDefault(ptr.Pointer(), PointerFromQTabletEvent(ev))
	}
}

//export callbackQWindow_TouchEvent
func callbackQWindow_TouchEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::touchEvent"); signal != nil {
		signal.(func(*QTouchEvent))(NewQTouchEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).TouchEventDefault(NewQTouchEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectTouchEvent(f func(ev *QTouchEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::touchEvent", f)
	}
}

func (ptr *QWindow) DisconnectTouchEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::touchEvent")
	}
}

func (ptr *QWindow) TouchEvent(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TouchEvent(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QWindow) TouchEventDefault(ev QTouchEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TouchEventDefault(ptr.Pointer(), PointerFromQTouchEvent(ev))
	}
}

func (ptr *QWindow) TransientParent() *QWindow {
	if ptr.Pointer() != nil {
		var tmpValue = NewQWindowFromPointer(C.QWindow_TransientParent(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*core.QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QWindow) Type() core.Qt__WindowType {
	if ptr.Pointer() != nil {
		return core.Qt__WindowType(C.QWindow_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) UnsetCursor() {
	if ptr.Pointer() != nil {
		C.QWindow_UnsetCursor(ptr.Pointer())
	}
}

//export callbackQWindow_VisibilityChanged
func callbackQWindow_VisibilityChanged(ptr unsafe.Pointer, visibility C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::visibilityChanged"); signal != nil {
		signal.(func(QWindow__Visibility))(QWindow__Visibility(visibility))
	}

}

func (ptr *QWindow) ConnectVisibilityChanged(f func(visibility QWindow__Visibility)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectVisibilityChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::visibilityChanged", f)
	}
}

func (ptr *QWindow) DisconnectVisibilityChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectVisibilityChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::visibilityChanged")
	}
}

func (ptr *QWindow) VisibilityChanged(visibility QWindow__Visibility) {
	if ptr.Pointer() != nil {
		C.QWindow_VisibilityChanged(ptr.Pointer(), C.longlong(visibility))
	}
}

//export callbackQWindow_VisibleChanged
func callbackQWindow_VisibleChanged(ptr unsafe.Pointer, arg C.char) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::visibleChanged"); signal != nil {
		signal.(func(bool))(int8(arg) != 0)
	}

}

func (ptr *QWindow) ConnectVisibleChanged(f func(arg bool)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectVisibleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::visibleChanged", f)
	}
}

func (ptr *QWindow) DisconnectVisibleChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectVisibleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::visibleChanged")
	}
}

func (ptr *QWindow) VisibleChanged(arg bool) {
	if ptr.Pointer() != nil {
		C.QWindow_VisibleChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(arg))))
	}
}

//export callbackQWindow_WheelEvent
func callbackQWindow_WheelEvent(ptr unsafe.Pointer, ev unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::wheelEvent"); signal != nil {
		signal.(func(*QWheelEvent))(NewQWheelEventFromPointer(ev))
	} else {
		NewQWindowFromPointer(ptr).WheelEventDefault(NewQWheelEventFromPointer(ev))
	}
}

func (ptr *QWindow) ConnectWheelEvent(f func(ev *QWheelEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::wheelEvent", f)
	}
}

func (ptr *QWindow) DisconnectWheelEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::wheelEvent")
	}
}

func (ptr *QWindow) WheelEvent(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_WheelEvent(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QWindow) WheelEventDefault(ev QWheelEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_WheelEventDefault(ptr.Pointer(), PointerFromQWheelEvent(ev))
	}
}

func (ptr *QWindow) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_Width(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_WidthChanged
func callbackQWindow_WidthChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::widthChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectWidthChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectWidthChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::widthChanged", f)
	}
}

func (ptr *QWindow) DisconnectWidthChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWidthChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::widthChanged")
	}
}

func (ptr *QWindow) WidthChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_WidthChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) WinId() uintptr {
	if ptr.Pointer() != nil {
		return uintptr(C.QWindow_WinId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QWindow) WindowState() core.Qt__WindowState {
	if ptr.Pointer() != nil {
		return core.Qt__WindowState(C.QWindow_WindowState(ptr.Pointer()))
	}
	return 0
}

//export callbackQWindow_WindowStateChanged
func callbackQWindow_WindowStateChanged(ptr unsafe.Pointer, windowState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::windowStateChanged"); signal != nil {
		signal.(func(core.Qt__WindowState))(core.Qt__WindowState(windowState))
	}

}

func (ptr *QWindow) ConnectWindowStateChanged(f func(windowState core.Qt__WindowState)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectWindowStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::windowStateChanged", f)
	}
}

func (ptr *QWindow) DisconnectWindowStateChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWindowStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::windowStateChanged")
	}
}

func (ptr *QWindow) WindowStateChanged(windowState core.Qt__WindowState) {
	if ptr.Pointer() != nil {
		C.QWindow_WindowStateChanged(ptr.Pointer(), C.longlong(windowState))
	}
}

//export callbackQWindow_WindowTitleChanged
func callbackQWindow_WindowTitleChanged(ptr unsafe.Pointer, title C.struct_QtGui_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::windowTitleChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(title))
	}

}

func (ptr *QWindow) ConnectWindowTitleChanged(f func(title string)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectWindowTitleChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::windowTitleChanged", f)
	}
}

func (ptr *QWindow) DisconnectWindowTitleChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectWindowTitleChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::windowTitleChanged")
	}
}

func (ptr *QWindow) WindowTitleChanged(title string) {
	if ptr.Pointer() != nil {
		var titleC = C.CString(title)
		defer C.free(unsafe.Pointer(titleC))
		C.QWindow_WindowTitleChanged(ptr.Pointer(), titleC)
	}
}

func (ptr *QWindow) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_X(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_XChanged
func callbackQWindow_XChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::xChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectXChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectXChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::xChanged", f)
	}
}

func (ptr *QWindow) DisconnectXChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectXChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::xChanged")
	}
}

func (ptr *QWindow) XChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_XChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

func (ptr *QWindow) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QWindow_Y(ptr.Pointer())))
	}
	return 0
}

//export callbackQWindow_YChanged
func callbackQWindow_YChanged(ptr unsafe.Pointer, arg C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::yChanged"); signal != nil {
		signal.(func(int))(int(int32(arg)))
	}

}

func (ptr *QWindow) ConnectYChanged(f func(arg int)) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectYChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::yChanged", f)
	}
}

func (ptr *QWindow) DisconnectYChanged() {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectYChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::yChanged")
	}
}

func (ptr *QWindow) YChanged(arg int) {
	if ptr.Pointer() != nil {
		C.QWindow_YChanged(ptr.Pointer(), C.int(int32(arg)))
	}
}

//export callbackQWindow_DestroyQWindow
func callbackQWindow_DestroyQWindow(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::~QWindow"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).DestroyQWindowDefault()
	}
}

func (ptr *QWindow) ConnectDestroyQWindow(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::~QWindow", f)
	}
}

func (ptr *QWindow) DisconnectDestroyQWindow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::~QWindow")
	}
}

func (ptr *QWindow) DestroyQWindow() {
	if ptr.Pointer() != nil {
		C.QWindow_DestroyQWindow(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QWindow) DestroyQWindowDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_DestroyQWindowDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQWindow_TimerEvent
func callbackQWindow_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::timerEvent"); signal != nil {
		signal.(func(*core.QTimerEvent))(core.NewQTimerEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).TimerEventDefault(core.NewQTimerEventFromPointer(event))
	}
}

func (ptr *QWindow) ConnectTimerEvent(f func(event *core.QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::timerEvent", f)
	}
}

func (ptr *QWindow) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::timerEvent")
	}
}

func (ptr *QWindow) TimerEvent(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TimerEvent(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

func (ptr *QWindow) TimerEventDefault(event core.QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_TimerEventDefault(ptr.Pointer(), core.PointerFromQTimerEvent(event))
	}
}

//export callbackQWindow_ChildEvent
func callbackQWindow_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::childEvent"); signal != nil {
		signal.(func(*core.QChildEvent))(core.NewQChildEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).ChildEventDefault(core.NewQChildEventFromPointer(event))
	}
}

func (ptr *QWindow) ConnectChildEvent(f func(event *core.QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::childEvent", f)
	}
}

func (ptr *QWindow) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::childEvent")
	}
}

func (ptr *QWindow) ChildEvent(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ChildEvent(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

func (ptr *QWindow) ChildEventDefault(event core.QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ChildEventDefault(ptr.Pointer(), core.PointerFromQChildEvent(event))
	}
}

//export callbackQWindow_ConnectNotify
func callbackQWindow_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::connectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWindowFromPointer(ptr).ConnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWindow) ConnectConnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::connectNotify", f)
	}
}

func (ptr *QWindow) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::connectNotify")
	}
}

func (ptr *QWindow) ConnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWindow) ConnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_ConnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWindow_CustomEvent
func callbackQWindow_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::customEvent"); signal != nil {
		signal.(func(*core.QEvent))(core.NewQEventFromPointer(event))
	} else {
		NewQWindowFromPointer(ptr).CustomEventDefault(core.NewQEventFromPointer(event))
	}
}

func (ptr *QWindow) ConnectCustomEvent(f func(event *core.QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::customEvent", f)
	}
}

func (ptr *QWindow) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::customEvent")
	}
}

func (ptr *QWindow) CustomEvent(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_CustomEvent(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

func (ptr *QWindow) CustomEventDefault(event core.QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_CustomEventDefault(ptr.Pointer(), core.PointerFromQEvent(event))
	}
}

//export callbackQWindow_DeleteLater
func callbackQWindow_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQWindowFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QWindow) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::deleteLater", f)
	}
}

func (ptr *QWindow) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::deleteLater")
	}
}

func (ptr *QWindow) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QWindow_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QWindow) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QWindow_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQWindow_DisconnectNotify
func callbackQWindow_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::disconnectNotify"); signal != nil {
		signal.(func(*core.QMetaMethod))(core.NewQMetaMethodFromPointer(sign))
	} else {
		NewQWindowFromPointer(ptr).DisconnectNotifyDefault(core.NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QWindow) ConnectDisconnectNotify(f func(sign *core.QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::disconnectNotify", f)
	}
}

func (ptr *QWindow) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::disconnectNotify")
	}
}

func (ptr *QWindow) DisconnectNotify(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectNotify(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

func (ptr *QWindow) DisconnectNotifyDefault(sign core.QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QWindow_DisconnectNotifyDefault(ptr.Pointer(), core.PointerFromQMetaMethod(sign))
	}
}

//export callbackQWindow_EventFilter
func callbackQWindow_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*core.QObject, *core.QEvent) bool)(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQWindowFromPointer(ptr).EventFilterDefault(core.NewQObjectFromPointer(watched), core.NewQEventFromPointer(event)))))
}

func (ptr *QWindow) ConnectEventFilter(f func(watched *core.QObject, event *core.QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::eventFilter", f)
	}
}

func (ptr *QWindow) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::eventFilter")
	}
}

func (ptr *QWindow) EventFilter(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_EventFilter(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QWindow) EventFilterDefault(watched core.QObject_ITF, event core.QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QWindow_EventFilterDefault(ptr.Pointer(), core.PointerFromQObject(watched), core.PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQWindow_MetaObject
func callbackQWindow_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QWindow::metaObject"); signal != nil {
		return core.PointerFromQMetaObject(signal.(func() *core.QMetaObject)())
	}

	return core.PointerFromQMetaObject(NewQWindowFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QWindow) ConnectMetaObject(f func() *core.QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::metaObject", f)
	}
}

func (ptr *QWindow) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QWindow::metaObject")
	}
}

func (ptr *QWindow) MetaObject() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWindow_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWindow) MetaObjectDefault() *core.QMetaObject {
	if ptr.Pointer() != nil {
		return core.NewQMetaObjectFromPointer(C.QWindow_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QWindowStateChangeEvent struct {
	core.QEvent
}

type QWindowStateChangeEvent_ITF interface {
	core.QEvent_ITF
	QWindowStateChangeEvent_PTR() *QWindowStateChangeEvent
}

func (p *QWindowStateChangeEvent) QWindowStateChangeEvent_PTR() *QWindowStateChangeEvent {
	return p
}

func (p *QWindowStateChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QWindowStateChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQWindowStateChangeEvent(ptr QWindowStateChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWindowStateChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQWindowStateChangeEventFromPointer(ptr unsafe.Pointer) *QWindowStateChangeEvent {
	var n = new(QWindowStateChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QWindowStateChangeEvent) DestroyQWindowStateChangeEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QWindowStateChangeEvent) OldState() core.Qt__WindowState {
	if ptr.Pointer() != nil {
		return core.Qt__WindowState(C.QWindowStateChangeEvent_OldState(ptr.Pointer()))
	}
	return 0
}
