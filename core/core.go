// +build !minimal

package core

//#include <stdint.h>
//#include <stdlib.h>
//#include "core.h"
import "C"
import (
	"fmt"
	"github.com/therecipe/qt"
	"runtime"
	"strings"
	"unsafe"
)

func cGoUnpackString(s C.struct_QtCore_PackedString) string {
	if len := int(s.len); len == -1 {
		return C.GoString(s.data)
	}
	return C.GoStringN(s.data, C.int(s.len))
}

//QAbstractAnimation::DeletionPolicy
type QAbstractAnimation__DeletionPolicy int64

const (
	QAbstractAnimation__KeepWhenStopped   = QAbstractAnimation__DeletionPolicy(0)
	QAbstractAnimation__DeleteWhenStopped = QAbstractAnimation__DeletionPolicy(1)
)

//QAbstractAnimation::Direction
type QAbstractAnimation__Direction int64

const (
	QAbstractAnimation__Forward  = QAbstractAnimation__Direction(0)
	QAbstractAnimation__Backward = QAbstractAnimation__Direction(1)
)

//QAbstractAnimation::State
type QAbstractAnimation__State int64

const (
	QAbstractAnimation__Stopped = QAbstractAnimation__State(0)
	QAbstractAnimation__Paused  = QAbstractAnimation__State(1)
	QAbstractAnimation__Running = QAbstractAnimation__State(2)
)

type QAbstractAnimation struct {
	QObject
}

type QAbstractAnimation_ITF interface {
	QObject_ITF
	QAbstractAnimation_PTR() *QAbstractAnimation
}

func (p *QAbstractAnimation) QAbstractAnimation_PTR() *QAbstractAnimation {
	return p
}

func (p *QAbstractAnimation) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractAnimation) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractAnimation(ptr QAbstractAnimation_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractAnimation_PTR().Pointer()
	}
	return nil
}

func NewQAbstractAnimationFromPointer(ptr unsafe.Pointer) *QAbstractAnimation {
	var n = new(QAbstractAnimation)
	n.SetPointer(ptr)
	return n
}
func (ptr *QAbstractAnimation) CurrentLoop() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractAnimation_CurrentLoop(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractAnimation) CurrentTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractAnimation_CurrentTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAbstractAnimation) Direction() QAbstractAnimation__Direction {
	if ptr.Pointer() != nil {
		return QAbstractAnimation__Direction(C.QAbstractAnimation_Direction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractAnimation) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractAnimation_LoopCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQAbstractAnimation_SetCurrentTime
func callbackQAbstractAnimation_SetCurrentTime(ptr unsafe.Pointer, msecs C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msecs)))
	}

}

func (ptr *QAbstractAnimation) ConnectSetCurrentTime(f func(msecs int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::setCurrentTime", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectSetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::setCurrentTime")
	}
}

func (ptr *QAbstractAnimation) SetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_SetCurrentTime(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QAbstractAnimation) SetDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_SetDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QAbstractAnimation) SetLoopCount(loopCount int) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_SetLoopCount(ptr.Pointer(), C.int(int32(loopCount)))
	}
}

func (ptr *QAbstractAnimation) State() QAbstractAnimation__State {
	if ptr.Pointer() != nil {
		return QAbstractAnimation__State(C.QAbstractAnimation_State(ptr.Pointer()))
	}
	return 0
}

func NewQAbstractAnimation(parent QObject_ITF) *QAbstractAnimation {
	var tmpValue = NewQAbstractAnimationFromPointer(C.QAbstractAnimation_NewQAbstractAnimation(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractAnimation_CurrentLoopChanged
func callbackQAbstractAnimation_CurrentLoopChanged(ptr unsafe.Pointer, currentLoop C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::currentLoopChanged"); signal != nil {
		signal.(func(int))(int(int32(currentLoop)))
	}

}

func (ptr *QAbstractAnimation) ConnectCurrentLoopChanged(f func(currentLoop int)) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ConnectCurrentLoopChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::currentLoopChanged", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectCurrentLoopChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DisconnectCurrentLoopChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::currentLoopChanged")
	}
}

func (ptr *QAbstractAnimation) CurrentLoopChanged(currentLoop int) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_CurrentLoopChanged(ptr.Pointer(), C.int(int32(currentLoop)))
	}
}

func (ptr *QAbstractAnimation) CurrentLoopTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractAnimation_CurrentLoopTime(ptr.Pointer())))
	}
	return 0
}

//export callbackQAbstractAnimation_DirectionChanged
func callbackQAbstractAnimation_DirectionChanged(ptr unsafe.Pointer, newDirection C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::directionChanged"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(newDirection))
	}

}

func (ptr *QAbstractAnimation) ConnectDirectionChanged(f func(newDirection QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ConnectDirectionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::directionChanged", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectDirectionChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DisconnectDirectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::directionChanged")
	}
}

func (ptr *QAbstractAnimation) DirectionChanged(newDirection QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DirectionChanged(ptr.Pointer(), C.longlong(newDirection))
	}
}

//export callbackQAbstractAnimation_Duration
func callbackQAbstractAnimation_Duration(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::duration"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractAnimation) ConnectDuration(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::duration", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectDuration() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::duration")
	}
}

func (ptr *QAbstractAnimation) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractAnimation_Duration(ptr.Pointer())))
	}
	return 0
}

//export callbackQAbstractAnimation_Event
func callbackQAbstractAnimation_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractAnimationFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QAbstractAnimation) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::event", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::event")
	}
}

func (ptr *QAbstractAnimation) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractAnimation_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractAnimation) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractAnimation_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractAnimation_Finished
func callbackQAbstractAnimation_Finished(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractAnimation) ConnectFinished(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::finished", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectFinished() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::finished")
	}
}

func (ptr *QAbstractAnimation) Finished() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_Finished(ptr.Pointer())
	}
}

func (ptr *QAbstractAnimation) Group() *QAnimationGroup {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAnimationGroupFromPointer(C.QAbstractAnimation_Group(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAbstractAnimation_Pause
func callbackQAbstractAnimation_Pause(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::pause"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractAnimation) ConnectPause(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::pause", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectPause() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::pause")
	}
}

func (ptr *QAbstractAnimation) Pause() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_Pause(ptr.Pointer())
	}
}

//export callbackQAbstractAnimation_Resume
func callbackQAbstractAnimation_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::resume"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractAnimation) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::resume", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::resume")
	}
}

func (ptr *QAbstractAnimation) Resume() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_Resume(ptr.Pointer())
	}
}

//export callbackQAbstractAnimation_SetPaused
func callbackQAbstractAnimation_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	}

}

func (ptr *QAbstractAnimation) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::setPaused", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectSetPaused(paused bool) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::setPaused")
	}
}

func (ptr *QAbstractAnimation) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

//export callbackQAbstractAnimation_Start
func callbackQAbstractAnimation_Start(ptr unsafe.Pointer, policy C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::start"); signal != nil {
		signal.(func(QAbstractAnimation__DeletionPolicy))(QAbstractAnimation__DeletionPolicy(policy))
	}

}

func (ptr *QAbstractAnimation) ConnectStart(f func(policy QAbstractAnimation__DeletionPolicy)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::start", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectStart(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::start")
	}
}

func (ptr *QAbstractAnimation) Start(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_Start(ptr.Pointer(), C.longlong(policy))
	}
}

//export callbackQAbstractAnimation_StateChanged
func callbackQAbstractAnimation_StateChanged(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::stateChanged"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}

}

func (ptr *QAbstractAnimation) ConnectStateChanged(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::stateChanged", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectStateChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::stateChanged")
	}
}

func (ptr *QAbstractAnimation) StateChanged(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_StateChanged(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

//export callbackQAbstractAnimation_Stop
func callbackQAbstractAnimation_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractAnimation) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::stop", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::stop")
	}
}

func (ptr *QAbstractAnimation) Stop() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_Stop(ptr.Pointer())
	}
}

func (ptr *QAbstractAnimation) TotalDuration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractAnimation_TotalDuration(ptr.Pointer())))
	}
	return 0
}

//export callbackQAbstractAnimation_UpdateCurrentTime
func callbackQAbstractAnimation_UpdateCurrentTime(ptr unsafe.Pointer, currentTime C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::updateCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(currentTime)))
	}

}

func (ptr *QAbstractAnimation) ConnectUpdateCurrentTime(f func(currentTime int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::updateCurrentTime", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectUpdateCurrentTime(currentTime int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::updateCurrentTime")
	}
}

func (ptr *QAbstractAnimation) UpdateCurrentTime(currentTime int) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_UpdateCurrentTime(ptr.Pointer(), C.int(int32(currentTime)))
	}
}

//export callbackQAbstractAnimation_UpdateDirection
func callbackQAbstractAnimation_UpdateDirection(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::updateDirection"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(direction))
	} else {
		NewQAbstractAnimationFromPointer(ptr).UpdateDirectionDefault(QAbstractAnimation__Direction(direction))
	}
}

func (ptr *QAbstractAnimation) ConnectUpdateDirection(f func(direction QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::updateDirection", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectUpdateDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::updateDirection")
	}
}

func (ptr *QAbstractAnimation) UpdateDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_UpdateDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QAbstractAnimation) UpdateDirectionDefault(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_UpdateDirectionDefault(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQAbstractAnimation_UpdateState
func callbackQAbstractAnimation_UpdateState(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::updateState"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	} else {
		NewQAbstractAnimationFromPointer(ptr).UpdateStateDefault(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}
}

func (ptr *QAbstractAnimation) ConnectUpdateState(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::updateState", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::updateState")
	}
}

func (ptr *QAbstractAnimation) UpdateState(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_UpdateState(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QAbstractAnimation) UpdateStateDefault(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_UpdateStateDefault(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

//export callbackQAbstractAnimation_DestroyQAbstractAnimation
func callbackQAbstractAnimation_DestroyQAbstractAnimation(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::~QAbstractAnimation"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractAnimationFromPointer(ptr).DestroyQAbstractAnimationDefault()
	}
}

func (ptr *QAbstractAnimation) ConnectDestroyQAbstractAnimation(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::~QAbstractAnimation", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectDestroyQAbstractAnimation() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::~QAbstractAnimation")
	}
}

func (ptr *QAbstractAnimation) DestroyQAbstractAnimation() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DestroyQAbstractAnimation(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractAnimation) DestroyQAbstractAnimationDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DestroyQAbstractAnimationDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractAnimation_TimerEvent
func callbackQAbstractAnimation_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractAnimationFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractAnimation) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::timerEvent", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::timerEvent")
	}
}

func (ptr *QAbstractAnimation) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractAnimation) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractAnimation_ChildEvent
func callbackQAbstractAnimation_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractAnimationFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractAnimation) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::childEvent", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::childEvent")
	}
}

func (ptr *QAbstractAnimation) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractAnimation) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractAnimation_ConnectNotify
func callbackQAbstractAnimation_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractAnimationFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractAnimation) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::connectNotify", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::connectNotify")
	}
}

func (ptr *QAbstractAnimation) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractAnimation) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractAnimation_CustomEvent
func callbackQAbstractAnimation_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractAnimationFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractAnimation) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::customEvent", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::customEvent")
	}
}

func (ptr *QAbstractAnimation) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractAnimation) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractAnimation_DeleteLater
func callbackQAbstractAnimation_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractAnimationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractAnimation) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::deleteLater", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::deleteLater")
	}
}

func (ptr *QAbstractAnimation) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractAnimation) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractAnimation_DisconnectNotify
func callbackQAbstractAnimation_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractAnimationFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractAnimation) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::disconnectNotify", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::disconnectNotify")
	}
}

func (ptr *QAbstractAnimation) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractAnimation) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractAnimation_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractAnimation_EventFilter
func callbackQAbstractAnimation_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractAnimationFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractAnimation) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::eventFilter", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::eventFilter")
	}
}

func (ptr *QAbstractAnimation) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractAnimation_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractAnimation) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractAnimation_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractAnimation_MetaObject
func callbackQAbstractAnimation_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractAnimation::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractAnimationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractAnimation) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::metaObject", f)
	}
}

func (ptr *QAbstractAnimation) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractAnimation::metaObject")
	}
}

func (ptr *QAbstractAnimation) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractAnimation_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractAnimation) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractAnimation_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAbstractEventDispatcher struct {
	QObject
}

type QAbstractEventDispatcher_ITF interface {
	QObject_ITF
	QAbstractEventDispatcher_PTR() *QAbstractEventDispatcher
}

func (p *QAbstractEventDispatcher) QAbstractEventDispatcher_PTR() *QAbstractEventDispatcher {
	return p
}

func (p *QAbstractEventDispatcher) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractEventDispatcher) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractEventDispatcher(ptr QAbstractEventDispatcher_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractEventDispatcher_PTR().Pointer()
	}
	return nil
}

func NewQAbstractEventDispatcherFromPointer(ptr unsafe.Pointer) *QAbstractEventDispatcher {
	var n = new(QAbstractEventDispatcher)
	n.SetPointer(ptr)
	return n
}

//export callbackQAbstractEventDispatcher_AboutToBlock
func callbackQAbstractEventDispatcher_AboutToBlock(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::aboutToBlock"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractEventDispatcher) ConnectAboutToBlock(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_ConnectAboutToBlock(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::aboutToBlock", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectAboutToBlock() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_DisconnectAboutToBlock(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::aboutToBlock")
	}
}

func (ptr *QAbstractEventDispatcher) AboutToBlock() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_AboutToBlock(ptr.Pointer())
	}
}

//export callbackQAbstractEventDispatcher_Awake
func callbackQAbstractEventDispatcher_Awake(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::awake"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractEventDispatcher) ConnectAwake(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_ConnectAwake(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::awake", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectAwake() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_DisconnectAwake(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::awake")
	}
}

func (ptr *QAbstractEventDispatcher) Awake() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_Awake(ptr.Pointer())
	}
}

func (ptr *QAbstractEventDispatcher) FilterNativeEvent(eventType QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_FilterNativeEvent(ptr.Pointer(), PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

//export callbackQAbstractEventDispatcher_Flush
func callbackQAbstractEventDispatcher_Flush(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::flush"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractEventDispatcher) ConnectFlush(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::flush", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectFlush() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::flush")
	}
}

func (ptr *QAbstractEventDispatcher) Flush() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_Flush(ptr.Pointer())
	}
}

func (ptr *QAbstractEventDispatcher) InstallNativeEventFilter(filterObj QAbstractNativeEventFilter_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_InstallNativeEventFilter(ptr.Pointer(), PointerFromQAbstractNativeEventFilter(filterObj))
	}
}

func QAbstractEventDispatcher_Instance(thread QThread_ITF) *QAbstractEventDispatcher {
	var tmpValue = NewQAbstractEventDispatcherFromPointer(C.QAbstractEventDispatcher_QAbstractEventDispatcher_Instance(PointerFromQThread(thread)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAbstractEventDispatcher) Instance(thread QThread_ITF) *QAbstractEventDispatcher {
	var tmpValue = NewQAbstractEventDispatcherFromPointer(C.QAbstractEventDispatcher_QAbstractEventDispatcher_Instance(PointerFromQThread(thread)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractEventDispatcher_Interrupt
func callbackQAbstractEventDispatcher_Interrupt(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::interrupt"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractEventDispatcher) ConnectInterrupt(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::interrupt", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectInterrupt() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::interrupt")
	}
}

func (ptr *QAbstractEventDispatcher) Interrupt() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_Interrupt(ptr.Pointer())
	}
}

//export callbackQAbstractEventDispatcher_ProcessEvents
func callbackQAbstractEventDispatcher_ProcessEvents(ptr unsafe.Pointer, flags C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::processEvents"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QEventLoop__ProcessEventsFlag) bool)(QEventLoop__ProcessEventsFlag(flags)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAbstractEventDispatcher) ConnectProcessEvents(f func(flags QEventLoop__ProcessEventsFlag) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::processEvents", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectProcessEvents(flags QEventLoop__ProcessEventsFlag) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::processEvents")
	}
}

func (ptr *QAbstractEventDispatcher) ProcessEvents(flags QEventLoop__ProcessEventsFlag) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_ProcessEvents(ptr.Pointer(), C.longlong(flags)) != 0
	}
	return false
}

//export callbackQAbstractEventDispatcher_RegisterEventNotifier
func callbackQAbstractEventDispatcher_RegisterEventNotifier(ptr unsafe.Pointer, notifier unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::registerEventNotifier"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QWinEventNotifier) bool)(NewQWinEventNotifierFromPointer(notifier)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAbstractEventDispatcher) ConnectRegisterEventNotifier(f func(notifier *QWinEventNotifier) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::registerEventNotifier", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectRegisterEventNotifier(notifier QWinEventNotifier_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::registerEventNotifier")
	}
}

func (ptr *QAbstractEventDispatcher) RegisterEventNotifier(notifier QWinEventNotifier_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_RegisterEventNotifier(ptr.Pointer(), PointerFromQWinEventNotifier(notifier)) != 0
	}
	return false
}

//export callbackQAbstractEventDispatcher_RegisterSocketNotifier
func callbackQAbstractEventDispatcher_RegisterSocketNotifier(ptr unsafe.Pointer, notifier unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::registerSocketNotifier"); signal != nil {
		signal.(func(*QSocketNotifier))(NewQSocketNotifierFromPointer(notifier))
	}

}

func (ptr *QAbstractEventDispatcher) ConnectRegisterSocketNotifier(f func(notifier *QSocketNotifier)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::registerSocketNotifier", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectRegisterSocketNotifier(notifier QSocketNotifier_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::registerSocketNotifier")
	}
}

func (ptr *QAbstractEventDispatcher) RegisterSocketNotifier(notifier QSocketNotifier_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_RegisterSocketNotifier(ptr.Pointer(), PointerFromQSocketNotifier(notifier))
	}
}

func (ptr *QAbstractEventDispatcher) RegisterTimer(interval int, timerType Qt__TimerType, object QObject_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractEventDispatcher_RegisterTimer(ptr.Pointer(), C.int(int32(interval)), C.longlong(timerType), PointerFromQObject(object))))
	}
	return 0
}

//export callbackQAbstractEventDispatcher_RegisterTimer4
func callbackQAbstractEventDispatcher_RegisterTimer4(ptr unsafe.Pointer, timerId C.int, interval C.int, timerType C.longlong, object unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::registerTimer4"); signal != nil {
		signal.(func(int, int, Qt__TimerType, *QObject))(int(int32(timerId)), int(int32(interval)), Qt__TimerType(timerType), NewQObjectFromPointer(object))
	}

}

func (ptr *QAbstractEventDispatcher) ConnectRegisterTimer4(f func(timerId int, interval int, timerType Qt__TimerType, object *QObject)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::registerTimer4", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectRegisterTimer4(timerId int, interval int, timerType Qt__TimerType, object QObject_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::registerTimer4")
	}
}

func (ptr *QAbstractEventDispatcher) RegisterTimer4(timerId int, interval int, timerType Qt__TimerType, object QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_RegisterTimer4(ptr.Pointer(), C.int(int32(timerId)), C.int(int32(interval)), C.longlong(timerType), PointerFromQObject(object))
	}
}

//export callbackQAbstractEventDispatcher_RemainingTime
func callbackQAbstractEventDispatcher_RemainingTime(ptr unsafe.Pointer, timerId C.int) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::remainingTime"); signal != nil {
		return C.int(int32(signal.(func(int) int)(int(int32(timerId)))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractEventDispatcher) ConnectRemainingTime(f func(timerId int) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::remainingTime", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectRemainingTime(timerId int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::remainingTime")
	}
}

func (ptr *QAbstractEventDispatcher) RemainingTime(timerId int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractEventDispatcher_RemainingTime(ptr.Pointer(), C.int(int32(timerId)))))
	}
	return 0
}

func (ptr *QAbstractEventDispatcher) RemoveNativeEventFilter(filter QAbstractNativeEventFilter_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_RemoveNativeEventFilter(ptr.Pointer(), PointerFromQAbstractNativeEventFilter(filter))
	}
}

//export callbackQAbstractEventDispatcher_UnregisterEventNotifier
func callbackQAbstractEventDispatcher_UnregisterEventNotifier(ptr unsafe.Pointer, notifier unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::unregisterEventNotifier"); signal != nil {
		signal.(func(*QWinEventNotifier))(NewQWinEventNotifierFromPointer(notifier))
	}

}

func (ptr *QAbstractEventDispatcher) ConnectUnregisterEventNotifier(f func(notifier *QWinEventNotifier)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterEventNotifier", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectUnregisterEventNotifier(notifier QWinEventNotifier_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterEventNotifier")
	}
}

func (ptr *QAbstractEventDispatcher) UnregisterEventNotifier(notifier QWinEventNotifier_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_UnregisterEventNotifier(ptr.Pointer(), PointerFromQWinEventNotifier(notifier))
	}
}

//export callbackQAbstractEventDispatcher_UnregisterSocketNotifier
func callbackQAbstractEventDispatcher_UnregisterSocketNotifier(ptr unsafe.Pointer, notifier unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::unregisterSocketNotifier"); signal != nil {
		signal.(func(*QSocketNotifier))(NewQSocketNotifierFromPointer(notifier))
	}

}

func (ptr *QAbstractEventDispatcher) ConnectUnregisterSocketNotifier(f func(notifier *QSocketNotifier)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterSocketNotifier", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectUnregisterSocketNotifier(notifier QSocketNotifier_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterSocketNotifier")
	}
}

func (ptr *QAbstractEventDispatcher) UnregisterSocketNotifier(notifier QSocketNotifier_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_UnregisterSocketNotifier(ptr.Pointer(), PointerFromQSocketNotifier(notifier))
	}
}

//export callbackQAbstractEventDispatcher_UnregisterTimer
func callbackQAbstractEventDispatcher_UnregisterTimer(ptr unsafe.Pointer, timerId C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::unregisterTimer"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(timerId))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAbstractEventDispatcher) ConnectUnregisterTimer(f func(timerId int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterTimer", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectUnregisterTimer(timerId int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterTimer")
	}
}

func (ptr *QAbstractEventDispatcher) UnregisterTimer(timerId int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_UnregisterTimer(ptr.Pointer(), C.int(int32(timerId))) != 0
	}
	return false
}

//export callbackQAbstractEventDispatcher_UnregisterTimers
func callbackQAbstractEventDispatcher_UnregisterTimers(ptr unsafe.Pointer, object unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::unregisterTimers"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject) bool)(NewQObjectFromPointer(object)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAbstractEventDispatcher) ConnectUnregisterTimers(f func(object *QObject) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterTimers", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectUnregisterTimers(object QObject_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::unregisterTimers")
	}
}

func (ptr *QAbstractEventDispatcher) UnregisterTimers(object QObject_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_UnregisterTimers(ptr.Pointer(), PointerFromQObject(object)) != 0
	}
	return false
}

//export callbackQAbstractEventDispatcher_WakeUp
func callbackQAbstractEventDispatcher_WakeUp(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::wakeUp"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractEventDispatcher) ConnectWakeUp(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::wakeUp", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectWakeUp() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::wakeUp")
	}
}

func (ptr *QAbstractEventDispatcher) WakeUp() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_WakeUp(ptr.Pointer())
	}
}

func (ptr *QAbstractEventDispatcher) DestroyQAbstractEventDispatcher() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_DestroyQAbstractEventDispatcher(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractEventDispatcher_TimerEvent
func callbackQAbstractEventDispatcher_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractEventDispatcherFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractEventDispatcher) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::timerEvent", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::timerEvent")
	}
}

func (ptr *QAbstractEventDispatcher) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractEventDispatcher) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractEventDispatcher_ChildEvent
func callbackQAbstractEventDispatcher_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractEventDispatcherFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractEventDispatcher) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::childEvent", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::childEvent")
	}
}

func (ptr *QAbstractEventDispatcher) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractEventDispatcher) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractEventDispatcher_ConnectNotify
func callbackQAbstractEventDispatcher_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractEventDispatcherFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractEventDispatcher) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::connectNotify", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::connectNotify")
	}
}

func (ptr *QAbstractEventDispatcher) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractEventDispatcher) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractEventDispatcher_CustomEvent
func callbackQAbstractEventDispatcher_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractEventDispatcherFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractEventDispatcher) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::customEvent", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::customEvent")
	}
}

func (ptr *QAbstractEventDispatcher) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractEventDispatcher) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractEventDispatcher_DeleteLater
func callbackQAbstractEventDispatcher_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractEventDispatcherFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractEventDispatcher) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::deleteLater", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::deleteLater")
	}
}

func (ptr *QAbstractEventDispatcher) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractEventDispatcher) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractEventDispatcher_DisconnectNotify
func callbackQAbstractEventDispatcher_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractEventDispatcherFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractEventDispatcher) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::disconnectNotify", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::disconnectNotify")
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractEventDispatcher_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractEventDispatcher_Event
func callbackQAbstractEventDispatcher_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractEventDispatcherFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QAbstractEventDispatcher) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::event", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::event")
	}
}

func (ptr *QAbstractEventDispatcher) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractEventDispatcher) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractEventDispatcher_EventFilter
func callbackQAbstractEventDispatcher_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractEventDispatcherFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractEventDispatcher) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::eventFilter", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::eventFilter")
	}
}

func (ptr *QAbstractEventDispatcher) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractEventDispatcher) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractEventDispatcher_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractEventDispatcher_MetaObject
func callbackQAbstractEventDispatcher_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractEventDispatcher::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractEventDispatcherFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractEventDispatcher) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::metaObject", f)
	}
}

func (ptr *QAbstractEventDispatcher) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractEventDispatcher::metaObject")
	}
}

func (ptr *QAbstractEventDispatcher) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractEventDispatcher_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractEventDispatcher) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractEventDispatcher_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QAbstractItemModel::LayoutChangeHint
type QAbstractItemModel__LayoutChangeHint int64

const (
	QAbstractItemModel__NoLayoutChangeHint = QAbstractItemModel__LayoutChangeHint(0)
	QAbstractItemModel__VerticalSortHint   = QAbstractItemModel__LayoutChangeHint(1)
	QAbstractItemModel__HorizontalSortHint = QAbstractItemModel__LayoutChangeHint(2)
)

type QAbstractItemModel struct {
	QObject
}

type QAbstractItemModel_ITF interface {
	QObject_ITF
	QAbstractItemModel_PTR() *QAbstractItemModel
}

func (p *QAbstractItemModel) QAbstractItemModel_PTR() *QAbstractItemModel {
	return p
}

func (p *QAbstractItemModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractItemModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractItemModel(ptr QAbstractItemModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractItemModel_PTR().Pointer()
	}
	return nil
}

func NewQAbstractItemModelFromPointer(ptr unsafe.Pointer) *QAbstractItemModel {
	var n = new(QAbstractItemModel)
	n.SetPointer(ptr)
	return n
}

//export callbackQAbstractItemModel_Sibling
func callbackQAbstractItemModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::sibling"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQAbstractItemModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractItemModel) ConnectSibling(f func(row int, column int, index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::sibling", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSibling() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::sibling")
	}
}

func (ptr *QAbstractItemModel) Sibling(row int, column int, index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) SiblingDefault(row int, column int, index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func NewQAbstractItemModel(parent QObject_ITF) *QAbstractItemModel {
	var tmpValue = NewQAbstractItemModelFromPointer(C.QAbstractItemModel_NewQAbstractItemModel(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAbstractItemModel) BeginInsertColumns(parent QModelIndex_ITF, first int, last int) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_BeginInsertColumns(ptr.Pointer(), PointerFromQModelIndex(parent), C.int(int32(first)), C.int(int32(last)))
	}
}

func (ptr *QAbstractItemModel) BeginInsertRows(parent QModelIndex_ITF, first int, last int) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_BeginInsertRows(ptr.Pointer(), PointerFromQModelIndex(parent), C.int(int32(first)), C.int(int32(last)))
	}
}

func (ptr *QAbstractItemModel) BeginMoveColumns(sourceParent QModelIndex_ITF, sourceFirst int, sourceLast int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_BeginMoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceFirst)), C.int(int32(sourceLast)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) BeginMoveRows(sourceParent QModelIndex_ITF, sourceFirst int, sourceLast int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_BeginMoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceFirst)), C.int(int32(sourceLast)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) BeginRemoveColumns(parent QModelIndex_ITF, first int, last int) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_BeginRemoveColumns(ptr.Pointer(), PointerFromQModelIndex(parent), C.int(int32(first)), C.int(int32(last)))
	}
}

func (ptr *QAbstractItemModel) BeginRemoveRows(parent QModelIndex_ITF, first int, last int) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_BeginRemoveRows(ptr.Pointer(), PointerFromQModelIndex(parent), C.int(int32(first)), C.int(int32(last)))
	}
}

func (ptr *QAbstractItemModel) BeginResetModel() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_BeginResetModel(ptr.Pointer())
	}
}

//export callbackQAbstractItemModel_Buddy
func callbackQAbstractItemModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::buddy"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQAbstractItemModelFromPointer(ptr).BuddyDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractItemModel) ConnectBuddy(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::buddy", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::buddy")
	}
}

func (ptr *QAbstractItemModel) Buddy(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_Buddy(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) BuddyDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_BuddyDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractItemModel_CanDropMimeData
func callbackQAbstractItemModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).CanDropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectCanDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::canDropMimeData", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::canDropMimeData")
	}
}

func (ptr *QAbstractItemModel) CanDropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_CanDropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) CanDropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_CanDropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_CanFetchMore
func callbackQAbstractItemModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).CanFetchMoreDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectCanFetchMore(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::canFetchMore", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::canFetchMore")
	}
}

func (ptr *QAbstractItemModel) CanFetchMore(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_CanFetchMore(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) CanFetchMoreDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_CanFetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) ChangePersistentIndex(from QModelIndex_ITF, to QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ChangePersistentIndex(ptr.Pointer(), PointerFromQModelIndex(from), PointerFromQModelIndex(to))
	}
}

//export callbackQAbstractItemModel_ColumnCount
func callbackQAbstractItemModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::columnCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractItemModel) ConnectColumnCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnCount", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectColumnCount(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnCount")
	}
}

func (ptr *QAbstractItemModel) ColumnCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractItemModel_ColumnCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractItemModel_ColumnsAboutToBeInserted
func callbackQAbstractItemModel_ColumnsAboutToBeInserted(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::columnsAboutToBeInserted"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectColumnsAboutToBeInserted(f func(parent *QModelIndex, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectColumnsAboutToBeInserted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsAboutToBeInserted", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectColumnsAboutToBeInserted() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectColumnsAboutToBeInserted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsAboutToBeInserted")
	}
}

//export callbackQAbstractItemModel_ColumnsAboutToBeMoved
func callbackQAbstractItemModel_ColumnsAboutToBeMoved(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceStart C.int, sourceEnd C.int, destinationParent unsafe.Pointer, destinationColumn C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::columnsAboutToBeMoved"); signal != nil {
		signal.(func(*QModelIndex, int, int, *QModelIndex, int))(NewQModelIndexFromPointer(sourceParent), int(int32(sourceStart)), int(int32(sourceEnd)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationColumn)))
	}

}

func (ptr *QAbstractItemModel) ConnectColumnsAboutToBeMoved(f func(sourceParent *QModelIndex, sourceStart int, sourceEnd int, destinationParent *QModelIndex, destinationColumn int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectColumnsAboutToBeMoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsAboutToBeMoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectColumnsAboutToBeMoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectColumnsAboutToBeMoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsAboutToBeMoved")
	}
}

//export callbackQAbstractItemModel_ColumnsAboutToBeRemoved
func callbackQAbstractItemModel_ColumnsAboutToBeRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::columnsAboutToBeRemoved"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectColumnsAboutToBeRemoved(f func(parent *QModelIndex, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectColumnsAboutToBeRemoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsAboutToBeRemoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectColumnsAboutToBeRemoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectColumnsAboutToBeRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsAboutToBeRemoved")
	}
}

//export callbackQAbstractItemModel_ColumnsInserted
func callbackQAbstractItemModel_ColumnsInserted(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::columnsInserted"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectColumnsInserted(f func(parent *QModelIndex, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectColumnsInserted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsInserted", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectColumnsInserted() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectColumnsInserted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsInserted")
	}
}

//export callbackQAbstractItemModel_ColumnsMoved
func callbackQAbstractItemModel_ColumnsMoved(ptr unsafe.Pointer, parent unsafe.Pointer, start C.int, end C.int, destination unsafe.Pointer, column C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::columnsMoved"); signal != nil {
		signal.(func(*QModelIndex, int, int, *QModelIndex, int))(NewQModelIndexFromPointer(parent), int(int32(start)), int(int32(end)), NewQModelIndexFromPointer(destination), int(int32(column)))
	}

}

func (ptr *QAbstractItemModel) ConnectColumnsMoved(f func(parent *QModelIndex, start int, end int, destination *QModelIndex, column int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectColumnsMoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsMoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectColumnsMoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectColumnsMoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsMoved")
	}
}

//export callbackQAbstractItemModel_ColumnsRemoved
func callbackQAbstractItemModel_ColumnsRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::columnsRemoved"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectColumnsRemoved(f func(parent *QModelIndex, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectColumnsRemoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsRemoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectColumnsRemoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectColumnsRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::columnsRemoved")
	}
}

func (ptr *QAbstractItemModel) CreateIndex2(row int, column int, id uintptr) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_CreateIndex2(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), C.uintptr_t(id)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) CreateIndex(row int, column int, p unsafe.Pointer) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_CreateIndex(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), p))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractItemModel_Data
func callbackQAbstractItemModel_Data(ptr unsafe.Pointer, index unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::data"); signal != nil {
		return PointerFromQVariant(signal.(func(*QModelIndex, int) *QVariant)(NewQModelIndexFromPointer(index), int(int32(role))))
	}

	return PointerFromQVariant(nil)
}

func (ptr *QAbstractItemModel) ConnectData(f func(index *QModelIndex, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::data", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectData(index QModelIndex_ITF, role int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::data")
	}
}

func (ptr *QAbstractItemModel) Data(index QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractItemModel_Data(ptr.Pointer(), PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractItemModel_DropMimeData
func callbackQAbstractItemModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).DropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::dropMimeData", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::dropMimeData")
	}
}

func (ptr *QAbstractItemModel) DropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_DropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) DropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_DropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) EndInsertColumns() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_EndInsertColumns(ptr.Pointer())
	}
}

func (ptr *QAbstractItemModel) EndInsertRows() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_EndInsertRows(ptr.Pointer())
	}
}

func (ptr *QAbstractItemModel) EndMoveColumns() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_EndMoveColumns(ptr.Pointer())
	}
}

func (ptr *QAbstractItemModel) EndMoveRows() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_EndMoveRows(ptr.Pointer())
	}
}

func (ptr *QAbstractItemModel) EndRemoveColumns() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_EndRemoveColumns(ptr.Pointer())
	}
}

func (ptr *QAbstractItemModel) EndRemoveRows() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_EndRemoveRows(ptr.Pointer())
	}
}

func (ptr *QAbstractItemModel) EndResetModel() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_EndResetModel(ptr.Pointer())
	}
}

//export callbackQAbstractItemModel_FetchMore
func callbackQAbstractItemModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::fetchMore"); signal != nil {
		signal.(func(*QModelIndex))(NewQModelIndexFromPointer(parent))
	} else {
		NewQAbstractItemModelFromPointer(ptr).FetchMoreDefault(NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QAbstractItemModel) ConnectFetchMore(f func(parent *QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::fetchMore", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::fetchMore")
	}
}

func (ptr *QAbstractItemModel) FetchMore(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_FetchMore(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

func (ptr *QAbstractItemModel) FetchMoreDefault(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_FetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

//export callbackQAbstractItemModel_Flags
func callbackQAbstractItemModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::flags"); signal != nil {
		return C.longlong(signal.(func(*QModelIndex) Qt__ItemFlag)(NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQAbstractItemModelFromPointer(ptr).FlagsDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractItemModel) ConnectFlags(f func(index *QModelIndex) Qt__ItemFlag) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::flags", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectFlags() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::flags")
	}
}

func (ptr *QAbstractItemModel) Flags(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractItemModel_Flags(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QAbstractItemModel) FlagsDefault(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractItemModel_FlagsDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQAbstractItemModel_HasChildren
func callbackQAbstractItemModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).HasChildrenDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectHasChildren(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::hasChildren", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectHasChildren() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::hasChildren")
	}
}

func (ptr *QAbstractItemModel) HasChildren(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_HasChildren(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) HasChildrenDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_HasChildrenDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) HasIndex(row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_HasIndex(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_HeaderData
func callbackQAbstractItemModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::headerData"); signal != nil {
		return PointerFromQVariant(signal.(func(int, Qt__Orientation, int) *QVariant)(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
	}

	return PointerFromQVariant(NewQAbstractItemModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QAbstractItemModel) ConnectHeaderData(f func(section int, orientation Qt__Orientation, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::headerData", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::headerData")
	}
}

func (ptr *QAbstractItemModel) HeaderData(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractItemModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) HeaderDataDefault(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractItemModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractItemModel_HeaderDataChanged
func callbackQAbstractItemModel_HeaderDataChanged(ptr unsafe.Pointer, orientation C.longlong, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::headerDataChanged"); signal != nil {
		signal.(func(Qt__Orientation, int, int))(Qt__Orientation(orientation), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectHeaderDataChanged(f func(orientation Qt__Orientation, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectHeaderDataChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::headerDataChanged", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectHeaderDataChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectHeaderDataChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::headerDataChanged")
	}
}

func (ptr *QAbstractItemModel) HeaderDataChanged(orientation Qt__Orientation, first int, last int) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_HeaderDataChanged(ptr.Pointer(), C.longlong(orientation), C.int(int32(first)), C.int(int32(last)))
	}
}

//export callbackQAbstractItemModel_Index
func callbackQAbstractItemModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::index"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
	}

	return PointerFromQModelIndex(nil)
}

func (ptr *QAbstractItemModel) ConnectIndex(f func(row int, column int, parent *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::index", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectIndex(row int, column int, parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::index")
	}
}

func (ptr *QAbstractItemModel) Index(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) InsertColumn(column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_InsertColumn(ptr.Pointer(), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_InsertColumns
func callbackQAbstractItemModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectInsertColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::insertColumns", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectInsertColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::insertColumns")
	}
}

func (ptr *QAbstractItemModel) InsertColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) InsertColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) InsertRow(row int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_InsertRow(ptr.Pointer(), C.int(int32(row)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_InsertRows
func callbackQAbstractItemModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectInsertRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::insertRows", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectInsertRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::insertRows")
	}
}

func (ptr *QAbstractItemModel) InsertRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) InsertRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_MimeTypes
func callbackQAbstractItemModel_MimeTypes(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQAbstractItemModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QAbstractItemModel) ConnectMimeTypes(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::mimeTypes", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectMimeTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::mimeTypes")
	}
}

func (ptr *QAbstractItemModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractItemModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QAbstractItemModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractItemModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQAbstractItemModel_ModelAboutToBeReset
func callbackQAbstractItemModel_ModelAboutToBeReset(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::modelAboutToBeReset"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractItemModel) ConnectModelAboutToBeReset(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectModelAboutToBeReset(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::modelAboutToBeReset", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectModelAboutToBeReset() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectModelAboutToBeReset(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::modelAboutToBeReset")
	}
}

//export callbackQAbstractItemModel_ModelReset
func callbackQAbstractItemModel_ModelReset(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::modelReset"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractItemModel) ConnectModelReset(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectModelReset(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::modelReset", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectModelReset() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectModelReset(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::modelReset")
	}
}

func (ptr *QAbstractItemModel) MoveColumn(sourceParent QModelIndex_ITF, sourceColumn int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_MoveColumn(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractItemModel_MoveColumns
func callbackQAbstractItemModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).MoveColumnsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractItemModel) ConnectMoveColumns(f func(sourceParent *QModelIndex, sourceColumn int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::moveColumns", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::moveColumns")
	}
}

func (ptr *QAbstractItemModel) MoveColumns(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_MoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) MoveColumnsDefault(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_MoveColumnsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) MoveRow(sourceParent QModelIndex_ITF, sourceRow int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_MoveRow(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractItemModel_MoveRows
func callbackQAbstractItemModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).MoveRowsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractItemModel) ConnectMoveRows(f func(sourceParent *QModelIndex, sourceRow int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::moveRows", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::moveRows")
	}
}

func (ptr *QAbstractItemModel) MoveRows(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_MoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) MoveRowsDefault(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_MoveRowsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractItemModel_Parent
func callbackQAbstractItemModel_Parent(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::parent"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(nil)
}

func (ptr *QAbstractItemModel) ConnectParent(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::parent", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectParent(index QModelIndex_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::parent")
	}
}

func (ptr *QAbstractItemModel) Parent(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_Parent(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) PersistentIndexList() []*QModelIndex {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QModelIndex {
			var out = make([]*QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAbstractItemModelFromPointer(l.data).persistentIndexList_atList(i)
			}
			return out
		}(C.QAbstractItemModel_PersistentIndexList(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractItemModel) RemoveColumn(column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_RemoveColumn(ptr.Pointer(), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_RemoveColumns
func callbackQAbstractItemModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectRemoveColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::removeColumns", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRemoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::removeColumns")
	}
}

func (ptr *QAbstractItemModel) RemoveColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) RemoveColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) RemoveRow(row int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_RemoveRow(ptr.Pointer(), C.int(int32(row)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_RemoveRows
func callbackQAbstractItemModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractItemModel) ConnectRemoveRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::removeRows", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRemoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::removeRows")
	}
}

func (ptr *QAbstractItemModel) RemoveRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) RemoveRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_ResetInternalData
func callbackQAbstractItemModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::resetInternalData"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractItemModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::resetInternalData", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::resetInternalData")
	}
}

func (ptr *QAbstractItemModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ResetInternalData(ptr.Pointer())
	}
}

//export callbackQAbstractItemModel_Revert
func callbackQAbstractItemModel_Revert(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractItemModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QAbstractItemModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::revert", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::revert")
	}
}

func (ptr *QAbstractItemModel) Revert() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_Revert(ptr.Pointer())
	}
}

func (ptr *QAbstractItemModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQAbstractItemModel_RowCount
func callbackQAbstractItemModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::rowCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractItemModel) ConnectRowCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowCount", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRowCount(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowCount")
	}
}

func (ptr *QAbstractItemModel) RowCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractItemModel_RowCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractItemModel_RowsAboutToBeInserted
func callbackQAbstractItemModel_RowsAboutToBeInserted(ptr unsafe.Pointer, parent unsafe.Pointer, start C.int, end C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::rowsAboutToBeInserted"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(start)), int(int32(end)))
	}

}

func (ptr *QAbstractItemModel) ConnectRowsAboutToBeInserted(f func(parent *QModelIndex, start int, end int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectRowsAboutToBeInserted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsAboutToBeInserted", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRowsAboutToBeInserted() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectRowsAboutToBeInserted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsAboutToBeInserted")
	}
}

//export callbackQAbstractItemModel_RowsAboutToBeMoved
func callbackQAbstractItemModel_RowsAboutToBeMoved(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceStart C.int, sourceEnd C.int, destinationParent unsafe.Pointer, destinationRow C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::rowsAboutToBeMoved"); signal != nil {
		signal.(func(*QModelIndex, int, int, *QModelIndex, int))(NewQModelIndexFromPointer(sourceParent), int(int32(sourceStart)), int(int32(sourceEnd)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationRow)))
	}

}

func (ptr *QAbstractItemModel) ConnectRowsAboutToBeMoved(f func(sourceParent *QModelIndex, sourceStart int, sourceEnd int, destinationParent *QModelIndex, destinationRow int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectRowsAboutToBeMoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsAboutToBeMoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRowsAboutToBeMoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectRowsAboutToBeMoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsAboutToBeMoved")
	}
}

//export callbackQAbstractItemModel_RowsAboutToBeRemoved
func callbackQAbstractItemModel_RowsAboutToBeRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::rowsAboutToBeRemoved"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectRowsAboutToBeRemoved(f func(parent *QModelIndex, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectRowsAboutToBeRemoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsAboutToBeRemoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRowsAboutToBeRemoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectRowsAboutToBeRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsAboutToBeRemoved")
	}
}

//export callbackQAbstractItemModel_RowsInserted
func callbackQAbstractItemModel_RowsInserted(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::rowsInserted"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectRowsInserted(f func(parent *QModelIndex, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectRowsInserted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsInserted", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRowsInserted() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectRowsInserted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsInserted")
	}
}

//export callbackQAbstractItemModel_RowsMoved
func callbackQAbstractItemModel_RowsMoved(ptr unsafe.Pointer, parent unsafe.Pointer, start C.int, end C.int, destination unsafe.Pointer, row C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::rowsMoved"); signal != nil {
		signal.(func(*QModelIndex, int, int, *QModelIndex, int))(NewQModelIndexFromPointer(parent), int(int32(start)), int(int32(end)), NewQModelIndexFromPointer(destination), int(int32(row)))
	}

}

func (ptr *QAbstractItemModel) ConnectRowsMoved(f func(parent *QModelIndex, start int, end int, destination *QModelIndex, row int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectRowsMoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsMoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRowsMoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectRowsMoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsMoved")
	}
}

//export callbackQAbstractItemModel_RowsRemoved
func callbackQAbstractItemModel_RowsRemoved(ptr unsafe.Pointer, parent unsafe.Pointer, first C.int, last C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::rowsRemoved"); signal != nil {
		signal.(func(*QModelIndex, int, int))(NewQModelIndexFromPointer(parent), int(int32(first)), int(int32(last)))
	}

}

func (ptr *QAbstractItemModel) ConnectRowsRemoved(f func(parent *QModelIndex, first int, last int)) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectRowsRemoved(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsRemoved", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectRowsRemoved() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectRowsRemoved(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::rowsRemoved")
	}
}

//export callbackQAbstractItemModel_SetData
func callbackQAbstractItemModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QVariant, int) bool)(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).SetDataDefault(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractItemModel) ConnectSetData(f func(index *QModelIndex, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::setData", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::setData")
	}
}

func (ptr *QAbstractItemModel) SetData(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_SetData(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) SetDataDefault(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_SetDataDefault(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractItemModel_SetHeaderData
func callbackQAbstractItemModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, Qt__Orientation, *QVariant, int) bool)(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractItemModel) ConnectSetHeaderData(f func(section int, orientation Qt__Orientation, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::setHeaderData", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSetHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::setHeaderData")
	}
}

func (ptr *QAbstractItemModel) SetHeaderData(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) SetHeaderDataDefault(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractItemModel_Sort
func callbackQAbstractItemModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::sort"); signal != nil {
		signal.(func(int, Qt__SortOrder))(int(int32(column)), Qt__SortOrder(order))
	} else {
		NewQAbstractItemModelFromPointer(ptr).SortDefault(int(int32(column)), Qt__SortOrder(order))
	}
}

func (ptr *QAbstractItemModel) ConnectSort(f func(column int, order Qt__SortOrder)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::sort", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSort() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::sort")
	}
}

func (ptr *QAbstractItemModel) Sort(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QAbstractItemModel) SortDefault(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

//export callbackQAbstractItemModel_Span
func callbackQAbstractItemModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::span"); signal != nil {
		return PointerFromQSize(signal.(func(*QModelIndex) *QSize)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQSize(NewQAbstractItemModelFromPointer(ptr).SpanDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractItemModel) ConnectSpan(f func(index *QModelIndex) *QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::span", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::span")
	}
}

func (ptr *QAbstractItemModel) Span(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractItemModel_Span(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) SpanDefault(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractItemModel_SpanDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractItemModel_Submit
func callbackQAbstractItemModel_Submit(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QAbstractItemModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::submit", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::submit")
	}
}

func (ptr *QAbstractItemModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAbstractItemModel_SupportedDragActions
func callbackQAbstractItemModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractItemModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QAbstractItemModel) ConnectSupportedDragActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::supportedDragActions", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::supportedDragActions")
	}
}

func (ptr *QAbstractItemModel) SupportedDragActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractItemModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractItemModel) SupportedDragActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractItemModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractItemModel_SupportedDropActions
func callbackQAbstractItemModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractItemModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QAbstractItemModel) ConnectSupportedDropActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::supportedDropActions", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectSupportedDropActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::supportedDropActions")
	}
}

func (ptr *QAbstractItemModel) SupportedDropActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractItemModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractItemModel) SupportedDropActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractItemModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractItemModel_DestroyQAbstractItemModel
func callbackQAbstractItemModel_DestroyQAbstractItemModel(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::~QAbstractItemModel"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractItemModelFromPointer(ptr).DestroyQAbstractItemModelDefault()
	}
}

func (ptr *QAbstractItemModel) ConnectDestroyQAbstractItemModel(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::~QAbstractItemModel", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectDestroyQAbstractItemModel() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::~QAbstractItemModel")
	}
}

func (ptr *QAbstractItemModel) DestroyQAbstractItemModel() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DestroyQAbstractItemModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractItemModel) DestroyQAbstractItemModelDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DestroyQAbstractItemModelDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractItemModel) match_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_match_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractItemModel) persistentIndexList_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractItemModel_persistentIndexList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractItemModel_TimerEvent
func callbackQAbstractItemModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractItemModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractItemModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::timerEvent", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::timerEvent")
	}
}

func (ptr *QAbstractItemModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractItemModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractItemModel_ChildEvent
func callbackQAbstractItemModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractItemModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractItemModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::childEvent", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::childEvent")
	}
}

func (ptr *QAbstractItemModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractItemModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractItemModel_ConnectNotify
func callbackQAbstractItemModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractItemModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractItemModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::connectNotify", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::connectNotify")
	}
}

func (ptr *QAbstractItemModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractItemModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractItemModel_CustomEvent
func callbackQAbstractItemModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractItemModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractItemModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::customEvent", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::customEvent")
	}
}

func (ptr *QAbstractItemModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractItemModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractItemModel_DeleteLater
func callbackQAbstractItemModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractItemModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractItemModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::deleteLater", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::deleteLater")
	}
}

func (ptr *QAbstractItemModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractItemModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractItemModel_DisconnectNotify
func callbackQAbstractItemModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractItemModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractItemModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::disconnectNotify", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::disconnectNotify")
	}
}

func (ptr *QAbstractItemModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractItemModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractItemModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractItemModel_Event
func callbackQAbstractItemModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QAbstractItemModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::event", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::event")
	}
}

func (ptr *QAbstractItemModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_EventFilter
func callbackQAbstractItemModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractItemModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractItemModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::eventFilter", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::eventFilter")
	}
}

func (ptr *QAbstractItemModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractItemModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractItemModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractItemModel_MetaObject
func callbackQAbstractItemModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractItemModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractItemModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractItemModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::metaObject", f)
	}
}

func (ptr *QAbstractItemModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractItemModel::metaObject")
	}
}

func (ptr *QAbstractItemModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractItemModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractItemModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractItemModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAbstractListModel struct {
	QAbstractItemModel
}

type QAbstractListModel_ITF interface {
	QAbstractItemModel_ITF
	QAbstractListModel_PTR() *QAbstractListModel
}

func (p *QAbstractListModel) QAbstractListModel_PTR() *QAbstractListModel {
	return p
}

func (p *QAbstractListModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractItemModel_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractListModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractItemModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractListModel(ptr QAbstractListModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractListModel_PTR().Pointer()
	}
	return nil
}

func NewQAbstractListModelFromPointer(ptr unsafe.Pointer) *QAbstractListModel {
	var n = new(QAbstractListModel)
	n.SetPointer(ptr)
	return n
}

//export callbackQAbstractListModel_Index
func callbackQAbstractListModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::index"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
	}

	return PointerFromQModelIndex(NewQAbstractListModelFromPointer(ptr).IndexDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
}

func (ptr *QAbstractListModel) ConnectIndex(f func(row int, column int, parent *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::index", f)
	}
}

func (ptr *QAbstractListModel) DisconnectIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::index")
	}
}

func (ptr *QAbstractListModel) Index(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractListModel) IndexDefault(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_IndexDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func NewQAbstractListModel(parent QObject_ITF) *QAbstractListModel {
	var tmpValue = NewQAbstractListModelFromPointer(C.QAbstractListModel_NewQAbstractListModel(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractListModel_DropMimeData
func callbackQAbstractListModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).DropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::dropMimeData", f)
	}
}

func (ptr *QAbstractListModel) DisconnectDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::dropMimeData")
	}
}

func (ptr *QAbstractListModel) DropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_DropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) DropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_DropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_Flags
func callbackQAbstractListModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::flags"); signal != nil {
		return C.longlong(signal.(func(*QModelIndex) Qt__ItemFlag)(NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQAbstractListModelFromPointer(ptr).FlagsDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractListModel) ConnectFlags(f func(index *QModelIndex) Qt__ItemFlag) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::flags", f)
	}
}

func (ptr *QAbstractListModel) DisconnectFlags() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::flags")
	}
}

func (ptr *QAbstractListModel) Flags(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractListModel_Flags(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QAbstractListModel) FlagsDefault(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractListModel_FlagsDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQAbstractListModel_Sibling
func callbackQAbstractListModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::sibling"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
	}

	return PointerFromQModelIndex(NewQAbstractListModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
}

func (ptr *QAbstractListModel) ConnectSibling(f func(row int, column int, idx *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::sibling", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSibling() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::sibling")
	}
}

func (ptr *QAbstractListModel) Sibling(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractListModel) SiblingDefault(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractListModel) DestroyQAbstractListModel() {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_DestroyQAbstractListModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractListModel_Buddy
func callbackQAbstractListModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::buddy"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQAbstractListModelFromPointer(ptr).BuddyDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractListModel) ConnectBuddy(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::buddy", f)
	}
}

func (ptr *QAbstractListModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::buddy")
	}
}

func (ptr *QAbstractListModel) Buddy(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_Buddy(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractListModel) BuddyDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_BuddyDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractListModel_CanDropMimeData
func callbackQAbstractListModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).CanDropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectCanDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::canDropMimeData", f)
	}
}

func (ptr *QAbstractListModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::canDropMimeData")
	}
}

func (ptr *QAbstractListModel) CanDropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_CanDropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) CanDropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_CanDropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_CanFetchMore
func callbackQAbstractListModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).CanFetchMoreDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectCanFetchMore(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::canFetchMore", f)
	}
}

func (ptr *QAbstractListModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::canFetchMore")
	}
}

func (ptr *QAbstractListModel) CanFetchMore(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_CanFetchMore(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) CanFetchMoreDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_CanFetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_ColumnCount
func callbackQAbstractListModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::columnCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQAbstractListModelFromPointer(ptr).ColumnCountDefault(NewQModelIndexFromPointer(parent))))
}

func (ptr *QAbstractListModel) ConnectColumnCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::columnCount", f)
	}
}

func (ptr *QAbstractListModel) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::columnCount")
	}
}

func (ptr *QAbstractListModel) ColumnCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractListModel_ColumnCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QAbstractListModel) ColumnCountDefault(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractListModel_ColumnCountDefault(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractListModel_Data
func callbackQAbstractListModel_Data(ptr unsafe.Pointer, index unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::data"); signal != nil {
		return PointerFromQVariant(signal.(func(*QModelIndex, int) *QVariant)(NewQModelIndexFromPointer(index), int(int32(role))))
	}

	return PointerFromQVariant(nil)
}

func (ptr *QAbstractListModel) ConnectData(f func(index *QModelIndex, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::data", f)
	}
}

func (ptr *QAbstractListModel) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::data")
	}
}

func (ptr *QAbstractListModel) Data(index QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractListModel_Data(ptr.Pointer(), PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractListModel_FetchMore
func callbackQAbstractListModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::fetchMore"); signal != nil {
		signal.(func(*QModelIndex))(NewQModelIndexFromPointer(parent))
	} else {
		NewQAbstractListModelFromPointer(ptr).FetchMoreDefault(NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QAbstractListModel) ConnectFetchMore(f func(parent *QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::fetchMore", f)
	}
}

func (ptr *QAbstractListModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::fetchMore")
	}
}

func (ptr *QAbstractListModel) FetchMore(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_FetchMore(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

func (ptr *QAbstractListModel) FetchMoreDefault(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_FetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

//export callbackQAbstractListModel_HasChildren
func callbackQAbstractListModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).HasChildrenDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectHasChildren(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::hasChildren", f)
	}
}

func (ptr *QAbstractListModel) DisconnectHasChildren() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::hasChildren")
	}
}

func (ptr *QAbstractListModel) HasChildren(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_HasChildren(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) HasChildrenDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_HasChildrenDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_HeaderData
func callbackQAbstractListModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::headerData"); signal != nil {
		return PointerFromQVariant(signal.(func(int, Qt__Orientation, int) *QVariant)(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
	}

	return PointerFromQVariant(NewQAbstractListModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QAbstractListModel) ConnectHeaderData(f func(section int, orientation Qt__Orientation, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::headerData", f)
	}
}

func (ptr *QAbstractListModel) DisconnectHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::headerData")
	}
}

func (ptr *QAbstractListModel) HeaderData(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractListModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractListModel) HeaderDataDefault(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractListModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractListModel_InsertColumns
func callbackQAbstractListModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectInsertColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::insertColumns", f)
	}
}

func (ptr *QAbstractListModel) DisconnectInsertColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::insertColumns")
	}
}

func (ptr *QAbstractListModel) InsertColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) InsertColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_InsertRows
func callbackQAbstractListModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectInsertRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::insertRows", f)
	}
}

func (ptr *QAbstractListModel) DisconnectInsertRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::insertRows")
	}
}

func (ptr *QAbstractListModel) InsertRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) InsertRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_MimeTypes
func callbackQAbstractListModel_MimeTypes(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQAbstractListModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QAbstractListModel) ConnectMimeTypes(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::mimeTypes", f)
	}
}

func (ptr *QAbstractListModel) DisconnectMimeTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::mimeTypes")
	}
}

func (ptr *QAbstractListModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractListModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QAbstractListModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractListModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQAbstractListModel_MoveColumns
func callbackQAbstractListModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).MoveColumnsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractListModel) ConnectMoveColumns(f func(sourceParent *QModelIndex, sourceColumn int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::moveColumns", f)
	}
}

func (ptr *QAbstractListModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::moveColumns")
	}
}

func (ptr *QAbstractListModel) MoveColumns(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_MoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractListModel) MoveColumnsDefault(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_MoveColumnsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractListModel_MoveRows
func callbackQAbstractListModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).MoveRowsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractListModel) ConnectMoveRows(f func(sourceParent *QModelIndex, sourceRow int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::moveRows", f)
	}
}

func (ptr *QAbstractListModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::moveRows")
	}
}

func (ptr *QAbstractListModel) MoveRows(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_MoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractListModel) MoveRowsDefault(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_MoveRowsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractListModel_Parent
func callbackQAbstractListModel_Parent(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::parent"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQAbstractListModelFromPointer(ptr).ParentDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractListModel) ConnectParent(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::parent", f)
	}
}

func (ptr *QAbstractListModel) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::parent")
	}
}

func (ptr *QAbstractListModel) Parent(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_Parent(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractListModel) ParentDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractListModel_ParentDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractListModel_RemoveColumns
func callbackQAbstractListModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectRemoveColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::removeColumns", f)
	}
}

func (ptr *QAbstractListModel) DisconnectRemoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::removeColumns")
	}
}

func (ptr *QAbstractListModel) RemoveColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) RemoveColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_RemoveRows
func callbackQAbstractListModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractListModel) ConnectRemoveRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::removeRows", f)
	}
}

func (ptr *QAbstractListModel) DisconnectRemoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::removeRows")
	}
}

func (ptr *QAbstractListModel) RemoveRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) RemoveRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractListModel_ResetInternalData
func callbackQAbstractListModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::resetInternalData"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractListModelFromPointer(ptr).ResetInternalDataDefault()
	}
}

func (ptr *QAbstractListModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::resetInternalData", f)
	}
}

func (ptr *QAbstractListModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::resetInternalData")
	}
}

func (ptr *QAbstractListModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_ResetInternalData(ptr.Pointer())
	}
}

func (ptr *QAbstractListModel) ResetInternalDataDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_ResetInternalDataDefault(ptr.Pointer())
	}
}

//export callbackQAbstractListModel_Revert
func callbackQAbstractListModel_Revert(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractListModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QAbstractListModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::revert", f)
	}
}

func (ptr *QAbstractListModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::revert")
	}
}

func (ptr *QAbstractListModel) Revert() {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_Revert(ptr.Pointer())
	}
}

func (ptr *QAbstractListModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQAbstractListModel_RowCount
func callbackQAbstractListModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::rowCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractListModel) ConnectRowCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::rowCount", f)
	}
}

func (ptr *QAbstractListModel) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::rowCount")
	}
}

func (ptr *QAbstractListModel) RowCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractListModel_RowCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractListModel_SetData
func callbackQAbstractListModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QVariant, int) bool)(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).SetDataDefault(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractListModel) ConnectSetData(f func(index *QModelIndex, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::setData", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::setData")
	}
}

func (ptr *QAbstractListModel) SetData(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_SetData(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractListModel) SetDataDefault(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_SetDataDefault(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractListModel_SetHeaderData
func callbackQAbstractListModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, Qt__Orientation, *QVariant, int) bool)(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractListModel) ConnectSetHeaderData(f func(section int, orientation Qt__Orientation, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::setHeaderData", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSetHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::setHeaderData")
	}
}

func (ptr *QAbstractListModel) SetHeaderData(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractListModel) SetHeaderDataDefault(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractListModel_Sort
func callbackQAbstractListModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::sort"); signal != nil {
		signal.(func(int, Qt__SortOrder))(int(int32(column)), Qt__SortOrder(order))
	} else {
		NewQAbstractListModelFromPointer(ptr).SortDefault(int(int32(column)), Qt__SortOrder(order))
	}
}

func (ptr *QAbstractListModel) ConnectSort(f func(column int, order Qt__SortOrder)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::sort", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSort() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::sort")
	}
}

func (ptr *QAbstractListModel) Sort(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QAbstractListModel) SortDefault(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

//export callbackQAbstractListModel_Span
func callbackQAbstractListModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::span"); signal != nil {
		return PointerFromQSize(signal.(func(*QModelIndex) *QSize)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQSize(NewQAbstractListModelFromPointer(ptr).SpanDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractListModel) ConnectSpan(f func(index *QModelIndex) *QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::span", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::span")
	}
}

func (ptr *QAbstractListModel) Span(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractListModel_Span(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractListModel) SpanDefault(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractListModel_SpanDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractListModel_Submit
func callbackQAbstractListModel_Submit(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QAbstractListModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::submit", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::submit")
	}
}

func (ptr *QAbstractListModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAbstractListModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAbstractListModel_SupportedDragActions
func callbackQAbstractListModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractListModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QAbstractListModel) ConnectSupportedDragActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::supportedDragActions", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::supportedDragActions")
	}
}

func (ptr *QAbstractListModel) SupportedDragActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractListModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractListModel) SupportedDragActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractListModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractListModel_SupportedDropActions
func callbackQAbstractListModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractListModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QAbstractListModel) ConnectSupportedDropActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::supportedDropActions", f)
	}
}

func (ptr *QAbstractListModel) DisconnectSupportedDropActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::supportedDropActions")
	}
}

func (ptr *QAbstractListModel) SupportedDropActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractListModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractListModel) SupportedDropActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractListModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractListModel_TimerEvent
func callbackQAbstractListModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractListModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractListModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::timerEvent", f)
	}
}

func (ptr *QAbstractListModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::timerEvent")
	}
}

func (ptr *QAbstractListModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractListModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractListModel_ChildEvent
func callbackQAbstractListModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractListModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractListModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::childEvent", f)
	}
}

func (ptr *QAbstractListModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::childEvent")
	}
}

func (ptr *QAbstractListModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractListModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractListModel_ConnectNotify
func callbackQAbstractListModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractListModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractListModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::connectNotify", f)
	}
}

func (ptr *QAbstractListModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::connectNotify")
	}
}

func (ptr *QAbstractListModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractListModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractListModel_CustomEvent
func callbackQAbstractListModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractListModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractListModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::customEvent", f)
	}
}

func (ptr *QAbstractListModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::customEvent")
	}
}

func (ptr *QAbstractListModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractListModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractListModel_DeleteLater
func callbackQAbstractListModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractListModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractListModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::deleteLater", f)
	}
}

func (ptr *QAbstractListModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::deleteLater")
	}
}

func (ptr *QAbstractListModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractListModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractListModel_DisconnectNotify
func callbackQAbstractListModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractListModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractListModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::disconnectNotify", f)
	}
}

func (ptr *QAbstractListModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::disconnectNotify")
	}
}

func (ptr *QAbstractListModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractListModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractListModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractListModel_Event
func callbackQAbstractListModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QAbstractListModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::event", f)
	}
}

func (ptr *QAbstractListModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::event")
	}
}

func (ptr *QAbstractListModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractListModel_EventFilter
func callbackQAbstractListModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractListModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractListModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::eventFilter", f)
	}
}

func (ptr *QAbstractListModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::eventFilter")
	}
}

func (ptr *QAbstractListModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractListModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractListModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractListModel_MetaObject
func callbackQAbstractListModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractListModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractListModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractListModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::metaObject", f)
	}
}

func (ptr *QAbstractListModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractListModel::metaObject")
	}
}

func (ptr *QAbstractListModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractListModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractListModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractListModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAbstractNativeEventFilter struct {
	ptr unsafe.Pointer
}

type QAbstractNativeEventFilter_ITF interface {
	QAbstractNativeEventFilter_PTR() *QAbstractNativeEventFilter
}

func (p *QAbstractNativeEventFilter) QAbstractNativeEventFilter_PTR() *QAbstractNativeEventFilter {
	return p
}

func (p *QAbstractNativeEventFilter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAbstractNativeEventFilter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAbstractNativeEventFilter(ptr QAbstractNativeEventFilter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractNativeEventFilter_PTR().Pointer()
	}
	return nil
}

func NewQAbstractNativeEventFilterFromPointer(ptr unsafe.Pointer) *QAbstractNativeEventFilter {
	var n = new(QAbstractNativeEventFilter)
	n.SetPointer(ptr)
	return n
}
func NewQAbstractNativeEventFilter() *QAbstractNativeEventFilter {
	return NewQAbstractNativeEventFilterFromPointer(C.QAbstractNativeEventFilter_NewQAbstractNativeEventFilter())
}

//export callbackQAbstractNativeEventFilter_NativeEventFilter
func callbackQAbstractNativeEventFilter_NativeEventFilter(ptr unsafe.Pointer, eventType unsafe.Pointer, message unsafe.Pointer, result C.long) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractNativeEventFilter::nativeEventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QByteArray, unsafe.Pointer, int) bool)(NewQByteArrayFromPointer(eventType), message, int(int32(result))))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAbstractNativeEventFilter) ConnectNativeEventFilter(f func(eventType *QByteArray, message unsafe.Pointer, result int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractNativeEventFilter::nativeEventFilter", f)
	}
}

func (ptr *QAbstractNativeEventFilter) DisconnectNativeEventFilter(eventType QByteArray_ITF, message unsafe.Pointer, result int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractNativeEventFilter::nativeEventFilter")
	}
}

func (ptr *QAbstractNativeEventFilter) NativeEventFilter(eventType QByteArray_ITF, message unsafe.Pointer, result int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractNativeEventFilter_NativeEventFilter(ptr.Pointer(), PointerFromQByteArray(eventType), message, C.long(int32(result))) != 0
	}
	return false
}

//export callbackQAbstractNativeEventFilter_DestroyQAbstractNativeEventFilter
func callbackQAbstractNativeEventFilter_DestroyQAbstractNativeEventFilter(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractNativeEventFilter::~QAbstractNativeEventFilter"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractNativeEventFilterFromPointer(ptr).DestroyQAbstractNativeEventFilterDefault()
	}
}

func (ptr *QAbstractNativeEventFilter) ConnectDestroyQAbstractNativeEventFilter(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractNativeEventFilter::~QAbstractNativeEventFilter", f)
	}
}

func (ptr *QAbstractNativeEventFilter) DisconnectDestroyQAbstractNativeEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractNativeEventFilter::~QAbstractNativeEventFilter")
	}
}

func (ptr *QAbstractNativeEventFilter) DestroyQAbstractNativeEventFilter() {
	if ptr.Pointer() != nil {
		C.QAbstractNativeEventFilter_DestroyQAbstractNativeEventFilter(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractNativeEventFilter) DestroyQAbstractNativeEventFilterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractNativeEventFilter_DestroyQAbstractNativeEventFilterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QAbstractProxyModel struct {
	QAbstractItemModel
}

type QAbstractProxyModel_ITF interface {
	QAbstractItemModel_ITF
	QAbstractProxyModel_PTR() *QAbstractProxyModel
}

func (p *QAbstractProxyModel) QAbstractProxyModel_PTR() *QAbstractProxyModel {
	return p
}

func (p *QAbstractProxyModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractItemModel_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractProxyModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractItemModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractProxyModel(ptr QAbstractProxyModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractProxyModel_PTR().Pointer()
	}
	return nil
}

func NewQAbstractProxyModelFromPointer(ptr unsafe.Pointer) *QAbstractProxyModel {
	var n = new(QAbstractProxyModel)
	n.SetPointer(ptr)
	return n
}
func NewQAbstractProxyModel(parent QObject_ITF) *QAbstractProxyModel {
	var tmpValue = NewQAbstractProxyModelFromPointer(C.QAbstractProxyModel_NewQAbstractProxyModel(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractProxyModel_Buddy
func callbackQAbstractProxyModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::buddy"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQAbstractProxyModelFromPointer(ptr).BuddyDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractProxyModel) ConnectBuddy(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::buddy", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::buddy")
	}
}

func (ptr *QAbstractProxyModel) Buddy(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_Buddy(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractProxyModel) BuddyDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_BuddyDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_CanDropMimeData
func callbackQAbstractProxyModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).CanDropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectCanDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::canDropMimeData", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::canDropMimeData")
	}
}

func (ptr *QAbstractProxyModel) CanDropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_CanDropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) CanDropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_CanDropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_CanFetchMore
func callbackQAbstractProxyModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).CanFetchMoreDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectCanFetchMore(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::canFetchMore", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::canFetchMore")
	}
}

func (ptr *QAbstractProxyModel) CanFetchMore(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_CanFetchMore(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) CanFetchMoreDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_CanFetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_Data
func callbackQAbstractProxyModel_Data(ptr unsafe.Pointer, proxyIndex unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::data"); signal != nil {
		return PointerFromQVariant(signal.(func(*QModelIndex, int) *QVariant)(NewQModelIndexFromPointer(proxyIndex), int(int32(role))))
	}

	return PointerFromQVariant(NewQAbstractProxyModelFromPointer(ptr).DataDefault(NewQModelIndexFromPointer(proxyIndex), int(int32(role))))
}

func (ptr *QAbstractProxyModel) ConnectData(f func(proxyIndex *QModelIndex, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::data", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::data")
	}
}

func (ptr *QAbstractProxyModel) Data(proxyIndex QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractProxyModel_Data(ptr.Pointer(), PointerFromQModelIndex(proxyIndex), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractProxyModel) DataDefault(proxyIndex QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractProxyModel_DataDefault(ptr.Pointer(), PointerFromQModelIndex(proxyIndex), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_DropMimeData
func callbackQAbstractProxyModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).DropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::dropMimeData", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::dropMimeData")
	}
}

func (ptr *QAbstractProxyModel) DropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_DropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) DropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_DropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_FetchMore
func callbackQAbstractProxyModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::fetchMore"); signal != nil {
		signal.(func(*QModelIndex))(NewQModelIndexFromPointer(parent))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).FetchMoreDefault(NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QAbstractProxyModel) ConnectFetchMore(f func(parent *QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::fetchMore", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::fetchMore")
	}
}

func (ptr *QAbstractProxyModel) FetchMore(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_FetchMore(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

func (ptr *QAbstractProxyModel) FetchMoreDefault(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_FetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

//export callbackQAbstractProxyModel_Flags
func callbackQAbstractProxyModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::flags"); signal != nil {
		return C.longlong(signal.(func(*QModelIndex) Qt__ItemFlag)(NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQAbstractProxyModelFromPointer(ptr).FlagsDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractProxyModel) ConnectFlags(f func(index *QModelIndex) Qt__ItemFlag) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::flags", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectFlags() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::flags")
	}
}

func (ptr *QAbstractProxyModel) Flags(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractProxyModel_Flags(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QAbstractProxyModel) FlagsDefault(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractProxyModel_FlagsDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQAbstractProxyModel_HasChildren
func callbackQAbstractProxyModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).HasChildrenDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectHasChildren(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::hasChildren", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectHasChildren() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::hasChildren")
	}
}

func (ptr *QAbstractProxyModel) HasChildren(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_HasChildren(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) HasChildrenDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_HasChildrenDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_HeaderData
func callbackQAbstractProxyModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::headerData"); signal != nil {
		return PointerFromQVariant(signal.(func(int, Qt__Orientation, int) *QVariant)(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
	}

	return PointerFromQVariant(NewQAbstractProxyModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QAbstractProxyModel) ConnectHeaderData(f func(section int, orientation Qt__Orientation, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::headerData", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::headerData")
	}
}

func (ptr *QAbstractProxyModel) HeaderData(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractProxyModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractProxyModel) HeaderDataDefault(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractProxyModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_MapFromSource
func callbackQAbstractProxyModel_MapFromSource(ptr unsafe.Pointer, sourceIndex unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::mapFromSource"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(sourceIndex)))
	}

	return PointerFromQModelIndex(nil)
}

func (ptr *QAbstractProxyModel) ConnectMapFromSource(f func(sourceIndex *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapFromSource", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMapFromSource(sourceIndex QModelIndex_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapFromSource")
	}
}

func (ptr *QAbstractProxyModel) MapFromSource(sourceIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_MapFromSource(ptr.Pointer(), PointerFromQModelIndex(sourceIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_MapSelectionFromSource
func callbackQAbstractProxyModel_MapSelectionFromSource(ptr unsafe.Pointer, sourceSelection unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::mapSelectionFromSource"); signal != nil {
		return PointerFromQItemSelection(signal.(func(*QItemSelection) *QItemSelection)(NewQItemSelectionFromPointer(sourceSelection)))
	}

	return PointerFromQItemSelection(NewQAbstractProxyModelFromPointer(ptr).MapSelectionFromSourceDefault(NewQItemSelectionFromPointer(sourceSelection)))
}

func (ptr *QAbstractProxyModel) ConnectMapSelectionFromSource(f func(sourceSelection *QItemSelection) *QItemSelection) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapSelectionFromSource", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMapSelectionFromSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapSelectionFromSource")
	}
}

func (ptr *QAbstractProxyModel) MapSelectionFromSource(sourceSelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QAbstractProxyModel_MapSelectionFromSource(ptr.Pointer(), PointerFromQItemSelection(sourceSelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractProxyModel) MapSelectionFromSourceDefault(sourceSelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QAbstractProxyModel_MapSelectionFromSourceDefault(ptr.Pointer(), PointerFromQItemSelection(sourceSelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_MapSelectionToSource
func callbackQAbstractProxyModel_MapSelectionToSource(ptr unsafe.Pointer, proxySelection unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::mapSelectionToSource"); signal != nil {
		return PointerFromQItemSelection(signal.(func(*QItemSelection) *QItemSelection)(NewQItemSelectionFromPointer(proxySelection)))
	}

	return PointerFromQItemSelection(NewQAbstractProxyModelFromPointer(ptr).MapSelectionToSourceDefault(NewQItemSelectionFromPointer(proxySelection)))
}

func (ptr *QAbstractProxyModel) ConnectMapSelectionToSource(f func(proxySelection *QItemSelection) *QItemSelection) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapSelectionToSource", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMapSelectionToSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapSelectionToSource")
	}
}

func (ptr *QAbstractProxyModel) MapSelectionToSource(proxySelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QAbstractProxyModel_MapSelectionToSource(ptr.Pointer(), PointerFromQItemSelection(proxySelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractProxyModel) MapSelectionToSourceDefault(proxySelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QAbstractProxyModel_MapSelectionToSourceDefault(ptr.Pointer(), PointerFromQItemSelection(proxySelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_MapToSource
func callbackQAbstractProxyModel_MapToSource(ptr unsafe.Pointer, proxyIndex unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::mapToSource"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(proxyIndex)))
	}

	return PointerFromQModelIndex(nil)
}

func (ptr *QAbstractProxyModel) ConnectMapToSource(f func(proxyIndex *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapToSource", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMapToSource(proxyIndex QModelIndex_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mapToSource")
	}
}

func (ptr *QAbstractProxyModel) MapToSource(proxyIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_MapToSource(ptr.Pointer(), PointerFromQModelIndex(proxyIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_MimeTypes
func callbackQAbstractProxyModel_MimeTypes(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQAbstractProxyModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QAbstractProxyModel) ConnectMimeTypes(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mimeTypes", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMimeTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::mimeTypes")
	}
}

func (ptr *QAbstractProxyModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractProxyModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QAbstractProxyModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractProxyModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQAbstractProxyModel_ResetInternalData
func callbackQAbstractProxyModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::resetInternalData"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractProxyModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::resetInternalData", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::resetInternalData")
	}
}

func (ptr *QAbstractProxyModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_ResetInternalData(ptr.Pointer())
	}
}

//export callbackQAbstractProxyModel_Revert
func callbackQAbstractProxyModel_Revert(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractProxyModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QAbstractProxyModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::revert", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::revert")
	}
}

func (ptr *QAbstractProxyModel) Revert() {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_Revert(ptr.Pointer())
	}
}

func (ptr *QAbstractProxyModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQAbstractProxyModel_SetData
func callbackQAbstractProxyModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QVariant, int) bool)(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).SetDataDefault(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractProxyModel) ConnectSetData(f func(index *QModelIndex, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::setData", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::setData")
	}
}

func (ptr *QAbstractProxyModel) SetData(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_SetData(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) SetDataDefault(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_SetDataDefault(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_SetHeaderData
func callbackQAbstractProxyModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, Qt__Orientation, *QVariant, int) bool)(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractProxyModel) ConnectSetHeaderData(f func(section int, orientation Qt__Orientation, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::setHeaderData", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSetHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::setHeaderData")
	}
}

func (ptr *QAbstractProxyModel) SetHeaderData(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) SetHeaderDataDefault(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_SetSourceModel
func callbackQAbstractProxyModel_SetSourceModel(ptr unsafe.Pointer, sourceModel unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::setSourceModel"); signal != nil {
		signal.(func(*QAbstractItemModel))(NewQAbstractItemModelFromPointer(sourceModel))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).SetSourceModelDefault(NewQAbstractItemModelFromPointer(sourceModel))
	}
}

func (ptr *QAbstractProxyModel) ConnectSetSourceModel(f func(sourceModel *QAbstractItemModel)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::setSourceModel", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSetSourceModel() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::setSourceModel")
	}
}

func (ptr *QAbstractProxyModel) SetSourceModel(sourceModel QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_SetSourceModel(ptr.Pointer(), PointerFromQAbstractItemModel(sourceModel))
	}
}

func (ptr *QAbstractProxyModel) SetSourceModelDefault(sourceModel QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_SetSourceModelDefault(ptr.Pointer(), PointerFromQAbstractItemModel(sourceModel))
	}
}

//export callbackQAbstractProxyModel_Sibling
func callbackQAbstractProxyModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::sibling"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
	}

	return PointerFromQModelIndex(NewQAbstractProxyModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
}

func (ptr *QAbstractProxyModel) ConnectSibling(f func(row int, column int, idx *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::sibling", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSibling() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::sibling")
	}
}

func (ptr *QAbstractProxyModel) Sibling(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractProxyModel) SiblingDefault(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_Sort
func callbackQAbstractProxyModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::sort"); signal != nil {
		signal.(func(int, Qt__SortOrder))(int(int32(column)), Qt__SortOrder(order))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).SortDefault(int(int32(column)), Qt__SortOrder(order))
	}
}

func (ptr *QAbstractProxyModel) ConnectSort(f func(column int, order Qt__SortOrder)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::sort", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSort() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::sort")
	}
}

func (ptr *QAbstractProxyModel) Sort(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QAbstractProxyModel) SortDefault(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QAbstractProxyModel) SourceModel() *QAbstractItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractItemModelFromPointer(C.QAbstractProxyModel_SourceModel(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_SourceModelChanged
func callbackQAbstractProxyModel_SourceModelChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::sourceModelChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractProxyModel) ConnectSourceModelChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_ConnectSourceModelChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::sourceModelChanged", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSourceModelChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_DisconnectSourceModelChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::sourceModelChanged")
	}
}

//export callbackQAbstractProxyModel_Span
func callbackQAbstractProxyModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::span"); signal != nil {
		return PointerFromQSize(signal.(func(*QModelIndex) *QSize)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQSize(NewQAbstractProxyModelFromPointer(ptr).SpanDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractProxyModel) ConnectSpan(f func(index *QModelIndex) *QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::span", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::span")
	}
}

func (ptr *QAbstractProxyModel) Span(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractProxyModel_Span(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractProxyModel) SpanDefault(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractProxyModel_SpanDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_Submit
func callbackQAbstractProxyModel_Submit(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QAbstractProxyModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::submit", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::submit")
	}
}

func (ptr *QAbstractProxyModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_SupportedDragActions
func callbackQAbstractProxyModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractProxyModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QAbstractProxyModel) ConnectSupportedDragActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::supportedDragActions", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::supportedDragActions")
	}
}

func (ptr *QAbstractProxyModel) SupportedDragActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractProxyModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractProxyModel) SupportedDragActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractProxyModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractProxyModel_SupportedDropActions
func callbackQAbstractProxyModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractProxyModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QAbstractProxyModel) ConnectSupportedDropActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::supportedDropActions", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectSupportedDropActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::supportedDropActions")
	}
}

func (ptr *QAbstractProxyModel) SupportedDropActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractProxyModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractProxyModel) SupportedDropActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractProxyModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractProxyModel) DestroyQAbstractProxyModel() {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_DestroyQAbstractProxyModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractProxyModel_ColumnCount
func callbackQAbstractProxyModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::columnCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractProxyModel) ConnectColumnCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::columnCount", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::columnCount")
	}
}

func (ptr *QAbstractProxyModel) ColumnCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractProxyModel_ColumnCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractProxyModel_Index
func callbackQAbstractProxyModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::index"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
	}

	return PointerFromQModelIndex(nil)
}

func (ptr *QAbstractProxyModel) ConnectIndex(f func(row int, column int, parent *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::index", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::index")
	}
}

func (ptr *QAbstractProxyModel) Index(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_InsertColumns
func callbackQAbstractProxyModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectInsertColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::insertColumns", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectInsertColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::insertColumns")
	}
}

func (ptr *QAbstractProxyModel) InsertColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) InsertColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_InsertRows
func callbackQAbstractProxyModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectInsertRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::insertRows", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectInsertRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::insertRows")
	}
}

func (ptr *QAbstractProxyModel) InsertRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) InsertRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_MoveColumns
func callbackQAbstractProxyModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).MoveColumnsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractProxyModel) ConnectMoveColumns(f func(sourceParent *QModelIndex, sourceColumn int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::moveColumns", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::moveColumns")
	}
}

func (ptr *QAbstractProxyModel) MoveColumns(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_MoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) MoveColumnsDefault(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_MoveColumnsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_MoveRows
func callbackQAbstractProxyModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).MoveRowsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractProxyModel) ConnectMoveRows(f func(sourceParent *QModelIndex, sourceRow int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::moveRows", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::moveRows")
	}
}

func (ptr *QAbstractProxyModel) MoveRows(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_MoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) MoveRowsDefault(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_MoveRowsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_Parent
func callbackQAbstractProxyModel_Parent(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::parent"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(nil)
}

func (ptr *QAbstractProxyModel) ConnectParent(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::parent", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::parent")
	}
}

func (ptr *QAbstractProxyModel) Parent(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractProxyModel_Parent(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractProxyModel_RemoveColumns
func callbackQAbstractProxyModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectRemoveColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::removeColumns", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectRemoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::removeColumns")
	}
}

func (ptr *QAbstractProxyModel) RemoveColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) RemoveColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_RemoveRows
func callbackQAbstractProxyModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractProxyModel) ConnectRemoveRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::removeRows", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectRemoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::removeRows")
	}
}

func (ptr *QAbstractProxyModel) RemoveRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) RemoveRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_RowCount
func callbackQAbstractProxyModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::rowCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractProxyModel) ConnectRowCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::rowCount", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::rowCount")
	}
}

func (ptr *QAbstractProxyModel) RowCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractProxyModel_RowCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractProxyModel_TimerEvent
func callbackQAbstractProxyModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractProxyModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::timerEvent", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::timerEvent")
	}
}

func (ptr *QAbstractProxyModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractProxyModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractProxyModel_ChildEvent
func callbackQAbstractProxyModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractProxyModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::childEvent", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::childEvent")
	}
}

func (ptr *QAbstractProxyModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractProxyModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractProxyModel_ConnectNotify
func callbackQAbstractProxyModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractProxyModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::connectNotify", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::connectNotify")
	}
}

func (ptr *QAbstractProxyModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractProxyModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractProxyModel_CustomEvent
func callbackQAbstractProxyModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractProxyModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::customEvent", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::customEvent")
	}
}

func (ptr *QAbstractProxyModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractProxyModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractProxyModel_DeleteLater
func callbackQAbstractProxyModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractProxyModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractProxyModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::deleteLater", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::deleteLater")
	}
}

func (ptr *QAbstractProxyModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractProxyModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractProxyModel_DisconnectNotify
func callbackQAbstractProxyModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractProxyModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractProxyModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::disconnectNotify", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::disconnectNotify")
	}
}

func (ptr *QAbstractProxyModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractProxyModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractProxyModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractProxyModel_Event
func callbackQAbstractProxyModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QAbstractProxyModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::event", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::event")
	}
}

func (ptr *QAbstractProxyModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_EventFilter
func callbackQAbstractProxyModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractProxyModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractProxyModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::eventFilter", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::eventFilter")
	}
}

func (ptr *QAbstractProxyModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractProxyModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractProxyModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractProxyModel_MetaObject
func callbackQAbstractProxyModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractProxyModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractProxyModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractProxyModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::metaObject", f)
	}
}

func (ptr *QAbstractProxyModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractProxyModel::metaObject")
	}
}

func (ptr *QAbstractProxyModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractProxyModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractProxyModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractProxyModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAbstractState struct {
	QObject
}

type QAbstractState_ITF interface {
	QObject_ITF
	QAbstractState_PTR() *QAbstractState
}

func (p *QAbstractState) QAbstractState_PTR() *QAbstractState {
	return p
}

func (p *QAbstractState) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractState) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractState(ptr QAbstractState_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractState_PTR().Pointer()
	}
	return nil
}

func NewQAbstractStateFromPointer(ptr unsafe.Pointer) *QAbstractState {
	var n = new(QAbstractState)
	n.SetPointer(ptr)
	return n
}
func NewQAbstractState(parent QState_ITF) *QAbstractState {
	var tmpValue = NewQAbstractStateFromPointer(C.QAbstractState_NewQAbstractState(PointerFromQState(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAbstractState) Active() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractState_Active(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAbstractState_ActiveChanged
func callbackQAbstractState_ActiveChanged(ptr unsafe.Pointer, active C.char) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::activeChanged"); signal != nil {
		signal.(func(bool))(int8(active) != 0)
	}

}

func (ptr *QAbstractState) ConnectActiveChanged(f func(active bool)) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ConnectActiveChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::activeChanged", f)
	}
}

func (ptr *QAbstractState) DisconnectActiveChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractState_DisconnectActiveChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::activeChanged")
	}
}

func (ptr *QAbstractState) ActiveChanged(active bool) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ActiveChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(active))))
	}
}

//export callbackQAbstractState_Entered
func callbackQAbstractState_Entered(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::entered"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractState) ConnectEntered(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ConnectEntered(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::entered", f)
	}
}

func (ptr *QAbstractState) DisconnectEntered() {
	if ptr.Pointer() != nil {
		C.QAbstractState_DisconnectEntered(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::entered")
	}
}

//export callbackQAbstractState_Event
func callbackQAbstractState_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractStateFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QAbstractState) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::event", f)
	}
}

func (ptr *QAbstractState) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::event")
	}
}

func (ptr *QAbstractState) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractState_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractState) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractState_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractState_Exited
func callbackQAbstractState_Exited(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::exited"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractState) ConnectExited(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ConnectExited(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::exited", f)
	}
}

func (ptr *QAbstractState) DisconnectExited() {
	if ptr.Pointer() != nil {
		C.QAbstractState_DisconnectExited(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::exited")
	}
}

func (ptr *QAbstractState) Machine() *QStateMachine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStateMachineFromPointer(C.QAbstractState_Machine(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAbstractState_OnEntry
func callbackQAbstractState_OnEntry(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::onEntry"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	}

}

func (ptr *QAbstractState) ConnectOnEntry(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::onEntry", f)
	}
}

func (ptr *QAbstractState) DisconnectOnEntry(event QEvent_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::onEntry")
	}
}

func (ptr *QAbstractState) OnEntry(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_OnEntry(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractState_OnExit
func callbackQAbstractState_OnExit(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::onExit"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	}

}

func (ptr *QAbstractState) ConnectOnExit(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::onExit", f)
	}
}

func (ptr *QAbstractState) DisconnectOnExit(event QEvent_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::onExit")
	}
}

func (ptr *QAbstractState) OnExit(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_OnExit(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractState) ParentState() *QState {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStateFromPointer(C.QAbstractState_ParentState(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractState) DestroyQAbstractState() {
	if ptr.Pointer() != nil {
		C.QAbstractState_DestroyQAbstractState(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractState_TimerEvent
func callbackQAbstractState_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractStateFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractState) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::timerEvent", f)
	}
}

func (ptr *QAbstractState) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::timerEvent")
	}
}

func (ptr *QAbstractState) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractState) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractState_ChildEvent
func callbackQAbstractState_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractStateFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractState) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::childEvent", f)
	}
}

func (ptr *QAbstractState) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::childEvent")
	}
}

func (ptr *QAbstractState) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractState) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractState_ConnectNotify
func callbackQAbstractState_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractStateFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractState) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::connectNotify", f)
	}
}

func (ptr *QAbstractState) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::connectNotify")
	}
}

func (ptr *QAbstractState) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractState) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractState_CustomEvent
func callbackQAbstractState_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractStateFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractState) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::customEvent", f)
	}
}

func (ptr *QAbstractState) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::customEvent")
	}
}

func (ptr *QAbstractState) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractState) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractState_DeleteLater
func callbackQAbstractState_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractStateFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractState) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::deleteLater", f)
	}
}

func (ptr *QAbstractState) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::deleteLater")
	}
}

func (ptr *QAbstractState) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractState_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractState) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractState_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractState_DisconnectNotify
func callbackQAbstractState_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractStateFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractState) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::disconnectNotify", f)
	}
}

func (ptr *QAbstractState) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::disconnectNotify")
	}
}

func (ptr *QAbstractState) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractState) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractState_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractState_EventFilter
func callbackQAbstractState_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractStateFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractState) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::eventFilter", f)
	}
}

func (ptr *QAbstractState) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::eventFilter")
	}
}

func (ptr *QAbstractState) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractState_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractState) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractState_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractState_MetaObject
func callbackQAbstractState_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractState::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractStateFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractState) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::metaObject", f)
	}
}

func (ptr *QAbstractState) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractState::metaObject")
	}
}

func (ptr *QAbstractState) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractState_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractState) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractState_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAbstractTableModel struct {
	QAbstractItemModel
}

type QAbstractTableModel_ITF interface {
	QAbstractItemModel_ITF
	QAbstractTableModel_PTR() *QAbstractTableModel
}

func (p *QAbstractTableModel) QAbstractTableModel_PTR() *QAbstractTableModel {
	return p
}

func (p *QAbstractTableModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractItemModel_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractTableModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractItemModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractTableModel(ptr QAbstractTableModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractTableModel_PTR().Pointer()
	}
	return nil
}

func NewQAbstractTableModelFromPointer(ptr unsafe.Pointer) *QAbstractTableModel {
	var n = new(QAbstractTableModel)
	n.SetPointer(ptr)
	return n
}

//export callbackQAbstractTableModel_Index
func callbackQAbstractTableModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::index"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
	}

	return PointerFromQModelIndex(NewQAbstractTableModelFromPointer(ptr).IndexDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
}

func (ptr *QAbstractTableModel) ConnectIndex(f func(row int, column int, parent *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::index", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::index")
	}
}

func (ptr *QAbstractTableModel) Index(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTableModel) IndexDefault(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_IndexDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func NewQAbstractTableModel(parent QObject_ITF) *QAbstractTableModel {
	var tmpValue = NewQAbstractTableModelFromPointer(C.QAbstractTableModel_NewQAbstractTableModel(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQAbstractTableModel_DropMimeData
func callbackQAbstractTableModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).DropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::dropMimeData", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::dropMimeData")
	}
}

func (ptr *QAbstractTableModel) DropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_DropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) DropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_DropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_Flags
func callbackQAbstractTableModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::flags"); signal != nil {
		return C.longlong(signal.(func(*QModelIndex) Qt__ItemFlag)(NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQAbstractTableModelFromPointer(ptr).FlagsDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractTableModel) ConnectFlags(f func(index *QModelIndex) Qt__ItemFlag) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::flags", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectFlags() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::flags")
	}
}

func (ptr *QAbstractTableModel) Flags(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractTableModel_Flags(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QAbstractTableModel) FlagsDefault(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QAbstractTableModel_FlagsDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQAbstractTableModel_Sibling
func callbackQAbstractTableModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::sibling"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
	}

	return PointerFromQModelIndex(NewQAbstractTableModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
}

func (ptr *QAbstractTableModel) ConnectSibling(f func(row int, column int, idx *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::sibling", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSibling() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::sibling")
	}
}

func (ptr *QAbstractTableModel) Sibling(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTableModel) SiblingDefault(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTableModel) DestroyQAbstractTableModel() {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_DestroyQAbstractTableModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractTableModel_Buddy
func callbackQAbstractTableModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::buddy"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQAbstractTableModelFromPointer(ptr).BuddyDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractTableModel) ConnectBuddy(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::buddy", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::buddy")
	}
}

func (ptr *QAbstractTableModel) Buddy(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_Buddy(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTableModel) BuddyDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_BuddyDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTableModel_CanDropMimeData
func callbackQAbstractTableModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).CanDropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectCanDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::canDropMimeData", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::canDropMimeData")
	}
}

func (ptr *QAbstractTableModel) CanDropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_CanDropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) CanDropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_CanDropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_CanFetchMore
func callbackQAbstractTableModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).CanFetchMoreDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectCanFetchMore(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::canFetchMore", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::canFetchMore")
	}
}

func (ptr *QAbstractTableModel) CanFetchMore(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_CanFetchMore(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) CanFetchMoreDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_CanFetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_ColumnCount
func callbackQAbstractTableModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::columnCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractTableModel) ConnectColumnCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::columnCount", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::columnCount")
	}
}

func (ptr *QAbstractTableModel) ColumnCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractTableModel_ColumnCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractTableModel_Data
func callbackQAbstractTableModel_Data(ptr unsafe.Pointer, index unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::data"); signal != nil {
		return PointerFromQVariant(signal.(func(*QModelIndex, int) *QVariant)(NewQModelIndexFromPointer(index), int(int32(role))))
	}

	return PointerFromQVariant(nil)
}

func (ptr *QAbstractTableModel) ConnectData(f func(index *QModelIndex, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::data", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::data")
	}
}

func (ptr *QAbstractTableModel) Data(index QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractTableModel_Data(ptr.Pointer(), PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTableModel_FetchMore
func callbackQAbstractTableModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::fetchMore"); signal != nil {
		signal.(func(*QModelIndex))(NewQModelIndexFromPointer(parent))
	} else {
		NewQAbstractTableModelFromPointer(ptr).FetchMoreDefault(NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QAbstractTableModel) ConnectFetchMore(f func(parent *QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::fetchMore", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::fetchMore")
	}
}

func (ptr *QAbstractTableModel) FetchMore(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_FetchMore(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

func (ptr *QAbstractTableModel) FetchMoreDefault(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_FetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

//export callbackQAbstractTableModel_HasChildren
func callbackQAbstractTableModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).HasChildrenDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectHasChildren(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::hasChildren", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectHasChildren() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::hasChildren")
	}
}

func (ptr *QAbstractTableModel) HasChildren(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_HasChildren(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) HasChildrenDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_HasChildrenDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_HeaderData
func callbackQAbstractTableModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::headerData"); signal != nil {
		return PointerFromQVariant(signal.(func(int, Qt__Orientation, int) *QVariant)(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
	}

	return PointerFromQVariant(NewQAbstractTableModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QAbstractTableModel) ConnectHeaderData(f func(section int, orientation Qt__Orientation, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::headerData", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::headerData")
	}
}

func (ptr *QAbstractTableModel) HeaderData(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractTableModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTableModel) HeaderDataDefault(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAbstractTableModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTableModel_InsertColumns
func callbackQAbstractTableModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectInsertColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::insertColumns", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectInsertColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::insertColumns")
	}
}

func (ptr *QAbstractTableModel) InsertColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) InsertColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_InsertRows
func callbackQAbstractTableModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectInsertRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::insertRows", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectInsertRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::insertRows")
	}
}

func (ptr *QAbstractTableModel) InsertRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) InsertRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_MimeTypes
func callbackQAbstractTableModel_MimeTypes(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQAbstractTableModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QAbstractTableModel) ConnectMimeTypes(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::mimeTypes", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectMimeTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::mimeTypes")
	}
}

func (ptr *QAbstractTableModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractTableModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QAbstractTableModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QAbstractTableModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQAbstractTableModel_MoveColumns
func callbackQAbstractTableModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).MoveColumnsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractTableModel) ConnectMoveColumns(f func(sourceParent *QModelIndex, sourceColumn int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::moveColumns", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::moveColumns")
	}
}

func (ptr *QAbstractTableModel) MoveColumns(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_MoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) MoveColumnsDefault(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_MoveColumnsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractTableModel_MoveRows
func callbackQAbstractTableModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).MoveRowsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QAbstractTableModel) ConnectMoveRows(f func(sourceParent *QModelIndex, sourceRow int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::moveRows", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::moveRows")
	}
}

func (ptr *QAbstractTableModel) MoveRows(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_MoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) MoveRowsDefault(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_MoveRowsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQAbstractTableModel_Parent
func callbackQAbstractTableModel_Parent(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::parent"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQAbstractTableModelFromPointer(ptr).ParentDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractTableModel) ConnectParent(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::parent", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::parent")
	}
}

func (ptr *QAbstractTableModel) Parent(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_Parent(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTableModel) ParentDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QAbstractTableModel_ParentDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTableModel_RemoveColumns
func callbackQAbstractTableModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectRemoveColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::removeColumns", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectRemoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::removeColumns")
	}
}

func (ptr *QAbstractTableModel) RemoveColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) RemoveColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_RemoveRows
func callbackQAbstractTableModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QAbstractTableModel) ConnectRemoveRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::removeRows", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectRemoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::removeRows")
	}
}

func (ptr *QAbstractTableModel) RemoveRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) RemoveRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_ResetInternalData
func callbackQAbstractTableModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::resetInternalData"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractTableModelFromPointer(ptr).ResetInternalDataDefault()
	}
}

func (ptr *QAbstractTableModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::resetInternalData", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::resetInternalData")
	}
}

func (ptr *QAbstractTableModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_ResetInternalData(ptr.Pointer())
	}
}

func (ptr *QAbstractTableModel) ResetInternalDataDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_ResetInternalDataDefault(ptr.Pointer())
	}
}

//export callbackQAbstractTableModel_Revert
func callbackQAbstractTableModel_Revert(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractTableModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QAbstractTableModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::revert", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::revert")
	}
}

func (ptr *QAbstractTableModel) Revert() {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_Revert(ptr.Pointer())
	}
}

func (ptr *QAbstractTableModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQAbstractTableModel_RowCount
func callbackQAbstractTableModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::rowCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(0))
}

func (ptr *QAbstractTableModel) ConnectRowCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::rowCount", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::rowCount")
	}
}

func (ptr *QAbstractTableModel) RowCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAbstractTableModel_RowCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQAbstractTableModel_SetData
func callbackQAbstractTableModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QVariant, int) bool)(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).SetDataDefault(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractTableModel) ConnectSetData(f func(index *QModelIndex, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::setData", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::setData")
	}
}

func (ptr *QAbstractTableModel) SetData(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_SetData(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) SetDataDefault(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_SetDataDefault(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractTableModel_SetHeaderData
func callbackQAbstractTableModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, Qt__Orientation, *QVariant, int) bool)(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QAbstractTableModel) ConnectSetHeaderData(f func(section int, orientation Qt__Orientation, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::setHeaderData", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSetHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::setHeaderData")
	}
}

func (ptr *QAbstractTableModel) SetHeaderData(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) SetHeaderDataDefault(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQAbstractTableModel_Sort
func callbackQAbstractTableModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::sort"); signal != nil {
		signal.(func(int, Qt__SortOrder))(int(int32(column)), Qt__SortOrder(order))
	} else {
		NewQAbstractTableModelFromPointer(ptr).SortDefault(int(int32(column)), Qt__SortOrder(order))
	}
}

func (ptr *QAbstractTableModel) ConnectSort(f func(column int, order Qt__SortOrder)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::sort", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSort() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::sort")
	}
}

func (ptr *QAbstractTableModel) Sort(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QAbstractTableModel) SortDefault(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

//export callbackQAbstractTableModel_Span
func callbackQAbstractTableModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::span"); signal != nil {
		return PointerFromQSize(signal.(func(*QModelIndex) *QSize)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQSize(NewQAbstractTableModelFromPointer(ptr).SpanDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QAbstractTableModel) ConnectSpan(f func(index *QModelIndex) *QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::span", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::span")
	}
}

func (ptr *QAbstractTableModel) Span(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractTableModel_Span(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTableModel) SpanDefault(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QAbstractTableModel_SpanDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTableModel_Submit
func callbackQAbstractTableModel_Submit(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QAbstractTableModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::submit", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::submit")
	}
}

func (ptr *QAbstractTableModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQAbstractTableModel_SupportedDragActions
func callbackQAbstractTableModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractTableModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QAbstractTableModel) ConnectSupportedDragActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::supportedDragActions", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::supportedDragActions")
	}
}

func (ptr *QAbstractTableModel) SupportedDragActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractTableModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractTableModel) SupportedDragActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractTableModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractTableModel_SupportedDropActions
func callbackQAbstractTableModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQAbstractTableModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QAbstractTableModel) ConnectSupportedDropActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::supportedDropActions", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectSupportedDropActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::supportedDropActions")
	}
}

func (ptr *QAbstractTableModel) SupportedDropActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractTableModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QAbstractTableModel) SupportedDropActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QAbstractTableModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractTableModel_TimerEvent
func callbackQAbstractTableModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractTableModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractTableModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::timerEvent", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::timerEvent")
	}
}

func (ptr *QAbstractTableModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractTableModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractTableModel_ChildEvent
func callbackQAbstractTableModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractTableModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractTableModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::childEvent", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::childEvent")
	}
}

func (ptr *QAbstractTableModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractTableModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractTableModel_ConnectNotify
func callbackQAbstractTableModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTableModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTableModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::connectNotify", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::connectNotify")
	}
}

func (ptr *QAbstractTableModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTableModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTableModel_CustomEvent
func callbackQAbstractTableModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractTableModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractTableModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::customEvent", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::customEvent")
	}
}

func (ptr *QAbstractTableModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractTableModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractTableModel_DeleteLater
func callbackQAbstractTableModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractTableModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractTableModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::deleteLater", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::deleteLater")
	}
}

func (ptr *QAbstractTableModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractTableModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractTableModel_DisconnectNotify
func callbackQAbstractTableModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTableModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTableModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::disconnectNotify", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::disconnectNotify")
	}
}

func (ptr *QAbstractTableModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTableModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTableModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTableModel_Event
func callbackQAbstractTableModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QAbstractTableModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::event", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::event")
	}
}

func (ptr *QAbstractTableModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_EventFilter
func callbackQAbstractTableModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTableModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractTableModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::eventFilter", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::eventFilter")
	}
}

func (ptr *QAbstractTableModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractTableModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTableModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractTableModel_MetaObject
func callbackQAbstractTableModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTableModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractTableModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractTableModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::metaObject", f)
	}
}

func (ptr *QAbstractTableModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTableModel::metaObject")
	}
}

func (ptr *QAbstractTableModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractTableModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractTableModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractTableModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QAbstractTransition::TransitionType
type QAbstractTransition__TransitionType int64

const (
	QAbstractTransition__ExternalTransition = QAbstractTransition__TransitionType(0)
	QAbstractTransition__InternalTransition = QAbstractTransition__TransitionType(1)
)

type QAbstractTransition struct {
	QObject
}

type QAbstractTransition_ITF interface {
	QObject_ITF
	QAbstractTransition_PTR() *QAbstractTransition
}

func (p *QAbstractTransition) QAbstractTransition_PTR() *QAbstractTransition {
	return p
}

func (p *QAbstractTransition) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QAbstractTransition) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQAbstractTransition(ptr QAbstractTransition_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAbstractTransition_PTR().Pointer()
	}
	return nil
}

func NewQAbstractTransitionFromPointer(ptr unsafe.Pointer) *QAbstractTransition {
	var n = new(QAbstractTransition)
	n.SetPointer(ptr)
	return n
}
func NewQAbstractTransition(sourceState QState_ITF) *QAbstractTransition {
	var tmpValue = NewQAbstractTransitionFromPointer(C.QAbstractTransition_NewQAbstractTransition(PointerFromQState(sourceState)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAbstractTransition) AddAnimation(animation QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_AddAnimation(ptr.Pointer(), PointerFromQAbstractAnimation(animation))
	}
}

func (ptr *QAbstractTransition) Animations() []*QAbstractAnimation {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QAbstractAnimation {
			var out = make([]*QAbstractAnimation, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAbstractTransitionFromPointer(l.data).animations_atList(i)
			}
			return out
		}(C.QAbstractTransition_Animations(ptr.Pointer()))
	}
	return nil
}

//export callbackQAbstractTransition_Event
func callbackQAbstractTransition_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTransitionFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QAbstractTransition) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::event", f)
	}
}

func (ptr *QAbstractTransition) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::event")
	}
}

func (ptr *QAbstractTransition) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTransition_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QAbstractTransition) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTransition_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQAbstractTransition_EventTest
func callbackQAbstractTransition_EventTest(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::eventTest"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(false)))
}

func (ptr *QAbstractTransition) ConnectEventTest(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::eventTest", f)
	}
}

func (ptr *QAbstractTransition) DisconnectEventTest(event QEvent_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::eventTest")
	}
}

func (ptr *QAbstractTransition) EventTest(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTransition_EventTest(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractTransition) Machine() *QStateMachine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStateMachineFromPointer(C.QAbstractTransition_Machine(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTransition_OnTransition
func callbackQAbstractTransition_OnTransition(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::onTransition"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	}

}

func (ptr *QAbstractTransition) ConnectOnTransition(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::onTransition", f)
	}
}

func (ptr *QAbstractTransition) DisconnectOnTransition(event QEvent_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::onTransition")
	}
}

func (ptr *QAbstractTransition) OnTransition(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_OnTransition(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractTransition) RemoveAnimation(animation QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_RemoveAnimation(ptr.Pointer(), PointerFromQAbstractAnimation(animation))
	}
}

func (ptr *QAbstractTransition) SetTargetState(target QAbstractState_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_SetTargetState(ptr.Pointer(), PointerFromQAbstractState(target))
	}
}

func (ptr *QAbstractTransition) SetTransitionType(ty QAbstractTransition__TransitionType) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_SetTransitionType(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QAbstractTransition) SourceState() *QState {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStateFromPointer(C.QAbstractTransition_SourceState(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTransition) TargetState() *QAbstractState {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractStateFromPointer(C.QAbstractTransition_TargetState(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTransition_TargetStateChanged
func callbackQAbstractTransition_TargetStateChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::targetStateChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractTransition) ConnectTargetStateChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_ConnectTargetStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::targetStateChanged", f)
	}
}

func (ptr *QAbstractTransition) DisconnectTargetStateChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DisconnectTargetStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::targetStateChanged")
	}
}

func (ptr *QAbstractTransition) TargetStates() []*QAbstractState {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QAbstractState {
			var out = make([]*QAbstractState, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQAbstractTransitionFromPointer(l.data).targetStates_atList(i)
			}
			return out
		}(C.QAbstractTransition_TargetStates(ptr.Pointer()))
	}
	return nil
}

//export callbackQAbstractTransition_TargetStatesChanged
func callbackQAbstractTransition_TargetStatesChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::targetStatesChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractTransition) ConnectTargetStatesChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_ConnectTargetStatesChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::targetStatesChanged", f)
	}
}

func (ptr *QAbstractTransition) DisconnectTargetStatesChanged() {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DisconnectTargetStatesChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::targetStatesChanged")
	}
}

func (ptr *QAbstractTransition) TransitionType() QAbstractTransition__TransitionType {
	if ptr.Pointer() != nil {
		return QAbstractTransition__TransitionType(C.QAbstractTransition_TransitionType(ptr.Pointer()))
	}
	return 0
}

//export callbackQAbstractTransition_Triggered
func callbackQAbstractTransition_Triggered(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::triggered"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QAbstractTransition) ConnectTriggered(f func()) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_ConnectTriggered(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::triggered", f)
	}
}

func (ptr *QAbstractTransition) DisconnectTriggered() {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DisconnectTriggered(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::triggered")
	}
}

//export callbackQAbstractTransition_DestroyQAbstractTransition
func callbackQAbstractTransition_DestroyQAbstractTransition(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::~QAbstractTransition"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractTransitionFromPointer(ptr).DestroyQAbstractTransitionDefault()
	}
}

func (ptr *QAbstractTransition) ConnectDestroyQAbstractTransition(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::~QAbstractTransition", f)
	}
}

func (ptr *QAbstractTransition) DisconnectDestroyQAbstractTransition() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::~QAbstractTransition")
	}
}

func (ptr *QAbstractTransition) DestroyQAbstractTransition() {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DestroyQAbstractTransition(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractTransition) DestroyQAbstractTransitionDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DestroyQAbstractTransitionDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractTransition) animations_atList(i int) *QAbstractAnimation {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractAnimationFromPointer(C.QAbstractTransition_animations_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAbstractTransition) targetStates_atList(i int) *QAbstractState {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractStateFromPointer(C.QAbstractTransition_targetStates_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQAbstractTransition_TimerEvent
func callbackQAbstractTransition_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAbstractTransitionFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAbstractTransition) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::timerEvent", f)
	}
}

func (ptr *QAbstractTransition) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::timerEvent")
	}
}

func (ptr *QAbstractTransition) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAbstractTransition) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAbstractTransition_ChildEvent
func callbackQAbstractTransition_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAbstractTransitionFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAbstractTransition) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::childEvent", f)
	}
}

func (ptr *QAbstractTransition) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::childEvent")
	}
}

func (ptr *QAbstractTransition) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAbstractTransition) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAbstractTransition_ConnectNotify
func callbackQAbstractTransition_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTransitionFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTransition) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::connectNotify", f)
	}
}

func (ptr *QAbstractTransition) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::connectNotify")
	}
}

func (ptr *QAbstractTransition) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTransition) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTransition_CustomEvent
func callbackQAbstractTransition_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAbstractTransitionFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAbstractTransition) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::customEvent", f)
	}
}

func (ptr *QAbstractTransition) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::customEvent")
	}
}

func (ptr *QAbstractTransition) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAbstractTransition) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAbstractTransition_DeleteLater
func callbackQAbstractTransition_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAbstractTransitionFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAbstractTransition) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::deleteLater", f)
	}
}

func (ptr *QAbstractTransition) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::deleteLater")
	}
}

func (ptr *QAbstractTransition) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAbstractTransition) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAbstractTransition_DisconnectNotify
func callbackQAbstractTransition_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAbstractTransitionFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAbstractTransition) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::disconnectNotify", f)
	}
}

func (ptr *QAbstractTransition) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::disconnectNotify")
	}
}

func (ptr *QAbstractTransition) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAbstractTransition) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAbstractTransition_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAbstractTransition_EventFilter
func callbackQAbstractTransition_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAbstractTransitionFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAbstractTransition) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::eventFilter", f)
	}
}

func (ptr *QAbstractTransition) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::eventFilter")
	}
}

func (ptr *QAbstractTransition) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTransition_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAbstractTransition) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAbstractTransition_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAbstractTransition_MetaObject
func callbackQAbstractTransition_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAbstractTransition::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAbstractTransitionFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAbstractTransition) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::metaObject", f)
	}
}

func (ptr *QAbstractTransition) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAbstractTransition::metaObject")
	}
}

func (ptr *QAbstractTransition) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractTransition_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAbstractTransition) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAbstractTransition_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAnimationGroup struct {
	QAbstractAnimation
}

type QAnimationGroup_ITF interface {
	QAbstractAnimation_ITF
	QAnimationGroup_PTR() *QAnimationGroup
}

func (p *QAnimationGroup) QAnimationGroup_PTR() *QAnimationGroup {
	return p
}

func (p *QAnimationGroup) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractAnimation_PTR().Pointer()
	}
	return nil
}

func (p *QAnimationGroup) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractAnimation_PTR().SetPointer(ptr)
	}
}

func PointerFromQAnimationGroup(ptr QAnimationGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAnimationGroup_PTR().Pointer()
	}
	return nil
}

func NewQAnimationGroupFromPointer(ptr unsafe.Pointer) *QAnimationGroup {
	var n = new(QAnimationGroup)
	n.SetPointer(ptr)
	return n
}
func NewQAnimationGroup(parent QObject_ITF) *QAnimationGroup {
	var tmpValue = NewQAnimationGroupFromPointer(C.QAnimationGroup_NewQAnimationGroup(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QAnimationGroup) AddAnimation(animation QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_AddAnimation(ptr.Pointer(), PointerFromQAbstractAnimation(animation))
	}
}

func (ptr *QAnimationGroup) AnimationAt(index int) *QAbstractAnimation {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractAnimationFromPointer(C.QAnimationGroup_AnimationAt(ptr.Pointer(), C.int(int32(index))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAnimationGroup) AnimationCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAnimationGroup_AnimationCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAnimationGroup) Clear() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_Clear(ptr.Pointer())
	}
}

//export callbackQAnimationGroup_Event
func callbackQAnimationGroup_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAnimationGroupFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QAnimationGroup) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::event", f)
	}
}

func (ptr *QAnimationGroup) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::event")
	}
}

func (ptr *QAnimationGroup) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAnimationGroup_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAnimationGroup) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAnimationGroup_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAnimationGroup) IndexOfAnimation(animation QAbstractAnimation_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAnimationGroup_IndexOfAnimation(ptr.Pointer(), PointerFromQAbstractAnimation(animation))))
	}
	return 0
}

func (ptr *QAnimationGroup) InsertAnimation(index int, animation QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_InsertAnimation(ptr.Pointer(), C.int(int32(index)), PointerFromQAbstractAnimation(animation))
	}
}

func (ptr *QAnimationGroup) RemoveAnimation(animation QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_RemoveAnimation(ptr.Pointer(), PointerFromQAbstractAnimation(animation))
	}
}

func (ptr *QAnimationGroup) TakeAnimation(index int) *QAbstractAnimation {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractAnimationFromPointer(C.QAnimationGroup_TakeAnimation(ptr.Pointer(), C.int(int32(index))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QAnimationGroup) DestroyQAnimationGroup() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_DestroyQAnimationGroup(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAnimationGroup_SetCurrentTime
func callbackQAnimationGroup_SetCurrentTime(ptr unsafe.Pointer, msecs C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msecs)))
	} else {
		NewQAnimationGroupFromPointer(ptr).SetCurrentTimeDefault(int(int32(msecs)))
	}
}

func (ptr *QAnimationGroup) ConnectSetCurrentTime(f func(msecs int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::setCurrentTime", f)
	}
}

func (ptr *QAnimationGroup) DisconnectSetCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::setCurrentTime")
	}
}

func (ptr *QAnimationGroup) SetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_SetCurrentTime(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QAnimationGroup) SetCurrentTimeDefault(msecs int) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_SetCurrentTimeDefault(ptr.Pointer(), C.int(int32(msecs)))
	}
}

//export callbackQAnimationGroup_Duration
func callbackQAnimationGroup_Duration(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::duration"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QAnimationGroup) ConnectDuration(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::duration", f)
	}
}

func (ptr *QAnimationGroup) DisconnectDuration() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::duration")
	}
}

func (ptr *QAnimationGroup) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAnimationGroup_Duration(ptr.Pointer())))
	}
	return 0
}

//export callbackQAnimationGroup_Pause
func callbackQAnimationGroup_Pause(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::pause"); signal != nil {
		signal.(func())()
	} else {
		NewQAnimationGroupFromPointer(ptr).PauseDefault()
	}
}

func (ptr *QAnimationGroup) ConnectPause(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::pause", f)
	}
}

func (ptr *QAnimationGroup) DisconnectPause() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::pause")
	}
}

func (ptr *QAnimationGroup) Pause() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_Pause(ptr.Pointer())
	}
}

func (ptr *QAnimationGroup) PauseDefault() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_PauseDefault(ptr.Pointer())
	}
}

//export callbackQAnimationGroup_Resume
func callbackQAnimationGroup_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::resume"); signal != nil {
		signal.(func())()
	} else {
		NewQAnimationGroupFromPointer(ptr).ResumeDefault()
	}
}

func (ptr *QAnimationGroup) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::resume", f)
	}
}

func (ptr *QAnimationGroup) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::resume")
	}
}

func (ptr *QAnimationGroup) Resume() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_Resume(ptr.Pointer())
	}
}

func (ptr *QAnimationGroup) ResumeDefault() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_ResumeDefault(ptr.Pointer())
	}
}

//export callbackQAnimationGroup_SetPaused
func callbackQAnimationGroup_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	} else {
		NewQAnimationGroupFromPointer(ptr).SetPausedDefault(int8(paused) != 0)
	}
}

func (ptr *QAnimationGroup) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::setPaused", f)
	}
}

func (ptr *QAnimationGroup) DisconnectSetPaused() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::setPaused")
	}
}

func (ptr *QAnimationGroup) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QAnimationGroup) SetPausedDefault(paused bool) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_SetPausedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

//export callbackQAnimationGroup_Start
func callbackQAnimationGroup_Start(ptr unsafe.Pointer, policy C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::start"); signal != nil {
		signal.(func(QAbstractAnimation__DeletionPolicy))(QAbstractAnimation__DeletionPolicy(policy))
	} else {
		NewQAnimationGroupFromPointer(ptr).StartDefault(QAbstractAnimation__DeletionPolicy(policy))
	}
}

func (ptr *QAnimationGroup) ConnectStart(f func(policy QAbstractAnimation__DeletionPolicy)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::start", f)
	}
}

func (ptr *QAnimationGroup) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::start")
	}
}

func (ptr *QAnimationGroup) Start(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_Start(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QAnimationGroup) StartDefault(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_StartDefault(ptr.Pointer(), C.longlong(policy))
	}
}

//export callbackQAnimationGroup_Stop
func callbackQAnimationGroup_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQAnimationGroupFromPointer(ptr).StopDefault()
	}
}

func (ptr *QAnimationGroup) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::stop", f)
	}
}

func (ptr *QAnimationGroup) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::stop")
	}
}

func (ptr *QAnimationGroup) Stop() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_Stop(ptr.Pointer())
	}
}

func (ptr *QAnimationGroup) StopDefault() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_StopDefault(ptr.Pointer())
	}
}

//export callbackQAnimationGroup_UpdateCurrentTime
func callbackQAnimationGroup_UpdateCurrentTime(ptr unsafe.Pointer, currentTime C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::updateCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(currentTime)))
	} else {

	}
}

func (ptr *QAnimationGroup) ConnectUpdateCurrentTime(f func(currentTime int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::updateCurrentTime", f)
	}
}

func (ptr *QAnimationGroup) DisconnectUpdateCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::updateCurrentTime")
	}
}

func (ptr *QAnimationGroup) UpdateCurrentTime(currentTime int) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_UpdateCurrentTime(ptr.Pointer(), C.int(int32(currentTime)))
	}
}

//export callbackQAnimationGroup_UpdateDirection
func callbackQAnimationGroup_UpdateDirection(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::updateDirection"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(direction))
	} else {
		NewQAnimationGroupFromPointer(ptr).UpdateDirectionDefault(QAbstractAnimation__Direction(direction))
	}
}

func (ptr *QAnimationGroup) ConnectUpdateDirection(f func(direction QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::updateDirection", f)
	}
}

func (ptr *QAnimationGroup) DisconnectUpdateDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::updateDirection")
	}
}

func (ptr *QAnimationGroup) UpdateDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_UpdateDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QAnimationGroup) UpdateDirectionDefault(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_UpdateDirectionDefault(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQAnimationGroup_UpdateState
func callbackQAnimationGroup_UpdateState(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::updateState"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	} else {
		NewQAnimationGroupFromPointer(ptr).UpdateStateDefault(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}
}

func (ptr *QAnimationGroup) ConnectUpdateState(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::updateState", f)
	}
}

func (ptr *QAnimationGroup) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::updateState")
	}
}

func (ptr *QAnimationGroup) UpdateState(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_UpdateState(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QAnimationGroup) UpdateStateDefault(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_UpdateStateDefault(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

//export callbackQAnimationGroup_TimerEvent
func callbackQAnimationGroup_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQAnimationGroupFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QAnimationGroup) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::timerEvent", f)
	}
}

func (ptr *QAnimationGroup) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::timerEvent")
	}
}

func (ptr *QAnimationGroup) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QAnimationGroup) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQAnimationGroup_ChildEvent
func callbackQAnimationGroup_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQAnimationGroupFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QAnimationGroup) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::childEvent", f)
	}
}

func (ptr *QAnimationGroup) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::childEvent")
	}
}

func (ptr *QAnimationGroup) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QAnimationGroup) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQAnimationGroup_ConnectNotify
func callbackQAnimationGroup_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAnimationGroupFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAnimationGroup) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::connectNotify", f)
	}
}

func (ptr *QAnimationGroup) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::connectNotify")
	}
}

func (ptr *QAnimationGroup) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAnimationGroup) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAnimationGroup_CustomEvent
func callbackQAnimationGroup_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQAnimationGroupFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QAnimationGroup) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::customEvent", f)
	}
}

func (ptr *QAnimationGroup) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::customEvent")
	}
}

func (ptr *QAnimationGroup) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QAnimationGroup) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQAnimationGroup_DeleteLater
func callbackQAnimationGroup_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQAnimationGroupFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QAnimationGroup) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::deleteLater", f)
	}
}

func (ptr *QAnimationGroup) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::deleteLater")
	}
}

func (ptr *QAnimationGroup) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QAnimationGroup) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQAnimationGroup_DisconnectNotify
func callbackQAnimationGroup_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQAnimationGroupFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QAnimationGroup) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::disconnectNotify", f)
	}
}

func (ptr *QAnimationGroup) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::disconnectNotify")
	}
}

func (ptr *QAnimationGroup) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QAnimationGroup) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QAnimationGroup_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQAnimationGroup_EventFilter
func callbackQAnimationGroup_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQAnimationGroupFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QAnimationGroup) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::eventFilter", f)
	}
}

func (ptr *QAnimationGroup) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::eventFilter")
	}
}

func (ptr *QAnimationGroup) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAnimationGroup_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QAnimationGroup) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QAnimationGroup_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQAnimationGroup_MetaObject
func callbackQAnimationGroup_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QAnimationGroup::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQAnimationGroupFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QAnimationGroup) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::metaObject", f)
	}
}

func (ptr *QAnimationGroup) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QAnimationGroup::metaObject")
	}
}

func (ptr *QAnimationGroup) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAnimationGroup_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QAnimationGroup) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QAnimationGroup_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QAssociativeIterable struct {
	ptr unsafe.Pointer
}

type QAssociativeIterable_ITF interface {
	QAssociativeIterable_PTR() *QAssociativeIterable
}

func (p *QAssociativeIterable) QAssociativeIterable_PTR() *QAssociativeIterable {
	return p
}

func (p *QAssociativeIterable) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAssociativeIterable) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAssociativeIterable(ptr QAssociativeIterable_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAssociativeIterable_PTR().Pointer()
	}
	return nil
}

func NewQAssociativeIterableFromPointer(ptr unsafe.Pointer) *QAssociativeIterable {
	var n = new(QAssociativeIterable)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAssociativeIterable) DestroyQAssociativeIterable() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QAssociativeIterable) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QAssociativeIterable_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QAssociativeIterable) Value(key QVariant_ITF) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QAssociativeIterable_Value(ptr.Pointer(), PointerFromQVariant(key)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

type QAtomicInt struct {
	QAtomicInteger
}

type QAtomicInt_ITF interface {
	QAtomicInteger_ITF
	QAtomicInt_PTR() *QAtomicInt
}

func (p *QAtomicInt) QAtomicInt_PTR() *QAtomicInt {
	return p
}

func (p *QAtomicInt) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAtomicInteger_PTR().Pointer()
	}
	return nil
}

func (p *QAtomicInt) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAtomicInteger_PTR().SetPointer(ptr)
	}
}

func PointerFromQAtomicInt(ptr QAtomicInt_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAtomicInt_PTR().Pointer()
	}
	return nil
}

func NewQAtomicIntFromPointer(ptr unsafe.Pointer) *QAtomicInt {
	var n = new(QAtomicInt)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAtomicInt) DestroyQAtomicInt() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QAtomicInteger struct {
	ptr unsafe.Pointer
}

type QAtomicInteger_ITF interface {
	QAtomicInteger_PTR() *QAtomicInteger
}

func (p *QAtomicInteger) QAtomicInteger_PTR() *QAtomicInteger {
	return p
}

func (p *QAtomicInteger) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAtomicInteger) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAtomicInteger(ptr QAtomicInteger_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAtomicInteger_PTR().Pointer()
	}
	return nil
}

func NewQAtomicIntegerFromPointer(ptr unsafe.Pointer) *QAtomicInteger {
	var n = new(QAtomicInteger)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAtomicInteger) DestroyQAtomicInteger() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QAtomicPointer struct {
	ptr unsafe.Pointer
}

type QAtomicPointer_ITF interface {
	QAtomicPointer_PTR() *QAtomicPointer
}

func (p *QAtomicPointer) QAtomicPointer_PTR() *QAtomicPointer {
	return p
}

func (p *QAtomicPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QAtomicPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQAtomicPointer(ptr QAtomicPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QAtomicPointer_PTR().Pointer()
	}
	return nil
}

func NewQAtomicPointerFromPointer(ptr unsafe.Pointer) *QAtomicPointer {
	var n = new(QAtomicPointer)
	n.SetPointer(ptr)
	return n
}

func (ptr *QAtomicPointer) DestroyQAtomicPointer() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QBasicTimer struct {
	ptr unsafe.Pointer
}

type QBasicTimer_ITF interface {
	QBasicTimer_PTR() *QBasicTimer
}

func (p *QBasicTimer) QBasicTimer_PTR() *QBasicTimer {
	return p
}

func (p *QBasicTimer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QBasicTimer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQBasicTimer(ptr QBasicTimer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBasicTimer_PTR().Pointer()
	}
	return nil
}

func NewQBasicTimerFromPointer(ptr unsafe.Pointer) *QBasicTimer {
	var n = new(QBasicTimer)
	n.SetPointer(ptr)
	return n
}
func (ptr *QBasicTimer) Start(msec int, object QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QBasicTimer_Start(ptr.Pointer(), C.int(int32(msec)), PointerFromQObject(object))
	}
}

func NewQBasicTimer() *QBasicTimer {
	var tmpValue = NewQBasicTimerFromPointer(C.QBasicTimer_NewQBasicTimer())
	runtime.SetFinalizer(tmpValue, (*QBasicTimer).DestroyQBasicTimer)
	return tmpValue
}

func (ptr *QBasicTimer) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QBasicTimer_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBasicTimer) Start2(msec int, timerType Qt__TimerType, obj QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QBasicTimer_Start2(ptr.Pointer(), C.int(int32(msec)), C.longlong(timerType), PointerFromQObject(obj))
	}
}

func (ptr *QBasicTimer) Stop() {
	if ptr.Pointer() != nil {
		C.QBasicTimer_Stop(ptr.Pointer())
	}
}

func (ptr *QBasicTimer) TimerId() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QBasicTimer_TimerId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QBasicTimer) DestroyQBasicTimer() {
	if ptr.Pointer() != nil {
		C.QBasicTimer_DestroyQBasicTimer(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QBitArray struct {
	ptr unsafe.Pointer
}

type QBitArray_ITF interface {
	QBitArray_PTR() *QBitArray
}

func (p *QBitArray) QBitArray_PTR() *QBitArray {
	return p
}

func (p *QBitArray) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QBitArray) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQBitArray(ptr QBitArray_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBitArray_PTR().Pointer()
	}
	return nil
}

func NewQBitArrayFromPointer(ptr unsafe.Pointer) *QBitArray {
	var n = new(QBitArray)
	n.SetPointer(ptr)
	return n
}

func (ptr *QBitArray) DestroyQBitArray() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQBitArray() *QBitArray {
	var tmpValue = NewQBitArrayFromPointer(C.QBitArray_NewQBitArray())
	runtime.SetFinalizer(tmpValue, (*QBitArray).DestroyQBitArray)
	return tmpValue
}

func NewQBitArray4(other QBitArray_ITF) *QBitArray {
	var tmpValue = NewQBitArrayFromPointer(C.QBitArray_NewQBitArray4(PointerFromQBitArray(other)))
	runtime.SetFinalizer(tmpValue, (*QBitArray).DestroyQBitArray)
	return tmpValue
}

func NewQBitArray3(other QBitArray_ITF) *QBitArray {
	var tmpValue = NewQBitArrayFromPointer(C.QBitArray_NewQBitArray3(PointerFromQBitArray(other)))
	runtime.SetFinalizer(tmpValue, (*QBitArray).DestroyQBitArray)
	return tmpValue
}

func NewQBitArray2(size int, value bool) *QBitArray {
	var tmpValue = NewQBitArrayFromPointer(C.QBitArray_NewQBitArray2(C.int(int32(size)), C.char(int8(qt.GoBoolToInt(value)))))
	runtime.SetFinalizer(tmpValue, (*QBitArray).DestroyQBitArray)
	return tmpValue
}

func (ptr *QBitArray) At(i int) bool {
	if ptr.Pointer() != nil {
		return C.QBitArray_At(ptr.Pointer(), C.int(int32(i))) != 0
	}
	return false
}

func (ptr *QBitArray) Clear() {
	if ptr.Pointer() != nil {
		C.QBitArray_Clear(ptr.Pointer())
	}
}

func (ptr *QBitArray) ClearBit(i int) {
	if ptr.Pointer() != nil {
		C.QBitArray_ClearBit(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QBitArray) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QBitArray_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QBitArray) Count2(on bool) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QBitArray_Count2(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(on))))))
	}
	return 0
}

func (ptr *QBitArray) Fill(value bool, size int) bool {
	if ptr.Pointer() != nil {
		return C.QBitArray_Fill(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(value))), C.int(int32(size))) != 0
	}
	return false
}

func (ptr *QBitArray) Fill2(value bool, begin int, end int) {
	if ptr.Pointer() != nil {
		C.QBitArray_Fill2(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(value))), C.int(int32(begin)), C.int(int32(end)))
	}
}

func (ptr *QBitArray) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QBitArray_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBitArray) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QBitArray_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBitArray) Resize(size int) {
	if ptr.Pointer() != nil {
		C.QBitArray_Resize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QBitArray) SetBit(i int) {
	if ptr.Pointer() != nil {
		C.QBitArray_SetBit(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QBitArray) SetBit2(i int, value bool) {
	if ptr.Pointer() != nil {
		C.QBitArray_SetBit2(ptr.Pointer(), C.int(int32(i)), C.char(int8(qt.GoBoolToInt(value))))
	}
}

func (ptr *QBitArray) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QBitArray_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QBitArray) Swap(other QBitArray_ITF) {
	if ptr.Pointer() != nil {
		C.QBitArray_Swap(ptr.Pointer(), PointerFromQBitArray(other))
	}
}

func (ptr *QBitArray) TestBit(i int) bool {
	if ptr.Pointer() != nil {
		return C.QBitArray_TestBit(ptr.Pointer(), C.int(int32(i))) != 0
	}
	return false
}

func (ptr *QBitArray) ToggleBit(i int) bool {
	if ptr.Pointer() != nil {
		return C.QBitArray_ToggleBit(ptr.Pointer(), C.int(int32(i))) != 0
	}
	return false
}

func (ptr *QBitArray) Truncate(pos int) {
	if ptr.Pointer() != nil {
		C.QBitArray_Truncate(ptr.Pointer(), C.int(int32(pos)))
	}
}

type QBuffer struct {
	QIODevice
}

type QBuffer_ITF interface {
	QIODevice_ITF
	QBuffer_PTR() *QBuffer
}

func (p *QBuffer) QBuffer_PTR() *QBuffer {
	return p
}

func (p *QBuffer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QIODevice_PTR().Pointer()
	}
	return nil
}

func (p *QBuffer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QIODevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQBuffer(ptr QBuffer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QBuffer_PTR().Pointer()
	}
	return nil
}

func NewQBufferFromPointer(ptr unsafe.Pointer) *QBuffer {
	var n = new(QBuffer)
	n.SetPointer(ptr)
	return n
}
func NewQBuffer2(byteArray QByteArray_ITF, parent QObject_ITF) *QBuffer {
	var tmpValue = NewQBufferFromPointer(C.QBuffer_NewQBuffer2(PointerFromQByteArray(byteArray), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQBuffer(parent QObject_ITF) *QBuffer {
	var tmpValue = NewQBufferFromPointer(C.QBuffer_NewQBuffer(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQBuffer_AtEnd
func callbackQBuffer_AtEnd(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::atEnd"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).AtEndDefault())))
}

func (ptr *QBuffer) ConnectAtEnd(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::atEnd", f)
	}
}

func (ptr *QBuffer) DisconnectAtEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::atEnd")
	}
}

func (ptr *QBuffer) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBuffer) AtEndDefault() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_AtEndDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBuffer) Buffer() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QBuffer_Buffer(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QBuffer) Buffer2() *QByteArray {
	if ptr.Pointer() != nil {
		return NewQByteArrayFromPointer(C.QBuffer_Buffer2(ptr.Pointer()))
	}
	return nil
}

//export callbackQBuffer_CanReadLine
func callbackQBuffer_CanReadLine(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::canReadLine"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).CanReadLineDefault())))
}

func (ptr *QBuffer) ConnectCanReadLine(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::canReadLine", f)
	}
}

func (ptr *QBuffer) DisconnectCanReadLine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::canReadLine")
	}
}

func (ptr *QBuffer) CanReadLine() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_CanReadLine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBuffer) CanReadLineDefault() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_CanReadLineDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQBuffer_Close
func callbackQBuffer_Close(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::close"); signal != nil {
		signal.(func())()
	} else {
		NewQBufferFromPointer(ptr).CloseDefault()
	}
}

func (ptr *QBuffer) ConnectClose(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::close", f)
	}
}

func (ptr *QBuffer) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::close")
	}
}

func (ptr *QBuffer) Close() {
	if ptr.Pointer() != nil {
		C.QBuffer_Close(ptr.Pointer())
	}
}

func (ptr *QBuffer) CloseDefault() {
	if ptr.Pointer() != nil {
		C.QBuffer_CloseDefault(ptr.Pointer())
	}
}

func (ptr *QBuffer) Data() *QByteArray {
	if ptr.Pointer() != nil {
		return NewQByteArrayFromPointer(C.QBuffer_Data(ptr.Pointer()))
	}
	return nil
}

//export callbackQBuffer_Open
func callbackQBuffer_Open(ptr unsafe.Pointer, flags C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::open"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QIODevice__OpenModeFlag) bool)(QIODevice__OpenModeFlag(flags)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).OpenDefault(QIODevice__OpenModeFlag(flags)))))
}

func (ptr *QBuffer) ConnectOpen(f func(flags QIODevice__OpenModeFlag) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::open", f)
	}
}

func (ptr *QBuffer) DisconnectOpen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::open")
	}
}

func (ptr *QBuffer) Open(flags QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_Open(ptr.Pointer(), C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QBuffer) OpenDefault(flags QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_OpenDefault(ptr.Pointer(), C.longlong(flags)) != 0
	}
	return false
}

//export callbackQBuffer_Pos
func callbackQBuffer_Pos(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::pos"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQBufferFromPointer(ptr).PosDefault())
}

func (ptr *QBuffer) ConnectPos(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::pos", f)
	}
}

func (ptr *QBuffer) DisconnectPos() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::pos")
	}
}

func (ptr *QBuffer) Pos() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_Pos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QBuffer) PosDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_PosDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQBuffer_Seek
func callbackQBuffer_Seek(ptr unsafe.Pointer, pos C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::seek"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(pos)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).SeekDefault(int64(pos)))))
}

func (ptr *QBuffer) ConnectSeek(f func(pos int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::seek", f)
	}
}

func (ptr *QBuffer) DisconnectSeek() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::seek")
	}
}

func (ptr *QBuffer) Seek(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_Seek(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QBuffer) SeekDefault(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_SeekDefault(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QBuffer) SetBuffer(byteArray QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_SetBuffer(ptr.Pointer(), PointerFromQByteArray(byteArray))
	}
}

func (ptr *QBuffer) SetData(data QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_SetData(ptr.Pointer(), PointerFromQByteArray(data))
	}
}

func (ptr *QBuffer) SetData2(data string, size int) {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QBuffer_SetData2(ptr.Pointer(), dataC, C.int(int32(size)))
	}
}

//export callbackQBuffer_Size
func callbackQBuffer_Size(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::size"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQBufferFromPointer(ptr).SizeDefault())
}

func (ptr *QBuffer) ConnectSize(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::size", f)
	}
}

func (ptr *QBuffer) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::size")
	}
}

func (ptr *QBuffer) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QBuffer) SizeDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_SizeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQBuffer_WriteData
func callbackQBuffer_WriteData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, len C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::writeData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(len)))
	}

	return C.longlong(NewQBufferFromPointer(ptr).WriteDataDefault(cGoUnpackString(data), int64(len)))
}

func (ptr *QBuffer) ConnectWriteData(f func(data string, len int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::writeData", f)
	}
}

func (ptr *QBuffer) DisconnectWriteData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::writeData")
	}
}

func (ptr *QBuffer) WriteData(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QBuffer_WriteData(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QBuffer) WriteDataDefault(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QBuffer_WriteDataDefault(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QBuffer) DestroyQBuffer() {
	if ptr.Pointer() != nil {
		C.QBuffer_DestroyQBuffer(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQBuffer_BytesAvailable
func callbackQBuffer_BytesAvailable(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::bytesAvailable"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQBufferFromPointer(ptr).BytesAvailableDefault())
}

func (ptr *QBuffer) ConnectBytesAvailable(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::bytesAvailable", f)
	}
}

func (ptr *QBuffer) DisconnectBytesAvailable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::bytesAvailable")
	}
}

func (ptr *QBuffer) BytesAvailable() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_BytesAvailable(ptr.Pointer()))
	}
	return 0
}

func (ptr *QBuffer) BytesAvailableDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_BytesAvailableDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQBuffer_BytesToWrite
func callbackQBuffer_BytesToWrite(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::bytesToWrite"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQBufferFromPointer(ptr).BytesToWriteDefault())
}

func (ptr *QBuffer) ConnectBytesToWrite(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::bytesToWrite", f)
	}
}

func (ptr *QBuffer) DisconnectBytesToWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::bytesToWrite")
	}
}

func (ptr *QBuffer) BytesToWrite() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_BytesToWrite(ptr.Pointer()))
	}
	return 0
}

func (ptr *QBuffer) BytesToWriteDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QBuffer_BytesToWriteDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQBuffer_IsSequential
func callbackQBuffer_IsSequential(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::isSequential"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).IsSequentialDefault())))
}

func (ptr *QBuffer) ConnectIsSequential(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::isSequential", f)
	}
}

func (ptr *QBuffer) DisconnectIsSequential() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::isSequential")
	}
}

func (ptr *QBuffer) IsSequential() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_IsSequential(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBuffer) IsSequentialDefault() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_IsSequentialDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQBuffer_ReadLineData
func callbackQBuffer_ReadLineData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, maxSize C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::readLineData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(maxSize)))
	}

	return C.longlong(NewQBufferFromPointer(ptr).ReadLineDataDefault(cGoUnpackString(data), int64(maxSize)))
}

func (ptr *QBuffer) ConnectReadLineData(f func(data string, maxSize int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::readLineData", f)
	}
}

func (ptr *QBuffer) DisconnectReadLineData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::readLineData")
	}
}

func (ptr *QBuffer) ReadLineData(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QBuffer_ReadLineData(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

func (ptr *QBuffer) ReadLineDataDefault(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QBuffer_ReadLineDataDefault(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

//export callbackQBuffer_Reset
func callbackQBuffer_Reset(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::reset"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).ResetDefault())))
}

func (ptr *QBuffer) ConnectReset(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::reset", f)
	}
}

func (ptr *QBuffer) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::reset")
	}
}

func (ptr *QBuffer) Reset() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_Reset(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QBuffer) ResetDefault() bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_ResetDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQBuffer_WaitForBytesWritten
func callbackQBuffer_WaitForBytesWritten(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::waitForBytesWritten"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).WaitForBytesWrittenDefault(int(int32(msecs))))))
}

func (ptr *QBuffer) ConnectWaitForBytesWritten(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::waitForBytesWritten", f)
	}
}

func (ptr *QBuffer) DisconnectWaitForBytesWritten() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::waitForBytesWritten")
	}
}

func (ptr *QBuffer) WaitForBytesWritten(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_WaitForBytesWritten(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QBuffer) WaitForBytesWrittenDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_WaitForBytesWrittenDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQBuffer_WaitForReadyRead
func callbackQBuffer_WaitForReadyRead(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::waitForReadyRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).WaitForReadyReadDefault(int(int32(msecs))))))
}

func (ptr *QBuffer) ConnectWaitForReadyRead(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::waitForReadyRead", f)
	}
}

func (ptr *QBuffer) DisconnectWaitForReadyRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::waitForReadyRead")
	}
}

func (ptr *QBuffer) WaitForReadyRead(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_WaitForReadyRead(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QBuffer) WaitForReadyReadDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_WaitForReadyReadDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQBuffer_TimerEvent
func callbackQBuffer_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQBufferFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QBuffer) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::timerEvent", f)
	}
}

func (ptr *QBuffer) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::timerEvent")
	}
}

func (ptr *QBuffer) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QBuffer) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQBuffer_ChildEvent
func callbackQBuffer_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQBufferFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QBuffer) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::childEvent", f)
	}
}

func (ptr *QBuffer) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::childEvent")
	}
}

func (ptr *QBuffer) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QBuffer) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQBuffer_ConnectNotify
func callbackQBuffer_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQBufferFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QBuffer) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::connectNotify", f)
	}
}

func (ptr *QBuffer) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::connectNotify")
	}
}

func (ptr *QBuffer) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QBuffer) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQBuffer_CustomEvent
func callbackQBuffer_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQBufferFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QBuffer) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::customEvent", f)
	}
}

func (ptr *QBuffer) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::customEvent")
	}
}

func (ptr *QBuffer) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QBuffer) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQBuffer_DeleteLater
func callbackQBuffer_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQBufferFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QBuffer) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::deleteLater", f)
	}
}

func (ptr *QBuffer) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::deleteLater")
	}
}

func (ptr *QBuffer) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QBuffer_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QBuffer) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QBuffer_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQBuffer_DisconnectNotify
func callbackQBuffer_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQBufferFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QBuffer) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::disconnectNotify", f)
	}
}

func (ptr *QBuffer) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::disconnectNotify")
	}
}

func (ptr *QBuffer) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QBuffer) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QBuffer_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQBuffer_Event
func callbackQBuffer_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QBuffer) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::event", f)
	}
}

func (ptr *QBuffer) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::event")
	}
}

func (ptr *QBuffer) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QBuffer) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQBuffer_EventFilter
func callbackQBuffer_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQBufferFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QBuffer) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::eventFilter", f)
	}
}

func (ptr *QBuffer) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::eventFilter")
	}
}

func (ptr *QBuffer) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QBuffer) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QBuffer_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQBuffer_MetaObject
func callbackQBuffer_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QBuffer::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQBufferFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QBuffer) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::metaObject", f)
	}
}

func (ptr *QBuffer) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QBuffer::metaObject")
	}
}

func (ptr *QBuffer) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QBuffer_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QBuffer) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QBuffer_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QByteArray::Base64Option
type QByteArray__Base64Option int64

const (
	QByteArray__Base64Encoding     = QByteArray__Base64Option(0)
	QByteArray__Base64UrlEncoding  = QByteArray__Base64Option(1)
	QByteArray__KeepTrailingEquals = QByteArray__Base64Option(0)
	QByteArray__OmitTrailingEquals = QByteArray__Base64Option(2)
)

type QByteArray struct {
	ptr unsafe.Pointer
}

type QByteArray_ITF interface {
	QByteArray_PTR() *QByteArray
}

func (p *QByteArray) QByteArray_PTR() *QByteArray {
	return p
}

func (p *QByteArray) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QByteArray) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQByteArray(ptr QByteArray_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QByteArray_PTR().Pointer()
	}
	return nil
}

func NewQByteArrayFromPointer(ptr unsafe.Pointer) *QByteArray {
	var n = new(QByteArray)
	n.SetPointer(ptr)
	return n
}
func (ptr *QByteArray) Clear() {
	if ptr.Pointer() != nil {
		C.QByteArray_Clear(ptr.Pointer())
	}
}

func (ptr *QByteArray) IndexOf2(str string, from int) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QByteArray_IndexOf2(ptr.Pointer(), strC, C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) Insert2(i int, count int, ch string) *QByteArray {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Insert2(ptr.Pointer(), C.int(int32(i)), C.int(int32(count)), chC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QByteArray_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QByteArray) LastIndexOf(ba QByteArray_ITF, from int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_LastIndexOf(ptr.Pointer(), PointerFromQByteArray(ba), C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) LastIndexOf2(str string, from int) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QByteArray_LastIndexOf2(ptr.Pointer(), strC, C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) Replace10(before string, after QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace10(ptr.Pointer(), beforeC, PointerFromQByteArray(after)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace2(pos int, len int, after string, alen int) *QByteArray {
	if ptr.Pointer() != nil {
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace2(ptr.Pointer(), C.int(int32(pos)), C.int(int32(len)), afterC, C.int(int32(alen))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace7(before string, bsize int, after string, asize int) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace7(ptr.Pointer(), beforeC, C.int(int32(bsize)), afterC, C.int(int32(asize))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace3(pos int, len int, after string) *QByteArray {
	if ptr.Pointer() != nil {
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace3(ptr.Pointer(), C.int(int32(pos)), C.int(int32(len)), afterC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func NewQByteArray() *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_NewQByteArray())
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func NewQByteArray6(other QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_NewQByteArray6(PointerFromQByteArray(other)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func NewQByteArray5(other QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_NewQByteArray5(PointerFromQByteArray(other)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func NewQByteArray2(data string, size int) *QByteArray {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_NewQByteArray2(dataC, C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func NewQByteArray3(size int, ch string) *QByteArray {
	var chC = C.CString(ch)
	defer C.free(unsafe.Pointer(chC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_NewQByteArray3(C.int(int32(size)), chC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) Append5(ch string) *QByteArray {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Append5(ptr.Pointer(), chC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Append(ba QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Append(ptr.Pointer(), PointerFromQByteArray(ba)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Append6(str string) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Append6(ptr.Pointer(), strC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Append3(str string) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Append3(ptr.Pointer(), strC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Append4(str string, len int) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Append4(ptr.Pointer(), strC, C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Append2(count int, ch string) *QByteArray {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Append2(ptr.Pointer(), C.int(int32(count)), chC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) At(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QByteArray_At(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QByteArray) Capacity() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_Capacity(ptr.Pointer())))
	}
	return 0
}

func (ptr *QByteArray) Chop(n int) {
	if ptr.Pointer() != nil {
		C.QByteArray_Chop(ptr.Pointer(), C.int(int32(n)))
	}
}

func (ptr *QByteArray) ConstData() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QByteArray_ConstData(ptr.Pointer()))
	}
	return ""
}

func (ptr *QByteArray) Contains3(ch string) bool {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		return C.QByteArray_Contains3(ptr.Pointer(), chC) != 0
	}
	return false
}

func (ptr *QByteArray) Contains(ba QByteArray_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QByteArray_Contains(ptr.Pointer(), PointerFromQByteArray(ba)) != 0
	}
	return false
}

func (ptr *QByteArray) Contains2(str string) bool {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return C.QByteArray_Contains2(ptr.Pointer(), strC) != 0
	}
	return false
}

func (ptr *QByteArray) Count4() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_Count4(ptr.Pointer())))
	}
	return 0
}

func (ptr *QByteArray) Count3(ch string) int {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		return int(int32(C.QByteArray_Count3(ptr.Pointer(), chC)))
	}
	return 0
}

func (ptr *QByteArray) Count(ba QByteArray_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_Count(ptr.Pointer(), PointerFromQByteArray(ba))))
	}
	return 0
}

func (ptr *QByteArray) Count2(str string) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QByteArray_Count2(ptr.Pointer(), strC)))
	}
	return 0
}

func (ptr *QByteArray) Data() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QByteArray_Data(ptr.Pointer()))
	}
	return ""
}

func (ptr *QByteArray) Data2() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QByteArray_Data2(ptr.Pointer()))
	}
	return ""
}

func QByteArray_FromRawData(data string, size int) *QByteArray {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromRawData(dataC, C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) FromRawData(data string, size int) *QByteArray {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromRawData(dataC, C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) EndsWith2(ch string) bool {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		return C.QByteArray_EndsWith2(ptr.Pointer(), chC) != 0
	}
	return false
}

func (ptr *QByteArray) EndsWith(ba QByteArray_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QByteArray_EndsWith(ptr.Pointer(), PointerFromQByteArray(ba)) != 0
	}
	return false
}

func (ptr *QByteArray) EndsWith3(str string) bool {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return C.QByteArray_EndsWith3(ptr.Pointer(), strC) != 0
	}
	return false
}

func (ptr *QByteArray) Fill(ch string, size int) *QByteArray {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Fill(ptr.Pointer(), chC, C.int(int32(size))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func QByteArray_FromBase64(base64 QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromBase64(PointerFromQByteArray(base64)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) FromBase64(base64 QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromBase64(PointerFromQByteArray(base64)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QByteArray_FromBase642(base64 QByteArray_ITF, options QByteArray__Base64Option) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromBase642(PointerFromQByteArray(base64), C.longlong(options)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) FromBase642(base64 QByteArray_ITF, options QByteArray__Base64Option) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromBase642(PointerFromQByteArray(base64), C.longlong(options)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QByteArray_FromHex(hexEncoded QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromHex(PointerFromQByteArray(hexEncoded)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) FromHex(hexEncoded QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromHex(PointerFromQByteArray(hexEncoded)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QByteArray_FromPercentEncoding(input QByteArray_ITF, percent string) *QByteArray {
	var percentC = C.CString(percent)
	defer C.free(unsafe.Pointer(percentC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromPercentEncoding(PointerFromQByteArray(input), percentC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) FromPercentEncoding(input QByteArray_ITF, percent string) *QByteArray {
	var percentC = C.CString(percent)
	defer C.free(unsafe.Pointer(percentC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_FromPercentEncoding(PointerFromQByteArray(input), percentC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) IndexOf3(ch string, from int) int {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		return int(int32(C.QByteArray_IndexOf3(ptr.Pointer(), chC, C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) IndexOf(ba QByteArray_ITF, from int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_IndexOf(ptr.Pointer(), PointerFromQByteArray(ba), C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) IndexOf4(str string, from int) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QByteArray_IndexOf4(ptr.Pointer(), strC, C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) Insert5(i int, ch string) *QByteArray {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Insert5(ptr.Pointer(), C.int(int32(i)), chC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Insert(i int, ba QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Insert(ptr.Pointer(), C.int(int32(i)), PointerFromQByteArray(ba)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Insert6(i int, str string) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Insert6(ptr.Pointer(), C.int(int32(i)), strC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Insert3(i int, str string) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Insert3(ptr.Pointer(), C.int(int32(i)), strC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Insert4(i int, str string, len int) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Insert4(ptr.Pointer(), C.int(int32(i)), strC, C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QByteArray_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QByteArray) LastIndexOf3(ch string, from int) int {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		return int(int32(C.QByteArray_LastIndexOf3(ptr.Pointer(), chC, C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) LastIndexOf4(str string, from int) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QByteArray_LastIndexOf4(ptr.Pointer(), strC, C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArray) Left(len int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Left(ptr.Pointer(), C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) LeftJustified(width int, fill string, truncate bool) *QByteArray {
	if ptr.Pointer() != nil {
		var fillC = C.CString(fill)
		defer C.free(unsafe.Pointer(fillC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_LeftJustified(ptr.Pointer(), C.int(int32(width)), fillC, C.char(int8(qt.GoBoolToInt(truncate)))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Length() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_Length(ptr.Pointer())))
	}
	return 0
}

func (ptr *QByteArray) Mid(pos int, len int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Mid(ptr.Pointer(), C.int(int32(pos)), C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func QByteArray_Number5(n float64, f string, prec int) *QByteArray {
	var fC = C.CString(f)
	defer C.free(unsafe.Pointer(fC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number5(C.double(n), fC, C.int(int32(prec))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) Number5(n float64, f string, prec int) *QByteArray {
	var fC = C.CString(f)
	defer C.free(unsafe.Pointer(fC))
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number5(C.double(n), fC, C.int(int32(prec))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QByteArray_Number(n int, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number(C.int(int32(n)), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) Number(n int, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number(C.int(int32(n)), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QByteArray_Number3(n int64, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number3(C.longlong(n), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) Number3(n int64, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number3(C.longlong(n), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QByteArray_Number4(n uint64, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number4(C.ulonglong(n), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) Number4(n uint64, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number4(C.ulonglong(n), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QByteArray_Number2(n uint, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number2(C.uint(uint32(n)), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) Number2(n uint, base int) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QByteArray_QByteArray_Number2(C.uint(uint32(n)), C.int(int32(base))))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QByteArray) Prepend5(ch string) *QByteArray {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Prepend5(ptr.Pointer(), chC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Prepend(ba QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Prepend(ptr.Pointer(), PointerFromQByteArray(ba)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Prepend3(str string) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Prepend3(ptr.Pointer(), strC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Prepend4(str string, len int) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Prepend4(ptr.Pointer(), strC, C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Prepend2(count int, ch string) *QByteArray {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Prepend2(ptr.Pointer(), C.int(int32(count)), chC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Push_back3(ch string) {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		C.QByteArray_Push_back3(ptr.Pointer(), chC)
	}
}

func (ptr *QByteArray) Push_back(other QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QByteArray_Push_back(ptr.Pointer(), PointerFromQByteArray(other))
	}
}

func (ptr *QByteArray) Push_back2(str string) {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		C.QByteArray_Push_back2(ptr.Pointer(), strC)
	}
}

func (ptr *QByteArray) Push_front3(ch string) {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		C.QByteArray_Push_front3(ptr.Pointer(), chC)
	}
}

func (ptr *QByteArray) Push_front(other QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QByteArray_Push_front(ptr.Pointer(), PointerFromQByteArray(other))
	}
}

func (ptr *QByteArray) Push_front2(str string) {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		C.QByteArray_Push_front2(ptr.Pointer(), strC)
	}
}

func (ptr *QByteArray) Remove(pos int, len int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Remove(ptr.Pointer(), C.int(int32(pos)), C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Repeated(times int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Repeated(ptr.Pointer(), C.int(int32(times))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace11(before string, after string) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace11(ptr.Pointer(), beforeC, afterC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace5(before string, after QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace5(ptr.Pointer(), beforeC, PointerFromQByteArray(after)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace13(before string, after string) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace13(ptr.Pointer(), beforeC, afterC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace4(before string, after string) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace4(ptr.Pointer(), beforeC, afterC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace8(before QByteArray_ITF, after QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace8(ptr.Pointer(), PointerFromQByteArray(before), PointerFromQByteArray(after)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace9(before QByteArray_ITF, after string) *QByteArray {
	if ptr.Pointer() != nil {
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace9(ptr.Pointer(), PointerFromQByteArray(before), afterC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace14(before string, after QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace14(ptr.Pointer(), beforeC, PointerFromQByteArray(after)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace12(before string, after string) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace12(ptr.Pointer(), beforeC, afterC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace6(before string, after string) *QByteArray {
	if ptr.Pointer() != nil {
		var beforeC = C.CString(before)
		defer C.free(unsafe.Pointer(beforeC))
		var afterC = C.CString(after)
		defer C.free(unsafe.Pointer(afterC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace6(ptr.Pointer(), beforeC, afterC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Replace(pos int, len int, after QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Replace(ptr.Pointer(), C.int(int32(pos)), C.int(int32(len)), PointerFromQByteArray(after)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Reserve(size int) {
	if ptr.Pointer() != nil {
		C.QByteArray_Reserve(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QByteArray) Resize(size int) {
	if ptr.Pointer() != nil {
		C.QByteArray_Resize(ptr.Pointer(), C.int(int32(size)))
	}
}

func (ptr *QByteArray) Right(len int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Right(ptr.Pointer(), C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) RightJustified(width int, fill string, truncate bool) *QByteArray {
	if ptr.Pointer() != nil {
		var fillC = C.CString(fill)
		defer C.free(unsafe.Pointer(fillC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_RightJustified(ptr.Pointer(), C.int(int32(width)), fillC, C.char(int8(qt.GoBoolToInt(truncate)))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum8(n float64, f string, prec int) *QByteArray {
	if ptr.Pointer() != nil {
		var fC = C.CString(f)
		defer C.free(unsafe.Pointer(fC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum8(ptr.Pointer(), C.double(n), fC, C.int(int32(prec))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum7(n float32, f string, prec int) *QByteArray {
	if ptr.Pointer() != nil {
		var fC = C.CString(f)
		defer C.free(unsafe.Pointer(fC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum7(ptr.Pointer(), C.float(n), fC, C.int(int32(prec))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum(n int, base int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum(ptr.Pointer(), C.int(int32(n)), C.int(int32(base))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum5(n int64, base int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum5(ptr.Pointer(), C.longlong(n), C.int(int32(base))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum6(n uint64, base int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum6(ptr.Pointer(), C.ulonglong(n), C.int(int32(base))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum3(n int16, base int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum3(ptr.Pointer(), C.short(n), C.int(int32(base))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum4(n uint, base int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum4(ptr.Pointer(), C.uint(uint32(n)), C.int(int32(base))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetNum2(n uint16, base int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetNum2(ptr.Pointer(), C.ushort(n), C.int(int32(base))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) SetRawData(data string, size uint) *QByteArray {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_SetRawData(ptr.Pointer(), dataC, C.uint(uint32(size))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QByteArray) Split(sep string) []*QByteArray {
	if ptr.Pointer() != nil {
		var sepC = C.CString(sep)
		defer C.free(unsafe.Pointer(sepC))
		return func(l C.struct_QtCore_PackedList) []*QByteArray {
			var out = make([]*QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQByteArrayFromPointer(l.data).split_atList(i)
			}
			return out
		}(C.QByteArray_Split(ptr.Pointer(), sepC))
	}
	return nil
}

func (ptr *QByteArray) Squeeze() {
	if ptr.Pointer() != nil {
		C.QByteArray_Squeeze(ptr.Pointer())
	}
}

func (ptr *QByteArray) StartsWith2(ch string) bool {
	if ptr.Pointer() != nil {
		var chC = C.CString(ch)
		defer C.free(unsafe.Pointer(chC))
		return C.QByteArray_StartsWith2(ptr.Pointer(), chC) != 0
	}
	return false
}

func (ptr *QByteArray) StartsWith(ba QByteArray_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QByteArray_StartsWith(ptr.Pointer(), PointerFromQByteArray(ba)) != 0
	}
	return false
}

func (ptr *QByteArray) StartsWith3(str string) bool {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return C.QByteArray_StartsWith3(ptr.Pointer(), strC) != 0
	}
	return false
}

func (ptr *QByteArray) Swap(other QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QByteArray_Swap(ptr.Pointer(), PointerFromQByteArray(other))
	}
}

func (ptr *QByteArray) ToBase64() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_ToBase64(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) ToBase642(options QByteArray__Base64Option) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_ToBase642(ptr.Pointer(), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) ToDouble(ok bool) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QByteArray_ToDouble(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QByteArray) ToFloat(ok bool) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QByteArray_ToFloat(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QByteArray) ToHex() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_ToHex(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) ToInt(ok bool, base int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_ToInt(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func (ptr *QByteArray) ToLong(ok bool, base int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArray_ToLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func (ptr *QByteArray) ToLongLong(ok bool, base int) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QByteArray_ToLongLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QByteArray) ToPercentEncoding(exclude QByteArray_ITF, include QByteArray_ITF, percent string) *QByteArray {
	if ptr.Pointer() != nil {
		var percentC = C.CString(percent)
		defer C.free(unsafe.Pointer(percentC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_ToPercentEncoding(ptr.Pointer(), PointerFromQByteArray(exclude), PointerFromQByteArray(include), percentC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) ToShort(ok bool, base int) int16 {
	if ptr.Pointer() != nil {
		return int16(C.QByteArray_ToShort(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QByteArray) ToUInt(ok bool, base int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QByteArray_ToUInt(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func (ptr *QByteArray) ToULong(ok bool, base int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QByteArray_ToULong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func (ptr *QByteArray) ToULongLong(ok bool, base int) uint64 {
	if ptr.Pointer() != nil {
		return uint64(C.QByteArray_ToULongLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QByteArray) ToUShort(ok bool, base int) uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QByteArray_ToUShort(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QByteArray) Truncate(pos int) {
	if ptr.Pointer() != nil {
		C.QByteArray_Truncate(ptr.Pointer(), C.int(int32(pos)))
	}
}

func (ptr *QByteArray) DestroyQByteArray() {
	if ptr.Pointer() != nil {
		C.QByteArray_DestroyQByteArray(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QByteArray) Simplified() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Simplified(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) ToLower() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_ToLower(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) ToUpper() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_ToUpper(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) Trimmed() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_Trimmed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArray) split_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArray_split_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

type QByteArrayList struct {
	QList
}

type QByteArrayList_ITF interface {
	QList_ITF
	QByteArrayList_PTR() *QByteArrayList
}

func (p *QByteArrayList) QByteArrayList_PTR() *QByteArrayList {
	return p
}

func (p *QByteArrayList) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QList_PTR().Pointer()
	}
	return nil
}

func (p *QByteArrayList) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QList_PTR().SetPointer(ptr)
	}
}

func PointerFromQByteArrayList(ptr QByteArrayList_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QByteArrayList_PTR().Pointer()
	}
	return nil
}

func NewQByteArrayListFromPointer(ptr unsafe.Pointer) *QByteArrayList {
	var n = new(QByteArrayList)
	n.SetPointer(ptr)
	return n
}

func (ptr *QByteArrayList) DestroyQByteArrayList() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QByteArrayList) Join() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArrayList_Join(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArrayList) Join3(separator string) *QByteArray {
	if ptr.Pointer() != nil {
		var separatorC = C.CString(separator)
		defer C.free(unsafe.Pointer(separatorC))
		var tmpValue = NewQByteArrayFromPointer(C.QByteArrayList_Join3(ptr.Pointer(), separatorC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArrayList) Join2(separator QByteArray_ITF) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArrayList_Join2(ptr.Pointer(), PointerFromQByteArray(separator)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

type QByteArrayMatcher struct {
	ptr unsafe.Pointer
}

type QByteArrayMatcher_ITF interface {
	QByteArrayMatcher_PTR() *QByteArrayMatcher
}

func (p *QByteArrayMatcher) QByteArrayMatcher_PTR() *QByteArrayMatcher {
	return p
}

func (p *QByteArrayMatcher) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QByteArrayMatcher) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQByteArrayMatcher(ptr QByteArrayMatcher_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QByteArrayMatcher_PTR().Pointer()
	}
	return nil
}

func NewQByteArrayMatcherFromPointer(ptr unsafe.Pointer) *QByteArrayMatcher {
	var n = new(QByteArrayMatcher)
	n.SetPointer(ptr)
	return n
}
func NewQByteArrayMatcher() *QByteArrayMatcher {
	var tmpValue = NewQByteArrayMatcherFromPointer(C.QByteArrayMatcher_NewQByteArrayMatcher())
	runtime.SetFinalizer(tmpValue, (*QByteArrayMatcher).DestroyQByteArrayMatcher)
	return tmpValue
}

func NewQByteArrayMatcher2(pattern QByteArray_ITF) *QByteArrayMatcher {
	var tmpValue = NewQByteArrayMatcherFromPointer(C.QByteArrayMatcher_NewQByteArrayMatcher2(PointerFromQByteArray(pattern)))
	runtime.SetFinalizer(tmpValue, (*QByteArrayMatcher).DestroyQByteArrayMatcher)
	return tmpValue
}

func NewQByteArrayMatcher4(other QByteArrayMatcher_ITF) *QByteArrayMatcher {
	var tmpValue = NewQByteArrayMatcherFromPointer(C.QByteArrayMatcher_NewQByteArrayMatcher4(PointerFromQByteArrayMatcher(other)))
	runtime.SetFinalizer(tmpValue, (*QByteArrayMatcher).DestroyQByteArrayMatcher)
	return tmpValue
}

func NewQByteArrayMatcher3(pattern string, length int) *QByteArrayMatcher {
	var patternC = C.CString(pattern)
	defer C.free(unsafe.Pointer(patternC))
	var tmpValue = NewQByteArrayMatcherFromPointer(C.QByteArrayMatcher_NewQByteArrayMatcher3(patternC, C.int(int32(length))))
	runtime.SetFinalizer(tmpValue, (*QByteArrayMatcher).DestroyQByteArrayMatcher)
	return tmpValue
}

func (ptr *QByteArrayMatcher) IndexIn(ba QByteArray_ITF, from int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QByteArrayMatcher_IndexIn(ptr.Pointer(), PointerFromQByteArray(ba), C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArrayMatcher) IndexIn2(str string, len int, from int) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QByteArrayMatcher_IndexIn2(ptr.Pointer(), strC, C.int(int32(len)), C.int(int32(from)))))
	}
	return 0
}

func (ptr *QByteArrayMatcher) Pattern() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QByteArrayMatcher_Pattern(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QByteArrayMatcher) SetPattern(pattern QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QByteArrayMatcher_SetPattern(ptr.Pointer(), PointerFromQByteArray(pattern))
	}
}

func (ptr *QByteArrayMatcher) DestroyQByteArrayMatcher() {
	if ptr.Pointer() != nil {
		C.QByteArrayMatcher_DestroyQByteArrayMatcher(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QCache struct {
	ptr unsafe.Pointer
}

type QCache_ITF interface {
	QCache_PTR() *QCache
}

func (p *QCache) QCache_PTR() *QCache {
	return p
}

func (p *QCache) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCache) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCache(ptr QCache_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCache_PTR().Pointer()
	}
	return nil
}

func NewQCacheFromPointer(ptr unsafe.Pointer) *QCache {
	var n = new(QCache)
	n.SetPointer(ptr)
	return n
}

//QChar::Category
type QChar__Category int64

const (
	QChar__Mark_NonSpacing          = QChar__Category(0)
	QChar__Mark_SpacingCombining    = QChar__Category(1)
	QChar__Mark_Enclosing           = QChar__Category(2)
	QChar__Number_DecimalDigit      = QChar__Category(3)
	QChar__Number_Letter            = QChar__Category(4)
	QChar__Number_Other             = QChar__Category(5)
	QChar__Separator_Space          = QChar__Category(6)
	QChar__Separator_Line           = QChar__Category(7)
	QChar__Separator_Paragraph      = QChar__Category(8)
	QChar__Other_Control            = QChar__Category(9)
	QChar__Other_Format             = QChar__Category(10)
	QChar__Other_Surrogate          = QChar__Category(11)
	QChar__Other_PrivateUse         = QChar__Category(12)
	QChar__Other_NotAssigned        = QChar__Category(13)
	QChar__Letter_Uppercase         = QChar__Category(14)
	QChar__Letter_Lowercase         = QChar__Category(15)
	QChar__Letter_Titlecase         = QChar__Category(16)
	QChar__Letter_Modifier          = QChar__Category(17)
	QChar__Letter_Other             = QChar__Category(18)
	QChar__Punctuation_Connector    = QChar__Category(19)
	QChar__Punctuation_Dash         = QChar__Category(20)
	QChar__Punctuation_Open         = QChar__Category(21)
	QChar__Punctuation_Close        = QChar__Category(22)
	QChar__Punctuation_InitialQuote = QChar__Category(23)
	QChar__Punctuation_FinalQuote   = QChar__Category(24)
	QChar__Punctuation_Other        = QChar__Category(25)
	QChar__Symbol_Math              = QChar__Category(26)
	QChar__Symbol_Currency          = QChar__Category(27)
	QChar__Symbol_Modifier          = QChar__Category(28)
	QChar__Symbol_Other             = QChar__Category(29)
)

//QChar::Decomposition
type QChar__Decomposition int64

const (
	QChar__NoDecomposition = QChar__Decomposition(0)
	QChar__Canonical       = QChar__Decomposition(1)
	QChar__Font            = QChar__Decomposition(2)
	QChar__NoBreak         = QChar__Decomposition(3)
	QChar__Initial         = QChar__Decomposition(4)
	QChar__Medial          = QChar__Decomposition(5)
	QChar__Final           = QChar__Decomposition(6)
	QChar__Isolated        = QChar__Decomposition(7)
	QChar__Circle          = QChar__Decomposition(8)
	QChar__Super           = QChar__Decomposition(9)
	QChar__Sub             = QChar__Decomposition(10)
	QChar__Vertical        = QChar__Decomposition(11)
	QChar__Wide            = QChar__Decomposition(12)
	QChar__Narrow          = QChar__Decomposition(13)
	QChar__Small           = QChar__Decomposition(14)
	QChar__Square          = QChar__Decomposition(15)
	QChar__Compat          = QChar__Decomposition(16)
	QChar__Fraction        = QChar__Decomposition(17)
)

//QChar::Direction
type QChar__Direction int64

const (
	QChar__DirL   = QChar__Direction(0)
	QChar__DirR   = QChar__Direction(1)
	QChar__DirEN  = QChar__Direction(2)
	QChar__DirES  = QChar__Direction(3)
	QChar__DirET  = QChar__Direction(4)
	QChar__DirAN  = QChar__Direction(5)
	QChar__DirCS  = QChar__Direction(6)
	QChar__DirB   = QChar__Direction(7)
	QChar__DirS   = QChar__Direction(8)
	QChar__DirWS  = QChar__Direction(9)
	QChar__DirON  = QChar__Direction(10)
	QChar__DirLRE = QChar__Direction(11)
	QChar__DirLRO = QChar__Direction(12)
	QChar__DirAL  = QChar__Direction(13)
	QChar__DirRLE = QChar__Direction(14)
	QChar__DirRLO = QChar__Direction(15)
	QChar__DirPDF = QChar__Direction(16)
	QChar__DirNSM = QChar__Direction(17)
	QChar__DirBN  = QChar__Direction(18)
	QChar__DirLRI = QChar__Direction(19)
	QChar__DirRLI = QChar__Direction(20)
	QChar__DirFSI = QChar__Direction(21)
	QChar__DirPDI = QChar__Direction(22)
)

//QChar::JoiningType
type QChar__JoiningType int64

const (
	QChar__Joining_None        = QChar__JoiningType(0)
	QChar__Joining_Causing     = QChar__JoiningType(1)
	QChar__Joining_Dual        = QChar__JoiningType(2)
	QChar__Joining_Right       = QChar__JoiningType(3)
	QChar__Joining_Left        = QChar__JoiningType(4)
	QChar__Joining_Transparent = QChar__JoiningType(5)
)

//QChar::Script
type QChar__Script int64

const (
	QChar__Script_Unknown               = QChar__Script(0)
	QChar__Script_Inherited             = QChar__Script(1)
	QChar__Script_Common                = QChar__Script(2)
	QChar__Script_Latin                 = QChar__Script(3)
	QChar__Script_Greek                 = QChar__Script(4)
	QChar__Script_Cyrillic              = QChar__Script(5)
	QChar__Script_Armenian              = QChar__Script(6)
	QChar__Script_Hebrew                = QChar__Script(7)
	QChar__Script_Arabic                = QChar__Script(8)
	QChar__Script_Syriac                = QChar__Script(9)
	QChar__Script_Thaana                = QChar__Script(10)
	QChar__Script_Devanagari            = QChar__Script(11)
	QChar__Script_Bengali               = QChar__Script(12)
	QChar__Script_Gurmukhi              = QChar__Script(13)
	QChar__Script_Gujarati              = QChar__Script(14)
	QChar__Script_Oriya                 = QChar__Script(15)
	QChar__Script_Tamil                 = QChar__Script(16)
	QChar__Script_Telugu                = QChar__Script(17)
	QChar__Script_Kannada               = QChar__Script(18)
	QChar__Script_Malayalam             = QChar__Script(19)
	QChar__Script_Sinhala               = QChar__Script(20)
	QChar__Script_Thai                  = QChar__Script(21)
	QChar__Script_Lao                   = QChar__Script(22)
	QChar__Script_Tibetan               = QChar__Script(23)
	QChar__Script_Myanmar               = QChar__Script(24)
	QChar__Script_Georgian              = QChar__Script(25)
	QChar__Script_Hangul                = QChar__Script(26)
	QChar__Script_Ethiopic              = QChar__Script(27)
	QChar__Script_Cherokee              = QChar__Script(28)
	QChar__Script_CanadianAboriginal    = QChar__Script(29)
	QChar__Script_Ogham                 = QChar__Script(30)
	QChar__Script_Runic                 = QChar__Script(31)
	QChar__Script_Khmer                 = QChar__Script(32)
	QChar__Script_Mongolian             = QChar__Script(33)
	QChar__Script_Hiragana              = QChar__Script(34)
	QChar__Script_Katakana              = QChar__Script(35)
	QChar__Script_Bopomofo              = QChar__Script(36)
	QChar__Script_Han                   = QChar__Script(37)
	QChar__Script_Yi                    = QChar__Script(38)
	QChar__Script_OldItalic             = QChar__Script(39)
	QChar__Script_Gothic                = QChar__Script(40)
	QChar__Script_Deseret               = QChar__Script(41)
	QChar__Script_Tagalog               = QChar__Script(42)
	QChar__Script_Hanunoo               = QChar__Script(43)
	QChar__Script_Buhid                 = QChar__Script(44)
	QChar__Script_Tagbanwa              = QChar__Script(45)
	QChar__Script_Coptic                = QChar__Script(46)
	QChar__Script_Limbu                 = QChar__Script(47)
	QChar__Script_TaiLe                 = QChar__Script(48)
	QChar__Script_LinearB               = QChar__Script(49)
	QChar__Script_Ugaritic              = QChar__Script(50)
	QChar__Script_Shavian               = QChar__Script(51)
	QChar__Script_Osmanya               = QChar__Script(52)
	QChar__Script_Cypriot               = QChar__Script(53)
	QChar__Script_Braille               = QChar__Script(54)
	QChar__Script_Buginese              = QChar__Script(55)
	QChar__Script_NewTaiLue             = QChar__Script(56)
	QChar__Script_Glagolitic            = QChar__Script(57)
	QChar__Script_Tifinagh              = QChar__Script(58)
	QChar__Script_SylotiNagri           = QChar__Script(59)
	QChar__Script_OldPersian            = QChar__Script(60)
	QChar__Script_Kharoshthi            = QChar__Script(61)
	QChar__Script_Balinese              = QChar__Script(62)
	QChar__Script_Cuneiform             = QChar__Script(63)
	QChar__Script_Phoenician            = QChar__Script(64)
	QChar__Script_PhagsPa               = QChar__Script(65)
	QChar__Script_Nko                   = QChar__Script(66)
	QChar__Script_Sundanese             = QChar__Script(67)
	QChar__Script_Lepcha                = QChar__Script(68)
	QChar__Script_OlChiki               = QChar__Script(69)
	QChar__Script_Vai                   = QChar__Script(70)
	QChar__Script_Saurashtra            = QChar__Script(71)
	QChar__Script_KayahLi               = QChar__Script(72)
	QChar__Script_Rejang                = QChar__Script(73)
	QChar__Script_Lycian                = QChar__Script(74)
	QChar__Script_Carian                = QChar__Script(75)
	QChar__Script_Lydian                = QChar__Script(76)
	QChar__Script_Cham                  = QChar__Script(77)
	QChar__Script_TaiTham               = QChar__Script(78)
	QChar__Script_TaiViet               = QChar__Script(79)
	QChar__Script_Avestan               = QChar__Script(80)
	QChar__Script_EgyptianHieroglyphs   = QChar__Script(81)
	QChar__Script_Samaritan             = QChar__Script(82)
	QChar__Script_Lisu                  = QChar__Script(83)
	QChar__Script_Bamum                 = QChar__Script(84)
	QChar__Script_Javanese              = QChar__Script(85)
	QChar__Script_MeeteiMayek           = QChar__Script(86)
	QChar__Script_ImperialAramaic       = QChar__Script(87)
	QChar__Script_OldSouthArabian       = QChar__Script(88)
	QChar__Script_InscriptionalParthian = QChar__Script(89)
	QChar__Script_InscriptionalPahlavi  = QChar__Script(90)
	QChar__Script_OldTurkic             = QChar__Script(91)
	QChar__Script_Kaithi                = QChar__Script(92)
	QChar__Script_Batak                 = QChar__Script(93)
	QChar__Script_Brahmi                = QChar__Script(94)
	QChar__Script_Mandaic               = QChar__Script(95)
	QChar__Script_Chakma                = QChar__Script(96)
	QChar__Script_MeroiticCursive       = QChar__Script(97)
	QChar__Script_MeroiticHieroglyphs   = QChar__Script(98)
	QChar__Script_Miao                  = QChar__Script(99)
	QChar__Script_Sharada               = QChar__Script(100)
	QChar__Script_SoraSompeng           = QChar__Script(101)
	QChar__Script_Takri                 = QChar__Script(102)
	QChar__Script_CaucasianAlbanian     = QChar__Script(103)
	QChar__Script_BassaVah              = QChar__Script(104)
	QChar__Script_Duployan              = QChar__Script(105)
	QChar__Script_Elbasan               = QChar__Script(106)
	QChar__Script_Grantha               = QChar__Script(107)
	QChar__Script_PahawhHmong           = QChar__Script(108)
	QChar__Script_Khojki                = QChar__Script(109)
	QChar__Script_LinearA               = QChar__Script(110)
	QChar__Script_Mahajani              = QChar__Script(111)
	QChar__Script_Manichaean            = QChar__Script(112)
	QChar__Script_MendeKikakui          = QChar__Script(113)
	QChar__Script_Modi                  = QChar__Script(114)
	QChar__Script_Mro                   = QChar__Script(115)
	QChar__Script_OldNorthArabian       = QChar__Script(116)
	QChar__Script_Nabataean             = QChar__Script(117)
	QChar__Script_Palmyrene             = QChar__Script(118)
	QChar__Script_PauCinHau             = QChar__Script(119)
	QChar__Script_OldPermic             = QChar__Script(120)
	QChar__Script_PsalterPahlavi        = QChar__Script(121)
	QChar__Script_Siddham               = QChar__Script(122)
	QChar__Script_Khudawadi             = QChar__Script(123)
	QChar__Script_Tirhuta               = QChar__Script(124)
	QChar__Script_WarangCiti            = QChar__Script(125)
	QChar__Script_Ahom                  = QChar__Script(126)
	QChar__Script_AnatolianHieroglyphs  = QChar__Script(127)
	QChar__Script_Hatran                = QChar__Script(128)
	QChar__Script_Multani               = QChar__Script(129)
	QChar__Script_OldHungarian          = QChar__Script(130)
	QChar__Script_SignWriting           = QChar__Script(131)
	QChar__ScriptCount                  = QChar__Script(132)
)

//QChar::SpecialCharacter
type QChar__SpecialCharacter int64

const (
	QChar__Null                       = QChar__SpecialCharacter(0x0000)
	QChar__Tabulation                 = QChar__SpecialCharacter(0x0009)
	QChar__LineFeed                   = QChar__SpecialCharacter(0x000a)
	QChar__CarriageReturn             = QChar__SpecialCharacter(0x000d)
	QChar__Space                      = QChar__SpecialCharacter(0x0020)
	QChar__Nbsp                       = QChar__SpecialCharacter(0x00a0)
	QChar__SoftHyphen                 = QChar__SpecialCharacter(0x00ad)
	QChar__ReplacementCharacter       = QChar__SpecialCharacter(0xfffd)
	QChar__ObjectReplacementCharacter = QChar__SpecialCharacter(0xfffc)
	QChar__ByteOrderMark              = QChar__SpecialCharacter(0xfeff)
	QChar__ByteOrderSwapped           = QChar__SpecialCharacter(0xfffe)
	QChar__ParagraphSeparator         = QChar__SpecialCharacter(0x2029)
	QChar__LineSeparator              = QChar__SpecialCharacter(0x2028)
	QChar__LastValidCodePoint         = QChar__SpecialCharacter(0x10ffff)
)

//QChar::UnicodeVersion
type QChar__UnicodeVersion int64

const (
	QChar__Unicode_Unassigned = QChar__UnicodeVersion(0)
	QChar__Unicode_1_1        = QChar__UnicodeVersion(1)
	QChar__Unicode_2_0        = QChar__UnicodeVersion(2)
	QChar__Unicode_2_1_2      = QChar__UnicodeVersion(3)
	QChar__Unicode_3_0        = QChar__UnicodeVersion(4)
	QChar__Unicode_3_1        = QChar__UnicodeVersion(5)
	QChar__Unicode_3_2        = QChar__UnicodeVersion(6)
	QChar__Unicode_4_0        = QChar__UnicodeVersion(7)
	QChar__Unicode_4_1        = QChar__UnicodeVersion(8)
	QChar__Unicode_5_0        = QChar__UnicodeVersion(9)
	QChar__Unicode_5_1        = QChar__UnicodeVersion(10)
	QChar__Unicode_5_2        = QChar__UnicodeVersion(11)
	QChar__Unicode_6_0        = QChar__UnicodeVersion(12)
	QChar__Unicode_6_1        = QChar__UnicodeVersion(13)
	QChar__Unicode_6_2        = QChar__UnicodeVersion(14)
	QChar__Unicode_6_3        = QChar__UnicodeVersion(15)
	QChar__Unicode_7_0        = QChar__UnicodeVersion(16)
	QChar__Unicode_8_0        = QChar__UnicodeVersion(17)
)

type QChar struct {
	ptr unsafe.Pointer
}

type QChar_ITF interface {
	QChar_PTR() *QChar
}

func (p *QChar) QChar_PTR() *QChar {
	return p
}

func (p *QChar) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QChar) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQChar(ptr QChar_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QChar_PTR().Pointer()
	}
	return nil
}

func NewQCharFromPointer(ptr unsafe.Pointer) *QChar {
	var n = new(QChar)
	n.SetPointer(ptr)
	return n
}

func (ptr *QChar) DestroyQChar() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQChar() *QChar {
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar8(ch QLatin1Char_ITF) *QChar {
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar8(PointerFromQLatin1Char(ch)))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar7(ch QChar__SpecialCharacter) *QChar {
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar7(C.longlong(ch)))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar9(ch string) *QChar {
	var chC = C.CString(ch)
	defer C.free(unsafe.Pointer(chC))
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar9(chC))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar6(code int) *QChar {
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar6(C.int(int32(code))))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar4(code int16) *QChar {
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar4(C.short(code)))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar3(cell string, row string) *QChar {
	var cellC = C.CString(cell)
	defer C.free(unsafe.Pointer(cellC))
	var rowC = C.CString(row)
	defer C.free(unsafe.Pointer(rowC))
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar3(cellC, rowC))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar10(ch string) *QChar {
	var chC = C.CString(ch)
	defer C.free(unsafe.Pointer(chC))
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar10(chC))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar5(code uint) *QChar {
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar5(C.uint(uint32(code))))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func NewQChar2(code uint16) *QChar {
	var tmpValue = NewQCharFromPointer(C.QChar_NewQChar2(C.ushort(code)))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func QChar_Category2(ucs4 uint) QChar__Category {
	return QChar__Category(C.QChar_QChar_Category2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Category2(ucs4 uint) QChar__Category {
	return QChar__Category(C.QChar_QChar_Category2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Category() QChar__Category {
	if ptr.Pointer() != nil {
		return QChar__Category(C.QChar_Category(ptr.Pointer()))
	}
	return 0
}

func (ptr *QChar) Cell() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QChar_Cell(ptr.Pointer()))
	}
	return ""
}

func QChar_CurrentUnicodeVersion() QChar__UnicodeVersion {
	return QChar__UnicodeVersion(C.QChar_QChar_CurrentUnicodeVersion())
}

func (ptr *QChar) CurrentUnicodeVersion() QChar__UnicodeVersion {
	return QChar__UnicodeVersion(C.QChar_QChar_CurrentUnicodeVersion())
}

func QChar_Decomposition2(ucs4 uint) string {
	return cGoUnpackString(C.QChar_QChar_Decomposition2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Decomposition2(ucs4 uint) string {
	return cGoUnpackString(C.QChar_QChar_Decomposition2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Decomposition() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QChar_Decomposition(ptr.Pointer()))
	}
	return ""
}

func QChar_DecompositionTag2(ucs4 uint) QChar__Decomposition {
	return QChar__Decomposition(C.QChar_QChar_DecompositionTag2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) DecompositionTag2(ucs4 uint) QChar__Decomposition {
	return QChar__Decomposition(C.QChar_QChar_DecompositionTag2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) DecompositionTag() QChar__Decomposition {
	if ptr.Pointer() != nil {
		return QChar__Decomposition(C.QChar_DecompositionTag(ptr.Pointer()))
	}
	return 0
}

func QChar_DigitValue2(ucs4 uint) int {
	return int(int32(C.QChar_QChar_DigitValue2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) DigitValue2(ucs4 uint) int {
	return int(int32(C.QChar_QChar_DigitValue2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) DigitValue() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QChar_DigitValue(ptr.Pointer())))
	}
	return 0
}

func QChar_Direction2(ucs4 uint) QChar__Direction {
	return QChar__Direction(C.QChar_QChar_Direction2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Direction2(ucs4 uint) QChar__Direction {
	return QChar__Direction(C.QChar_QChar_Direction2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Direction() QChar__Direction {
	if ptr.Pointer() != nil {
		return QChar__Direction(C.QChar_Direction(ptr.Pointer()))
	}
	return 0
}

func QChar_FromLatin1(c string) *QChar {
	var cC = C.CString(c)
	defer C.free(unsafe.Pointer(cC))
	var tmpValue = NewQCharFromPointer(C.QChar_QChar_FromLatin1(cC))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func (ptr *QChar) FromLatin1(c string) *QChar {
	var cC = C.CString(c)
	defer C.free(unsafe.Pointer(cC))
	var tmpValue = NewQCharFromPointer(C.QChar_QChar_FromLatin1(cC))
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func QChar_HasMirrored2(ucs4 uint) bool {
	return C.QChar_QChar_HasMirrored2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) HasMirrored2(ucs4 uint) bool {
	return C.QChar_QChar_HasMirrored2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) HasMirrored() bool {
	if ptr.Pointer() != nil {
		return C.QChar_HasMirrored(ptr.Pointer()) != 0
	}
	return false
}

func QChar_HighSurrogate(ucs4 uint) uint16 {
	return uint16(C.QChar_QChar_HighSurrogate(C.uint(uint32(ucs4))))
}

func (ptr *QChar) HighSurrogate(ucs4 uint) uint16 {
	return uint16(C.QChar_QChar_HighSurrogate(C.uint(uint32(ucs4))))
}

func QChar_IsDigit2(ucs4 uint) bool {
	return C.QChar_QChar_IsDigit2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsDigit2(ucs4 uint) bool {
	return C.QChar_QChar_IsDigit2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsDigit() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsDigit(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsHighSurrogate2(ucs4 uint) bool {
	return C.QChar_QChar_IsHighSurrogate2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsHighSurrogate2(ucs4 uint) bool {
	return C.QChar_QChar_IsHighSurrogate2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsHighSurrogate() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsHighSurrogate(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsLetter2(ucs4 uint) bool {
	return C.QChar_QChar_IsLetter2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsLetter2(ucs4 uint) bool {
	return C.QChar_QChar_IsLetter2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsLetter() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsLetter(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsLetterOrNumber2(ucs4 uint) bool {
	return C.QChar_QChar_IsLetterOrNumber2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsLetterOrNumber2(ucs4 uint) bool {
	return C.QChar_QChar_IsLetterOrNumber2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsLetterOrNumber() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsLetterOrNumber(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsLowSurrogate2(ucs4 uint) bool {
	return C.QChar_QChar_IsLowSurrogate2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsLowSurrogate2(ucs4 uint) bool {
	return C.QChar_QChar_IsLowSurrogate2(C.uint(uint32(ucs4))) != 0
}

func QChar_IsLower2(ucs4 uint) bool {
	return C.QChar_QChar_IsLower2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsLower2(ucs4 uint) bool {
	return C.QChar_QChar_IsLower2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsLower() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsLower(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QChar) IsLowSurrogate() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsLowSurrogate(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsMark2(ucs4 uint) bool {
	return C.QChar_QChar_IsMark2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsMark2(ucs4 uint) bool {
	return C.QChar_QChar_IsMark2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsMark() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsMark(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsNonCharacter2(ucs4 uint) bool {
	return C.QChar_QChar_IsNonCharacter2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsNonCharacter2(ucs4 uint) bool {
	return C.QChar_QChar_IsNonCharacter2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsNonCharacter() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsNonCharacter(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QChar) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsNumber2(ucs4 uint) bool {
	return C.QChar_QChar_IsNumber2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsNumber2(ucs4 uint) bool {
	return C.QChar_QChar_IsNumber2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsNumber() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsNumber(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsPrint2(ucs4 uint) bool {
	return C.QChar_QChar_IsPrint2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsPrint2(ucs4 uint) bool {
	return C.QChar_QChar_IsPrint2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsPrint() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsPrint(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsPunct2(ucs4 uint) bool {
	return C.QChar_QChar_IsPunct2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsPunct2(ucs4 uint) bool {
	return C.QChar_QChar_IsPunct2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsPunct() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsPunct(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsSpace2(ucs4 uint) bool {
	return C.QChar_QChar_IsSpace2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsSpace2(ucs4 uint) bool {
	return C.QChar_QChar_IsSpace2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsSpace() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsSpace(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsSurrogate2(ucs4 uint) bool {
	return C.QChar_QChar_IsSurrogate2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsSurrogate2(ucs4 uint) bool {
	return C.QChar_QChar_IsSurrogate2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsSurrogate() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsSurrogate(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsSymbol2(ucs4 uint) bool {
	return C.QChar_QChar_IsSymbol2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsSymbol2(ucs4 uint) bool {
	return C.QChar_QChar_IsSymbol2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsSymbol() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsSymbol(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsTitleCase2(ucs4 uint) bool {
	return C.QChar_QChar_IsTitleCase2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsTitleCase2(ucs4 uint) bool {
	return C.QChar_QChar_IsTitleCase2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsTitleCase() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsTitleCase(ptr.Pointer()) != 0
	}
	return false
}

func QChar_IsUpper2(ucs4 uint) bool {
	return C.QChar_QChar_IsUpper2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsUpper2(ucs4 uint) bool {
	return C.QChar_QChar_IsUpper2(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) IsUpper() bool {
	if ptr.Pointer() != nil {
		return C.QChar_IsUpper(ptr.Pointer()) != 0
	}
	return false
}

func QChar_JoiningType2(ucs4 uint) QChar__JoiningType {
	return QChar__JoiningType(C.QChar_QChar_JoiningType2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) JoiningType2(ucs4 uint) QChar__JoiningType {
	return QChar__JoiningType(C.QChar_QChar_JoiningType2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) JoiningType() QChar__JoiningType {
	if ptr.Pointer() != nil {
		return QChar__JoiningType(C.QChar_JoiningType(ptr.Pointer()))
	}
	return 0
}

func QChar_LowSurrogate(ucs4 uint) uint16 {
	return uint16(C.QChar_QChar_LowSurrogate(C.uint(uint32(ucs4))))
}

func (ptr *QChar) LowSurrogate(ucs4 uint) uint16 {
	return uint16(C.QChar_QChar_LowSurrogate(C.uint(uint32(ucs4))))
}

func QChar_MirroredChar2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_MirroredChar2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) MirroredChar2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_MirroredChar2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) MirroredChar() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QChar_MirroredChar(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func QChar_RequiresSurrogates(ucs4 uint) bool {
	return C.QChar_QChar_RequiresSurrogates(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) RequiresSurrogates(ucs4 uint) bool {
	return C.QChar_QChar_RequiresSurrogates(C.uint(uint32(ucs4))) != 0
}

func (ptr *QChar) Row() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QChar_Row(ptr.Pointer()))
	}
	return ""
}

func QChar_Script2(ucs4 uint) QChar__Script {
	return QChar__Script(C.QChar_QChar_Script2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Script2(ucs4 uint) QChar__Script {
	return QChar__Script(C.QChar_QChar_Script2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) Script() QChar__Script {
	if ptr.Pointer() != nil {
		return QChar__Script(C.QChar_Script(ptr.Pointer()))
	}
	return 0
}

func QChar_SurrogateToUcs42(high QChar_ITF, low QChar_ITF) uint {
	return uint(uint32(C.QChar_QChar_SurrogateToUcs42(PointerFromQChar(high), PointerFromQChar(low))))
}

func (ptr *QChar) SurrogateToUcs42(high QChar_ITF, low QChar_ITF) uint {
	return uint(uint32(C.QChar_QChar_SurrogateToUcs42(PointerFromQChar(high), PointerFromQChar(low))))
}

func QChar_SurrogateToUcs4(high uint16, low uint16) uint {
	return uint(uint32(C.QChar_QChar_SurrogateToUcs4(C.ushort(high), C.ushort(low))))
}

func (ptr *QChar) SurrogateToUcs4(high uint16, low uint16) uint {
	return uint(uint32(C.QChar_QChar_SurrogateToUcs4(C.ushort(high), C.ushort(low))))
}

func QChar_ToCaseFolded2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToCaseFolded2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToCaseFolded2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToCaseFolded2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToCaseFolded() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QChar_ToCaseFolded(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QChar) ToLatin1() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QChar_ToLatin1(ptr.Pointer()))
	}
	return ""
}

func QChar_ToLower2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToLower2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToLower2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToLower2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToLower() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QChar_ToLower(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func QChar_ToTitleCase2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToTitleCase2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToTitleCase2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToTitleCase2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToTitleCase() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QChar_ToTitleCase(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func QChar_ToUpper2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToUpper2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToUpper2(ucs4 uint) uint {
	return uint(uint32(C.QChar_QChar_ToUpper2(C.uint(uint32(ucs4)))))
}

func (ptr *QChar) ToUpper() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QChar_ToUpper(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QChar) Unicode2() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QChar_Unicode2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QChar) Unicode() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QChar_Unicode(ptr.Pointer()))
	}
	return 0
}

func QChar_UnicodeVersion2(ucs4 uint) QChar__UnicodeVersion {
	return QChar__UnicodeVersion(C.QChar_QChar_UnicodeVersion2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) UnicodeVersion2(ucs4 uint) QChar__UnicodeVersion {
	return QChar__UnicodeVersion(C.QChar_QChar_UnicodeVersion2(C.uint(uint32(ucs4))))
}

func (ptr *QChar) UnicodeVersion() QChar__UnicodeVersion {
	if ptr.Pointer() != nil {
		return QChar__UnicodeVersion(C.QChar_UnicodeVersion(ptr.Pointer()))
	}
	return 0
}

type QChildEvent struct {
	QEvent
}

type QChildEvent_ITF interface {
	QEvent_ITF
	QChildEvent_PTR() *QChildEvent
}

func (p *QChildEvent) QChildEvent_PTR() *QChildEvent {
	return p
}

func (p *QChildEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QChildEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQChildEvent(ptr QChildEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QChildEvent_PTR().Pointer()
	}
	return nil
}

func NewQChildEventFromPointer(ptr unsafe.Pointer) *QChildEvent {
	var n = new(QChildEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QChildEvent) DestroyQChildEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQChildEvent(ty QEvent__Type, child QObject_ITF) *QChildEvent {
	var tmpValue = NewQChildEventFromPointer(C.QChildEvent_NewQChildEvent(C.longlong(ty), PointerFromQObject(child)))
	runtime.SetFinalizer(tmpValue, (*QChildEvent).DestroyQChildEvent)
	return tmpValue
}

func (ptr *QChildEvent) Added() bool {
	if ptr.Pointer() != nil {
		return C.QChildEvent_Added(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QChildEvent) Child() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QChildEvent_Child(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QChildEvent) Polished() bool {
	if ptr.Pointer() != nil {
		return C.QChildEvent_Polished(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QChildEvent) Removed() bool {
	if ptr.Pointer() != nil {
		return C.QChildEvent_Removed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QChildEvent) C() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QChildEvent_C(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QChildEvent) SetC(vqo QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QChildEvent_SetC(ptr.Pointer(), PointerFromQObject(vqo))
	}
}

type QCollator struct {
	ptr unsafe.Pointer
}

type QCollator_ITF interface {
	QCollator_PTR() *QCollator
}

func (p *QCollator) QCollator_PTR() *QCollator {
	return p
}

func (p *QCollator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCollator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCollator(ptr QCollator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCollator_PTR().Pointer()
	}
	return nil
}

func NewQCollatorFromPointer(ptr unsafe.Pointer) *QCollator {
	var n = new(QCollator)
	n.SetPointer(ptr)
	return n
}
func (ptr *QCollator) CaseSensitivity() Qt__CaseSensitivity {
	if ptr.Pointer() != nil {
		return Qt__CaseSensitivity(C.QCollator_CaseSensitivity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QCollator) IgnorePunctuation() bool {
	if ptr.Pointer() != nil {
		return C.QCollator_IgnorePunctuation(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCollator) NumericMode() bool {
	if ptr.Pointer() != nil {
		return C.QCollator_NumericMode(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCollator) SetCaseSensitivity(sensitivity Qt__CaseSensitivity) {
	if ptr.Pointer() != nil {
		C.QCollator_SetCaseSensitivity(ptr.Pointer(), C.longlong(sensitivity))
	}
}

func (ptr *QCollator) SetIgnorePunctuation(on bool) {
	if ptr.Pointer() != nil {
		C.QCollator_SetIgnorePunctuation(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QCollator) SetNumericMode(on bool) {
	if ptr.Pointer() != nil {
		C.QCollator_SetNumericMode(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func NewQCollator3(other QCollator_ITF) *QCollator {
	var tmpValue = NewQCollatorFromPointer(C.QCollator_NewQCollator3(PointerFromQCollator(other)))
	runtime.SetFinalizer(tmpValue, (*QCollator).DestroyQCollator)
	return tmpValue
}

func NewQCollator2(other QCollator_ITF) *QCollator {
	var tmpValue = NewQCollatorFromPointer(C.QCollator_NewQCollator2(PointerFromQCollator(other)))
	runtime.SetFinalizer(tmpValue, (*QCollator).DestroyQCollator)
	return tmpValue
}

func NewQCollator(locale QLocale_ITF) *QCollator {
	var tmpValue = NewQCollatorFromPointer(C.QCollator_NewQCollator(PointerFromQLocale(locale)))
	runtime.SetFinalizer(tmpValue, (*QCollator).DestroyQCollator)
	return tmpValue
}

func (ptr *QCollator) Locale() *QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLocaleFromPointer(C.QCollator_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

func (ptr *QCollator) SetLocale(locale QLocale_ITF) {
	if ptr.Pointer() != nil {
		C.QCollator_SetLocale(ptr.Pointer(), PointerFromQLocale(locale))
	}
}

func (ptr *QCollator) Swap(other QCollator_ITF) {
	if ptr.Pointer() != nil {
		C.QCollator_Swap(ptr.Pointer(), PointerFromQCollator(other))
	}
}

func (ptr *QCollator) DestroyQCollator() {
	if ptr.Pointer() != nil {
		C.QCollator_DestroyQCollator(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QCollator) Compare3(s1 QChar_ITF, len1 int, s2 QChar_ITF, len2 int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QCollator_Compare3(ptr.Pointer(), PointerFromQChar(s1), C.int(int32(len1)), PointerFromQChar(s2), C.int(int32(len2)))))
	}
	return 0
}

func (ptr *QCollator) Compare(s1 string, s2 string) int {
	if ptr.Pointer() != nil {
		var s1C = C.CString(s1)
		defer C.free(unsafe.Pointer(s1C))
		var s2C = C.CString(s2)
		defer C.free(unsafe.Pointer(s2C))
		return int(int32(C.QCollator_Compare(ptr.Pointer(), s1C, s2C)))
	}
	return 0
}

func (ptr *QCollator) Compare2(s1 QStringRef_ITF, s2 QStringRef_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QCollator_Compare2(ptr.Pointer(), PointerFromQStringRef(s1), PointerFromQStringRef(s2))))
	}
	return 0
}

func (ptr *QCollator) SortKey(stri string) *QCollatorSortKey {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var tmpValue = NewQCollatorSortKeyFromPointer(C.QCollator_SortKey(ptr.Pointer(), striC))
		runtime.SetFinalizer(tmpValue, (*QCollatorSortKey).DestroyQCollatorSortKey)
		return tmpValue
	}
	return nil
}

type QCollatorSortKey struct {
	ptr unsafe.Pointer
}

type QCollatorSortKey_ITF interface {
	QCollatorSortKey_PTR() *QCollatorSortKey
}

func (p *QCollatorSortKey) QCollatorSortKey_PTR() *QCollatorSortKey {
	return p
}

func (p *QCollatorSortKey) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCollatorSortKey) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCollatorSortKey(ptr QCollatorSortKey_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCollatorSortKey_PTR().Pointer()
	}
	return nil
}

func NewQCollatorSortKeyFromPointer(ptr unsafe.Pointer) *QCollatorSortKey {
	var n = new(QCollatorSortKey)
	n.SetPointer(ptr)
	return n
}
func NewQCollatorSortKey(other QCollatorSortKey_ITF) *QCollatorSortKey {
	var tmpValue = NewQCollatorSortKeyFromPointer(C.QCollatorSortKey_NewQCollatorSortKey(PointerFromQCollatorSortKey(other)))
	runtime.SetFinalizer(tmpValue, (*QCollatorSortKey).DestroyQCollatorSortKey)
	return tmpValue
}

func (ptr *QCollatorSortKey) Swap(other QCollatorSortKey_ITF) {
	if ptr.Pointer() != nil {
		C.QCollatorSortKey_Swap(ptr.Pointer(), PointerFromQCollatorSortKey(other))
	}
}

func (ptr *QCollatorSortKey) DestroyQCollatorSortKey() {
	if ptr.Pointer() != nil {
		C.QCollatorSortKey_DestroyQCollatorSortKey(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QCollatorSortKey) Compare(otherKey QCollatorSortKey_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QCollatorSortKey_Compare(ptr.Pointer(), PointerFromQCollatorSortKey(otherKey))))
	}
	return 0
}

type QCommandLineOption struct {
	ptr unsafe.Pointer
}

type QCommandLineOption_ITF interface {
	QCommandLineOption_PTR() *QCommandLineOption
}

func (p *QCommandLineOption) QCommandLineOption_PTR() *QCommandLineOption {
	return p
}

func (p *QCommandLineOption) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCommandLineOption) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCommandLineOption(ptr QCommandLineOption_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCommandLineOption_PTR().Pointer()
	}
	return nil
}

func NewQCommandLineOptionFromPointer(ptr unsafe.Pointer) *QCommandLineOption {
	var n = new(QCommandLineOption)
	n.SetPointer(ptr)
	return n
}
func NewQCommandLineOption5(other QCommandLineOption_ITF) *QCommandLineOption {
	var tmpValue = NewQCommandLineOptionFromPointer(C.QCommandLineOption_NewQCommandLineOption5(PointerFromQCommandLineOption(other)))
	runtime.SetFinalizer(tmpValue, (*QCommandLineOption).DestroyQCommandLineOption)
	return tmpValue
}

func NewQCommandLineOption(name string) *QCommandLineOption {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQCommandLineOptionFromPointer(C.QCommandLineOption_NewQCommandLineOption(nameC))
	runtime.SetFinalizer(tmpValue, (*QCommandLineOption).DestroyQCommandLineOption)
	return tmpValue
}

func NewQCommandLineOption3(name string, description string, valueName string, defaultValue string) *QCommandLineOption {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var descriptionC = C.CString(description)
	defer C.free(unsafe.Pointer(descriptionC))
	var valueNameC = C.CString(valueName)
	defer C.free(unsafe.Pointer(valueNameC))
	var defaultValueC = C.CString(defaultValue)
	defer C.free(unsafe.Pointer(defaultValueC))
	var tmpValue = NewQCommandLineOptionFromPointer(C.QCommandLineOption_NewQCommandLineOption3(nameC, descriptionC, valueNameC, defaultValueC))
	runtime.SetFinalizer(tmpValue, (*QCommandLineOption).DestroyQCommandLineOption)
	return tmpValue
}

func NewQCommandLineOption2(names []string) *QCommandLineOption {
	var namesC = C.CString(strings.Join(names, "|"))
	defer C.free(unsafe.Pointer(namesC))
	var tmpValue = NewQCommandLineOptionFromPointer(C.QCommandLineOption_NewQCommandLineOption2(namesC))
	runtime.SetFinalizer(tmpValue, (*QCommandLineOption).DestroyQCommandLineOption)
	return tmpValue
}

func NewQCommandLineOption4(names []string, description string, valueName string, defaultValue string) *QCommandLineOption {
	var namesC = C.CString(strings.Join(names, "|"))
	defer C.free(unsafe.Pointer(namesC))
	var descriptionC = C.CString(description)
	defer C.free(unsafe.Pointer(descriptionC))
	var valueNameC = C.CString(valueName)
	defer C.free(unsafe.Pointer(valueNameC))
	var defaultValueC = C.CString(defaultValue)
	defer C.free(unsafe.Pointer(defaultValueC))
	var tmpValue = NewQCommandLineOptionFromPointer(C.QCommandLineOption_NewQCommandLineOption4(namesC, descriptionC, valueNameC, defaultValueC))
	runtime.SetFinalizer(tmpValue, (*QCommandLineOption).DestroyQCommandLineOption)
	return tmpValue
}

func (ptr *QCommandLineOption) DefaultValues() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QCommandLineOption_DefaultValues(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QCommandLineOption) Description() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QCommandLineOption_Description(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCommandLineOption) IsHidden() bool {
	if ptr.Pointer() != nil {
		return C.QCommandLineOption_IsHidden(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QCommandLineOption) Names() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QCommandLineOption_Names(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QCommandLineOption) SetDefaultValue(defaultValue string) {
	if ptr.Pointer() != nil {
		var defaultValueC = C.CString(defaultValue)
		defer C.free(unsafe.Pointer(defaultValueC))
		C.QCommandLineOption_SetDefaultValue(ptr.Pointer(), defaultValueC)
	}
}

func (ptr *QCommandLineOption) SetDefaultValues(defaultValues []string) {
	if ptr.Pointer() != nil {
		var defaultValuesC = C.CString(strings.Join(defaultValues, "|"))
		defer C.free(unsafe.Pointer(defaultValuesC))
		C.QCommandLineOption_SetDefaultValues(ptr.Pointer(), defaultValuesC)
	}
}

func (ptr *QCommandLineOption) SetDescription(description string) {
	if ptr.Pointer() != nil {
		var descriptionC = C.CString(description)
		defer C.free(unsafe.Pointer(descriptionC))
		C.QCommandLineOption_SetDescription(ptr.Pointer(), descriptionC)
	}
}

func (ptr *QCommandLineOption) SetHidden(hide bool) {
	if ptr.Pointer() != nil {
		C.QCommandLineOption_SetHidden(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(hide))))
	}
}

func (ptr *QCommandLineOption) SetValueName(valueName string) {
	if ptr.Pointer() != nil {
		var valueNameC = C.CString(valueName)
		defer C.free(unsafe.Pointer(valueNameC))
		C.QCommandLineOption_SetValueName(ptr.Pointer(), valueNameC)
	}
}

func (ptr *QCommandLineOption) Swap(other QCommandLineOption_ITF) {
	if ptr.Pointer() != nil {
		C.QCommandLineOption_Swap(ptr.Pointer(), PointerFromQCommandLineOption(other))
	}
}

func (ptr *QCommandLineOption) ValueName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QCommandLineOption_ValueName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCommandLineOption) DestroyQCommandLineOption() {
	if ptr.Pointer() != nil {
		C.QCommandLineOption_DestroyQCommandLineOption(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QCommandLineParser::OptionsAfterPositionalArgumentsMode
type QCommandLineParser__OptionsAfterPositionalArgumentsMode int64

const (
	QCommandLineParser__ParseAsOptions             = QCommandLineParser__OptionsAfterPositionalArgumentsMode(0)
	QCommandLineParser__ParseAsPositionalArguments = QCommandLineParser__OptionsAfterPositionalArgumentsMode(1)
)

//QCommandLineParser::SingleDashWordOptionMode
type QCommandLineParser__SingleDashWordOptionMode int64

const (
	QCommandLineParser__ParseAsCompactedShortOptions = QCommandLineParser__SingleDashWordOptionMode(0)
	QCommandLineParser__ParseAsLongOptions           = QCommandLineParser__SingleDashWordOptionMode(1)
)

type QCommandLineParser struct {
	ptr unsafe.Pointer
}

type QCommandLineParser_ITF interface {
	QCommandLineParser_PTR() *QCommandLineParser
}

func (p *QCommandLineParser) QCommandLineParser_PTR() *QCommandLineParser {
	return p
}

func (p *QCommandLineParser) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCommandLineParser) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCommandLineParser(ptr QCommandLineParser_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCommandLineParser_PTR().Pointer()
	}
	return nil
}

func NewQCommandLineParserFromPointer(ptr unsafe.Pointer) *QCommandLineParser {
	var n = new(QCommandLineParser)
	n.SetPointer(ptr)
	return n
}
func NewQCommandLineParser() *QCommandLineParser {
	var tmpValue = NewQCommandLineParserFromPointer(C.QCommandLineParser_NewQCommandLineParser())
	runtime.SetFinalizer(tmpValue, (*QCommandLineParser).DestroyQCommandLineParser)
	return tmpValue
}

func (ptr *QCommandLineParser) AddHelpOption() *QCommandLineOption {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCommandLineOptionFromPointer(C.QCommandLineParser_AddHelpOption(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QCommandLineOption).DestroyQCommandLineOption)
		return tmpValue
	}
	return nil
}

func (ptr *QCommandLineParser) AddOption(option QCommandLineOption_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QCommandLineParser_AddOption(ptr.Pointer(), PointerFromQCommandLineOption(option)) != 0
	}
	return false
}

func (ptr *QCommandLineParser) AddPositionalArgument(name string, description string, syntax string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var descriptionC = C.CString(description)
		defer C.free(unsafe.Pointer(descriptionC))
		var syntaxC = C.CString(syntax)
		defer C.free(unsafe.Pointer(syntaxC))
		C.QCommandLineParser_AddPositionalArgument(ptr.Pointer(), nameC, descriptionC, syntaxC)
	}
}

func (ptr *QCommandLineParser) AddVersionOption() *QCommandLineOption {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCommandLineOptionFromPointer(C.QCommandLineParser_AddVersionOption(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QCommandLineOption).DestroyQCommandLineOption)
		return tmpValue
	}
	return nil
}

func (ptr *QCommandLineParser) ApplicationDescription() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QCommandLineParser_ApplicationDescription(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCommandLineParser) ClearPositionalArguments() {
	if ptr.Pointer() != nil {
		C.QCommandLineParser_ClearPositionalArguments(ptr.Pointer())
	}
}

func (ptr *QCommandLineParser) ErrorText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QCommandLineParser_ErrorText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCommandLineParser) HelpText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QCommandLineParser_HelpText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QCommandLineParser) IsSet2(option QCommandLineOption_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QCommandLineParser_IsSet2(ptr.Pointer(), PointerFromQCommandLineOption(option)) != 0
	}
	return false
}

func (ptr *QCommandLineParser) IsSet(name string) bool {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return C.QCommandLineParser_IsSet(ptr.Pointer(), nameC) != 0
	}
	return false
}

func (ptr *QCommandLineParser) OptionNames() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QCommandLineParser_OptionNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QCommandLineParser) Parse(arguments []string) bool {
	if ptr.Pointer() != nil {
		var argumentsC = C.CString(strings.Join(arguments, "|"))
		defer C.free(unsafe.Pointer(argumentsC))
		return C.QCommandLineParser_Parse(ptr.Pointer(), argumentsC) != 0
	}
	return false
}

func (ptr *QCommandLineParser) PositionalArguments() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QCommandLineParser_PositionalArguments(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QCommandLineParser) Process2(app QCoreApplication_ITF) {
	if ptr.Pointer() != nil {
		C.QCommandLineParser_Process2(ptr.Pointer(), PointerFromQCoreApplication(app))
	}
}

func (ptr *QCommandLineParser) Process(arguments []string) {
	if ptr.Pointer() != nil {
		var argumentsC = C.CString(strings.Join(arguments, "|"))
		defer C.free(unsafe.Pointer(argumentsC))
		C.QCommandLineParser_Process(ptr.Pointer(), argumentsC)
	}
}

func (ptr *QCommandLineParser) SetApplicationDescription(description string) {
	if ptr.Pointer() != nil {
		var descriptionC = C.CString(description)
		defer C.free(unsafe.Pointer(descriptionC))
		C.QCommandLineParser_SetApplicationDescription(ptr.Pointer(), descriptionC)
	}
}

func (ptr *QCommandLineParser) SetOptionsAfterPositionalArgumentsMode(parsingMode QCommandLineParser__OptionsAfterPositionalArgumentsMode) {
	if ptr.Pointer() != nil {
		C.QCommandLineParser_SetOptionsAfterPositionalArgumentsMode(ptr.Pointer(), C.longlong(parsingMode))
	}
}

func (ptr *QCommandLineParser) SetSingleDashWordOptionMode(singleDashWordOptionMode QCommandLineParser__SingleDashWordOptionMode) {
	if ptr.Pointer() != nil {
		C.QCommandLineParser_SetSingleDashWordOptionMode(ptr.Pointer(), C.longlong(singleDashWordOptionMode))
	}
}

func (ptr *QCommandLineParser) ShowHelp(exitCode int) {
	if ptr.Pointer() != nil {
		C.QCommandLineParser_ShowHelp(ptr.Pointer(), C.int(int32(exitCode)))
	}
}

func (ptr *QCommandLineParser) ShowVersion() {
	if ptr.Pointer() != nil {
		C.QCommandLineParser_ShowVersion(ptr.Pointer())
	}
}

func (ptr *QCommandLineParser) UnknownOptionNames() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QCommandLineParser_UnknownOptionNames(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QCommandLineParser) Value2(option QCommandLineOption_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QCommandLineParser_Value2(ptr.Pointer(), PointerFromQCommandLineOption(option)))
	}
	return ""
}

func (ptr *QCommandLineParser) Value(optionName string) string {
	if ptr.Pointer() != nil {
		var optionNameC = C.CString(optionName)
		defer C.free(unsafe.Pointer(optionNameC))
		return cGoUnpackString(C.QCommandLineParser_Value(ptr.Pointer(), optionNameC))
	}
	return ""
}

func (ptr *QCommandLineParser) Values2(option QCommandLineOption_ITF) []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QCommandLineParser_Values2(ptr.Pointer(), PointerFromQCommandLineOption(option))), "|")
	}
	return make([]string, 0)
}

func (ptr *QCommandLineParser) Values(optionName string) []string {
	if ptr.Pointer() != nil {
		var optionNameC = C.CString(optionName)
		defer C.free(unsafe.Pointer(optionNameC))
		return strings.Split(cGoUnpackString(C.QCommandLineParser_Values(ptr.Pointer(), optionNameC)), "|")
	}
	return make([]string, 0)
}

func (ptr *QCommandLineParser) DestroyQCommandLineParser() {
	if ptr.Pointer() != nil {
		C.QCommandLineParser_DestroyQCommandLineParser(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QContiguousCache struct {
	ptr unsafe.Pointer
}

type QContiguousCache_ITF interface {
	QContiguousCache_PTR() *QContiguousCache
}

func (p *QContiguousCache) QContiguousCache_PTR() *QContiguousCache {
	return p
}

func (p *QContiguousCache) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QContiguousCache) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQContiguousCache(ptr QContiguousCache_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QContiguousCache_PTR().Pointer()
	}
	return nil
}

func NewQContiguousCacheFromPointer(ptr unsafe.Pointer) *QContiguousCache {
	var n = new(QContiguousCache)
	n.SetPointer(ptr)
	return n
}

type QCoreApplication struct {
	QObject
}

type QCoreApplication_ITF interface {
	QObject_ITF
	QCoreApplication_PTR() *QCoreApplication
}

func (p *QCoreApplication) QCoreApplication_PTR() *QCoreApplication {
	return p
}

func (p *QCoreApplication) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QCoreApplication) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQCoreApplication(ptr QCoreApplication_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCoreApplication_PTR().Pointer()
	}
	return nil
}

func NewQCoreApplicationFromPointer(ptr unsafe.Pointer) *QCoreApplication {
	var n = new(QCoreApplication)
	n.SetPointer(ptr)
	return n
}
func QCoreApplication_ApplicationName() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationName())
}

func (ptr *QCoreApplication) ApplicationName() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationName())
}

func QCoreApplication_ApplicationVersion() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationVersion())
}

func (ptr *QCoreApplication) ApplicationVersion() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationVersion())
}

func QCoreApplication_IsQuitLockEnabled() bool {
	return C.QCoreApplication_QCoreApplication_IsQuitLockEnabled() != 0
}

func (ptr *QCoreApplication) IsQuitLockEnabled() bool {
	return C.QCoreApplication_QCoreApplication_IsQuitLockEnabled() != 0
}

func QCoreApplication_OrganizationDomain() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_OrganizationDomain())
}

func (ptr *QCoreApplication) OrganizationDomain() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_OrganizationDomain())
}

func QCoreApplication_OrganizationName() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_OrganizationName())
}

func (ptr *QCoreApplication) OrganizationName() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_OrganizationName())
}

func QCoreApplication_SetApplicationName(application string) {
	var applicationC = C.CString(application)
	defer C.free(unsafe.Pointer(applicationC))
	C.QCoreApplication_QCoreApplication_SetApplicationName(applicationC)
}

func (ptr *QCoreApplication) SetApplicationName(application string) {
	var applicationC = C.CString(application)
	defer C.free(unsafe.Pointer(applicationC))
	C.QCoreApplication_QCoreApplication_SetApplicationName(applicationC)
}

func QCoreApplication_SetApplicationVersion(version string) {
	var versionC = C.CString(version)
	defer C.free(unsafe.Pointer(versionC))
	C.QCoreApplication_QCoreApplication_SetApplicationVersion(versionC)
}

func (ptr *QCoreApplication) SetApplicationVersion(version string) {
	var versionC = C.CString(version)
	defer C.free(unsafe.Pointer(versionC))
	C.QCoreApplication_QCoreApplication_SetApplicationVersion(versionC)
}

func QCoreApplication_SetOrganizationDomain(orgDomain string) {
	var orgDomainC = C.CString(orgDomain)
	defer C.free(unsafe.Pointer(orgDomainC))
	C.QCoreApplication_QCoreApplication_SetOrganizationDomain(orgDomainC)
}

func (ptr *QCoreApplication) SetOrganizationDomain(orgDomain string) {
	var orgDomainC = C.CString(orgDomain)
	defer C.free(unsafe.Pointer(orgDomainC))
	C.QCoreApplication_QCoreApplication_SetOrganizationDomain(orgDomainC)
}

func QCoreApplication_SetOrganizationName(orgName string) {
	var orgNameC = C.CString(orgName)
	defer C.free(unsafe.Pointer(orgNameC))
	C.QCoreApplication_QCoreApplication_SetOrganizationName(orgNameC)
}

func (ptr *QCoreApplication) SetOrganizationName(orgName string) {
	var orgNameC = C.CString(orgName)
	defer C.free(unsafe.Pointer(orgNameC))
	C.QCoreApplication_QCoreApplication_SetOrganizationName(orgNameC)
}

func QCoreApplication_SetQuitLockEnabled(enabled bool) {
	C.QCoreApplication_QCoreApplication_SetQuitLockEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func (ptr *QCoreApplication) SetQuitLockEnabled(enabled bool) {
	C.QCoreApplication_QCoreApplication_SetQuitLockEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func NewQCoreApplication(argc int, argv []string) *QCoreApplication {
	var argvC = C.CString(strings.Join(argv, "|"))
	defer C.free(unsafe.Pointer(argvC))
	var tmpValue = NewQCoreApplicationFromPointer(C.QCoreApplication_NewQCoreApplication(C.int(int32(argc)), argvC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQCoreApplication_AboutToQuit
func callbackQCoreApplication_AboutToQuit(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::aboutToQuit"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCoreApplication) ConnectAboutToQuit(f func()) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_ConnectAboutToQuit(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::aboutToQuit", f)
	}
}

func (ptr *QCoreApplication) DisconnectAboutToQuit() {
	if ptr.Pointer() != nil {
		C.QCoreApplication_DisconnectAboutToQuit(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::aboutToQuit")
	}
}

func QCoreApplication_AddLibraryPath(path string) {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QCoreApplication_QCoreApplication_AddLibraryPath(pathC)
}

func (ptr *QCoreApplication) AddLibraryPath(path string) {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QCoreApplication_QCoreApplication_AddLibraryPath(pathC)
}

func QCoreApplication_ApplicationDirPath() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationDirPath())
}

func (ptr *QCoreApplication) ApplicationDirPath() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationDirPath())
}

func QCoreApplication_ApplicationFilePath() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationFilePath())
}

func (ptr *QCoreApplication) ApplicationFilePath() string {
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_ApplicationFilePath())
}

func QCoreApplication_ApplicationPid() int64 {
	return int64(C.QCoreApplication_QCoreApplication_ApplicationPid())
}

func (ptr *QCoreApplication) ApplicationPid() int64 {
	return int64(C.QCoreApplication_QCoreApplication_ApplicationPid())
}

func QCoreApplication_Arguments() []string {
	return strings.Split(cGoUnpackString(C.QCoreApplication_QCoreApplication_Arguments()), "|")
}

func (ptr *QCoreApplication) Arguments() []string {
	return strings.Split(cGoUnpackString(C.QCoreApplication_QCoreApplication_Arguments()), "|")
}

func QCoreApplication_ClosingDown() bool {
	return C.QCoreApplication_QCoreApplication_ClosingDown() != 0
}

func (ptr *QCoreApplication) ClosingDown() bool {
	return C.QCoreApplication_QCoreApplication_ClosingDown() != 0
}

//export callbackQCoreApplication_Event
func callbackQCoreApplication_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCoreApplicationFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QCoreApplication) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::event", f)
	}
}

func (ptr *QCoreApplication) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::event")
	}
}

func (ptr *QCoreApplication) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QCoreApplication_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QCoreApplication) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QCoreApplication_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func QCoreApplication_EventDispatcher() *QAbstractEventDispatcher {
	var tmpValue = NewQAbstractEventDispatcherFromPointer(C.QCoreApplication_QCoreApplication_EventDispatcher())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QCoreApplication) EventDispatcher() *QAbstractEventDispatcher {
	var tmpValue = NewQAbstractEventDispatcherFromPointer(C.QCoreApplication_QCoreApplication_EventDispatcher())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QCoreApplication_Exec() int {
	return int(int32(C.QCoreApplication_QCoreApplication_Exec()))
}

func (ptr *QCoreApplication) Exec() int {
	return int(int32(C.QCoreApplication_QCoreApplication_Exec()))
}

func QCoreApplication_Exit(returnCode int) {
	C.QCoreApplication_QCoreApplication_Exit(C.int(int32(returnCode)))
}

func (ptr *QCoreApplication) Exit(returnCode int) {
	C.QCoreApplication_QCoreApplication_Exit(C.int(int32(returnCode)))
}

func QCoreApplication_Flush() {
	C.QCoreApplication_QCoreApplication_Flush()
}

func (ptr *QCoreApplication) Flush() {
	C.QCoreApplication_QCoreApplication_Flush()
}

func (ptr *QCoreApplication) InstallNativeEventFilter(filterObj QAbstractNativeEventFilter_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_InstallNativeEventFilter(ptr.Pointer(), PointerFromQAbstractNativeEventFilter(filterObj))
	}
}

func QCoreApplication_InstallTranslator(translationFile QTranslator_ITF) bool {
	return C.QCoreApplication_QCoreApplication_InstallTranslator(PointerFromQTranslator(translationFile)) != 0
}

func (ptr *QCoreApplication) InstallTranslator(translationFile QTranslator_ITF) bool {
	return C.QCoreApplication_QCoreApplication_InstallTranslator(PointerFromQTranslator(translationFile)) != 0
}

func QCoreApplication_Instance() *QCoreApplication {
	var tmpValue = NewQCoreApplicationFromPointer(C.QCoreApplication_QCoreApplication_Instance())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QCoreApplication) Instance() *QCoreApplication {
	var tmpValue = NewQCoreApplicationFromPointer(C.QCoreApplication_QCoreApplication_Instance())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QCoreApplication_IsSetuidAllowed() bool {
	return C.QCoreApplication_QCoreApplication_IsSetuidAllowed() != 0
}

func (ptr *QCoreApplication) IsSetuidAllowed() bool {
	return C.QCoreApplication_QCoreApplication_IsSetuidAllowed() != 0
}

func QCoreApplication_LibraryPaths() []string {
	return strings.Split(cGoUnpackString(C.QCoreApplication_QCoreApplication_LibraryPaths()), "|")
}

func (ptr *QCoreApplication) LibraryPaths() []string {
	return strings.Split(cGoUnpackString(C.QCoreApplication_QCoreApplication_LibraryPaths()), "|")
}

func QCoreApplication_PostEvent(receiver QObject_ITF, event QEvent_ITF, priority int) {
	C.QCoreApplication_QCoreApplication_PostEvent(PointerFromQObject(receiver), PointerFromQEvent(event), C.int(int32(priority)))
}

func (ptr *QCoreApplication) PostEvent(receiver QObject_ITF, event QEvent_ITF, priority int) {
	C.QCoreApplication_QCoreApplication_PostEvent(PointerFromQObject(receiver), PointerFromQEvent(event), C.int(int32(priority)))
}

func QCoreApplication_ProcessEvents(flags QEventLoop__ProcessEventsFlag) {
	C.QCoreApplication_QCoreApplication_ProcessEvents(C.longlong(flags))
}

func (ptr *QCoreApplication) ProcessEvents(flags QEventLoop__ProcessEventsFlag) {
	C.QCoreApplication_QCoreApplication_ProcessEvents(C.longlong(flags))
}

func QCoreApplication_ProcessEvents2(flags QEventLoop__ProcessEventsFlag, maxtime int) {
	C.QCoreApplication_QCoreApplication_ProcessEvents2(C.longlong(flags), C.int(int32(maxtime)))
}

func (ptr *QCoreApplication) ProcessEvents2(flags QEventLoop__ProcessEventsFlag, maxtime int) {
	C.QCoreApplication_QCoreApplication_ProcessEvents2(C.longlong(flags), C.int(int32(maxtime)))
}

//export callbackQCoreApplication_Quit
func callbackQCoreApplication_Quit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::quit"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QCoreApplication) ConnectQuit(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::quit", f)
	}
}

func (ptr *QCoreApplication) DisconnectQuit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::quit")
	}
}

func (ptr *QCoreApplication) Quit() {
	if ptr.Pointer() != nil {
		C.QCoreApplication_Quit(ptr.Pointer())
	}
}

func QCoreApplication_RemoveLibraryPath(path string) {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QCoreApplication_QCoreApplication_RemoveLibraryPath(pathC)
}

func (ptr *QCoreApplication) RemoveLibraryPath(path string) {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QCoreApplication_QCoreApplication_RemoveLibraryPath(pathC)
}

func (ptr *QCoreApplication) RemoveNativeEventFilter(filterObject QAbstractNativeEventFilter_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_RemoveNativeEventFilter(ptr.Pointer(), PointerFromQAbstractNativeEventFilter(filterObject))
	}
}

func QCoreApplication_RemovePostedEvents(receiver QObject_ITF, eventType int) {
	C.QCoreApplication_QCoreApplication_RemovePostedEvents(PointerFromQObject(receiver), C.int(int32(eventType)))
}

func (ptr *QCoreApplication) RemovePostedEvents(receiver QObject_ITF, eventType int) {
	C.QCoreApplication_QCoreApplication_RemovePostedEvents(PointerFromQObject(receiver), C.int(int32(eventType)))
}

func QCoreApplication_RemoveTranslator(translationFile QTranslator_ITF) bool {
	return C.QCoreApplication_QCoreApplication_RemoveTranslator(PointerFromQTranslator(translationFile)) != 0
}

func (ptr *QCoreApplication) RemoveTranslator(translationFile QTranslator_ITF) bool {
	return C.QCoreApplication_QCoreApplication_RemoveTranslator(PointerFromQTranslator(translationFile)) != 0
}

func QCoreApplication_SendEvent(receiver QObject_ITF, event QEvent_ITF) bool {
	return C.QCoreApplication_QCoreApplication_SendEvent(PointerFromQObject(receiver), PointerFromQEvent(event)) != 0
}

func (ptr *QCoreApplication) SendEvent(receiver QObject_ITF, event QEvent_ITF) bool {
	return C.QCoreApplication_QCoreApplication_SendEvent(PointerFromQObject(receiver), PointerFromQEvent(event)) != 0
}

func QCoreApplication_SendPostedEvents(receiver QObject_ITF, event_type int) {
	C.QCoreApplication_QCoreApplication_SendPostedEvents(PointerFromQObject(receiver), C.int(int32(event_type)))
}

func (ptr *QCoreApplication) SendPostedEvents(receiver QObject_ITF, event_type int) {
	C.QCoreApplication_QCoreApplication_SendPostedEvents(PointerFromQObject(receiver), C.int(int32(event_type)))
}

func QCoreApplication_SetAttribute(attribute Qt__ApplicationAttribute, on bool) {
	C.QCoreApplication_QCoreApplication_SetAttribute(C.longlong(attribute), C.char(int8(qt.GoBoolToInt(on))))
}

func (ptr *QCoreApplication) SetAttribute(attribute Qt__ApplicationAttribute, on bool) {
	C.QCoreApplication_QCoreApplication_SetAttribute(C.longlong(attribute), C.char(int8(qt.GoBoolToInt(on))))
}

func QCoreApplication_SetEventDispatcher(eventDispatcher QAbstractEventDispatcher_ITF) {
	C.QCoreApplication_QCoreApplication_SetEventDispatcher(PointerFromQAbstractEventDispatcher(eventDispatcher))
}

func (ptr *QCoreApplication) SetEventDispatcher(eventDispatcher QAbstractEventDispatcher_ITF) {
	C.QCoreApplication_QCoreApplication_SetEventDispatcher(PointerFromQAbstractEventDispatcher(eventDispatcher))
}

func QCoreApplication_SetLibraryPaths(paths []string) {
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	C.QCoreApplication_QCoreApplication_SetLibraryPaths(pathsC)
}

func (ptr *QCoreApplication) SetLibraryPaths(paths []string) {
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	C.QCoreApplication_QCoreApplication_SetLibraryPaths(pathsC)
}

func QCoreApplication_SetSetuidAllowed(allow bool) {
	C.QCoreApplication_QCoreApplication_SetSetuidAllowed(C.char(int8(qt.GoBoolToInt(allow))))
}

func (ptr *QCoreApplication) SetSetuidAllowed(allow bool) {
	C.QCoreApplication_QCoreApplication_SetSetuidAllowed(C.char(int8(qt.GoBoolToInt(allow))))
}

func QCoreApplication_StartingUp() bool {
	return C.QCoreApplication_QCoreApplication_StartingUp() != 0
}

func (ptr *QCoreApplication) StartingUp() bool {
	return C.QCoreApplication_QCoreApplication_StartingUp() != 0
}

func QCoreApplication_TestAttribute(attribute Qt__ApplicationAttribute) bool {
	return C.QCoreApplication_QCoreApplication_TestAttribute(C.longlong(attribute)) != 0
}

func (ptr *QCoreApplication) TestAttribute(attribute Qt__ApplicationAttribute) bool {
	return C.QCoreApplication_QCoreApplication_TestAttribute(C.longlong(attribute)) != 0
}

func QCoreApplication_Translate(context string, sourceText string, disambiguation string, n int) string {
	var contextC = C.CString(context)
	defer C.free(unsafe.Pointer(contextC))
	var sourceTextC = C.CString(sourceText)
	defer C.free(unsafe.Pointer(sourceTextC))
	var disambiguationC = C.CString(disambiguation)
	defer C.free(unsafe.Pointer(disambiguationC))
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_Translate(contextC, sourceTextC, disambiguationC, C.int(int32(n))))
}

func (ptr *QCoreApplication) Translate(context string, sourceText string, disambiguation string, n int) string {
	var contextC = C.CString(context)
	defer C.free(unsafe.Pointer(contextC))
	var sourceTextC = C.CString(sourceText)
	defer C.free(unsafe.Pointer(sourceTextC))
	var disambiguationC = C.CString(disambiguation)
	defer C.free(unsafe.Pointer(disambiguationC))
	return cGoUnpackString(C.QCoreApplication_QCoreApplication_Translate(contextC, sourceTextC, disambiguationC, C.int(int32(n))))
}

func (ptr *QCoreApplication) DestroyQCoreApplication() {
	if ptr.Pointer() != nil {
		C.QCoreApplication_DestroyQCoreApplication(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func QCoreApplication_ApplicationFlags() int {
	return int(int32(C.QCoreApplication_QCoreApplication_ApplicationFlags()))
}

func (ptr *QCoreApplication) ApplicationFlags() int {
	return int(int32(C.QCoreApplication_QCoreApplication_ApplicationFlags()))
}

//export callbackQCoreApplication_TimerEvent
func callbackQCoreApplication_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQCoreApplicationFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QCoreApplication) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::timerEvent", f)
	}
}

func (ptr *QCoreApplication) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::timerEvent")
	}
}

func (ptr *QCoreApplication) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QCoreApplication) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQCoreApplication_ChildEvent
func callbackQCoreApplication_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQCoreApplicationFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QCoreApplication) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::childEvent", f)
	}
}

func (ptr *QCoreApplication) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::childEvent")
	}
}

func (ptr *QCoreApplication) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QCoreApplication) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQCoreApplication_ConnectNotify
func callbackQCoreApplication_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQCoreApplicationFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCoreApplication) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::connectNotify", f)
	}
}

func (ptr *QCoreApplication) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::connectNotify")
	}
}

func (ptr *QCoreApplication) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCoreApplication) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQCoreApplication_CustomEvent
func callbackQCoreApplication_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQCoreApplicationFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QCoreApplication) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::customEvent", f)
	}
}

func (ptr *QCoreApplication) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::customEvent")
	}
}

func (ptr *QCoreApplication) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QCoreApplication) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQCoreApplication_DeleteLater
func callbackQCoreApplication_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQCoreApplicationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QCoreApplication) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::deleteLater", f)
	}
}

func (ptr *QCoreApplication) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::deleteLater")
	}
}

func (ptr *QCoreApplication) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QCoreApplication_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QCoreApplication) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QCoreApplication_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQCoreApplication_DisconnectNotify
func callbackQCoreApplication_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQCoreApplicationFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QCoreApplication) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::disconnectNotify", f)
	}
}

func (ptr *QCoreApplication) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::disconnectNotify")
	}
}

func (ptr *QCoreApplication) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QCoreApplication) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QCoreApplication_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQCoreApplication_EventFilter
func callbackQCoreApplication_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQCoreApplicationFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QCoreApplication) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::eventFilter", f)
	}
}

func (ptr *QCoreApplication) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::eventFilter")
	}
}

func (ptr *QCoreApplication) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QCoreApplication_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QCoreApplication) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QCoreApplication_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQCoreApplication_MetaObject
func callbackQCoreApplication_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QCoreApplication::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQCoreApplicationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QCoreApplication) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::metaObject", f)
	}
}

func (ptr *QCoreApplication) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QCoreApplication::metaObject")
	}
}

func (ptr *QCoreApplication) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QCoreApplication_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QCoreApplication) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QCoreApplication_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QCryptographicHash::Algorithm
type QCryptographicHash__Algorithm int64

const (
	QCryptographicHash__Md4      = QCryptographicHash__Algorithm(0)
	QCryptographicHash__Md5      = QCryptographicHash__Algorithm(1)
	QCryptographicHash__Sha1     = QCryptographicHash__Algorithm(2)
	QCryptographicHash__Sha224   = QCryptographicHash__Algorithm(3)
	QCryptographicHash__Sha256   = QCryptographicHash__Algorithm(4)
	QCryptographicHash__Sha384   = QCryptographicHash__Algorithm(5)
	QCryptographicHash__Sha512   = QCryptographicHash__Algorithm(6)
	QCryptographicHash__Sha3_224 = QCryptographicHash__Algorithm(7)
	QCryptographicHash__Sha3_256 = QCryptographicHash__Algorithm(8)
	QCryptographicHash__Sha3_384 = QCryptographicHash__Algorithm(9)
	QCryptographicHash__Sha3_512 = QCryptographicHash__Algorithm(10)
)

type QCryptographicHash struct {
	ptr unsafe.Pointer
}

type QCryptographicHash_ITF interface {
	QCryptographicHash_PTR() *QCryptographicHash
}

func (p *QCryptographicHash) QCryptographicHash_PTR() *QCryptographicHash {
	return p
}

func (p *QCryptographicHash) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QCryptographicHash) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQCryptographicHash(ptr QCryptographicHash_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QCryptographicHash_PTR().Pointer()
	}
	return nil
}

func NewQCryptographicHashFromPointer(ptr unsafe.Pointer) *QCryptographicHash {
	var n = new(QCryptographicHash)
	n.SetPointer(ptr)
	return n
}
func NewQCryptographicHash(method QCryptographicHash__Algorithm) *QCryptographicHash {
	var tmpValue = NewQCryptographicHashFromPointer(C.QCryptographicHash_NewQCryptographicHash(C.longlong(method)))
	runtime.SetFinalizer(tmpValue, (*QCryptographicHash).DestroyQCryptographicHash)
	return tmpValue
}

func (ptr *QCryptographicHash) AddData3(device QIODevice_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QCryptographicHash_AddData3(ptr.Pointer(), PointerFromQIODevice(device)) != 0
	}
	return false
}

func (ptr *QCryptographicHash) AddData2(data QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QCryptographicHash_AddData2(ptr.Pointer(), PointerFromQByteArray(data))
	}
}

func (ptr *QCryptographicHash) AddData(data string, length int) {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QCryptographicHash_AddData(ptr.Pointer(), dataC, C.int(int32(length)))
	}
}

func QCryptographicHash_Hash(data QByteArray_ITF, method QCryptographicHash__Algorithm) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QCryptographicHash_QCryptographicHash_Hash(PointerFromQByteArray(data), C.longlong(method)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QCryptographicHash) Hash(data QByteArray_ITF, method QCryptographicHash__Algorithm) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QCryptographicHash_QCryptographicHash_Hash(PointerFromQByteArray(data), C.longlong(method)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QCryptographicHash) Reset() {
	if ptr.Pointer() != nil {
		C.QCryptographicHash_Reset(ptr.Pointer())
	}
}

func (ptr *QCryptographicHash) Result() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QCryptographicHash_Result(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QCryptographicHash) DestroyQCryptographicHash() {
	if ptr.Pointer() != nil {
		C.QCryptographicHash_DestroyQCryptographicHash(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QDataStream::ByteOrder
type QDataStream__ByteOrder int64

const (
	QDataStream__BigEndian    = QDataStream__ByteOrder(QSysInfo__BigEndian)
	QDataStream__LittleEndian = QDataStream__ByteOrder(QSysInfo__LittleEndian)
)

//QDataStream::FloatingPointPrecision
type QDataStream__FloatingPointPrecision int64

const (
	QDataStream__SinglePrecision = QDataStream__FloatingPointPrecision(0)
	QDataStream__DoublePrecision = QDataStream__FloatingPointPrecision(1)
)

//QDataStream::Status
type QDataStream__Status int64

const (
	QDataStream__Ok              = QDataStream__Status(0)
	QDataStream__ReadPastEnd     = QDataStream__Status(1)
	QDataStream__ReadCorruptData = QDataStream__Status(2)
	QDataStream__WriteFailed     = QDataStream__Status(3)
)

//QDataStream::Version
type QDataStream__Version int64

const (
	QDataStream__Qt_1_0                    = QDataStream__Version(1)
	QDataStream__Qt_2_0                    = QDataStream__Version(2)
	QDataStream__Qt_2_1                    = QDataStream__Version(3)
	QDataStream__Qt_3_0                    = QDataStream__Version(4)
	QDataStream__Qt_3_1                    = QDataStream__Version(5)
	QDataStream__Qt_3_3                    = QDataStream__Version(6)
	QDataStream__Qt_4_0                    = QDataStream__Version(7)
	QDataStream__Qt_4_1                    = QDataStream__Version(QDataStream__Qt_4_0)
	QDataStream__Qt_4_2                    = QDataStream__Version(8)
	QDataStream__Qt_4_3                    = QDataStream__Version(9)
	QDataStream__Qt_4_4                    = QDataStream__Version(10)
	QDataStream__Qt_4_5                    = QDataStream__Version(11)
	QDataStream__Qt_4_6                    = QDataStream__Version(12)
	QDataStream__Qt_4_7                    = QDataStream__Version(QDataStream__Qt_4_6)
	QDataStream__Qt_4_8                    = QDataStream__Version(QDataStream__Qt_4_7)
	QDataStream__Qt_4_9                    = QDataStream__Version(QDataStream__Qt_4_8)
	QDataStream__Qt_5_0                    = QDataStream__Version(13)
	QDataStream__Qt_5_1                    = QDataStream__Version(14)
	QDataStream__Qt_5_2                    = QDataStream__Version(15)
	QDataStream__Qt_5_3                    = QDataStream__Version(QDataStream__Qt_5_2)
	QDataStream__Qt_5_4                    = QDataStream__Version(16)
	QDataStream__Qt_5_5                    = QDataStream__Version(QDataStream__Qt_5_4)
	QDataStream__Qt_5_6                    = QDataStream__Version(17)
	QDataStream__Qt_5_7                    = QDataStream__Version(QDataStream__Qt_5_6)
	QDataStream__Qt_DefaultCompiledVersion = QDataStream__Version(QDataStream__Qt_5_7)
)

type QDataStream struct {
	ptr unsafe.Pointer
}

type QDataStream_ITF interface {
	QDataStream_PTR() *QDataStream
}

func (p *QDataStream) QDataStream_PTR() *QDataStream {
	return p
}

func (p *QDataStream) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDataStream) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDataStream(ptr QDataStream_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDataStream_PTR().Pointer()
	}
	return nil
}

func NewQDataStreamFromPointer(ptr unsafe.Pointer) *QDataStream {
	var n = new(QDataStream)
	n.SetPointer(ptr)
	return n
}
func NewQDataStream3(a QByteArray_ITF, mode QIODevice__OpenModeFlag) *QDataStream {
	var tmpValue = NewQDataStreamFromPointer(C.QDataStream_NewQDataStream3(PointerFromQByteArray(a), C.longlong(mode)))
	runtime.SetFinalizer(tmpValue, (*QDataStream).DestroyQDataStream)
	return tmpValue
}

func (ptr *QDataStream) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QDataStream_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func NewQDataStream() *QDataStream {
	var tmpValue = NewQDataStreamFromPointer(C.QDataStream_NewQDataStream())
	runtime.SetFinalizer(tmpValue, (*QDataStream).DestroyQDataStream)
	return tmpValue
}

func NewQDataStream2(d QIODevice_ITF) *QDataStream {
	var tmpValue = NewQDataStreamFromPointer(C.QDataStream_NewQDataStream2(PointerFromQIODevice(d)))
	runtime.SetFinalizer(tmpValue, (*QDataStream).DestroyQDataStream)
	return tmpValue
}

func NewQDataStream4(a QByteArray_ITF) *QDataStream {
	var tmpValue = NewQDataStreamFromPointer(C.QDataStream_NewQDataStream4(PointerFromQByteArray(a)))
	runtime.SetFinalizer(tmpValue, (*QDataStream).DestroyQDataStream)
	return tmpValue
}

func (ptr *QDataStream) AbortTransaction() {
	if ptr.Pointer() != nil {
		C.QDataStream_AbortTransaction(ptr.Pointer())
	}
}

func (ptr *QDataStream) ByteOrder() QDataStream__ByteOrder {
	if ptr.Pointer() != nil {
		return QDataStream__ByteOrder(C.QDataStream_ByteOrder(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDataStream) CommitTransaction() bool {
	if ptr.Pointer() != nil {
		return C.QDataStream_CommitTransaction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDataStream) Device() *QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIODeviceFromPointer(C.QDataStream_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QDataStream) FloatingPointPrecision() QDataStream__FloatingPointPrecision {
	if ptr.Pointer() != nil {
		return QDataStream__FloatingPointPrecision(C.QDataStream_FloatingPointPrecision(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDataStream) ReadRawData(s string, len int) int {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return int(int32(C.QDataStream_ReadRawData(ptr.Pointer(), sC, C.int(int32(len)))))
	}
	return 0
}

func (ptr *QDataStream) ResetStatus() {
	if ptr.Pointer() != nil {
		C.QDataStream_ResetStatus(ptr.Pointer())
	}
}

func (ptr *QDataStream) RollbackTransaction() {
	if ptr.Pointer() != nil {
		C.QDataStream_RollbackTransaction(ptr.Pointer())
	}
}

func (ptr *QDataStream) SetByteOrder(bo QDataStream__ByteOrder) {
	if ptr.Pointer() != nil {
		C.QDataStream_SetByteOrder(ptr.Pointer(), C.longlong(bo))
	}
}

func (ptr *QDataStream) SetDevice(d QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QDataStream_SetDevice(ptr.Pointer(), PointerFromQIODevice(d))
	}
}

func (ptr *QDataStream) SetFloatingPointPrecision(precision QDataStream__FloatingPointPrecision) {
	if ptr.Pointer() != nil {
		C.QDataStream_SetFloatingPointPrecision(ptr.Pointer(), C.longlong(precision))
	}
}

func (ptr *QDataStream) SetStatus(status QDataStream__Status) {
	if ptr.Pointer() != nil {
		C.QDataStream_SetStatus(ptr.Pointer(), C.longlong(status))
	}
}

func (ptr *QDataStream) SetVersion(v int) {
	if ptr.Pointer() != nil {
		C.QDataStream_SetVersion(ptr.Pointer(), C.int(int32(v)))
	}
}

func (ptr *QDataStream) SkipRawData(len int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDataStream_SkipRawData(ptr.Pointer(), C.int(int32(len)))))
	}
	return 0
}

func (ptr *QDataStream) StartTransaction() {
	if ptr.Pointer() != nil {
		C.QDataStream_StartTransaction(ptr.Pointer())
	}
}

func (ptr *QDataStream) Status() QDataStream__Status {
	if ptr.Pointer() != nil {
		return QDataStream__Status(C.QDataStream_Status(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDataStream) Version() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDataStream_Version(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDataStream) WriteRawData(s string, len int) int {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return int(int32(C.QDataStream_WriteRawData(ptr.Pointer(), sC, C.int(int32(len)))))
	}
	return 0
}

func (ptr *QDataStream) DestroyQDataStream() {
	if ptr.Pointer() != nil {
		C.QDataStream_DestroyQDataStream(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QDate::MonthNameType
type QDate__MonthNameType int64

const (
	QDate__DateFormat       = QDate__MonthNameType(0)
	QDate__StandaloneFormat = QDate__MonthNameType(1)
)

type QDate struct {
	ptr unsafe.Pointer
}

type QDate_ITF interface {
	QDate_PTR() *QDate
}

func (p *QDate) QDate_PTR() *QDate {
	return p
}

func (p *QDate) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDate) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDate(ptr QDate_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDate_PTR().Pointer()
	}
	return nil
}

func NewQDateFromPointer(ptr unsafe.Pointer) *QDate {
	var n = new(QDate)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDate) DestroyQDate() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QDate_CurrentDate() *QDate {
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_CurrentDate())
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func (ptr *QDate) CurrentDate() *QDate {
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_CurrentDate())
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func QDate_FromString(stri string, format Qt__DateFormat) *QDate {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_FromString(striC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func (ptr *QDate) FromString(stri string, format Qt__DateFormat) *QDate {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_FromString(striC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func QDate_FromString2(stri string, format string) *QDate {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_FromString2(striC, formatC))
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func (ptr *QDate) FromString2(stri string, format string) *QDate {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_FromString2(striC, formatC))
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func QDate_IsLeapYear(year int) bool {
	return C.QDate_QDate_IsLeapYear(C.int(int32(year))) != 0
}

func (ptr *QDate) IsLeapYear(year int) bool {
	return C.QDate_QDate_IsLeapYear(C.int(int32(year))) != 0
}

func (ptr *QDate) ToString2(format Qt__DateFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QDate_ToString2(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func NewQDate() *QDate {
	var tmpValue = NewQDateFromPointer(C.QDate_NewQDate())
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func NewQDate3(y int, m int, d int) *QDate {
	var tmpValue = NewQDateFromPointer(C.QDate_NewQDate3(C.int(int32(y)), C.int(int32(m)), C.int(int32(d))))
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func (ptr *QDate) AddDays(ndays int64) *QDate {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateFromPointer(C.QDate_AddDays(ptr.Pointer(), C.longlong(ndays)))
		runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
		return tmpValue
	}
	return nil
}

func (ptr *QDate) AddMonths(nmonths int) *QDate {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateFromPointer(C.QDate_AddMonths(ptr.Pointer(), C.int(int32(nmonths))))
		runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
		return tmpValue
	}
	return nil
}

func (ptr *QDate) AddYears(nyears int) *QDate {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateFromPointer(C.QDate_AddYears(ptr.Pointer(), C.int(int32(nyears))))
		runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
		return tmpValue
	}
	return nil
}

func (ptr *QDate) Day() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_Day(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDate) DayOfWeek() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_DayOfWeek(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDate) DayOfYear() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_DayOfYear(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDate) DaysInMonth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_DaysInMonth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDate) DaysInYear() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_DaysInYear(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDate) DaysTo(d QDate_ITF) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QDate_DaysTo(ptr.Pointer(), PointerFromQDate(d)))
	}
	return 0
}

func QDate_FromJulianDay(jd int64) *QDate {
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_FromJulianDay(C.longlong(jd)))
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func (ptr *QDate) FromJulianDay(jd int64) *QDate {
	var tmpValue = NewQDateFromPointer(C.QDate_QDate_FromJulianDay(C.longlong(jd)))
	runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
	return tmpValue
}

func (ptr *QDate) GetDate(year int, month int, day int) {
	if ptr.Pointer() != nil {
		C.QDate_GetDate(ptr.Pointer(), C.int(int32(year)), C.int(int32(month)), C.int(int32(day)))
	}
}

func (ptr *QDate) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QDate_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func QDate_IsValid2(year int, month int, day int) bool {
	return C.QDate_QDate_IsValid2(C.int(int32(year)), C.int(int32(month)), C.int(int32(day))) != 0
}

func (ptr *QDate) IsValid2(year int, month int, day int) bool {
	return C.QDate_QDate_IsValid2(C.int(int32(year)), C.int(int32(month)), C.int(int32(day))) != 0
}

func (ptr *QDate) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QDate_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QDate_LongDayName(weekday int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_LongDayName(C.int(int32(weekday)), C.longlong(ty)))
}

func (ptr *QDate) LongDayName(weekday int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_LongDayName(C.int(int32(weekday)), C.longlong(ty)))
}

func QDate_LongMonthName(month int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_LongMonthName(C.int(int32(month)), C.longlong(ty)))
}

func (ptr *QDate) LongMonthName(month int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_LongMonthName(C.int(int32(month)), C.longlong(ty)))
}

func (ptr *QDate) Month() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_Month(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDate) SetDate(year int, month int, day int) bool {
	if ptr.Pointer() != nil {
		return C.QDate_SetDate(ptr.Pointer(), C.int(int32(year)), C.int(int32(month)), C.int(int32(day))) != 0
	}
	return false
}

func QDate_ShortDayName(weekday int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_ShortDayName(C.int(int32(weekday)), C.longlong(ty)))
}

func (ptr *QDate) ShortDayName(weekday int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_ShortDayName(C.int(int32(weekday)), C.longlong(ty)))
}

func QDate_ShortMonthName(month int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_ShortMonthName(C.int(int32(month)), C.longlong(ty)))
}

func (ptr *QDate) ShortMonthName(month int, ty QDate__MonthNameType) string {
	return cGoUnpackString(C.QDate_QDate_ShortMonthName(C.int(int32(month)), C.longlong(ty)))
}

func (ptr *QDate) ToJulianDay() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QDate_ToJulianDay(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDate) ToString(format string) string {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return cGoUnpackString(C.QDate_ToString(ptr.Pointer(), formatC))
	}
	return ""
}

func (ptr *QDate) WeekNumber(yearNumber int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_WeekNumber(ptr.Pointer(), C.int(int32(yearNumber)))))
	}
	return 0
}

func (ptr *QDate) Year() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDate_Year(ptr.Pointer())))
	}
	return 0
}

type QDateTime struct {
	ptr unsafe.Pointer
}

type QDateTime_ITF interface {
	QDateTime_PTR() *QDateTime
}

func (p *QDateTime) QDateTime_PTR() *QDateTime {
	return p
}

func (p *QDateTime) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDateTime) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDateTime(ptr QDateTime_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDateTime_PTR().Pointer()
	}
	return nil
}

func NewQDateTimeFromPointer(ptr unsafe.Pointer) *QDateTime {
	var n = new(QDateTime)
	n.SetPointer(ptr)
	return n
}
func QDateTime_CurrentDateTime() *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_CurrentDateTime())
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) CurrentDateTime() *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_CurrentDateTime())
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_CurrentDateTimeUtc() *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_CurrentDateTimeUtc())
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) CurrentDateTimeUtc() *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_CurrentDateTimeUtc())
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_CurrentMSecsSinceEpoch() int64 {
	return int64(C.QDateTime_QDateTime_CurrentMSecsSinceEpoch())
}

func (ptr *QDateTime) CurrentMSecsSinceEpoch() int64 {
	return int64(C.QDateTime_QDateTime_CurrentMSecsSinceEpoch())
}

func QDateTime_FromString(stri string, format Qt__DateFormat) *QDateTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromString(striC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromString(stri string, format Qt__DateFormat) *QDateTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromString(striC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_FromString2(stri string, format string) *QDateTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromString2(striC, formatC))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromString2(stri string, format string) *QDateTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromString2(striC, formatC))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) SetTime_t(seconds uint) {
	if ptr.Pointer() != nil {
		C.QDateTime_SetTime_t(ptr.Pointer(), C.uint(uint32(seconds)))
	}
}

func (ptr *QDateTime) ToOffsetFromUtc(offsetSeconds int) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_ToOffsetFromUtc(ptr.Pointer(), C.int(int32(offsetSeconds))))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) ToString2(format Qt__DateFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QDateTime_ToString2(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QDateTime) ToTimeSpec(spec Qt__TimeSpec) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_ToTimeSpec(ptr.Pointer(), C.longlong(spec)))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func NewQDateTime() *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_NewQDateTime())
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func NewQDateTime2(date QDate_ITF) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_NewQDateTime2(PointerFromQDate(date)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func NewQDateTime3(date QDate_ITF, time QTime_ITF, spec Qt__TimeSpec) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_NewQDateTime3(PointerFromQDate(date), PointerFromQTime(time), C.longlong(spec)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func NewQDateTime4(date QDate_ITF, time QTime_ITF, spec Qt__TimeSpec, offsetSeconds int) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_NewQDateTime4(PointerFromQDate(date), PointerFromQTime(time), C.longlong(spec), C.int(int32(offsetSeconds))))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func NewQDateTime5(date QDate_ITF, time QTime_ITF, timeZone QTimeZone_ITF) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_NewQDateTime5(PointerFromQDate(date), PointerFromQTime(time), PointerFromQTimeZone(timeZone)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func NewQDateTime6(other QDateTime_ITF) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_NewQDateTime6(PointerFromQDateTime(other)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) AddDays(ndays int64) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_AddDays(ptr.Pointer(), C.longlong(ndays)))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) AddMSecs(msecs int64) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_AddMSecs(ptr.Pointer(), C.longlong(msecs)))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) AddMonths(nmonths int) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_AddMonths(ptr.Pointer(), C.int(int32(nmonths))))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) AddSecs(s int64) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_AddSecs(ptr.Pointer(), C.longlong(s)))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) AddYears(nyears int) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_AddYears(ptr.Pointer(), C.int(int32(nyears))))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) Date() *QDate {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateFromPointer(C.QDateTime_Date(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) DaysTo(other QDateTime_ITF) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QDateTime_DaysTo(ptr.Pointer(), PointerFromQDateTime(other)))
	}
	return 0
}

func QDateTime_FromMSecsSinceEpoch(msecs int64) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromMSecsSinceEpoch(C.longlong(msecs)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromMSecsSinceEpoch(msecs int64) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromMSecsSinceEpoch(C.longlong(msecs)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_FromMSecsSinceEpoch2(msecs int64, spec Qt__TimeSpec, offsetSeconds int) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromMSecsSinceEpoch2(C.longlong(msecs), C.longlong(spec), C.int(int32(offsetSeconds))))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromMSecsSinceEpoch2(msecs int64, spec Qt__TimeSpec, offsetSeconds int) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromMSecsSinceEpoch2(C.longlong(msecs), C.longlong(spec), C.int(int32(offsetSeconds))))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_FromMSecsSinceEpoch3(msecs int64, timeZone QTimeZone_ITF) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromMSecsSinceEpoch3(C.longlong(msecs), PointerFromQTimeZone(timeZone)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromMSecsSinceEpoch3(msecs int64, timeZone QTimeZone_ITF) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromMSecsSinceEpoch3(C.longlong(msecs), PointerFromQTimeZone(timeZone)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_FromTime_t(seconds uint) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromTime_t(C.uint(uint32(seconds))))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromTime_t(seconds uint) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromTime_t(C.uint(uint32(seconds))))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_FromTime_t2(seconds uint, spec Qt__TimeSpec, offsetSeconds int) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromTime_t2(C.uint(uint32(seconds)), C.longlong(spec), C.int(int32(offsetSeconds))))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromTime_t2(seconds uint, spec Qt__TimeSpec, offsetSeconds int) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromTime_t2(C.uint(uint32(seconds)), C.longlong(spec), C.int(int32(offsetSeconds))))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func QDateTime_FromTime_t3(seconds uint, timeZone QTimeZone_ITF) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromTime_t3(C.uint(uint32(seconds)), PointerFromQTimeZone(timeZone)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) FromTime_t3(seconds uint, timeZone QTimeZone_ITF) *QDateTime {
	var tmpValue = NewQDateTimeFromPointer(C.QDateTime_QDateTime_FromTime_t3(C.uint(uint32(seconds)), PointerFromQTimeZone(timeZone)))
	runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
	return tmpValue
}

func (ptr *QDateTime) IsDaylightTime() bool {
	if ptr.Pointer() != nil {
		return C.QDateTime_IsDaylightTime(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDateTime) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QDateTime_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDateTime) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QDateTime_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDateTime) MsecsTo(other QDateTime_ITF) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QDateTime_MsecsTo(ptr.Pointer(), PointerFromQDateTime(other)))
	}
	return 0
}

func (ptr *QDateTime) OffsetFromUtc() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDateTime_OffsetFromUtc(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDateTime) SecsTo(other QDateTime_ITF) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QDateTime_SecsTo(ptr.Pointer(), PointerFromQDateTime(other)))
	}
	return 0
}

func (ptr *QDateTime) SetDate(date QDate_ITF) {
	if ptr.Pointer() != nil {
		C.QDateTime_SetDate(ptr.Pointer(), PointerFromQDate(date))
	}
}

func (ptr *QDateTime) SetMSecsSinceEpoch(msecs int64) {
	if ptr.Pointer() != nil {
		C.QDateTime_SetMSecsSinceEpoch(ptr.Pointer(), C.longlong(msecs))
	}
}

func (ptr *QDateTime) SetOffsetFromUtc(offsetSeconds int) {
	if ptr.Pointer() != nil {
		C.QDateTime_SetOffsetFromUtc(ptr.Pointer(), C.int(int32(offsetSeconds)))
	}
}

func (ptr *QDateTime) SetTime(time QTime_ITF) {
	if ptr.Pointer() != nil {
		C.QDateTime_SetTime(ptr.Pointer(), PointerFromQTime(time))
	}
}

func (ptr *QDateTime) SetTimeSpec(spec Qt__TimeSpec) {
	if ptr.Pointer() != nil {
		C.QDateTime_SetTimeSpec(ptr.Pointer(), C.longlong(spec))
	}
}

func (ptr *QDateTime) SetTimeZone(toZone QTimeZone_ITF) {
	if ptr.Pointer() != nil {
		C.QDateTime_SetTimeZone(ptr.Pointer(), PointerFromQTimeZone(toZone))
	}
}

func (ptr *QDateTime) Swap(other QDateTime_ITF) {
	if ptr.Pointer() != nil {
		C.QDateTime_Swap(ptr.Pointer(), PointerFromQDateTime(other))
	}
}

func (ptr *QDateTime) Time() *QTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTimeFromPointer(C.QDateTime_Time(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) TimeSpec() Qt__TimeSpec {
	if ptr.Pointer() != nil {
		return Qt__TimeSpec(C.QDateTime_TimeSpec(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDateTime) TimeZone() *QTimeZone {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTimeZoneFromPointer(C.QDateTime_TimeZone(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) TimeZoneAbbreviation() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QDateTime_TimeZoneAbbreviation(ptr.Pointer()))
	}
	return ""
}

func (ptr *QDateTime) ToLocalTime() *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_ToLocalTime(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) ToMSecsSinceEpoch() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QDateTime_ToMSecsSinceEpoch(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDateTime) ToString(format string) string {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return cGoUnpackString(C.QDateTime_ToString(ptr.Pointer(), formatC))
	}
	return ""
}

func (ptr *QDateTime) ToTimeZone(timeZone QTimeZone_ITF) *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_ToTimeZone(ptr.Pointer(), PointerFromQTimeZone(timeZone)))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) ToTime_t() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QDateTime_ToTime_t(ptr.Pointer())))
	}
	return 0
}

func (ptr *QDateTime) ToUTC() *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QDateTime_ToUTC(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QDateTime) DestroyQDateTime() {
	if ptr.Pointer() != nil {
		C.QDateTime_DestroyQDateTime(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QDebug struct {
	ptr unsafe.Pointer
}

type QDebug_ITF interface {
	QDebug_PTR() *QDebug
}

func (p *QDebug) QDebug_PTR() *QDebug {
	return p
}

func (p *QDebug) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDebug) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDebug(ptr QDebug_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDebug_PTR().Pointer()
	}
	return nil
}

func NewQDebugFromPointer(ptr unsafe.Pointer) *QDebug {
	var n = new(QDebug)
	n.SetPointer(ptr)
	return n
}
func (ptr *QDebug) DestroyQDebug() {
	if ptr.Pointer() != nil {
		C.QDebug_DestroyQDebug(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQDebug(device QIODevice_ITF) *QDebug {
	var tmpValue = NewQDebugFromPointer(C.QDebug_NewQDebug(PointerFromQIODevice(device)))
	runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
	return tmpValue
}

func NewQDebug2(stri string) *QDebug {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQDebugFromPointer(C.QDebug_NewQDebug2(striC))
	runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
	return tmpValue
}

func NewQDebug4(other QDebug_ITF) *QDebug {
	var tmpValue = NewQDebugFromPointer(C.QDebug_NewQDebug4(PointerFromQDebug(other)))
	runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
	return tmpValue
}

func (ptr *QDebug) AutoInsertSpaces() bool {
	if ptr.Pointer() != nil {
		return C.QDebug_AutoInsertSpaces(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDebug) MaybeQuote(c string) *QDebug {
	if ptr.Pointer() != nil {
		var cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
		var tmpValue = NewQDebugFromPointer(C.QDebug_MaybeQuote(ptr.Pointer(), cC))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QDebug) MaybeSpace() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QDebug_MaybeSpace(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QDebug) Noquote() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QDebug_Noquote(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QDebug) Nospace() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QDebug_Nospace(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QDebug) Quote() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QDebug_Quote(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QDebug) ResetFormat() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QDebug_ResetFormat(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QDebug) SetAutoInsertSpaces(b bool) {
	if ptr.Pointer() != nil {
		C.QDebug_SetAutoInsertSpaces(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QDebug) SetVerbosity(verbosityLevel int) {
	if ptr.Pointer() != nil {
		C.QDebug_SetVerbosity(ptr.Pointer(), C.int(int32(verbosityLevel)))
	}
}

func (ptr *QDebug) Space() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QDebug_Space(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QDebug) Swap(other QDebug_ITF) {
	if ptr.Pointer() != nil {
		C.QDebug_Swap(ptr.Pointer(), PointerFromQDebug(other))
	}
}

func (ptr *QDebug) Verbosity() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QDebug_Verbosity(ptr.Pointer())))
	}
	return 0
}

type QDebugStateSaver struct {
	ptr unsafe.Pointer
}

type QDebugStateSaver_ITF interface {
	QDebugStateSaver_PTR() *QDebugStateSaver
}

func (p *QDebugStateSaver) QDebugStateSaver_PTR() *QDebugStateSaver {
	return p
}

func (p *QDebugStateSaver) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDebugStateSaver) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDebugStateSaver(ptr QDebugStateSaver_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDebugStateSaver_PTR().Pointer()
	}
	return nil
}

func NewQDebugStateSaverFromPointer(ptr unsafe.Pointer) *QDebugStateSaver {
	var n = new(QDebugStateSaver)
	n.SetPointer(ptr)
	return n
}
func NewQDebugStateSaver(dbg QDebug_ITF) *QDebugStateSaver {
	var tmpValue = NewQDebugStateSaverFromPointer(C.QDebugStateSaver_NewQDebugStateSaver(PointerFromQDebug(dbg)))
	runtime.SetFinalizer(tmpValue, (*QDebugStateSaver).DestroyQDebugStateSaver)
	return tmpValue
}

func (ptr *QDebugStateSaver) DestroyQDebugStateSaver() {
	if ptr.Pointer() != nil {
		C.QDebugStateSaver_DestroyQDebugStateSaver(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QDir::Filter
type QDir__Filter int64

const (
	QDir__Dirs           = QDir__Filter(0x001)
	QDir__Files          = QDir__Filter(0x002)
	QDir__Drives         = QDir__Filter(0x004)
	QDir__NoSymLinks     = QDir__Filter(0x008)
	QDir__AllEntries     = QDir__Filter(QDir__Dirs | QDir__Files | QDir__Drives)
	QDir__TypeMask       = QDir__Filter(0x00f)
	QDir__Readable       = QDir__Filter(0x010)
	QDir__Writable       = QDir__Filter(0x020)
	QDir__Executable     = QDir__Filter(0x040)
	QDir__PermissionMask = QDir__Filter(0x070)
	QDir__Modified       = QDir__Filter(0x080)
	QDir__Hidden         = QDir__Filter(0x100)
	QDir__System         = QDir__Filter(0x200)
	QDir__AccessMask     = QDir__Filter(0x3F0)
	QDir__AllDirs        = QDir__Filter(0x400)
	QDir__CaseSensitive  = QDir__Filter(0x800)
	QDir__NoDot          = QDir__Filter(0x2000)
	QDir__NoDotDot       = QDir__Filter(0x4000)
	QDir__NoDotAndDotDot = QDir__Filter(QDir__NoDot | QDir__NoDotDot)
	QDir__NoFilter       = QDir__Filter(-1)
)

//QDir::SortFlag
type QDir__SortFlag int64

const (
	QDir__Name        = QDir__SortFlag(0x00)
	QDir__Time        = QDir__SortFlag(0x01)
	QDir__Size        = QDir__SortFlag(0x02)
	QDir__Unsorted    = QDir__SortFlag(0x03)
	QDir__SortByMask  = QDir__SortFlag(0x03)
	QDir__DirsFirst   = QDir__SortFlag(0x04)
	QDir__Reversed    = QDir__SortFlag(0x08)
	QDir__IgnoreCase  = QDir__SortFlag(0x10)
	QDir__DirsLast    = QDir__SortFlag(0x20)
	QDir__LocaleAware = QDir__SortFlag(0x40)
	QDir__Type        = QDir__SortFlag(0x80)
	QDir__NoSort      = QDir__SortFlag(-1)
)

type QDir struct {
	ptr unsafe.Pointer
}

type QDir_ITF interface {
	QDir_PTR() *QDir
}

func (p *QDir) QDir_PTR() *QDir {
	return p
}

func (p *QDir) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDir) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDir(ptr QDir_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDir_PTR().Pointer()
	}
	return nil
}

func NewQDirFromPointer(ptr unsafe.Pointer) *QDir {
	var n = new(QDir)
	n.SetPointer(ptr)
	return n
}
func NewQDir(dir QDir_ITF) *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_NewQDir(PointerFromQDir(dir)))
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func NewQDir2(path string) *QDir {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	var tmpValue = NewQDirFromPointer(C.QDir_NewQDir2(pathC))
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func NewQDir3(path string, nameFilter string, sort QDir__SortFlag, filters QDir__Filter) *QDir {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	var nameFilterC = C.CString(nameFilter)
	defer C.free(unsafe.Pointer(nameFilterC))
	var tmpValue = NewQDirFromPointer(C.QDir_NewQDir3(pathC, nameFilterC, C.longlong(sort), C.longlong(filters)))
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func (ptr *QDir) AbsoluteFilePath(fileName string) string {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		return cGoUnpackString(C.QDir_AbsoluteFilePath(ptr.Pointer(), fileNameC))
	}
	return ""
}

func (ptr *QDir) AbsolutePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QDir_AbsolutePath(ptr.Pointer()))
	}
	return ""
}

func QDir_AddSearchPath(prefix string, path string) {
	var prefixC = C.CString(prefix)
	defer C.free(unsafe.Pointer(prefixC))
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QDir_QDir_AddSearchPath(prefixC, pathC)
}

func (ptr *QDir) AddSearchPath(prefix string, path string) {
	var prefixC = C.CString(prefix)
	defer C.free(unsafe.Pointer(prefixC))
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QDir_QDir_AddSearchPath(prefixC, pathC)
}

func (ptr *QDir) CanonicalPath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QDir_CanonicalPath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QDir) Cd(dirName string) bool {
	if ptr.Pointer() != nil {
		var dirNameC = C.CString(dirName)
		defer C.free(unsafe.Pointer(dirNameC))
		return C.QDir_Cd(ptr.Pointer(), dirNameC) != 0
	}
	return false
}

func (ptr *QDir) CdUp() bool {
	if ptr.Pointer() != nil {
		return C.QDir_CdUp(ptr.Pointer()) != 0
	}
	return false
}

func QDir_CleanPath(path string) string {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return cGoUnpackString(C.QDir_QDir_CleanPath(pathC))
}

func (ptr *QDir) CleanPath(path string) string {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return cGoUnpackString(C.QDir_QDir_CleanPath(pathC))
}

func (ptr *QDir) Count() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QDir_Count(ptr.Pointer())))
	}
	return 0
}

func QDir_Current() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Current())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func (ptr *QDir) Current() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Current())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func QDir_CurrentPath() string {
	return cGoUnpackString(C.QDir_QDir_CurrentPath())
}

func (ptr *QDir) CurrentPath() string {
	return cGoUnpackString(C.QDir_QDir_CurrentPath())
}

func (ptr *QDir) DirName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QDir_DirName(ptr.Pointer()))
	}
	return ""
}

func QDir_Drives() []*QFileInfo {
	return func(l C.struct_QtCore_PackedList) []*QFileInfo {
		var out = make([]*QFileInfo, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQDirFromPointer(l.data).drives_atList(i)
		}
		return out
	}(C.QDir_QDir_Drives())
}

func (ptr *QDir) Drives() []*QFileInfo {
	return func(l C.struct_QtCore_PackedList) []*QFileInfo {
		var out = make([]*QFileInfo, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQDirFromPointer(l.data).drives_atList(i)
		}
		return out
	}(C.QDir_QDir_Drives())
}

func (ptr *QDir) EntryInfoList2(filters QDir__Filter, sort QDir__SortFlag) []*QFileInfo {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QFileInfo {
			var out = make([]*QFileInfo, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQDirFromPointer(l.data).entryInfoList_atList(i)
			}
			return out
		}(C.QDir_EntryInfoList2(ptr.Pointer(), C.longlong(filters), C.longlong(sort)))
	}
	return nil
}

func (ptr *QDir) EntryInfoList(nameFilters []string, filters QDir__Filter, sort QDir__SortFlag) []*QFileInfo {
	if ptr.Pointer() != nil {
		var nameFiltersC = C.CString(strings.Join(nameFilters, "|"))
		defer C.free(unsafe.Pointer(nameFiltersC))
		return func(l C.struct_QtCore_PackedList) []*QFileInfo {
			var out = make([]*QFileInfo, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQDirFromPointer(l.data).entryInfoList_atList(i)
			}
			return out
		}(C.QDir_EntryInfoList(ptr.Pointer(), nameFiltersC, C.longlong(filters), C.longlong(sort)))
	}
	return nil
}

func (ptr *QDir) EntryList2(filters QDir__Filter, sort QDir__SortFlag) []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QDir_EntryList2(ptr.Pointer(), C.longlong(filters), C.longlong(sort))), "|")
	}
	return make([]string, 0)
}

func (ptr *QDir) EntryList(nameFilters []string, filters QDir__Filter, sort QDir__SortFlag) []string {
	if ptr.Pointer() != nil {
		var nameFiltersC = C.CString(strings.Join(nameFilters, "|"))
		defer C.free(unsafe.Pointer(nameFiltersC))
		return strings.Split(cGoUnpackString(C.QDir_EntryList(ptr.Pointer(), nameFiltersC, C.longlong(filters), C.longlong(sort))), "|")
	}
	return make([]string, 0)
}

func (ptr *QDir) Exists2() bool {
	if ptr.Pointer() != nil {
		return C.QDir_Exists2(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDir) Exists(name string) bool {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return C.QDir_Exists(ptr.Pointer(), nameC) != 0
	}
	return false
}

func (ptr *QDir) FilePath(fileName string) string {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		return cGoUnpackString(C.QDir_FilePath(ptr.Pointer(), fileNameC))
	}
	return ""
}

func (ptr *QDir) Filter() QDir__Filter {
	if ptr.Pointer() != nil {
		return QDir__Filter(C.QDir_Filter(ptr.Pointer()))
	}
	return 0
}

func QDir_FromNativeSeparators(pathName string) string {
	var pathNameC = C.CString(pathName)
	defer C.free(unsafe.Pointer(pathNameC))
	return cGoUnpackString(C.QDir_QDir_FromNativeSeparators(pathNameC))
}

func (ptr *QDir) FromNativeSeparators(pathName string) string {
	var pathNameC = C.CString(pathName)
	defer C.free(unsafe.Pointer(pathNameC))
	return cGoUnpackString(C.QDir_QDir_FromNativeSeparators(pathNameC))
}

func QDir_Home() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Home())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func (ptr *QDir) Home() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Home())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func QDir_HomePath() string {
	return cGoUnpackString(C.QDir_QDir_HomePath())
}

func (ptr *QDir) HomePath() string {
	return cGoUnpackString(C.QDir_QDir_HomePath())
}

func (ptr *QDir) IsAbsolute() bool {
	if ptr.Pointer() != nil {
		return C.QDir_IsAbsolute(ptr.Pointer()) != 0
	}
	return false
}

func QDir_IsAbsolutePath(path string) bool {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return C.QDir_QDir_IsAbsolutePath(pathC) != 0
}

func (ptr *QDir) IsAbsolutePath(path string) bool {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return C.QDir_QDir_IsAbsolutePath(pathC) != 0
}

func (ptr *QDir) IsReadable() bool {
	if ptr.Pointer() != nil {
		return C.QDir_IsReadable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDir) IsRelative() bool {
	if ptr.Pointer() != nil {
		return C.QDir_IsRelative(ptr.Pointer()) != 0
	}
	return false
}

func QDir_IsRelativePath(path string) bool {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return C.QDir_QDir_IsRelativePath(pathC) != 0
}

func (ptr *QDir) IsRelativePath(path string) bool {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return C.QDir_QDir_IsRelativePath(pathC) != 0
}

func (ptr *QDir) IsRoot() bool {
	if ptr.Pointer() != nil {
		return C.QDir_IsRoot(ptr.Pointer()) != 0
	}
	return false
}

func QDir_ListSeparator() *QChar {
	var tmpValue = NewQCharFromPointer(C.QDir_QDir_ListSeparator())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func (ptr *QDir) ListSeparator() *QChar {
	var tmpValue = NewQCharFromPointer(C.QDir_QDir_ListSeparator())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func (ptr *QDir) MakeAbsolute() bool {
	if ptr.Pointer() != nil {
		return C.QDir_MakeAbsolute(ptr.Pointer()) != 0
	}
	return false
}

func QDir_Match(filter string, fileName string) bool {
	var filterC = C.CString(filter)
	defer C.free(unsafe.Pointer(filterC))
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QDir_QDir_Match(filterC, fileNameC) != 0
}

func (ptr *QDir) Match(filter string, fileName string) bool {
	var filterC = C.CString(filter)
	defer C.free(unsafe.Pointer(filterC))
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QDir_QDir_Match(filterC, fileNameC) != 0
}

func QDir_Match2(filters []string, fileName string) bool {
	var filtersC = C.CString(strings.Join(filters, "|"))
	defer C.free(unsafe.Pointer(filtersC))
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QDir_QDir_Match2(filtersC, fileNameC) != 0
}

func (ptr *QDir) Match2(filters []string, fileName string) bool {
	var filtersC = C.CString(strings.Join(filters, "|"))
	defer C.free(unsafe.Pointer(filtersC))
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QDir_QDir_Match2(filtersC, fileNameC) != 0
}

func (ptr *QDir) Mkdir(dirName string) bool {
	if ptr.Pointer() != nil {
		var dirNameC = C.CString(dirName)
		defer C.free(unsafe.Pointer(dirNameC))
		return C.QDir_Mkdir(ptr.Pointer(), dirNameC) != 0
	}
	return false
}

func (ptr *QDir) Mkpath(dirPath string) bool {
	if ptr.Pointer() != nil {
		var dirPathC = C.CString(dirPath)
		defer C.free(unsafe.Pointer(dirPathC))
		return C.QDir_Mkpath(ptr.Pointer(), dirPathC) != 0
	}
	return false
}

func (ptr *QDir) NameFilters() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QDir_NameFilters(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QDir) Path() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QDir_Path(ptr.Pointer()))
	}
	return ""
}

func (ptr *QDir) Refresh() {
	if ptr.Pointer() != nil {
		C.QDir_Refresh(ptr.Pointer())
	}
}

func (ptr *QDir) RelativeFilePath(fileName string) string {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		return cGoUnpackString(C.QDir_RelativeFilePath(ptr.Pointer(), fileNameC))
	}
	return ""
}

func (ptr *QDir) Remove(fileName string) bool {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		return C.QDir_Remove(ptr.Pointer(), fileNameC) != 0
	}
	return false
}

func (ptr *QDir) RemoveRecursively() bool {
	if ptr.Pointer() != nil {
		return C.QDir_RemoveRecursively(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QDir) Rename(oldName string, newName string) bool {
	if ptr.Pointer() != nil {
		var oldNameC = C.CString(oldName)
		defer C.free(unsafe.Pointer(oldNameC))
		var newNameC = C.CString(newName)
		defer C.free(unsafe.Pointer(newNameC))
		return C.QDir_Rename(ptr.Pointer(), oldNameC, newNameC) != 0
	}
	return false
}

func (ptr *QDir) Rmdir(dirName string) bool {
	if ptr.Pointer() != nil {
		var dirNameC = C.CString(dirName)
		defer C.free(unsafe.Pointer(dirNameC))
		return C.QDir_Rmdir(ptr.Pointer(), dirNameC) != 0
	}
	return false
}

func (ptr *QDir) Rmpath(dirPath string) bool {
	if ptr.Pointer() != nil {
		var dirPathC = C.CString(dirPath)
		defer C.free(unsafe.Pointer(dirPathC))
		return C.QDir_Rmpath(ptr.Pointer(), dirPathC) != 0
	}
	return false
}

func QDir_Root() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Root())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func (ptr *QDir) Root() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Root())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func QDir_RootPath() string {
	return cGoUnpackString(C.QDir_QDir_RootPath())
}

func (ptr *QDir) RootPath() string {
	return cGoUnpackString(C.QDir_QDir_RootPath())
}

func QDir_SearchPaths(prefix string) []string {
	var prefixC = C.CString(prefix)
	defer C.free(unsafe.Pointer(prefixC))
	return strings.Split(cGoUnpackString(C.QDir_QDir_SearchPaths(prefixC)), "|")
}

func (ptr *QDir) SearchPaths(prefix string) []string {
	var prefixC = C.CString(prefix)
	defer C.free(unsafe.Pointer(prefixC))
	return strings.Split(cGoUnpackString(C.QDir_QDir_SearchPaths(prefixC)), "|")
}

func QDir_Separator() *QChar {
	var tmpValue = NewQCharFromPointer(C.QDir_QDir_Separator())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func (ptr *QDir) Separator() *QChar {
	var tmpValue = NewQCharFromPointer(C.QDir_QDir_Separator())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func QDir_SetCurrent(path string) bool {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return C.QDir_QDir_SetCurrent(pathC) != 0
}

func (ptr *QDir) SetCurrent(path string) bool {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	return C.QDir_QDir_SetCurrent(pathC) != 0
}

func (ptr *QDir) SetFilter(filters QDir__Filter) {
	if ptr.Pointer() != nil {
		C.QDir_SetFilter(ptr.Pointer(), C.longlong(filters))
	}
}

func (ptr *QDir) SetNameFilters(nameFilters []string) {
	if ptr.Pointer() != nil {
		var nameFiltersC = C.CString(strings.Join(nameFilters, "|"))
		defer C.free(unsafe.Pointer(nameFiltersC))
		C.QDir_SetNameFilters(ptr.Pointer(), nameFiltersC)
	}
}

func (ptr *QDir) SetPath(path string) {
	if ptr.Pointer() != nil {
		var pathC = C.CString(path)
		defer C.free(unsafe.Pointer(pathC))
		C.QDir_SetPath(ptr.Pointer(), pathC)
	}
}

func QDir_SetSearchPaths(prefix string, searchPaths []string) {
	var prefixC = C.CString(prefix)
	defer C.free(unsafe.Pointer(prefixC))
	var searchPathsC = C.CString(strings.Join(searchPaths, "|"))
	defer C.free(unsafe.Pointer(searchPathsC))
	C.QDir_QDir_SetSearchPaths(prefixC, searchPathsC)
}

func (ptr *QDir) SetSearchPaths(prefix string, searchPaths []string) {
	var prefixC = C.CString(prefix)
	defer C.free(unsafe.Pointer(prefixC))
	var searchPathsC = C.CString(strings.Join(searchPaths, "|"))
	defer C.free(unsafe.Pointer(searchPathsC))
	C.QDir_QDir_SetSearchPaths(prefixC, searchPathsC)
}

func (ptr *QDir) SetSorting(sort QDir__SortFlag) {
	if ptr.Pointer() != nil {
		C.QDir_SetSorting(ptr.Pointer(), C.longlong(sort))
	}
}

func (ptr *QDir) Sorting() QDir__SortFlag {
	if ptr.Pointer() != nil {
		return QDir__SortFlag(C.QDir_Sorting(ptr.Pointer()))
	}
	return 0
}

func (ptr *QDir) Swap(other QDir_ITF) {
	if ptr.Pointer() != nil {
		C.QDir_Swap(ptr.Pointer(), PointerFromQDir(other))
	}
}

func QDir_Temp() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Temp())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func (ptr *QDir) Temp() *QDir {
	var tmpValue = NewQDirFromPointer(C.QDir_QDir_Temp())
	runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
	return tmpValue
}

func QDir_TempPath() string {
	return cGoUnpackString(C.QDir_QDir_TempPath())
}

func (ptr *QDir) TempPath() string {
	return cGoUnpackString(C.QDir_QDir_TempPath())
}

func QDir_ToNativeSeparators(pathName string) string {
	var pathNameC = C.CString(pathName)
	defer C.free(unsafe.Pointer(pathNameC))
	return cGoUnpackString(C.QDir_QDir_ToNativeSeparators(pathNameC))
}

func (ptr *QDir) ToNativeSeparators(pathName string) string {
	var pathNameC = C.CString(pathName)
	defer C.free(unsafe.Pointer(pathNameC))
	return cGoUnpackString(C.QDir_QDir_ToNativeSeparators(pathNameC))
}

func (ptr *QDir) DestroyQDir() {
	if ptr.Pointer() != nil {
		C.QDir_DestroyQDir(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QDir) drives_atList(i int) *QFileInfo {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFileInfoFromPointer(C.QDir_drives_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QFileInfo).DestroyQFileInfo)
		return tmpValue
	}
	return nil
}

func (ptr *QDir) entryInfoList_atList(i int) *QFileInfo {
	if ptr.Pointer() != nil {
		var tmpValue = NewQFileInfoFromPointer(C.QDir_entryInfoList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QFileInfo).DestroyQFileInfo)
		return tmpValue
	}
	return nil
}

//QDirIterator::IteratorFlag
type QDirIterator__IteratorFlag int64

const (
	QDirIterator__NoIteratorFlags = QDirIterator__IteratorFlag(0x0)
	QDirIterator__FollowSymlinks  = QDirIterator__IteratorFlag(0x1)
	QDirIterator__Subdirectories  = QDirIterator__IteratorFlag(0x2)
)

type QDirIterator struct {
	ptr unsafe.Pointer
}

type QDirIterator_ITF interface {
	QDirIterator_PTR() *QDirIterator
}

func (p *QDirIterator) QDirIterator_PTR() *QDirIterator {
	return p
}

func (p *QDirIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QDirIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQDirIterator(ptr QDirIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDirIterator_PTR().Pointer()
	}
	return nil
}

func NewQDirIteratorFromPointer(ptr unsafe.Pointer) *QDirIterator {
	var n = new(QDirIterator)
	n.SetPointer(ptr)
	return n
}

type QDynamicPropertyChangeEvent struct {
	QEvent
}

type QDynamicPropertyChangeEvent_ITF interface {
	QEvent_ITF
	QDynamicPropertyChangeEvent_PTR() *QDynamicPropertyChangeEvent
}

func (p *QDynamicPropertyChangeEvent) QDynamicPropertyChangeEvent_PTR() *QDynamicPropertyChangeEvent {
	return p
}

func (p *QDynamicPropertyChangeEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QDynamicPropertyChangeEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQDynamicPropertyChangeEvent(ptr QDynamicPropertyChangeEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QDynamicPropertyChangeEvent_PTR().Pointer()
	}
	return nil
}

func NewQDynamicPropertyChangeEventFromPointer(ptr unsafe.Pointer) *QDynamicPropertyChangeEvent {
	var n = new(QDynamicPropertyChangeEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QDynamicPropertyChangeEvent) DestroyQDynamicPropertyChangeEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQDynamicPropertyChangeEvent(name QByteArray_ITF) *QDynamicPropertyChangeEvent {
	var tmpValue = NewQDynamicPropertyChangeEventFromPointer(C.QDynamicPropertyChangeEvent_NewQDynamicPropertyChangeEvent(PointerFromQByteArray(name)))
	runtime.SetFinalizer(tmpValue, (*QDynamicPropertyChangeEvent).DestroyQDynamicPropertyChangeEvent)
	return tmpValue
}

func (ptr *QDynamicPropertyChangeEvent) PropertyName() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QDynamicPropertyChangeEvent_PropertyName(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//QEasingCurve::Type
type QEasingCurve__Type int64

const (
	QEasingCurve__Linear       = QEasingCurve__Type(0)
	QEasingCurve__InQuad       = QEasingCurve__Type(1)
	QEasingCurve__OutQuad      = QEasingCurve__Type(2)
	QEasingCurve__InOutQuad    = QEasingCurve__Type(3)
	QEasingCurve__OutInQuad    = QEasingCurve__Type(4)
	QEasingCurve__InCubic      = QEasingCurve__Type(5)
	QEasingCurve__OutCubic     = QEasingCurve__Type(6)
	QEasingCurve__InOutCubic   = QEasingCurve__Type(7)
	QEasingCurve__OutInCubic   = QEasingCurve__Type(8)
	QEasingCurve__InQuart      = QEasingCurve__Type(9)
	QEasingCurve__OutQuart     = QEasingCurve__Type(10)
	QEasingCurve__InOutQuart   = QEasingCurve__Type(11)
	QEasingCurve__OutInQuart   = QEasingCurve__Type(12)
	QEasingCurve__InQuint      = QEasingCurve__Type(13)
	QEasingCurve__OutQuint     = QEasingCurve__Type(14)
	QEasingCurve__InOutQuint   = QEasingCurve__Type(15)
	QEasingCurve__OutInQuint   = QEasingCurve__Type(16)
	QEasingCurve__InSine       = QEasingCurve__Type(17)
	QEasingCurve__OutSine      = QEasingCurve__Type(18)
	QEasingCurve__InOutSine    = QEasingCurve__Type(19)
	QEasingCurve__OutInSine    = QEasingCurve__Type(20)
	QEasingCurve__InExpo       = QEasingCurve__Type(21)
	QEasingCurve__OutExpo      = QEasingCurve__Type(22)
	QEasingCurve__InOutExpo    = QEasingCurve__Type(23)
	QEasingCurve__OutInExpo    = QEasingCurve__Type(24)
	QEasingCurve__InCirc       = QEasingCurve__Type(25)
	QEasingCurve__OutCirc      = QEasingCurve__Type(26)
	QEasingCurve__InOutCirc    = QEasingCurve__Type(27)
	QEasingCurve__OutInCirc    = QEasingCurve__Type(28)
	QEasingCurve__InElastic    = QEasingCurve__Type(29)
	QEasingCurve__OutElastic   = QEasingCurve__Type(30)
	QEasingCurve__InOutElastic = QEasingCurve__Type(31)
	QEasingCurve__OutInElastic = QEasingCurve__Type(32)
	QEasingCurve__InBack       = QEasingCurve__Type(33)
	QEasingCurve__OutBack      = QEasingCurve__Type(34)
	QEasingCurve__InOutBack    = QEasingCurve__Type(35)
	QEasingCurve__OutInBack    = QEasingCurve__Type(36)
	QEasingCurve__InBounce     = QEasingCurve__Type(37)
	QEasingCurve__OutBounce    = QEasingCurve__Type(38)
	QEasingCurve__InOutBounce  = QEasingCurve__Type(39)
	QEasingCurve__OutInBounce  = QEasingCurve__Type(40)
	QEasingCurve__InCurve      = QEasingCurve__Type(41)
	QEasingCurve__OutCurve     = QEasingCurve__Type(42)
	QEasingCurve__SineCurve    = QEasingCurve__Type(43)
	QEasingCurve__CosineCurve  = QEasingCurve__Type(44)
	QEasingCurve__BezierSpline = QEasingCurve__Type(45)
	QEasingCurve__TCBSpline    = QEasingCurve__Type(46)
	QEasingCurve__Custom       = QEasingCurve__Type(47)
	QEasingCurve__NCurveTypes  = QEasingCurve__Type(48)
)

type QEasingCurve struct {
	ptr unsafe.Pointer
}

type QEasingCurve_ITF interface {
	QEasingCurve_PTR() *QEasingCurve
}

func (p *QEasingCurve) QEasingCurve_PTR() *QEasingCurve {
	return p
}

func (p *QEasingCurve) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QEasingCurve) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQEasingCurve(ptr QEasingCurve_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEasingCurve_PTR().Pointer()
	}
	return nil
}

func NewQEasingCurveFromPointer(ptr unsafe.Pointer) *QEasingCurve {
	var n = new(QEasingCurve)
	n.SetPointer(ptr)
	return n
}
func NewQEasingCurve3(other QEasingCurve_ITF) *QEasingCurve {
	var tmpValue = NewQEasingCurveFromPointer(C.QEasingCurve_NewQEasingCurve3(PointerFromQEasingCurve(other)))
	runtime.SetFinalizer(tmpValue, (*QEasingCurve).DestroyQEasingCurve)
	return tmpValue
}

func NewQEasingCurve(ty QEasingCurve__Type) *QEasingCurve {
	var tmpValue = NewQEasingCurveFromPointer(C.QEasingCurve_NewQEasingCurve(C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QEasingCurve).DestroyQEasingCurve)
	return tmpValue
}

func NewQEasingCurve2(other QEasingCurve_ITF) *QEasingCurve {
	var tmpValue = NewQEasingCurveFromPointer(C.QEasingCurve_NewQEasingCurve2(PointerFromQEasingCurve(other)))
	runtime.SetFinalizer(tmpValue, (*QEasingCurve).DestroyQEasingCurve)
	return tmpValue
}

func (ptr *QEasingCurve) AddCubicBezierSegment(c1 QPointF_ITF, c2 QPointF_ITF, endPoint QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QEasingCurve_AddCubicBezierSegment(ptr.Pointer(), PointerFromQPointF(c1), PointerFromQPointF(c2), PointerFromQPointF(endPoint))
	}
}

func (ptr *QEasingCurve) AddTCBSegment(nextPoint QPointF_ITF, t float64, c float64, b float64) {
	if ptr.Pointer() != nil {
		C.QEasingCurve_AddTCBSegment(ptr.Pointer(), PointerFromQPointF(nextPoint), C.double(t), C.double(c), C.double(b))
	}
}

func (ptr *QEasingCurve) Amplitude() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QEasingCurve_Amplitude(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEasingCurve) Overshoot() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QEasingCurve_Overshoot(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEasingCurve) Period() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QEasingCurve_Period(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEasingCurve) SetAmplitude(amplitude float64) {
	if ptr.Pointer() != nil {
		C.QEasingCurve_SetAmplitude(ptr.Pointer(), C.double(amplitude))
	}
}

func (ptr *QEasingCurve) SetOvershoot(overshoot float64) {
	if ptr.Pointer() != nil {
		C.QEasingCurve_SetOvershoot(ptr.Pointer(), C.double(overshoot))
	}
}

func (ptr *QEasingCurve) SetPeriod(period float64) {
	if ptr.Pointer() != nil {
		C.QEasingCurve_SetPeriod(ptr.Pointer(), C.double(period))
	}
}

func (ptr *QEasingCurve) SetType(ty QEasingCurve__Type) {
	if ptr.Pointer() != nil {
		C.QEasingCurve_SetType(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QEasingCurve) Swap(other QEasingCurve_ITF) {
	if ptr.Pointer() != nil {
		C.QEasingCurve_Swap(ptr.Pointer(), PointerFromQEasingCurve(other))
	}
}

func (ptr *QEasingCurve) ToCubicSpline() []*QPointF {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QPointF {
			var out = make([]*QPointF, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQEasingCurveFromPointer(l.data).toCubicSpline_atList(i)
			}
			return out
		}(C.QEasingCurve_ToCubicSpline(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEasingCurve) Type() QEasingCurve__Type {
	if ptr.Pointer() != nil {
		return QEasingCurve__Type(C.QEasingCurve_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEasingCurve) ValueForProgress(progress float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QEasingCurve_ValueForProgress(ptr.Pointer(), C.double(progress)))
	}
	return 0
}

func (ptr *QEasingCurve) DestroyQEasingCurve() {
	if ptr.Pointer() != nil {
		C.QEasingCurve_DestroyQEasingCurve(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QEasingCurve) toCubicSpline_atList(i int) *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QEasingCurve_toCubicSpline_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

//QElapsedTimer::ClockType
type QElapsedTimer__ClockType int64

const (
	QElapsedTimer__SystemTime         = QElapsedTimer__ClockType(0)
	QElapsedTimer__MonotonicClock     = QElapsedTimer__ClockType(1)
	QElapsedTimer__TickCounter        = QElapsedTimer__ClockType(2)
	QElapsedTimer__MachAbsoluteTime   = QElapsedTimer__ClockType(3)
	QElapsedTimer__PerformanceCounter = QElapsedTimer__ClockType(4)
)

type QElapsedTimer struct {
	ptr unsafe.Pointer
}

type QElapsedTimer_ITF interface {
	QElapsedTimer_PTR() *QElapsedTimer
}

func (p *QElapsedTimer) QElapsedTimer_PTR() *QElapsedTimer {
	return p
}

func (p *QElapsedTimer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QElapsedTimer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQElapsedTimer(ptr QElapsedTimer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QElapsedTimer_PTR().Pointer()
	}
	return nil
}

func NewQElapsedTimerFromPointer(ptr unsafe.Pointer) *QElapsedTimer {
	var n = new(QElapsedTimer)
	n.SetPointer(ptr)
	return n
}

func (ptr *QElapsedTimer) DestroyQElapsedTimer() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQElapsedTimer() *QElapsedTimer {
	var tmpValue = NewQElapsedTimerFromPointer(C.QElapsedTimer_NewQElapsedTimer())
	runtime.SetFinalizer(tmpValue, (*QElapsedTimer).DestroyQElapsedTimer)
	return tmpValue
}

func (ptr *QElapsedTimer) HasExpired(timeout int64) bool {
	if ptr.Pointer() != nil {
		return C.QElapsedTimer_HasExpired(ptr.Pointer(), C.longlong(timeout)) != 0
	}
	return false
}

func (ptr *QElapsedTimer) Invalidate() {
	if ptr.Pointer() != nil {
		C.QElapsedTimer_Invalidate(ptr.Pointer())
	}
}

func (ptr *QElapsedTimer) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QElapsedTimer_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QElapsedTimer_ClockType() QElapsedTimer__ClockType {
	return QElapsedTimer__ClockType(C.QElapsedTimer_QElapsedTimer_ClockType())
}

func (ptr *QElapsedTimer) ClockType() QElapsedTimer__ClockType {
	return QElapsedTimer__ClockType(C.QElapsedTimer_QElapsedTimer_ClockType())
}

func (ptr *QElapsedTimer) Elapsed() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QElapsedTimer_Elapsed(ptr.Pointer()))
	}
	return 0
}

func QElapsedTimer_IsMonotonic() bool {
	return C.QElapsedTimer_QElapsedTimer_IsMonotonic() != 0
}

func (ptr *QElapsedTimer) IsMonotonic() bool {
	return C.QElapsedTimer_QElapsedTimer_IsMonotonic() != 0
}

func (ptr *QElapsedTimer) MsecsSinceReference() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QElapsedTimer_MsecsSinceReference(ptr.Pointer()))
	}
	return 0
}

func (ptr *QElapsedTimer) MsecsTo(other QElapsedTimer_ITF) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QElapsedTimer_MsecsTo(ptr.Pointer(), PointerFromQElapsedTimer(other)))
	}
	return 0
}

func (ptr *QElapsedTimer) NsecsElapsed() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QElapsedTimer_NsecsElapsed(ptr.Pointer()))
	}
	return 0
}

func (ptr *QElapsedTimer) Restart() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QElapsedTimer_Restart(ptr.Pointer()))
	}
	return 0
}

func (ptr *QElapsedTimer) SecsTo(other QElapsedTimer_ITF) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QElapsedTimer_SecsTo(ptr.Pointer(), PointerFromQElapsedTimer(other)))
	}
	return 0
}

func (ptr *QElapsedTimer) Start() {
	if ptr.Pointer() != nil {
		C.QElapsedTimer_Start(ptr.Pointer())
	}
}

type QEnableSharedFromThis struct {
	ptr unsafe.Pointer
}

type QEnableSharedFromThis_ITF interface {
	QEnableSharedFromThis_PTR() *QEnableSharedFromThis
}

func (p *QEnableSharedFromThis) QEnableSharedFromThis_PTR() *QEnableSharedFromThis {
	return p
}

func (p *QEnableSharedFromThis) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QEnableSharedFromThis) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQEnableSharedFromThis(ptr QEnableSharedFromThis_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEnableSharedFromThis_PTR().Pointer()
	}
	return nil
}

func NewQEnableSharedFromThisFromPointer(ptr unsafe.Pointer) *QEnableSharedFromThis {
	var n = new(QEnableSharedFromThis)
	n.SetPointer(ptr)
	return n
}

func (ptr *QEnableSharedFromThis) DestroyQEnableSharedFromThis() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QEvent::Type
type QEvent__Type int64

const (
	QEvent__None                             = QEvent__Type(0)
	QEvent__Timer                            = QEvent__Type(1)
	QEvent__MouseButtonPress                 = QEvent__Type(2)
	QEvent__MouseButtonRelease               = QEvent__Type(3)
	QEvent__MouseButtonDblClick              = QEvent__Type(4)
	QEvent__MouseMove                        = QEvent__Type(5)
	QEvent__KeyPress                         = QEvent__Type(6)
	QEvent__KeyRelease                       = QEvent__Type(7)
	QEvent__FocusIn                          = QEvent__Type(8)
	QEvent__FocusOut                         = QEvent__Type(9)
	QEvent__FocusAboutToChange               = QEvent__Type(23)
	QEvent__Enter                            = QEvent__Type(10)
	QEvent__Leave                            = QEvent__Type(11)
	QEvent__Paint                            = QEvent__Type(12)
	QEvent__Move                             = QEvent__Type(13)
	QEvent__Resize                           = QEvent__Type(14)
	QEvent__Create                           = QEvent__Type(15)
	QEvent__Destroy                          = QEvent__Type(16)
	QEvent__Show                             = QEvent__Type(17)
	QEvent__Hide                             = QEvent__Type(18)
	QEvent__Close                            = QEvent__Type(19)
	QEvent__Quit                             = QEvent__Type(20)
	QEvent__ParentChange                     = QEvent__Type(21)
	QEvent__ParentAboutToChange              = QEvent__Type(131)
	QEvent__ThreadChange                     = QEvent__Type(22)
	QEvent__WindowActivate                   = QEvent__Type(24)
	QEvent__WindowDeactivate                 = QEvent__Type(25)
	QEvent__ShowToParent                     = QEvent__Type(26)
	QEvent__HideToParent                     = QEvent__Type(27)
	QEvent__Wheel                            = QEvent__Type(31)
	QEvent__WindowTitleChange                = QEvent__Type(33)
	QEvent__WindowIconChange                 = QEvent__Type(34)
	QEvent__ApplicationWindowIconChange      = QEvent__Type(35)
	QEvent__ApplicationFontChange            = QEvent__Type(36)
	QEvent__ApplicationLayoutDirectionChange = QEvent__Type(37)
	QEvent__ApplicationPaletteChange         = QEvent__Type(38)
	QEvent__PaletteChange                    = QEvent__Type(39)
	QEvent__Clipboard                        = QEvent__Type(40)
	QEvent__Speech                           = QEvent__Type(42)
	QEvent__MetaCall                         = QEvent__Type(43)
	QEvent__SockAct                          = QEvent__Type(50)
	QEvent__WinEventAct                      = QEvent__Type(132)
	QEvent__DeferredDelete                   = QEvent__Type(52)
	QEvent__DragEnter                        = QEvent__Type(60)
	QEvent__DragMove                         = QEvent__Type(61)
	QEvent__DragLeave                        = QEvent__Type(62)
	QEvent__Drop                             = QEvent__Type(63)
	QEvent__DragResponse                     = QEvent__Type(64)
	QEvent__ChildAdded                       = QEvent__Type(68)
	QEvent__ChildPolished                    = QEvent__Type(69)
	QEvent__ChildRemoved                     = QEvent__Type(71)
	QEvent__ShowWindowRequest                = QEvent__Type(73)
	QEvent__PolishRequest                    = QEvent__Type(74)
	QEvent__Polish                           = QEvent__Type(75)
	QEvent__LayoutRequest                    = QEvent__Type(76)
	QEvent__UpdateRequest                    = QEvent__Type(77)
	QEvent__UpdateLater                      = QEvent__Type(78)
	QEvent__EmbeddingControl                 = QEvent__Type(79)
	QEvent__ActivateControl                  = QEvent__Type(80)
	QEvent__DeactivateControl                = QEvent__Type(81)
	QEvent__ContextMenu                      = QEvent__Type(82)
	QEvent__InputMethod                      = QEvent__Type(83)
	QEvent__TabletMove                       = QEvent__Type(87)
	QEvent__LocaleChange                     = QEvent__Type(88)
	QEvent__LanguageChange                   = QEvent__Type(89)
	QEvent__LayoutDirectionChange            = QEvent__Type(90)
	QEvent__Style                            = QEvent__Type(91)
	QEvent__TabletPress                      = QEvent__Type(92)
	QEvent__TabletRelease                    = QEvent__Type(93)
	QEvent__OkRequest                        = QEvent__Type(94)
	QEvent__HelpRequest                      = QEvent__Type(95)
	QEvent__IconDrag                         = QEvent__Type(96)
	QEvent__FontChange                       = QEvent__Type(97)
	QEvent__EnabledChange                    = QEvent__Type(98)
	QEvent__ActivationChange                 = QEvent__Type(99)
	QEvent__StyleChange                      = QEvent__Type(100)
	QEvent__IconTextChange                   = QEvent__Type(101)
	QEvent__ModifiedChange                   = QEvent__Type(102)
	QEvent__MouseTrackingChange              = QEvent__Type(109)
	QEvent__WindowBlocked                    = QEvent__Type(103)
	QEvent__WindowUnblocked                  = QEvent__Type(104)
	QEvent__WindowStateChange                = QEvent__Type(105)
	QEvent__ReadOnlyChange                   = QEvent__Type(106)
	QEvent__ToolTip                          = QEvent__Type(110)
	QEvent__WhatsThis                        = QEvent__Type(111)
	QEvent__StatusTip                        = QEvent__Type(112)
	QEvent__ActionChanged                    = QEvent__Type(113)
	QEvent__ActionAdded                      = QEvent__Type(114)
	QEvent__ActionRemoved                    = QEvent__Type(115)
	QEvent__FileOpen                         = QEvent__Type(116)
	QEvent__Shortcut                         = QEvent__Type(117)
	QEvent__ShortcutOverride                 = QEvent__Type(51)
	QEvent__WhatsThisClicked                 = QEvent__Type(118)
	QEvent__ToolBarChange                    = QEvent__Type(120)
	QEvent__ApplicationActivate              = QEvent__Type(121)
	QEvent__ApplicationActivated             = QEvent__Type(QEvent__ApplicationActivate)
	QEvent__ApplicationDeactivate            = QEvent__Type(122)
	QEvent__ApplicationDeactivated           = QEvent__Type(QEvent__ApplicationDeactivate)
	QEvent__QueryWhatsThis                   = QEvent__Type(123)
	QEvent__EnterWhatsThisMode               = QEvent__Type(124)
	QEvent__LeaveWhatsThisMode               = QEvent__Type(125)
	QEvent__ZOrderChange                     = QEvent__Type(126)
	QEvent__HoverEnter                       = QEvent__Type(127)
	QEvent__HoverLeave                       = QEvent__Type(128)
	QEvent__HoverMove                        = QEvent__Type(129)
	QEvent__EnterEditFocus                   = QEvent__Type(150)
	QEvent__LeaveEditFocus                   = QEvent__Type(151)
	QEvent__AcceptDropsChange                = QEvent__Type(152)
	QEvent__ZeroTimerEvent                   = QEvent__Type(154)
	QEvent__GraphicsSceneMouseMove           = QEvent__Type(155)
	QEvent__GraphicsSceneMousePress          = QEvent__Type(156)
	QEvent__GraphicsSceneMouseRelease        = QEvent__Type(157)
	QEvent__GraphicsSceneMouseDoubleClick    = QEvent__Type(158)
	QEvent__GraphicsSceneContextMenu         = QEvent__Type(159)
	QEvent__GraphicsSceneHoverEnter          = QEvent__Type(160)
	QEvent__GraphicsSceneHoverMove           = QEvent__Type(161)
	QEvent__GraphicsSceneHoverLeave          = QEvent__Type(162)
	QEvent__GraphicsSceneHelp                = QEvent__Type(163)
	QEvent__GraphicsSceneDragEnter           = QEvent__Type(164)
	QEvent__GraphicsSceneDragMove            = QEvent__Type(165)
	QEvent__GraphicsSceneDragLeave           = QEvent__Type(166)
	QEvent__GraphicsSceneDrop                = QEvent__Type(167)
	QEvent__GraphicsSceneWheel               = QEvent__Type(168)
	QEvent__KeyboardLayoutChange             = QEvent__Type(169)
	QEvent__DynamicPropertyChange            = QEvent__Type(170)
	QEvent__TabletEnterProximity             = QEvent__Type(171)
	QEvent__TabletLeaveProximity             = QEvent__Type(172)
	QEvent__NonClientAreaMouseMove           = QEvent__Type(173)
	QEvent__NonClientAreaMouseButtonPress    = QEvent__Type(174)
	QEvent__NonClientAreaMouseButtonRelease  = QEvent__Type(175)
	QEvent__NonClientAreaMouseButtonDblClick = QEvent__Type(176)
	QEvent__MacSizeChange                    = QEvent__Type(177)
	QEvent__ContentsRectChange               = QEvent__Type(178)
	QEvent__MacGLWindowChange                = QEvent__Type(179)
	QEvent__FutureCallOut                    = QEvent__Type(180)
	QEvent__GraphicsSceneResize              = QEvent__Type(181)
	QEvent__GraphicsSceneMove                = QEvent__Type(182)
	QEvent__CursorChange                     = QEvent__Type(183)
	QEvent__ToolTipChange                    = QEvent__Type(184)
	QEvent__NetworkReplyUpdated              = QEvent__Type(185)
	QEvent__GrabMouse                        = QEvent__Type(186)
	QEvent__UngrabMouse                      = QEvent__Type(187)
	QEvent__GrabKeyboard                     = QEvent__Type(188)
	QEvent__UngrabKeyboard                   = QEvent__Type(189)
	QEvent__MacGLClearDrawable               = QEvent__Type(191)
	QEvent__StateMachineSignal               = QEvent__Type(192)
	QEvent__StateMachineWrapped              = QEvent__Type(193)
	QEvent__TouchBegin                       = QEvent__Type(194)
	QEvent__TouchUpdate                      = QEvent__Type(195)
	QEvent__TouchEnd                         = QEvent__Type(196)
	QEvent__NativeGesture                    = QEvent__Type(197)
	QEvent__RequestSoftwareInputPanel        = QEvent__Type(199)
	QEvent__CloseSoftwareInputPanel          = QEvent__Type(200)
	QEvent__WinIdChange                      = QEvent__Type(203)
	QEvent__Gesture                          = QEvent__Type(198)
	QEvent__GestureOverride                  = QEvent__Type(202)
	QEvent__ScrollPrepare                    = QEvent__Type(204)
	QEvent__Scroll                           = QEvent__Type(205)
	QEvent__Expose                           = QEvent__Type(206)
	QEvent__InputMethodQuery                 = QEvent__Type(207)
	QEvent__OrientationChange                = QEvent__Type(208)
	QEvent__TouchCancel                      = QEvent__Type(209)
	QEvent__ThemeChange                      = QEvent__Type(210)
	QEvent__SockClose                        = QEvent__Type(211)
	QEvent__PlatformPanel                    = QEvent__Type(212)
	QEvent__StyleAnimationUpdate             = QEvent__Type(213)
	QEvent__ApplicationStateChange           = QEvent__Type(214)
	QEvent__WindowChangeInternal             = QEvent__Type(215)
	QEvent__ScreenChangeInternal             = QEvent__Type(216)
	QEvent__PlatformSurface                  = QEvent__Type(217)
	QEvent__Pointer                          = QEvent__Type(218)
	QEvent__User                             = QEvent__Type(1000)
	QEvent__MaxUser                          = QEvent__Type(65535)
)

type QEvent struct {
	ptr unsafe.Pointer
}

type QEvent_ITF interface {
	QEvent_PTR() *QEvent
}

func (p *QEvent) QEvent_PTR() *QEvent {
	return p
}

func (p *QEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQEvent(ptr QEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEvent_PTR().Pointer()
	}
	return nil
}

func NewQEventFromPointer(ptr unsafe.Pointer) *QEvent {
	var n = new(QEvent)
	n.SetPointer(ptr)
	return n
}
func NewQEvent(ty QEvent__Type) *QEvent {
	return NewQEventFromPointer(C.QEvent_NewQEvent(C.longlong(ty)))
}

func (ptr *QEvent) Accept() {
	if ptr.Pointer() != nil {
		C.QEvent_Accept(ptr.Pointer())
	}
}

func (ptr *QEvent) Ignore() {
	if ptr.Pointer() != nil {
		C.QEvent_Ignore(ptr.Pointer())
	}
}

func (ptr *QEvent) IsAccepted() bool {
	if ptr.Pointer() != nil {
		return C.QEvent_IsAccepted(ptr.Pointer()) != 0
	}
	return false
}

func QEvent_RegisterEventType(hint int) int {
	return int(int32(C.QEvent_QEvent_RegisterEventType(C.int(int32(hint)))))
}

func (ptr *QEvent) RegisterEventType(hint int) int {
	return int(int32(C.QEvent_QEvent_RegisterEventType(C.int(int32(hint)))))
}

func (ptr *QEvent) SetAccepted(accepted bool) {
	if ptr.Pointer() != nil {
		C.QEvent_SetAccepted(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(accepted))))
	}
}

func (ptr *QEvent) Spontaneous() bool {
	if ptr.Pointer() != nil {
		return C.QEvent_Spontaneous(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QEvent) Type() QEvent__Type {
	if ptr.Pointer() != nil {
		return QEvent__Type(C.QEvent_Type(ptr.Pointer()))
	}
	return 0
}

//export callbackQEvent_DestroyQEvent
func callbackQEvent_DestroyQEvent(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEvent::~QEvent"); signal != nil {
		signal.(func())()
	} else {
		NewQEventFromPointer(ptr).DestroyQEventDefault()
	}
}

func (ptr *QEvent) ConnectDestroyQEvent(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEvent::~QEvent", f)
	}
}

func (ptr *QEvent) DisconnectDestroyQEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEvent::~QEvent")
	}
}

func (ptr *QEvent) DestroyQEvent() {
	if ptr.Pointer() != nil {
		C.QEvent_DestroyQEvent(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QEvent) DestroyQEventDefault() {
	if ptr.Pointer() != nil {
		C.QEvent_DestroyQEventDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QEvent) T() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QEvent_T(ptr.Pointer()))
	}
	return 0
}

func (ptr *QEvent) SetT(vus uint16) {
	if ptr.Pointer() != nil {
		C.QEvent_SetT(ptr.Pointer(), C.ushort(vus))
	}
}

//QEventLoop::ProcessEventsFlag
type QEventLoop__ProcessEventsFlag int64

const (
	QEventLoop__AllEvents              = QEventLoop__ProcessEventsFlag(0x00)
	QEventLoop__ExcludeUserInputEvents = QEventLoop__ProcessEventsFlag(0x01)
	QEventLoop__ExcludeSocketNotifiers = QEventLoop__ProcessEventsFlag(0x02)
	QEventLoop__WaitForMoreEvents      = QEventLoop__ProcessEventsFlag(0x04)
	QEventLoop__X11ExcludeTimers       = QEventLoop__ProcessEventsFlag(0x08)
	QEventLoop__EventLoopExec          = QEventLoop__ProcessEventsFlag(0x20)
	QEventLoop__DialogExec             = QEventLoop__ProcessEventsFlag(0x40)
)

type QEventLoop struct {
	QObject
}

type QEventLoop_ITF interface {
	QObject_ITF
	QEventLoop_PTR() *QEventLoop
}

func (p *QEventLoop) QEventLoop_PTR() *QEventLoop {
	return p
}

func (p *QEventLoop) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QEventLoop) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQEventLoop(ptr QEventLoop_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEventLoop_PTR().Pointer()
	}
	return nil
}

func NewQEventLoopFromPointer(ptr unsafe.Pointer) *QEventLoop {
	var n = new(QEventLoop)
	n.SetPointer(ptr)
	return n
}
func NewQEventLoop(parent QObject_ITF) *QEventLoop {
	var tmpValue = NewQEventLoopFromPointer(C.QEventLoop_NewQEventLoop(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQEventLoop_Event
func callbackQEventLoop_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQEventLoopFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QEventLoop) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::event", f)
	}
}

func (ptr *QEventLoop) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::event")
	}
}

func (ptr *QEventLoop) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventLoop_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QEventLoop) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventLoop_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QEventLoop) Exec(flags QEventLoop__ProcessEventsFlag) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QEventLoop_Exec(ptr.Pointer(), C.longlong(flags))))
	}
	return 0
}

func (ptr *QEventLoop) Exit(returnCode int) {
	if ptr.Pointer() != nil {
		C.QEventLoop_Exit(ptr.Pointer(), C.int(int32(returnCode)))
	}
}

func (ptr *QEventLoop) IsRunning() bool {
	if ptr.Pointer() != nil {
		return C.QEventLoop_IsRunning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QEventLoop) ProcessEvents(flags QEventLoop__ProcessEventsFlag) bool {
	if ptr.Pointer() != nil {
		return C.QEventLoop_ProcessEvents(ptr.Pointer(), C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QEventLoop) ProcessEvents2(flags QEventLoop__ProcessEventsFlag, maxTime int) {
	if ptr.Pointer() != nil {
		C.QEventLoop_ProcessEvents2(ptr.Pointer(), C.longlong(flags), C.int(int32(maxTime)))
	}
}

//export callbackQEventLoop_Quit
func callbackQEventLoop_Quit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::quit"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QEventLoop) ConnectQuit(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::quit", f)
	}
}

func (ptr *QEventLoop) DisconnectQuit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::quit")
	}
}

func (ptr *QEventLoop) Quit() {
	if ptr.Pointer() != nil {
		C.QEventLoop_Quit(ptr.Pointer())
	}
}

func (ptr *QEventLoop) WakeUp() {
	if ptr.Pointer() != nil {
		C.QEventLoop_WakeUp(ptr.Pointer())
	}
}

func (ptr *QEventLoop) DestroyQEventLoop() {
	if ptr.Pointer() != nil {
		C.QEventLoop_DestroyQEventLoop(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQEventLoop_TimerEvent
func callbackQEventLoop_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQEventLoopFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QEventLoop) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::timerEvent", f)
	}
}

func (ptr *QEventLoop) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::timerEvent")
	}
}

func (ptr *QEventLoop) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QEventLoop) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQEventLoop_ChildEvent
func callbackQEventLoop_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQEventLoopFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QEventLoop) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::childEvent", f)
	}
}

func (ptr *QEventLoop) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::childEvent")
	}
}

func (ptr *QEventLoop) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QEventLoop) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQEventLoop_ConnectNotify
func callbackQEventLoop_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQEventLoopFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QEventLoop) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::connectNotify", f)
	}
}

func (ptr *QEventLoop) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::connectNotify")
	}
}

func (ptr *QEventLoop) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QEventLoop) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQEventLoop_CustomEvent
func callbackQEventLoop_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQEventLoopFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QEventLoop) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::customEvent", f)
	}
}

func (ptr *QEventLoop) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::customEvent")
	}
}

func (ptr *QEventLoop) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QEventLoop) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQEventLoop_DeleteLater
func callbackQEventLoop_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQEventLoopFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QEventLoop) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::deleteLater", f)
	}
}

func (ptr *QEventLoop) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::deleteLater")
	}
}

func (ptr *QEventLoop) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QEventLoop_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QEventLoop) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QEventLoop_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQEventLoop_DisconnectNotify
func callbackQEventLoop_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQEventLoopFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QEventLoop) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::disconnectNotify", f)
	}
}

func (ptr *QEventLoop) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::disconnectNotify")
	}
}

func (ptr *QEventLoop) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QEventLoop) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventLoop_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQEventLoop_EventFilter
func callbackQEventLoop_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQEventLoopFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QEventLoop) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::eventFilter", f)
	}
}

func (ptr *QEventLoop) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::eventFilter")
	}
}

func (ptr *QEventLoop) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventLoop_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QEventLoop) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventLoop_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQEventLoop_MetaObject
func callbackQEventLoop_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventLoop::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQEventLoopFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QEventLoop) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::metaObject", f)
	}
}

func (ptr *QEventLoop) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventLoop::metaObject")
	}
}

func (ptr *QEventLoop) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QEventLoop_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEventLoop) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QEventLoop_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QEventLoopLocker struct {
	ptr unsafe.Pointer
}

type QEventLoopLocker_ITF interface {
	QEventLoopLocker_PTR() *QEventLoopLocker
}

func (p *QEventLoopLocker) QEventLoopLocker_PTR() *QEventLoopLocker {
	return p
}

func (p *QEventLoopLocker) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QEventLoopLocker) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQEventLoopLocker(ptr QEventLoopLocker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEventLoopLocker_PTR().Pointer()
	}
	return nil
}

func NewQEventLoopLockerFromPointer(ptr unsafe.Pointer) *QEventLoopLocker {
	var n = new(QEventLoopLocker)
	n.SetPointer(ptr)
	return n
}
func NewQEventLoopLocker() *QEventLoopLocker {
	var tmpValue = NewQEventLoopLockerFromPointer(C.QEventLoopLocker_NewQEventLoopLocker())
	runtime.SetFinalizer(tmpValue, (*QEventLoopLocker).DestroyQEventLoopLocker)
	return tmpValue
}

func NewQEventLoopLocker2(loop QEventLoop_ITF) *QEventLoopLocker {
	var tmpValue = NewQEventLoopLockerFromPointer(C.QEventLoopLocker_NewQEventLoopLocker2(PointerFromQEventLoop(loop)))
	runtime.SetFinalizer(tmpValue, (*QEventLoopLocker).DestroyQEventLoopLocker)
	return tmpValue
}

func NewQEventLoopLocker3(thread QThread_ITF) *QEventLoopLocker {
	var tmpValue = NewQEventLoopLockerFromPointer(C.QEventLoopLocker_NewQEventLoopLocker3(PointerFromQThread(thread)))
	runtime.SetFinalizer(tmpValue, (*QEventLoopLocker).DestroyQEventLoopLocker)
	return tmpValue
}

func (ptr *QEventLoopLocker) DestroyQEventLoopLocker() {
	if ptr.Pointer() != nil {
		C.QEventLoopLocker_DestroyQEventLoopLocker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QEventTransition struct {
	QAbstractTransition
}

type QEventTransition_ITF interface {
	QAbstractTransition_ITF
	QEventTransition_PTR() *QEventTransition
}

func (p *QEventTransition) QEventTransition_PTR() *QEventTransition {
	return p
}

func (p *QEventTransition) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractTransition_PTR().Pointer()
	}
	return nil
}

func (p *QEventTransition) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractTransition_PTR().SetPointer(ptr)
	}
}

func PointerFromQEventTransition(ptr QEventTransition_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QEventTransition_PTR().Pointer()
	}
	return nil
}

func NewQEventTransitionFromPointer(ptr unsafe.Pointer) *QEventTransition {
	var n = new(QEventTransition)
	n.SetPointer(ptr)
	return n
}
func NewQEventTransition2(object QObject_ITF, ty QEvent__Type, sourceState QState_ITF) *QEventTransition {
	var tmpValue = NewQEventTransitionFromPointer(C.QEventTransition_NewQEventTransition2(PointerFromQObject(object), C.longlong(ty), PointerFromQState(sourceState)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQEventTransition(sourceState QState_ITF) *QEventTransition {
	var tmpValue = NewQEventTransitionFromPointer(C.QEventTransition_NewQEventTransition(PointerFromQState(sourceState)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQEventTransition_Event
func callbackQEventTransition_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQEventTransitionFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QEventTransition) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::event", f)
	}
}

func (ptr *QEventTransition) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::event")
	}
}

func (ptr *QEventTransition) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventTransition_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QEventTransition) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventTransition_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QEventTransition) EventSource() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QEventTransition_EventSource(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQEventTransition_EventTest
func callbackQEventTransition_EventTest(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::eventTest"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQEventTransitionFromPointer(ptr).EventTestDefault(NewQEventFromPointer(event)))))
}

func (ptr *QEventTransition) ConnectEventTest(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::eventTest", f)
	}
}

func (ptr *QEventTransition) DisconnectEventTest() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::eventTest")
	}
}

func (ptr *QEventTransition) EventTest(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventTransition_EventTest(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QEventTransition) EventTestDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventTransition_EventTestDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QEventTransition) EventType() QEvent__Type {
	if ptr.Pointer() != nil {
		return QEvent__Type(C.QEventTransition_EventType(ptr.Pointer()))
	}
	return 0
}

//export callbackQEventTransition_OnTransition
func callbackQEventTransition_OnTransition(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::onTransition"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQEventTransitionFromPointer(ptr).OnTransitionDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QEventTransition) ConnectOnTransition(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::onTransition", f)
	}
}

func (ptr *QEventTransition) DisconnectOnTransition() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::onTransition")
	}
}

func (ptr *QEventTransition) OnTransition(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_OnTransition(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QEventTransition) OnTransitionDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_OnTransitionDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QEventTransition) SetEventSource(object QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_SetEventSource(ptr.Pointer(), PointerFromQObject(object))
	}
}

func (ptr *QEventTransition) SetEventType(ty QEvent__Type) {
	if ptr.Pointer() != nil {
		C.QEventTransition_SetEventType(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QEventTransition) DestroyQEventTransition() {
	if ptr.Pointer() != nil {
		C.QEventTransition_DestroyQEventTransition(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQEventTransition_TimerEvent
func callbackQEventTransition_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQEventTransitionFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QEventTransition) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::timerEvent", f)
	}
}

func (ptr *QEventTransition) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::timerEvent")
	}
}

func (ptr *QEventTransition) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QEventTransition) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQEventTransition_ChildEvent
func callbackQEventTransition_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQEventTransitionFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QEventTransition) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::childEvent", f)
	}
}

func (ptr *QEventTransition) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::childEvent")
	}
}

func (ptr *QEventTransition) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QEventTransition) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQEventTransition_ConnectNotify
func callbackQEventTransition_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQEventTransitionFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QEventTransition) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::connectNotify", f)
	}
}

func (ptr *QEventTransition) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::connectNotify")
	}
}

func (ptr *QEventTransition) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QEventTransition) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQEventTransition_CustomEvent
func callbackQEventTransition_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQEventTransitionFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QEventTransition) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::customEvent", f)
	}
}

func (ptr *QEventTransition) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::customEvent")
	}
}

func (ptr *QEventTransition) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QEventTransition) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQEventTransition_DeleteLater
func callbackQEventTransition_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQEventTransitionFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QEventTransition) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::deleteLater", f)
	}
}

func (ptr *QEventTransition) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::deleteLater")
	}
}

func (ptr *QEventTransition) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QEventTransition_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QEventTransition) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QEventTransition_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQEventTransition_DisconnectNotify
func callbackQEventTransition_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQEventTransitionFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QEventTransition) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::disconnectNotify", f)
	}
}

func (ptr *QEventTransition) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::disconnectNotify")
	}
}

func (ptr *QEventTransition) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QEventTransition) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QEventTransition_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQEventTransition_EventFilter
func callbackQEventTransition_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQEventTransitionFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QEventTransition) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::eventFilter", f)
	}
}

func (ptr *QEventTransition) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::eventFilter")
	}
}

func (ptr *QEventTransition) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventTransition_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QEventTransition) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QEventTransition_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQEventTransition_MetaObject
func callbackQEventTransition_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QEventTransition::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQEventTransitionFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QEventTransition) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::metaObject", f)
	}
}

func (ptr *QEventTransition) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QEventTransition::metaObject")
	}
}

func (ptr *QEventTransition) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QEventTransition_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QEventTransition) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QEventTransition_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QException struct {
	ptr unsafe.Pointer
}

type QException_ITF interface {
	QException_PTR() *QException
}

func (p *QException) QException_PTR() *QException {
	return p
}

func (p *QException) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QException) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQException(ptr QException_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QException_PTR().Pointer()
	}
	return nil
}

func NewQExceptionFromPointer(ptr unsafe.Pointer) *QException {
	var n = new(QException)
	n.SetPointer(ptr)
	return n
}

func (ptr *QException) DestroyQException() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

type QExplicitlySharedDataPointer struct {
	ptr unsafe.Pointer
}

type QExplicitlySharedDataPointer_ITF interface {
	QExplicitlySharedDataPointer_PTR() *QExplicitlySharedDataPointer
}

func (p *QExplicitlySharedDataPointer) QExplicitlySharedDataPointer_PTR() *QExplicitlySharedDataPointer {
	return p
}

func (p *QExplicitlySharedDataPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QExplicitlySharedDataPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQExplicitlySharedDataPointer(ptr QExplicitlySharedDataPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QExplicitlySharedDataPointer_PTR().Pointer()
	}
	return nil
}

func NewQExplicitlySharedDataPointerFromPointer(ptr unsafe.Pointer) *QExplicitlySharedDataPointer {
	var n = new(QExplicitlySharedDataPointer)
	n.SetPointer(ptr)
	return n
}

type QFile struct {
	QFileDevice
}

type QFile_ITF interface {
	QFileDevice_ITF
	QFile_PTR() *QFile
}

func (p *QFile) QFile_PTR() *QFile {
	return p
}

func (p *QFile) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QFileDevice_PTR().Pointer()
	}
	return nil
}

func (p *QFile) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QFileDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQFile(ptr QFile_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFile_PTR().Pointer()
	}
	return nil
}

func NewQFileFromPointer(ptr unsafe.Pointer) *QFile {
	var n = new(QFile)
	n.SetPointer(ptr)
	return n
}
func NewQFile() *QFile {
	var tmpValue = NewQFileFromPointer(C.QFile_NewQFile())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQFile3(parent QObject_ITF) *QFile {
	var tmpValue = NewQFileFromPointer(C.QFile_NewQFile3(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQFile2(name string) *QFile {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQFileFromPointer(C.QFile_NewQFile2(nameC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQFile4(name string, parent QObject_ITF) *QFile {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQFileFromPointer(C.QFile_NewQFile4(nameC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QFile_Copy2(fileName string, newName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var newNameC = C.CString(newName)
	defer C.free(unsafe.Pointer(newNameC))
	return C.QFile_QFile_Copy2(fileNameC, newNameC) != 0
}

func (ptr *QFile) Copy2(fileName string, newName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var newNameC = C.CString(newName)
	defer C.free(unsafe.Pointer(newNameC))
	return C.QFile_QFile_Copy2(fileNameC, newNameC) != 0
}

func (ptr *QFile) Copy(newName string) bool {
	if ptr.Pointer() != nil {
		var newNameC = C.CString(newName)
		defer C.free(unsafe.Pointer(newNameC))
		return C.QFile_Copy(ptr.Pointer(), newNameC) != 0
	}
	return false
}

func QFile_DecodeName(localFileName QByteArray_ITF) string {
	return cGoUnpackString(C.QFile_QFile_DecodeName(PointerFromQByteArray(localFileName)))
}

func (ptr *QFile) DecodeName(localFileName QByteArray_ITF) string {
	return cGoUnpackString(C.QFile_QFile_DecodeName(PointerFromQByteArray(localFileName)))
}

func QFile_DecodeName2(localFileName string) string {
	var localFileNameC = C.CString(localFileName)
	defer C.free(unsafe.Pointer(localFileNameC))
	return cGoUnpackString(C.QFile_QFile_DecodeName2(localFileNameC))
}

func (ptr *QFile) DecodeName2(localFileName string) string {
	var localFileNameC = C.CString(localFileName)
	defer C.free(unsafe.Pointer(localFileNameC))
	return cGoUnpackString(C.QFile_QFile_DecodeName2(localFileNameC))
}

func QFile_EncodeName(fileName string) *QByteArray {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQByteArrayFromPointer(C.QFile_QFile_EncodeName(fileNameC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QFile) EncodeName(fileName string) *QByteArray {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQByteArrayFromPointer(C.QFile_QFile_EncodeName(fileNameC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QFile_Exists(fileName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_Exists(fileNameC) != 0
}

func (ptr *QFile) Exists(fileName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_Exists(fileNameC) != 0
}

func (ptr *QFile) Exists2() bool {
	if ptr.Pointer() != nil {
		return C.QFile_Exists2(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFile_FileName
func callbackQFile_FileName(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::fileName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQFileFromPointer(ptr).FileNameDefault())
}

func (ptr *QFile) ConnectFileName(f func() string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::fileName", f)
	}
}

func (ptr *QFile) DisconnectFileName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::fileName")
	}
}

func (ptr *QFile) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFile_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFile) FileNameDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFile_FileNameDefault(ptr.Pointer()))
	}
	return ""
}

func QFile_Link2(fileName string, linkName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var linkNameC = C.CString(linkName)
	defer C.free(unsafe.Pointer(linkNameC))
	return C.QFile_QFile_Link2(fileNameC, linkNameC) != 0
}

func (ptr *QFile) Link2(fileName string, linkName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var linkNameC = C.CString(linkName)
	defer C.free(unsafe.Pointer(linkNameC))
	return C.QFile_QFile_Link2(fileNameC, linkNameC) != 0
}

func (ptr *QFile) Link(linkName string) bool {
	if ptr.Pointer() != nil {
		var linkNameC = C.CString(linkName)
		defer C.free(unsafe.Pointer(linkNameC))
		return C.QFile_Link(ptr.Pointer(), linkNameC) != 0
	}
	return false
}

//export callbackQFile_Open
func callbackQFile_Open(ptr unsafe.Pointer, mode C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::open"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QIODevice__OpenModeFlag) bool)(QIODevice__OpenModeFlag(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).OpenDefault(QIODevice__OpenModeFlag(mode)))))
}

func (ptr *QFile) ConnectOpen(f func(mode QIODevice__OpenModeFlag) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::open", f)
	}
}

func (ptr *QFile) DisconnectOpen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::open")
	}
}

func (ptr *QFile) Open(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QFile_Open(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QFile) OpenDefault(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QFile_OpenDefault(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QFile) Open3(fd int, mode QIODevice__OpenModeFlag, handleFlags QFileDevice__FileHandleFlag) bool {
	if ptr.Pointer() != nil {
		return C.QFile_Open3(ptr.Pointer(), C.int(int32(fd)), C.longlong(mode), C.longlong(handleFlags)) != 0
	}
	return false
}

func QFile_Permissions2(fileName string) QFileDevice__Permission {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return QFileDevice__Permission(C.QFile_QFile_Permissions2(fileNameC))
}

func (ptr *QFile) Permissions2(fileName string) QFileDevice__Permission {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return QFileDevice__Permission(C.QFile_QFile_Permissions2(fileNameC))
}

//export callbackQFile_Permissions
func callbackQFile_Permissions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::permissions"); signal != nil {
		return C.longlong(signal.(func() QFileDevice__Permission)())
	}

	return C.longlong(NewQFileFromPointer(ptr).PermissionsDefault())
}

func (ptr *QFile) ConnectPermissions(f func() QFileDevice__Permission) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::permissions", f)
	}
}

func (ptr *QFile) DisconnectPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::permissions")
	}
}

func (ptr *QFile) Permissions() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QFile_Permissions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFile) PermissionsDefault() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QFile_PermissionsDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFile) Remove() bool {
	if ptr.Pointer() != nil {
		return C.QFile_Remove(ptr.Pointer()) != 0
	}
	return false
}

func QFile_Remove2(fileName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_Remove2(fileNameC) != 0
}

func (ptr *QFile) Remove2(fileName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_Remove2(fileNameC) != 0
}

func (ptr *QFile) Rename(newName string) bool {
	if ptr.Pointer() != nil {
		var newNameC = C.CString(newName)
		defer C.free(unsafe.Pointer(newNameC))
		return C.QFile_Rename(ptr.Pointer(), newNameC) != 0
	}
	return false
}

func QFile_Rename2(oldName string, newName string) bool {
	var oldNameC = C.CString(oldName)
	defer C.free(unsafe.Pointer(oldNameC))
	var newNameC = C.CString(newName)
	defer C.free(unsafe.Pointer(newNameC))
	return C.QFile_QFile_Rename2(oldNameC, newNameC) != 0
}

func (ptr *QFile) Rename2(oldName string, newName string) bool {
	var oldNameC = C.CString(oldName)
	defer C.free(unsafe.Pointer(oldNameC))
	var newNameC = C.CString(newName)
	defer C.free(unsafe.Pointer(newNameC))
	return C.QFile_QFile_Rename2(oldNameC, newNameC) != 0
}

func QFile_Resize2(fileName string, sz int64) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_Resize2(fileNameC, C.longlong(sz)) != 0
}

func (ptr *QFile) Resize2(fileName string, sz int64) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_Resize2(fileNameC, C.longlong(sz)) != 0
}

//export callbackQFile_Resize
func callbackQFile_Resize(ptr unsafe.Pointer, sz C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::resize"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(sz)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).ResizeDefault(int64(sz)))))
}

func (ptr *QFile) ConnectResize(f func(sz int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::resize", f)
	}
}

func (ptr *QFile) DisconnectResize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::resize")
	}
}

func (ptr *QFile) Resize(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QFile_Resize(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

func (ptr *QFile) ResizeDefault(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QFile_ResizeDefault(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

func (ptr *QFile) SetFileName(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QFile_SetFileName(ptr.Pointer(), nameC)
	}
}

//export callbackQFile_SetPermissions
func callbackQFile_SetPermissions(ptr unsafe.Pointer, permissions C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::setPermissions"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QFileDevice__Permission) bool)(QFileDevice__Permission(permissions)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).SetPermissionsDefault(QFileDevice__Permission(permissions)))))
}

func (ptr *QFile) ConnectSetPermissions(f func(permissions QFileDevice__Permission) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::setPermissions", f)
	}
}

func (ptr *QFile) DisconnectSetPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::setPermissions")
	}
}

func (ptr *QFile) SetPermissions(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QFile_SetPermissions(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

func (ptr *QFile) SetPermissionsDefault(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QFile_SetPermissionsDefault(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

func QFile_SetPermissions2(fileName string, permissions QFileDevice__Permission) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_SetPermissions2(fileNameC, C.longlong(permissions)) != 0
}

func (ptr *QFile) SetPermissions2(fileName string, permissions QFileDevice__Permission) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QFile_QFile_SetPermissions2(fileNameC, C.longlong(permissions)) != 0
}

//export callbackQFile_Size
func callbackQFile_Size(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::size"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileFromPointer(ptr).SizeDefault())
}

func (ptr *QFile) ConnectSize(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::size", f)
	}
}

func (ptr *QFile) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::size")
	}
}

func (ptr *QFile) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFile) SizeDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_SizeDefault(ptr.Pointer()))
	}
	return 0
}

func QFile_SymLinkTarget(fileName string) string {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return cGoUnpackString(C.QFile_QFile_SymLinkTarget(fileNameC))
}

func (ptr *QFile) SymLinkTarget(fileName string) string {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return cGoUnpackString(C.QFile_QFile_SymLinkTarget(fileNameC))
}

func (ptr *QFile) SymLinkTarget2() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFile_SymLinkTarget2(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFile) DestroyQFile() {
	if ptr.Pointer() != nil {
		C.QFile_DestroyQFile(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFile_Seek
func callbackQFile_Seek(ptr unsafe.Pointer, pos C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::seek"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(pos)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).SeekDefault(int64(pos)))))
}

func (ptr *QFile) ConnectSeek(f func(pos int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::seek", f)
	}
}

func (ptr *QFile) DisconnectSeek() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::seek")
	}
}

func (ptr *QFile) Seek(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QFile_Seek(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QFile) SeekDefault(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QFile_SeekDefault(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

//export callbackQFile_AtEnd
func callbackQFile_AtEnd(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::atEnd"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).AtEndDefault())))
}

func (ptr *QFile) ConnectAtEnd(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::atEnd", f)
	}
}

func (ptr *QFile) DisconnectAtEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::atEnd")
	}
}

func (ptr *QFile) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QFile_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFile) AtEndDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFile_AtEndDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFile_Close
func callbackQFile_Close(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::close"); signal != nil {
		signal.(func())()
	} else {
		NewQFileFromPointer(ptr).CloseDefault()
	}
}

func (ptr *QFile) ConnectClose(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::close", f)
	}
}

func (ptr *QFile) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::close")
	}
}

func (ptr *QFile) Close() {
	if ptr.Pointer() != nil {
		C.QFile_Close(ptr.Pointer())
	}
}

func (ptr *QFile) CloseDefault() {
	if ptr.Pointer() != nil {
		C.QFile_CloseDefault(ptr.Pointer())
	}
}

//export callbackQFile_IsSequential
func callbackQFile_IsSequential(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::isSequential"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).IsSequentialDefault())))
}

func (ptr *QFile) ConnectIsSequential(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::isSequential", f)
	}
}

func (ptr *QFile) DisconnectIsSequential() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::isSequential")
	}
}

func (ptr *QFile) IsSequential() bool {
	if ptr.Pointer() != nil {
		return C.QFile_IsSequential(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFile) IsSequentialDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFile_IsSequentialDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFile_Pos
func callbackQFile_Pos(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::pos"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileFromPointer(ptr).PosDefault())
}

func (ptr *QFile) ConnectPos(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::pos", f)
	}
}

func (ptr *QFile) DisconnectPos() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::pos")
	}
}

func (ptr *QFile) Pos() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_Pos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFile) PosDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_PosDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQFile_ReadLineData
func callbackQFile_ReadLineData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, maxlen C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::readLineData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(maxlen)))
	}

	return C.longlong(NewQFileFromPointer(ptr).ReadLineDataDefault(cGoUnpackString(data), int64(maxlen)))
}

func (ptr *QFile) ConnectReadLineData(f func(data string, maxlen int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::readLineData", f)
	}
}

func (ptr *QFile) DisconnectReadLineData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::readLineData")
	}
}

func (ptr *QFile) ReadLineData(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFile_ReadLineData(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

func (ptr *QFile) ReadLineDataDefault(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFile_ReadLineDataDefault(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

//export callbackQFile_WriteData
func callbackQFile_WriteData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, len C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::writeData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(len)))
	}

	return C.longlong(NewQFileFromPointer(ptr).WriteDataDefault(cGoUnpackString(data), int64(len)))
}

func (ptr *QFile) ConnectWriteData(f func(data string, len int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::writeData", f)
	}
}

func (ptr *QFile) DisconnectWriteData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::writeData")
	}
}

func (ptr *QFile) WriteData(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFile_WriteData(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QFile) WriteDataDefault(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFile_WriteDataDefault(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

//export callbackQFile_BytesAvailable
func callbackQFile_BytesAvailable(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::bytesAvailable"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileFromPointer(ptr).BytesAvailableDefault())
}

func (ptr *QFile) ConnectBytesAvailable(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::bytesAvailable", f)
	}
}

func (ptr *QFile) DisconnectBytesAvailable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::bytesAvailable")
	}
}

func (ptr *QFile) BytesAvailable() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_BytesAvailable(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFile) BytesAvailableDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_BytesAvailableDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQFile_BytesToWrite
func callbackQFile_BytesToWrite(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::bytesToWrite"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileFromPointer(ptr).BytesToWriteDefault())
}

func (ptr *QFile) ConnectBytesToWrite(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::bytesToWrite", f)
	}
}

func (ptr *QFile) DisconnectBytesToWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::bytesToWrite")
	}
}

func (ptr *QFile) BytesToWrite() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_BytesToWrite(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFile) BytesToWriteDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFile_BytesToWriteDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQFile_CanReadLine
func callbackQFile_CanReadLine(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::canReadLine"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).CanReadLineDefault())))
}

func (ptr *QFile) ConnectCanReadLine(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::canReadLine", f)
	}
}

func (ptr *QFile) DisconnectCanReadLine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::canReadLine")
	}
}

func (ptr *QFile) CanReadLine() bool {
	if ptr.Pointer() != nil {
		return C.QFile_CanReadLine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFile) CanReadLineDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFile_CanReadLineDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFile_Reset
func callbackQFile_Reset(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::reset"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).ResetDefault())))
}

func (ptr *QFile) ConnectReset(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::reset", f)
	}
}

func (ptr *QFile) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::reset")
	}
}

func (ptr *QFile) Reset() bool {
	if ptr.Pointer() != nil {
		return C.QFile_Reset(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFile) ResetDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFile_ResetDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFile_WaitForBytesWritten
func callbackQFile_WaitForBytesWritten(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::waitForBytesWritten"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).WaitForBytesWrittenDefault(int(int32(msecs))))))
}

func (ptr *QFile) ConnectWaitForBytesWritten(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::waitForBytesWritten", f)
	}
}

func (ptr *QFile) DisconnectWaitForBytesWritten() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::waitForBytesWritten")
	}
}

func (ptr *QFile) WaitForBytesWritten(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFile_WaitForBytesWritten(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QFile) WaitForBytesWrittenDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFile_WaitForBytesWrittenDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQFile_WaitForReadyRead
func callbackQFile_WaitForReadyRead(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::waitForReadyRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).WaitForReadyReadDefault(int(int32(msecs))))))
}

func (ptr *QFile) ConnectWaitForReadyRead(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::waitForReadyRead", f)
	}
}

func (ptr *QFile) DisconnectWaitForReadyRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::waitForReadyRead")
	}
}

func (ptr *QFile) WaitForReadyRead(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFile_WaitForReadyRead(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QFile) WaitForReadyReadDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFile_WaitForReadyReadDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQFile_TimerEvent
func callbackQFile_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQFileFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QFile) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::timerEvent", f)
	}
}

func (ptr *QFile) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::timerEvent")
	}
}

func (ptr *QFile) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QFile) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQFile_ChildEvent
func callbackQFile_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQFileFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QFile) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::childEvent", f)
	}
}

func (ptr *QFile) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::childEvent")
	}
}

func (ptr *QFile) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QFile) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQFile_ConnectNotify
func callbackQFile_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFile) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::connectNotify", f)
	}
}

func (ptr *QFile) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::connectNotify")
	}
}

func (ptr *QFile) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFile) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFile_CustomEvent
func callbackQFile_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQFileFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QFile) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::customEvent", f)
	}
}

func (ptr *QFile) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::customEvent")
	}
}

func (ptr *QFile) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFile) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQFile_DeleteLater
func callbackQFile_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQFileFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QFile) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::deleteLater", f)
	}
}

func (ptr *QFile) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::deleteLater")
	}
}

func (ptr *QFile) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QFile_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QFile) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QFile_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFile_DisconnectNotify
func callbackQFile_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFile) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::disconnectNotify", f)
	}
}

func (ptr *QFile) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::disconnectNotify")
	}
}

func (ptr *QFile) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFile) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFile_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFile_Event
func callbackQFile_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QFile) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::event", f)
	}
}

func (ptr *QFile) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::event")
	}
}

func (ptr *QFile) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFile_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QFile) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFile_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQFile_EventFilter
func callbackQFile_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QFile) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::eventFilter", f)
	}
}

func (ptr *QFile) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::eventFilter")
	}
}

func (ptr *QFile) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFile_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QFile) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFile_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQFile_MetaObject
func callbackQFile_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFile::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQFileFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QFile) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::metaObject", f)
	}
}

func (ptr *QFile) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFile::metaObject")
	}
}

func (ptr *QFile) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFile_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QFile) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFile_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QFileDevice::FileError
type QFileDevice__FileError int64

const (
	QFileDevice__NoError          = QFileDevice__FileError(0)
	QFileDevice__ReadError        = QFileDevice__FileError(1)
	QFileDevice__WriteError       = QFileDevice__FileError(2)
	QFileDevice__FatalError       = QFileDevice__FileError(3)
	QFileDevice__ResourceError    = QFileDevice__FileError(4)
	QFileDevice__OpenError        = QFileDevice__FileError(5)
	QFileDevice__AbortError       = QFileDevice__FileError(6)
	QFileDevice__TimeOutError     = QFileDevice__FileError(7)
	QFileDevice__UnspecifiedError = QFileDevice__FileError(8)
	QFileDevice__RemoveError      = QFileDevice__FileError(9)
	QFileDevice__RenameError      = QFileDevice__FileError(10)
	QFileDevice__PositionError    = QFileDevice__FileError(11)
	QFileDevice__ResizeError      = QFileDevice__FileError(12)
	QFileDevice__PermissionsError = QFileDevice__FileError(13)
	QFileDevice__CopyError        = QFileDevice__FileError(14)
)

//QFileDevice::FileHandleFlag
type QFileDevice__FileHandleFlag int64

const (
	QFileDevice__AutoCloseHandle = QFileDevice__FileHandleFlag(0x0001)
	QFileDevice__DontCloseHandle = QFileDevice__FileHandleFlag(0)
)

//QFileDevice::MemoryMapFlags
type QFileDevice__MemoryMapFlags int64

const (
	QFileDevice__NoOptions        = QFileDevice__MemoryMapFlags(0)
	QFileDevice__MapPrivateOption = QFileDevice__MemoryMapFlags(0x0001)
)

//QFileDevice::Permission
type QFileDevice__Permission int64

const (
	QFileDevice__ReadOwner  = QFileDevice__Permission(0x4000)
	QFileDevice__WriteOwner = QFileDevice__Permission(0x2000)
	QFileDevice__ExeOwner   = QFileDevice__Permission(0x1000)
	QFileDevice__ReadUser   = QFileDevice__Permission(0x0400)
	QFileDevice__WriteUser  = QFileDevice__Permission(0x0200)
	QFileDevice__ExeUser    = QFileDevice__Permission(0x0100)
	QFileDevice__ReadGroup  = QFileDevice__Permission(0x0040)
	QFileDevice__WriteGroup = QFileDevice__Permission(0x0020)
	QFileDevice__ExeGroup   = QFileDevice__Permission(0x0010)
	QFileDevice__ReadOther  = QFileDevice__Permission(0x0004)
	QFileDevice__WriteOther = QFileDevice__Permission(0x0002)
	QFileDevice__ExeOther   = QFileDevice__Permission(0x0001)
)

type QFileDevice struct {
	QIODevice
}

type QFileDevice_ITF interface {
	QIODevice_ITF
	QFileDevice_PTR() *QFileDevice
}

func (p *QFileDevice) QFileDevice_PTR() *QFileDevice {
	return p
}

func (p *QFileDevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QIODevice_PTR().Pointer()
	}
	return nil
}

func (p *QFileDevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QIODevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQFileDevice(ptr QFileDevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFileDevice_PTR().Pointer()
	}
	return nil
}

func NewQFileDeviceFromPointer(ptr unsafe.Pointer) *QFileDevice {
	var n = new(QFileDevice)
	n.SetPointer(ptr)
	return n
}

//export callbackQFileDevice_Seek
func callbackQFileDevice_Seek(ptr unsafe.Pointer, pos C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::seek"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(pos)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).SeekDefault(int64(pos)))))
}

func (ptr *QFileDevice) ConnectSeek(f func(pos int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::seek", f)
	}
}

func (ptr *QFileDevice) DisconnectSeek() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::seek")
	}
}

func (ptr *QFileDevice) Seek(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_Seek(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QFileDevice) SeekDefault(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_SeekDefault(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

//export callbackQFileDevice_AtEnd
func callbackQFileDevice_AtEnd(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::atEnd"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).AtEndDefault())))
}

func (ptr *QFileDevice) ConnectAtEnd(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::atEnd", f)
	}
}

func (ptr *QFileDevice) DisconnectAtEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::atEnd")
	}
}

func (ptr *QFileDevice) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileDevice) AtEndDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_AtEndDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFileDevice_Close
func callbackQFileDevice_Close(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::close"); signal != nil {
		signal.(func())()
	} else {
		NewQFileDeviceFromPointer(ptr).CloseDefault()
	}
}

func (ptr *QFileDevice) ConnectClose(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::close", f)
	}
}

func (ptr *QFileDevice) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::close")
	}
}

func (ptr *QFileDevice) Close() {
	if ptr.Pointer() != nil {
		C.QFileDevice_Close(ptr.Pointer())
	}
}

func (ptr *QFileDevice) CloseDefault() {
	if ptr.Pointer() != nil {
		C.QFileDevice_CloseDefault(ptr.Pointer())
	}
}

func (ptr *QFileDevice) Error() QFileDevice__FileError {
	if ptr.Pointer() != nil {
		return QFileDevice__FileError(C.QFileDevice_Error(ptr.Pointer()))
	}
	return 0
}

//export callbackQFileDevice_FileName
func callbackQFileDevice_FileName(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::fileName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQFileDeviceFromPointer(ptr).FileNameDefault())
}

func (ptr *QFileDevice) ConnectFileName(f func() string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::fileName", f)
	}
}

func (ptr *QFileDevice) DisconnectFileName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::fileName")
	}
}

func (ptr *QFileDevice) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileDevice_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileDevice) FileNameDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileDevice_FileNameDefault(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileDevice) Flush() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_Flush(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileDevice) Handle() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QFileDevice_Handle(ptr.Pointer())))
	}
	return 0
}

//export callbackQFileDevice_IsSequential
func callbackQFileDevice_IsSequential(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::isSequential"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).IsSequentialDefault())))
}

func (ptr *QFileDevice) ConnectIsSequential(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::isSequential", f)
	}
}

func (ptr *QFileDevice) DisconnectIsSequential() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::isSequential")
	}
}

func (ptr *QFileDevice) IsSequential() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_IsSequential(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileDevice) IsSequentialDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_IsSequentialDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileDevice) Map(offset int64, size int64, flags QFileDevice__MemoryMapFlags) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileDevice_Map(ptr.Pointer(), C.longlong(offset), C.longlong(size), C.longlong(flags)))
	}
	return ""
}

//export callbackQFileDevice_Permissions
func callbackQFileDevice_Permissions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::permissions"); signal != nil {
		return C.longlong(signal.(func() QFileDevice__Permission)())
	}

	return C.longlong(NewQFileDeviceFromPointer(ptr).PermissionsDefault())
}

func (ptr *QFileDevice) ConnectPermissions(f func() QFileDevice__Permission) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::permissions", f)
	}
}

func (ptr *QFileDevice) DisconnectPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::permissions")
	}
}

func (ptr *QFileDevice) Permissions() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QFileDevice_Permissions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFileDevice) PermissionsDefault() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QFileDevice_PermissionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQFileDevice_Pos
func callbackQFileDevice_Pos(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::pos"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileDeviceFromPointer(ptr).PosDefault())
}

func (ptr *QFileDevice) ConnectPos(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::pos", f)
	}
}

func (ptr *QFileDevice) DisconnectPos() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::pos")
	}
}

func (ptr *QFileDevice) Pos() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_Pos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFileDevice) PosDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_PosDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQFileDevice_ReadLineData
func callbackQFileDevice_ReadLineData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, maxlen C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::readLineData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(maxlen)))
	}

	return C.longlong(NewQFileDeviceFromPointer(ptr).ReadLineDataDefault(cGoUnpackString(data), int64(maxlen)))
}

func (ptr *QFileDevice) ConnectReadLineData(f func(data string, maxlen int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::readLineData", f)
	}
}

func (ptr *QFileDevice) DisconnectReadLineData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::readLineData")
	}
}

func (ptr *QFileDevice) ReadLineData(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFileDevice_ReadLineData(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

func (ptr *QFileDevice) ReadLineDataDefault(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFileDevice_ReadLineDataDefault(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

//export callbackQFileDevice_Resize
func callbackQFileDevice_Resize(ptr unsafe.Pointer, sz C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::resize"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(sz)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).ResizeDefault(int64(sz)))))
}

func (ptr *QFileDevice) ConnectResize(f func(sz int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::resize", f)
	}
}

func (ptr *QFileDevice) DisconnectResize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::resize")
	}
}

func (ptr *QFileDevice) Resize(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_Resize(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

func (ptr *QFileDevice) ResizeDefault(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_ResizeDefault(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

//export callbackQFileDevice_SetPermissions
func callbackQFileDevice_SetPermissions(ptr unsafe.Pointer, permissions C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::setPermissions"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QFileDevice__Permission) bool)(QFileDevice__Permission(permissions)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).SetPermissionsDefault(QFileDevice__Permission(permissions)))))
}

func (ptr *QFileDevice) ConnectSetPermissions(f func(permissions QFileDevice__Permission) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::setPermissions", f)
	}
}

func (ptr *QFileDevice) DisconnectSetPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::setPermissions")
	}
}

func (ptr *QFileDevice) SetPermissions(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_SetPermissions(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

func (ptr *QFileDevice) SetPermissionsDefault(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_SetPermissionsDefault(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

//export callbackQFileDevice_Size
func callbackQFileDevice_Size(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::size"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileDeviceFromPointer(ptr).SizeDefault())
}

func (ptr *QFileDevice) ConnectSize(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::size", f)
	}
}

func (ptr *QFileDevice) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::size")
	}
}

func (ptr *QFileDevice) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFileDevice) SizeDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_SizeDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFileDevice) Unmap(address string) bool {
	if ptr.Pointer() != nil {
		var addressC = C.CString(address)
		defer C.free(unsafe.Pointer(addressC))
		return C.QFileDevice_Unmap(ptr.Pointer(), addressC) != 0
	}
	return false
}

func (ptr *QFileDevice) UnsetError() {
	if ptr.Pointer() != nil {
		C.QFileDevice_UnsetError(ptr.Pointer())
	}
}

//export callbackQFileDevice_WriteData
func callbackQFileDevice_WriteData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, len C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::writeData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(len)))
	}

	return C.longlong(NewQFileDeviceFromPointer(ptr).WriteDataDefault(cGoUnpackString(data), int64(len)))
}

func (ptr *QFileDevice) ConnectWriteData(f func(data string, len int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::writeData", f)
	}
}

func (ptr *QFileDevice) DisconnectWriteData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::writeData")
	}
}

func (ptr *QFileDevice) WriteData(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFileDevice_WriteData(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QFileDevice) WriteDataDefault(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QFileDevice_WriteDataDefault(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QFileDevice) DestroyQFileDevice() {
	if ptr.Pointer() != nil {
		C.QFileDevice_DestroyQFileDevice(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFileDevice_BytesAvailable
func callbackQFileDevice_BytesAvailable(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::bytesAvailable"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileDeviceFromPointer(ptr).BytesAvailableDefault())
}

func (ptr *QFileDevice) ConnectBytesAvailable(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::bytesAvailable", f)
	}
}

func (ptr *QFileDevice) DisconnectBytesAvailable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::bytesAvailable")
	}
}

func (ptr *QFileDevice) BytesAvailable() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_BytesAvailable(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFileDevice) BytesAvailableDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_BytesAvailableDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQFileDevice_BytesToWrite
func callbackQFileDevice_BytesToWrite(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::bytesToWrite"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQFileDeviceFromPointer(ptr).BytesToWriteDefault())
}

func (ptr *QFileDevice) ConnectBytesToWrite(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::bytesToWrite", f)
	}
}

func (ptr *QFileDevice) DisconnectBytesToWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::bytesToWrite")
	}
}

func (ptr *QFileDevice) BytesToWrite() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_BytesToWrite(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFileDevice) BytesToWriteDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileDevice_BytesToWriteDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQFileDevice_CanReadLine
func callbackQFileDevice_CanReadLine(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::canReadLine"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).CanReadLineDefault())))
}

func (ptr *QFileDevice) ConnectCanReadLine(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::canReadLine", f)
	}
}

func (ptr *QFileDevice) DisconnectCanReadLine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::canReadLine")
	}
}

func (ptr *QFileDevice) CanReadLine() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_CanReadLine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileDevice) CanReadLineDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_CanReadLineDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFileDevice_Open
func callbackQFileDevice_Open(ptr unsafe.Pointer, mode C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::open"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QIODevice__OpenModeFlag) bool)(QIODevice__OpenModeFlag(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).OpenDefault(QIODevice__OpenModeFlag(mode)))))
}

func (ptr *QFileDevice) ConnectOpen(f func(mode QIODevice__OpenModeFlag) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::open", f)
	}
}

func (ptr *QFileDevice) DisconnectOpen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::open")
	}
}

func (ptr *QFileDevice) Open(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_Open(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QFileDevice) OpenDefault(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_OpenDefault(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

//export callbackQFileDevice_Reset
func callbackQFileDevice_Reset(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::reset"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).ResetDefault())))
}

func (ptr *QFileDevice) ConnectReset(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::reset", f)
	}
}

func (ptr *QFileDevice) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::reset")
	}
}

func (ptr *QFileDevice) Reset() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_Reset(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileDevice) ResetDefault() bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_ResetDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQFileDevice_WaitForBytesWritten
func callbackQFileDevice_WaitForBytesWritten(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::waitForBytesWritten"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).WaitForBytesWrittenDefault(int(int32(msecs))))))
}

func (ptr *QFileDevice) ConnectWaitForBytesWritten(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::waitForBytesWritten", f)
	}
}

func (ptr *QFileDevice) DisconnectWaitForBytesWritten() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::waitForBytesWritten")
	}
}

func (ptr *QFileDevice) WaitForBytesWritten(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_WaitForBytesWritten(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QFileDevice) WaitForBytesWrittenDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_WaitForBytesWrittenDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQFileDevice_WaitForReadyRead
func callbackQFileDevice_WaitForReadyRead(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::waitForReadyRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).WaitForReadyReadDefault(int(int32(msecs))))))
}

func (ptr *QFileDevice) ConnectWaitForReadyRead(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::waitForReadyRead", f)
	}
}

func (ptr *QFileDevice) DisconnectWaitForReadyRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::waitForReadyRead")
	}
}

func (ptr *QFileDevice) WaitForReadyRead(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_WaitForReadyRead(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QFileDevice) WaitForReadyReadDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_WaitForReadyReadDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQFileDevice_TimerEvent
func callbackQFileDevice_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQFileDeviceFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QFileDevice) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::timerEvent", f)
	}
}

func (ptr *QFileDevice) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::timerEvent")
	}
}

func (ptr *QFileDevice) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QFileDevice) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQFileDevice_ChildEvent
func callbackQFileDevice_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQFileDeviceFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QFileDevice) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::childEvent", f)
	}
}

func (ptr *QFileDevice) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::childEvent")
	}
}

func (ptr *QFileDevice) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QFileDevice) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQFileDevice_ConnectNotify
func callbackQFileDevice_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileDeviceFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFileDevice) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::connectNotify", f)
	}
}

func (ptr *QFileDevice) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::connectNotify")
	}
}

func (ptr *QFileDevice) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFileDevice) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFileDevice_CustomEvent
func callbackQFileDevice_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQFileDeviceFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QFileDevice) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::customEvent", f)
	}
}

func (ptr *QFileDevice) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::customEvent")
	}
}

func (ptr *QFileDevice) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFileDevice) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQFileDevice_DeleteLater
func callbackQFileDevice_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQFileDeviceFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QFileDevice) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::deleteLater", f)
	}
}

func (ptr *QFileDevice) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::deleteLater")
	}
}

func (ptr *QFileDevice) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QFileDevice_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QFileDevice) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QFileDevice_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFileDevice_DisconnectNotify
func callbackQFileDevice_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileDeviceFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFileDevice) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::disconnectNotify", f)
	}
}

func (ptr *QFileDevice) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::disconnectNotify")
	}
}

func (ptr *QFileDevice) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFileDevice) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileDevice_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFileDevice_Event
func callbackQFileDevice_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QFileDevice) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::event", f)
	}
}

func (ptr *QFileDevice) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::event")
	}
}

func (ptr *QFileDevice) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QFileDevice) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQFileDevice_EventFilter
func callbackQFileDevice_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileDeviceFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QFileDevice) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::eventFilter", f)
	}
}

func (ptr *QFileDevice) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::eventFilter")
	}
}

func (ptr *QFileDevice) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QFileDevice) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileDevice_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQFileDevice_MetaObject
func callbackQFileDevice_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileDevice::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQFileDeviceFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QFileDevice) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::metaObject", f)
	}
}

func (ptr *QFileDevice) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileDevice::metaObject")
	}
}

func (ptr *QFileDevice) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFileDevice_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QFileDevice) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFileDevice_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QFileInfo struct {
	ptr unsafe.Pointer
}

type QFileInfo_ITF interface {
	QFileInfo_PTR() *QFileInfo
}

func (p *QFileInfo) QFileInfo_PTR() *QFileInfo {
	return p
}

func (p *QFileInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFileInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFileInfo(ptr QFileInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFileInfo_PTR().Pointer()
	}
	return nil
}

func NewQFileInfoFromPointer(ptr unsafe.Pointer) *QFileInfo {
	var n = new(QFileInfo)
	n.SetPointer(ptr)
	return n
}
func NewQFileInfo() *QFileInfo {
	var tmpValue = NewQFileInfoFromPointer(C.QFileInfo_NewQFileInfo())
	runtime.SetFinalizer(tmpValue, (*QFileInfo).DestroyQFileInfo)
	return tmpValue
}

func NewQFileInfo5(dir QDir_ITF, file string) *QFileInfo {
	var fileC = C.CString(file)
	defer C.free(unsafe.Pointer(fileC))
	var tmpValue = NewQFileInfoFromPointer(C.QFileInfo_NewQFileInfo5(PointerFromQDir(dir), fileC))
	runtime.SetFinalizer(tmpValue, (*QFileInfo).DestroyQFileInfo)
	return tmpValue
}

func NewQFileInfo4(file QFile_ITF) *QFileInfo {
	var tmpValue = NewQFileInfoFromPointer(C.QFileInfo_NewQFileInfo4(PointerFromQFile(file)))
	runtime.SetFinalizer(tmpValue, (*QFileInfo).DestroyQFileInfo)
	return tmpValue
}

func NewQFileInfo6(fileinfo QFileInfo_ITF) *QFileInfo {
	var tmpValue = NewQFileInfoFromPointer(C.QFileInfo_NewQFileInfo6(PointerFromQFileInfo(fileinfo)))
	runtime.SetFinalizer(tmpValue, (*QFileInfo).DestroyQFileInfo)
	return tmpValue
}

func NewQFileInfo3(file string) *QFileInfo {
	var fileC = C.CString(file)
	defer C.free(unsafe.Pointer(fileC))
	var tmpValue = NewQFileInfoFromPointer(C.QFileInfo_NewQFileInfo3(fileC))
	runtime.SetFinalizer(tmpValue, (*QFileInfo).DestroyQFileInfo)
	return tmpValue
}

func (ptr *QFileInfo) AbsoluteDir() *QDir {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDirFromPointer(C.QFileInfo_AbsoluteDir(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
		return tmpValue
	}
	return nil
}

func (ptr *QFileInfo) AbsoluteFilePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_AbsoluteFilePath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) AbsolutePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_AbsolutePath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) BaseName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_BaseName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) BundleName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_BundleName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) Caching() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_Caching(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) CanonicalFilePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_CanonicalFilePath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) CanonicalPath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_CanonicalPath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) CompleteBaseName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_CompleteBaseName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) CompleteSuffix() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_CompleteSuffix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) Created() *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QFileInfo_Created(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QFileInfo) Dir() *QDir {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDirFromPointer(C.QFileInfo_Dir(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDir).DestroyQDir)
		return tmpValue
	}
	return nil
}

func QFileInfo_Exists2(file string) bool {
	var fileC = C.CString(file)
	defer C.free(unsafe.Pointer(fileC))
	return C.QFileInfo_QFileInfo_Exists2(fileC) != 0
}

func (ptr *QFileInfo) Exists2(file string) bool {
	var fileC = C.CString(file)
	defer C.free(unsafe.Pointer(fileC))
	return C.QFileInfo_QFileInfo_Exists2(fileC) != 0
}

func (ptr *QFileInfo) Exists() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_Exists(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) FilePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_FilePath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) Group() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_Group(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) GroupId() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QFileInfo_GroupId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFileInfo) IsAbsolute() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsAbsolute(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsBundle() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsBundle(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsDir() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsDir(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsExecutable() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsExecutable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsFile() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsFile(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsHidden() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsHidden(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsNativePath() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsNativePath(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsReadable() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsReadable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsRelative() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsRelative(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsRoot() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsRoot(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsSymLink() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsSymLink(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) IsWritable() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_IsWritable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) LastModified() *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QFileInfo_LastModified(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QFileInfo) LastRead() *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QFileInfo_LastRead(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QFileInfo) MakeAbsolute() bool {
	if ptr.Pointer() != nil {
		return C.QFileInfo_MakeAbsolute(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QFileInfo) Owner() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_Owner(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) OwnerId() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QFileInfo_OwnerId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QFileInfo) Path() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_Path(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) Refresh() {
	if ptr.Pointer() != nil {
		C.QFileInfo_Refresh(ptr.Pointer())
	}
}

func (ptr *QFileInfo) SetCaching(enable bool) {
	if ptr.Pointer() != nil {
		C.QFileInfo_SetCaching(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QFileInfo) SetFile3(dir QDir_ITF, file string) {
	if ptr.Pointer() != nil {
		var fileC = C.CString(file)
		defer C.free(unsafe.Pointer(fileC))
		C.QFileInfo_SetFile3(ptr.Pointer(), PointerFromQDir(dir), fileC)
	}
}

func (ptr *QFileInfo) SetFile2(file QFile_ITF) {
	if ptr.Pointer() != nil {
		C.QFileInfo_SetFile2(ptr.Pointer(), PointerFromQFile(file))
	}
}

func (ptr *QFileInfo) SetFile(file string) {
	if ptr.Pointer() != nil {
		var fileC = C.CString(file)
		defer C.free(unsafe.Pointer(fileC))
		C.QFileInfo_SetFile(ptr.Pointer(), fileC)
	}
}

func (ptr *QFileInfo) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QFileInfo_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QFileInfo) Suffix() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_Suffix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) Swap(other QFileInfo_ITF) {
	if ptr.Pointer() != nil {
		C.QFileInfo_Swap(ptr.Pointer(), PointerFromQFileInfo(other))
	}
}

func (ptr *QFileInfo) SymLinkTarget() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QFileInfo_SymLinkTarget(ptr.Pointer()))
	}
	return ""
}

func (ptr *QFileInfo) DestroyQFileInfo() {
	if ptr.Pointer() != nil {
		C.QFileInfo_DestroyQFileInfo(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QFileSelector struct {
	QObject
}

type QFileSelector_ITF interface {
	QObject_ITF
	QFileSelector_PTR() *QFileSelector
}

func (p *QFileSelector) QFileSelector_PTR() *QFileSelector {
	return p
}

func (p *QFileSelector) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QFileSelector) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQFileSelector(ptr QFileSelector_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFileSelector_PTR().Pointer()
	}
	return nil
}

func NewQFileSelectorFromPointer(ptr unsafe.Pointer) *QFileSelector {
	var n = new(QFileSelector)
	n.SetPointer(ptr)
	return n
}
func NewQFileSelector(parent QObject_ITF) *QFileSelector {
	var tmpValue = NewQFileSelectorFromPointer(C.QFileSelector_NewQFileSelector(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QFileSelector) AllSelectors() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QFileSelector_AllSelectors(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QFileSelector) ExtraSelectors() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QFileSelector_ExtraSelectors(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QFileSelector) Select(filePath string) string {
	if ptr.Pointer() != nil {
		var filePathC = C.CString(filePath)
		defer C.free(unsafe.Pointer(filePathC))
		return cGoUnpackString(C.QFileSelector_Select(ptr.Pointer(), filePathC))
	}
	return ""
}

func (ptr *QFileSelector) Select2(filePath QUrl_ITF) *QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = NewQUrlFromPointer(C.QFileSelector_Select2(ptr.Pointer(), PointerFromQUrl(filePath)))
		runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QFileSelector) SetExtraSelectors(list []string) {
	if ptr.Pointer() != nil {
		var listC = C.CString(strings.Join(list, "|"))
		defer C.free(unsafe.Pointer(listC))
		C.QFileSelector_SetExtraSelectors(ptr.Pointer(), listC)
	}
}

func (ptr *QFileSelector) DestroyQFileSelector() {
	if ptr.Pointer() != nil {
		C.QFileSelector_DestroyQFileSelector(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFileSelector_TimerEvent
func callbackQFileSelector_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQFileSelectorFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QFileSelector) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::timerEvent", f)
	}
}

func (ptr *QFileSelector) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::timerEvent")
	}
}

func (ptr *QFileSelector) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QFileSelector) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQFileSelector_ChildEvent
func callbackQFileSelector_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQFileSelectorFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QFileSelector) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::childEvent", f)
	}
}

func (ptr *QFileSelector) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::childEvent")
	}
}

func (ptr *QFileSelector) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QFileSelector) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQFileSelector_ConnectNotify
func callbackQFileSelector_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileSelectorFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFileSelector) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::connectNotify", f)
	}
}

func (ptr *QFileSelector) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::connectNotify")
	}
}

func (ptr *QFileSelector) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFileSelector) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFileSelector_CustomEvent
func callbackQFileSelector_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQFileSelectorFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QFileSelector) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::customEvent", f)
	}
}

func (ptr *QFileSelector) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::customEvent")
	}
}

func (ptr *QFileSelector) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFileSelector) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQFileSelector_DeleteLater
func callbackQFileSelector_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQFileSelectorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QFileSelector) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::deleteLater", f)
	}
}

func (ptr *QFileSelector) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::deleteLater")
	}
}

func (ptr *QFileSelector) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QFileSelector_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QFileSelector) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QFileSelector_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFileSelector_DisconnectNotify
func callbackQFileSelector_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileSelectorFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFileSelector) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::disconnectNotify", f)
	}
}

func (ptr *QFileSelector) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::disconnectNotify")
	}
}

func (ptr *QFileSelector) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFileSelector) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSelector_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFileSelector_Event
func callbackQFileSelector_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileSelectorFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QFileSelector) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::event", f)
	}
}

func (ptr *QFileSelector) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::event")
	}
}

func (ptr *QFileSelector) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSelector_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QFileSelector) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSelector_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQFileSelector_EventFilter
func callbackQFileSelector_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileSelectorFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QFileSelector) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::eventFilter", f)
	}
}

func (ptr *QFileSelector) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::eventFilter")
	}
}

func (ptr *QFileSelector) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSelector_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QFileSelector) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSelector_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQFileSelector_MetaObject
func callbackQFileSelector_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSelector::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQFileSelectorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QFileSelector) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::metaObject", f)
	}
}

func (ptr *QFileSelector) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSelector::metaObject")
	}
}

func (ptr *QFileSelector) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFileSelector_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QFileSelector) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFileSelector_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QFileSystemWatcher struct {
	QObject
}

type QFileSystemWatcher_ITF interface {
	QObject_ITF
	QFileSystemWatcher_PTR() *QFileSystemWatcher
}

func (p *QFileSystemWatcher) QFileSystemWatcher_PTR() *QFileSystemWatcher {
	return p
}

func (p *QFileSystemWatcher) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QFileSystemWatcher) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQFileSystemWatcher(ptr QFileSystemWatcher_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFileSystemWatcher_PTR().Pointer()
	}
	return nil
}

func NewQFileSystemWatcherFromPointer(ptr unsafe.Pointer) *QFileSystemWatcher {
	var n = new(QFileSystemWatcher)
	n.SetPointer(ptr)
	return n
}
func (ptr *QFileSystemWatcher) Directories() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QFileSystemWatcher_Directories(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QFileSystemWatcher) Files() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QFileSystemWatcher_Files(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func NewQFileSystemWatcher(parent QObject_ITF) *QFileSystemWatcher {
	var tmpValue = NewQFileSystemWatcherFromPointer(C.QFileSystemWatcher_NewQFileSystemWatcher(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQFileSystemWatcher2(paths []string, parent QObject_ITF) *QFileSystemWatcher {
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	var tmpValue = NewQFileSystemWatcherFromPointer(C.QFileSystemWatcher_NewQFileSystemWatcher2(pathsC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QFileSystemWatcher) AddPath(path string) bool {
	if ptr.Pointer() != nil {
		var pathC = C.CString(path)
		defer C.free(unsafe.Pointer(pathC))
		return C.QFileSystemWatcher_AddPath(ptr.Pointer(), pathC) != 0
	}
	return false
}

func (ptr *QFileSystemWatcher) AddPaths(paths []string) []string {
	if ptr.Pointer() != nil {
		var pathsC = C.CString(strings.Join(paths, "|"))
		defer C.free(unsafe.Pointer(pathsC))
		return strings.Split(cGoUnpackString(C.QFileSystemWatcher_AddPaths(ptr.Pointer(), pathsC)), "|")
	}
	return make([]string, 0)
}

//export callbackQFileSystemWatcher_DirectoryChanged
func callbackQFileSystemWatcher_DirectoryChanged(ptr unsafe.Pointer, path C.struct_QtCore_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::directoryChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(path))
	}

}

func (ptr *QFileSystemWatcher) ConnectDirectoryChanged(f func(path string)) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_ConnectDirectoryChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::directoryChanged", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectDirectoryChanged() {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_DisconnectDirectoryChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::directoryChanged")
	}
}

//export callbackQFileSystemWatcher_FileChanged
func callbackQFileSystemWatcher_FileChanged(ptr unsafe.Pointer, path C.struct_QtCore_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::fileChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(path))
	}

}

func (ptr *QFileSystemWatcher) ConnectFileChanged(f func(path string)) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_ConnectFileChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::fileChanged", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectFileChanged() {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_DisconnectFileChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::fileChanged")
	}
}

func (ptr *QFileSystemWatcher) RemovePath(path string) bool {
	if ptr.Pointer() != nil {
		var pathC = C.CString(path)
		defer C.free(unsafe.Pointer(pathC))
		return C.QFileSystemWatcher_RemovePath(ptr.Pointer(), pathC) != 0
	}
	return false
}

func (ptr *QFileSystemWatcher) RemovePaths(paths []string) []string {
	if ptr.Pointer() != nil {
		var pathsC = C.CString(strings.Join(paths, "|"))
		defer C.free(unsafe.Pointer(pathsC))
		return strings.Split(cGoUnpackString(C.QFileSystemWatcher_RemovePaths(ptr.Pointer(), pathsC)), "|")
	}
	return make([]string, 0)
}

func (ptr *QFileSystemWatcher) DestroyQFileSystemWatcher() {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_DestroyQFileSystemWatcher(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFileSystemWatcher_TimerEvent
func callbackQFileSystemWatcher_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQFileSystemWatcherFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QFileSystemWatcher) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::timerEvent", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::timerEvent")
	}
}

func (ptr *QFileSystemWatcher) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QFileSystemWatcher) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQFileSystemWatcher_ChildEvent
func callbackQFileSystemWatcher_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQFileSystemWatcherFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QFileSystemWatcher) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::childEvent", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::childEvent")
	}
}

func (ptr *QFileSystemWatcher) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QFileSystemWatcher) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQFileSystemWatcher_ConnectNotify
func callbackQFileSystemWatcher_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileSystemWatcherFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFileSystemWatcher) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::connectNotify", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::connectNotify")
	}
}

func (ptr *QFileSystemWatcher) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFileSystemWatcher) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFileSystemWatcher_CustomEvent
func callbackQFileSystemWatcher_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQFileSystemWatcherFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QFileSystemWatcher) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::customEvent", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::customEvent")
	}
}

func (ptr *QFileSystemWatcher) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFileSystemWatcher) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQFileSystemWatcher_DeleteLater
func callbackQFileSystemWatcher_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQFileSystemWatcherFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QFileSystemWatcher) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::deleteLater", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::deleteLater")
	}
}

func (ptr *QFileSystemWatcher) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QFileSystemWatcher) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFileSystemWatcher_DisconnectNotify
func callbackQFileSystemWatcher_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFileSystemWatcherFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFileSystemWatcher) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::disconnectNotify", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::disconnectNotify")
	}
}

func (ptr *QFileSystemWatcher) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFileSystemWatcher) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFileSystemWatcher_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFileSystemWatcher_Event
func callbackQFileSystemWatcher_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileSystemWatcherFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QFileSystemWatcher) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::event", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::event")
	}
}

func (ptr *QFileSystemWatcher) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSystemWatcher_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QFileSystemWatcher) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSystemWatcher_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQFileSystemWatcher_EventFilter
func callbackQFileSystemWatcher_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFileSystemWatcherFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QFileSystemWatcher) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::eventFilter", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::eventFilter")
	}
}

func (ptr *QFileSystemWatcher) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSystemWatcher_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QFileSystemWatcher) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFileSystemWatcher_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQFileSystemWatcher_MetaObject
func callbackQFileSystemWatcher_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFileSystemWatcher::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQFileSystemWatcherFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QFileSystemWatcher) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::metaObject", f)
	}
}

func (ptr *QFileSystemWatcher) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFileSystemWatcher::metaObject")
	}
}

func (ptr *QFileSystemWatcher) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFileSystemWatcher_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QFileSystemWatcher) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFileSystemWatcher_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QFinalState struct {
	QAbstractState
}

type QFinalState_ITF interface {
	QAbstractState_ITF
	QFinalState_PTR() *QFinalState
}

func (p *QFinalState) QFinalState_PTR() *QFinalState {
	return p
}

func (p *QFinalState) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractState_PTR().Pointer()
	}
	return nil
}

func (p *QFinalState) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractState_PTR().SetPointer(ptr)
	}
}

func PointerFromQFinalState(ptr QFinalState_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFinalState_PTR().Pointer()
	}
	return nil
}

func NewQFinalStateFromPointer(ptr unsafe.Pointer) *QFinalState {
	var n = new(QFinalState)
	n.SetPointer(ptr)
	return n
}
func NewQFinalState(parent QState_ITF) *QFinalState {
	var tmpValue = NewQFinalStateFromPointer(C.QFinalState_NewQFinalState(PointerFromQState(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQFinalState_Event
func callbackQFinalState_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFinalStateFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QFinalState) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::event", f)
	}
}

func (ptr *QFinalState) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::event")
	}
}

func (ptr *QFinalState) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFinalState_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QFinalState) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFinalState_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQFinalState_OnEntry
func callbackQFinalState_OnEntry(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::onEntry"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQFinalStateFromPointer(ptr).OnEntryDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QFinalState) ConnectOnEntry(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::onEntry", f)
	}
}

func (ptr *QFinalState) DisconnectOnEntry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::onEntry")
	}
}

func (ptr *QFinalState) OnEntry(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_OnEntry(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFinalState) OnEntryDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_OnEntryDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQFinalState_OnExit
func callbackQFinalState_OnExit(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::onExit"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQFinalStateFromPointer(ptr).OnExitDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QFinalState) ConnectOnExit(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::onExit", f)
	}
}

func (ptr *QFinalState) DisconnectOnExit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::onExit")
	}
}

func (ptr *QFinalState) OnExit(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_OnExit(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFinalState) OnExitDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_OnExitDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFinalState) DestroyQFinalState() {
	if ptr.Pointer() != nil {
		C.QFinalState_DestroyQFinalState(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFinalState_TimerEvent
func callbackQFinalState_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQFinalStateFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QFinalState) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::timerEvent", f)
	}
}

func (ptr *QFinalState) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::timerEvent")
	}
}

func (ptr *QFinalState) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QFinalState) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQFinalState_ChildEvent
func callbackQFinalState_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQFinalStateFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QFinalState) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::childEvent", f)
	}
}

func (ptr *QFinalState) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::childEvent")
	}
}

func (ptr *QFinalState) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QFinalState) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQFinalState_ConnectNotify
func callbackQFinalState_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFinalStateFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFinalState) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::connectNotify", f)
	}
}

func (ptr *QFinalState) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::connectNotify")
	}
}

func (ptr *QFinalState) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFinalState) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFinalState_CustomEvent
func callbackQFinalState_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQFinalStateFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QFinalState) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::customEvent", f)
	}
}

func (ptr *QFinalState) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::customEvent")
	}
}

func (ptr *QFinalState) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QFinalState) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQFinalState_DeleteLater
func callbackQFinalState_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQFinalStateFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QFinalState) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::deleteLater", f)
	}
}

func (ptr *QFinalState) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::deleteLater")
	}
}

func (ptr *QFinalState) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QFinalState_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QFinalState) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QFinalState_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQFinalState_DisconnectNotify
func callbackQFinalState_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQFinalStateFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QFinalState) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::disconnectNotify", f)
	}
}

func (ptr *QFinalState) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::disconnectNotify")
	}
}

func (ptr *QFinalState) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QFinalState) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QFinalState_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQFinalState_EventFilter
func callbackQFinalState_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQFinalStateFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QFinalState) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::eventFilter", f)
	}
}

func (ptr *QFinalState) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::eventFilter")
	}
}

func (ptr *QFinalState) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFinalState_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QFinalState) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QFinalState_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQFinalState_MetaObject
func callbackQFinalState_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QFinalState::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQFinalStateFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QFinalState) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::metaObject", f)
	}
}

func (ptr *QFinalState) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QFinalState::metaObject")
	}
}

func (ptr *QFinalState) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFinalState_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QFinalState) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QFinalState_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QFlag struct {
	ptr unsafe.Pointer
}

type QFlag_ITF interface {
	QFlag_PTR() *QFlag
}

func (p *QFlag) QFlag_PTR() *QFlag {
	return p
}

func (p *QFlag) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFlag) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFlag(ptr QFlag_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFlag_PTR().Pointer()
	}
	return nil
}

func NewQFlagFromPointer(ptr unsafe.Pointer) *QFlag {
	var n = new(QFlag)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFlag) DestroyQFlag() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQFlag(value int) *QFlag {
	var tmpValue = NewQFlagFromPointer(C.QFlag_NewQFlag(C.int(int32(value))))
	runtime.SetFinalizer(tmpValue, (*QFlag).DestroyQFlag)
	return tmpValue
}

func NewQFlag3(value int16) *QFlag {
	var tmpValue = NewQFlagFromPointer(C.QFlag_NewQFlag3(C.short(value)))
	runtime.SetFinalizer(tmpValue, (*QFlag).DestroyQFlag)
	return tmpValue
}

func NewQFlag2(value uint) *QFlag {
	var tmpValue = NewQFlagFromPointer(C.QFlag_NewQFlag2(C.uint(uint32(value))))
	runtime.SetFinalizer(tmpValue, (*QFlag).DestroyQFlag)
	return tmpValue
}

func NewQFlag4(value uint16) *QFlag {
	var tmpValue = NewQFlagFromPointer(C.QFlag_NewQFlag4(C.ushort(value)))
	runtime.SetFinalizer(tmpValue, (*QFlag).DestroyQFlag)
	return tmpValue
}

type QFlags struct {
	ptr unsafe.Pointer
}

type QFlags_ITF interface {
	QFlags_PTR() *QFlags
}

func (p *QFlags) QFlags_PTR() *QFlags {
	return p
}

func (p *QFlags) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFlags) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFlags(ptr QFlags_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFlags_PTR().Pointer()
	}
	return nil
}

func NewQFlagsFromPointer(ptr unsafe.Pointer) *QFlags {
	var n = new(QFlags)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFlags) DestroyQFlags() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QFuture struct {
	ptr unsafe.Pointer
}

type QFuture_ITF interface {
	QFuture_PTR() *QFuture
}

func (p *QFuture) QFuture_PTR() *QFuture {
	return p
}

func (p *QFuture) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFuture) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFuture(ptr QFuture_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFuture_PTR().Pointer()
	}
	return nil
}

func NewQFutureFromPointer(ptr unsafe.Pointer) *QFuture {
	var n = new(QFuture)
	n.SetPointer(ptr)
	return n
}

type QFutureIterator struct {
	ptr unsafe.Pointer
}

type QFutureIterator_ITF interface {
	QFutureIterator_PTR() *QFutureIterator
}

func (p *QFutureIterator) QFutureIterator_PTR() *QFutureIterator {
	return p
}

func (p *QFutureIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFutureIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFutureIterator(ptr QFutureIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFutureIterator_PTR().Pointer()
	}
	return nil
}

func NewQFutureIteratorFromPointer(ptr unsafe.Pointer) *QFutureIterator {
	var n = new(QFutureIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QFutureIterator) DestroyQFutureIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QFutureSynchronizer struct {
	ptr unsafe.Pointer
}

type QFutureSynchronizer_ITF interface {
	QFutureSynchronizer_PTR() *QFutureSynchronizer
}

func (p *QFutureSynchronizer) QFutureSynchronizer_PTR() *QFutureSynchronizer {
	return p
}

func (p *QFutureSynchronizer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QFutureSynchronizer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQFutureSynchronizer(ptr QFutureSynchronizer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFutureSynchronizer_PTR().Pointer()
	}
	return nil
}

func NewQFutureSynchronizerFromPointer(ptr unsafe.Pointer) *QFutureSynchronizer {
	var n = new(QFutureSynchronizer)
	n.SetPointer(ptr)
	return n
}

type QFutureWatcher struct {
	QObject
}

type QFutureWatcher_ITF interface {
	QObject_ITF
	QFutureWatcher_PTR() *QFutureWatcher
}

func (p *QFutureWatcher) QFutureWatcher_PTR() *QFutureWatcher {
	return p
}

func (p *QFutureWatcher) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QFutureWatcher) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQFutureWatcher(ptr QFutureWatcher_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QFutureWatcher_PTR().Pointer()
	}
	return nil
}

func NewQFutureWatcherFromPointer(ptr unsafe.Pointer) *QFutureWatcher {
	var n = new(QFutureWatcher)
	n.SetPointer(ptr)
	return n
}

type QGenericArgument struct {
	ptr unsafe.Pointer
}

type QGenericArgument_ITF interface {
	QGenericArgument_PTR() *QGenericArgument
}

func (p *QGenericArgument) QGenericArgument_PTR() *QGenericArgument {
	return p
}

func (p *QGenericArgument) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGenericArgument) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGenericArgument(ptr QGenericArgument_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericArgument_PTR().Pointer()
	}
	return nil
}

func NewQGenericArgumentFromPointer(ptr unsafe.Pointer) *QGenericArgument {
	var n = new(QGenericArgument)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGenericArgument) DestroyQGenericArgument() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQGenericArgument(name string, data unsafe.Pointer) *QGenericArgument {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQGenericArgumentFromPointer(C.QGenericArgument_NewQGenericArgument(nameC, data))
	runtime.SetFinalizer(tmpValue, (*QGenericArgument).DestroyQGenericArgument)
	return tmpValue
}

func (ptr *QGenericArgument) Data() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QGenericArgument_Data(ptr.Pointer()))
	}
	return nil
}

func (ptr *QGenericArgument) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QGenericArgument_Name(ptr.Pointer()))
	}
	return ""
}

type QGenericReturnArgument struct {
	QGenericArgument
}

type QGenericReturnArgument_ITF interface {
	QGenericArgument_ITF
	QGenericReturnArgument_PTR() *QGenericReturnArgument
}

func (p *QGenericReturnArgument) QGenericReturnArgument_PTR() *QGenericReturnArgument {
	return p
}

func (p *QGenericReturnArgument) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QGenericArgument_PTR().Pointer()
	}
	return nil
}

func (p *QGenericReturnArgument) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QGenericArgument_PTR().SetPointer(ptr)
	}
}

func PointerFromQGenericReturnArgument(ptr QGenericReturnArgument_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGenericReturnArgument_PTR().Pointer()
	}
	return nil
}

func NewQGenericReturnArgumentFromPointer(ptr unsafe.Pointer) *QGenericReturnArgument {
	var n = new(QGenericReturnArgument)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGenericReturnArgument) DestroyQGenericReturnArgument() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQGenericReturnArgument(name string, data unsafe.Pointer) *QGenericReturnArgument {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQGenericReturnArgumentFromPointer(C.QGenericReturnArgument_NewQGenericReturnArgument(nameC, data))
	runtime.SetFinalizer(tmpValue, (*QGenericReturnArgument).DestroyQGenericReturnArgument)
	return tmpValue
}

type QGlobalStatic struct {
	ptr unsafe.Pointer
}

type QGlobalStatic_ITF interface {
	QGlobalStatic_PTR() *QGlobalStatic
}

func (p *QGlobalStatic) QGlobalStatic_PTR() *QGlobalStatic {
	return p
}

func (p *QGlobalStatic) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QGlobalStatic) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQGlobalStatic(ptr QGlobalStatic_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QGlobalStatic_PTR().Pointer()
	}
	return nil
}

func NewQGlobalStaticFromPointer(ptr unsafe.Pointer) *QGlobalStatic {
	var n = new(QGlobalStatic)
	n.SetPointer(ptr)
	return n
}

func (ptr *QGlobalStatic) DestroyQGlobalStatic() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QHash struct {
	ptr unsafe.Pointer
}

type QHash_ITF interface {
	QHash_PTR() *QHash
}

func (p *QHash) QHash_PTR() *QHash {
	return p
}

func (p *QHash) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QHash) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQHash(ptr QHash_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHash_PTR().Pointer()
	}
	return nil
}

func NewQHashFromPointer(ptr unsafe.Pointer) *QHash {
	var n = new(QHash)
	n.SetPointer(ptr)
	return n
}

type QHashIterator struct {
	ptr unsafe.Pointer
}

type QHashIterator_ITF interface {
	QHashIterator_PTR() *QHashIterator
}

func (p *QHashIterator) QHashIterator_PTR() *QHashIterator {
	return p
}

func (p *QHashIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QHashIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQHashIterator(ptr QHashIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHashIterator_PTR().Pointer()
	}
	return nil
}

func NewQHashIteratorFromPointer(ptr unsafe.Pointer) *QHashIterator {
	var n = new(QHashIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHashIterator) DestroyQHashIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QHistoryState::HistoryType
type QHistoryState__HistoryType int64

const (
	QHistoryState__ShallowHistory = QHistoryState__HistoryType(0)
	QHistoryState__DeepHistory    = QHistoryState__HistoryType(1)
)

type QHistoryState struct {
	QAbstractState
}

type QHistoryState_ITF interface {
	QAbstractState_ITF
	QHistoryState_PTR() *QHistoryState
}

func (p *QHistoryState) QHistoryState_PTR() *QHistoryState {
	return p
}

func (p *QHistoryState) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractState_PTR().Pointer()
	}
	return nil
}

func (p *QHistoryState) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractState_PTR().SetPointer(ptr)
	}
}

func PointerFromQHistoryState(ptr QHistoryState_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHistoryState_PTR().Pointer()
	}
	return nil
}

func NewQHistoryStateFromPointer(ptr unsafe.Pointer) *QHistoryState {
	var n = new(QHistoryState)
	n.SetPointer(ptr)
	return n
}
func NewQHistoryState2(ty QHistoryState__HistoryType, parent QState_ITF) *QHistoryState {
	var tmpValue = NewQHistoryStateFromPointer(C.QHistoryState_NewQHistoryState2(C.longlong(ty), PointerFromQState(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQHistoryState(parent QState_ITF) *QHistoryState {
	var tmpValue = NewQHistoryStateFromPointer(C.QHistoryState_NewQHistoryState(PointerFromQState(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QHistoryState) DefaultState() *QAbstractState {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractStateFromPointer(C.QHistoryState_DefaultState(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQHistoryState_DefaultStateChanged
func callbackQHistoryState_DefaultStateChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::defaultStateChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QHistoryState) ConnectDefaultStateChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QHistoryState_ConnectDefaultStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::defaultStateChanged", f)
	}
}

func (ptr *QHistoryState) DisconnectDefaultStateChanged() {
	if ptr.Pointer() != nil {
		C.QHistoryState_DisconnectDefaultStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::defaultStateChanged")
	}
}

func (ptr *QHistoryState) DefaultTransition() *QAbstractTransition {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractTransitionFromPointer(C.QHistoryState_DefaultTransition(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQHistoryState_DefaultTransitionChanged
func callbackQHistoryState_DefaultTransitionChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::defaultTransitionChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QHistoryState) ConnectDefaultTransitionChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QHistoryState_ConnectDefaultTransitionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::defaultTransitionChanged", f)
	}
}

func (ptr *QHistoryState) DisconnectDefaultTransitionChanged() {
	if ptr.Pointer() != nil {
		C.QHistoryState_DisconnectDefaultTransitionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::defaultTransitionChanged")
	}
}

//export callbackQHistoryState_Event
func callbackQHistoryState_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQHistoryStateFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QHistoryState) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::event", f)
	}
}

func (ptr *QHistoryState) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::event")
	}
}

func (ptr *QHistoryState) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QHistoryState_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QHistoryState) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QHistoryState_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QHistoryState) HistoryType() QHistoryState__HistoryType {
	if ptr.Pointer() != nil {
		return QHistoryState__HistoryType(C.QHistoryState_HistoryType(ptr.Pointer()))
	}
	return 0
}

//export callbackQHistoryState_HistoryTypeChanged
func callbackQHistoryState_HistoryTypeChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::historyTypeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QHistoryState) ConnectHistoryTypeChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QHistoryState_ConnectHistoryTypeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::historyTypeChanged", f)
	}
}

func (ptr *QHistoryState) DisconnectHistoryTypeChanged() {
	if ptr.Pointer() != nil {
		C.QHistoryState_DisconnectHistoryTypeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::historyTypeChanged")
	}
}

//export callbackQHistoryState_OnEntry
func callbackQHistoryState_OnEntry(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::onEntry"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQHistoryStateFromPointer(ptr).OnEntryDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QHistoryState) ConnectOnEntry(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::onEntry", f)
	}
}

func (ptr *QHistoryState) DisconnectOnEntry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::onEntry")
	}
}

func (ptr *QHistoryState) OnEntry(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_OnEntry(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QHistoryState) OnEntryDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_OnEntryDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQHistoryState_OnExit
func callbackQHistoryState_OnExit(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::onExit"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQHistoryStateFromPointer(ptr).OnExitDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QHistoryState) ConnectOnExit(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::onExit", f)
	}
}

func (ptr *QHistoryState) DisconnectOnExit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::onExit")
	}
}

func (ptr *QHistoryState) OnExit(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_OnExit(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QHistoryState) OnExitDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_OnExitDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QHistoryState) SetDefaultState(state QAbstractState_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_SetDefaultState(ptr.Pointer(), PointerFromQAbstractState(state))
	}
}

func (ptr *QHistoryState) SetDefaultTransition(transition QAbstractTransition_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_SetDefaultTransition(ptr.Pointer(), PointerFromQAbstractTransition(transition))
	}
}

func (ptr *QHistoryState) SetHistoryType(ty QHistoryState__HistoryType) {
	if ptr.Pointer() != nil {
		C.QHistoryState_SetHistoryType(ptr.Pointer(), C.longlong(ty))
	}
}

func (ptr *QHistoryState) DestroyQHistoryState() {
	if ptr.Pointer() != nil {
		C.QHistoryState_DestroyQHistoryState(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQHistoryState_TimerEvent
func callbackQHistoryState_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQHistoryStateFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QHistoryState) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::timerEvent", f)
	}
}

func (ptr *QHistoryState) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::timerEvent")
	}
}

func (ptr *QHistoryState) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QHistoryState) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQHistoryState_ChildEvent
func callbackQHistoryState_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQHistoryStateFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QHistoryState) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::childEvent", f)
	}
}

func (ptr *QHistoryState) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::childEvent")
	}
}

func (ptr *QHistoryState) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QHistoryState) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQHistoryState_ConnectNotify
func callbackQHistoryState_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQHistoryStateFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QHistoryState) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::connectNotify", f)
	}
}

func (ptr *QHistoryState) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::connectNotify")
	}
}

func (ptr *QHistoryState) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QHistoryState) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQHistoryState_CustomEvent
func callbackQHistoryState_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQHistoryStateFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QHistoryState) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::customEvent", f)
	}
}

func (ptr *QHistoryState) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::customEvent")
	}
}

func (ptr *QHistoryState) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QHistoryState) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQHistoryState_DeleteLater
func callbackQHistoryState_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQHistoryStateFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QHistoryState) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::deleteLater", f)
	}
}

func (ptr *QHistoryState) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::deleteLater")
	}
}

func (ptr *QHistoryState) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QHistoryState_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QHistoryState) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QHistoryState_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQHistoryState_DisconnectNotify
func callbackQHistoryState_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQHistoryStateFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QHistoryState) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::disconnectNotify", f)
	}
}

func (ptr *QHistoryState) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::disconnectNotify")
	}
}

func (ptr *QHistoryState) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QHistoryState) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QHistoryState_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQHistoryState_EventFilter
func callbackQHistoryState_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQHistoryStateFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QHistoryState) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::eventFilter", f)
	}
}

func (ptr *QHistoryState) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::eventFilter")
	}
}

func (ptr *QHistoryState) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QHistoryState_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QHistoryState) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QHistoryState_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQHistoryState_MetaObject
func callbackQHistoryState_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QHistoryState::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQHistoryStateFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QHistoryState) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::metaObject", f)
	}
}

func (ptr *QHistoryState) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QHistoryState::metaObject")
	}
}

func (ptr *QHistoryState) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QHistoryState_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QHistoryState) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QHistoryState_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QHooks::HookIndex
type QHooks__HookIndex int64

const (
	QHooks__HookDataVersion        = QHooks__HookIndex(0)
	QHooks__HookDataSize           = QHooks__HookIndex(1)
	QHooks__QtVersion              = QHooks__HookIndex(2)
	QHooks__AddQObject             = QHooks__HookIndex(3)
	QHooks__RemoveQObject          = QHooks__HookIndex(4)
	QHooks__Startup                = QHooks__HookIndex(5)
	QHooks__TypeInformationVersion = QHooks__HookIndex(6)
	QHooks__LastHookIndex          = QHooks__HookIndex(7)
)

type QHooks struct {
	ptr unsafe.Pointer
}

type QHooks_ITF interface {
	QHooks_PTR() *QHooks
}

func (p *QHooks) QHooks_PTR() *QHooks {
	return p
}

func (p *QHooks) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QHooks) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQHooks(ptr QHooks_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QHooks_PTR().Pointer()
	}
	return nil
}

func NewQHooksFromPointer(ptr unsafe.Pointer) *QHooks {
	var n = new(QHooks)
	n.SetPointer(ptr)
	return n
}

func (ptr *QHooks) DestroyQHooks() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QIODevice::OpenModeFlag
type QIODevice__OpenModeFlag int64

const (
	QIODevice__NotOpen    = QIODevice__OpenModeFlag(0x0000)
	QIODevice__ReadOnly   = QIODevice__OpenModeFlag(0x0001)
	QIODevice__WriteOnly  = QIODevice__OpenModeFlag(0x0002)
	QIODevice__ReadWrite  = QIODevice__OpenModeFlag(QIODevice__ReadOnly | QIODevice__WriteOnly)
	QIODevice__Append     = QIODevice__OpenModeFlag(0x0004)
	QIODevice__Truncate   = QIODevice__OpenModeFlag(0x0008)
	QIODevice__Text       = QIODevice__OpenModeFlag(0x0010)
	QIODevice__Unbuffered = QIODevice__OpenModeFlag(0x0020)
)

type QIODevice struct {
	QObject
}

type QIODevice_ITF interface {
	QObject_ITF
	QIODevice_PTR() *QIODevice
}

func (p *QIODevice) QIODevice_PTR() *QIODevice {
	return p
}

func (p *QIODevice) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QIODevice) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQIODevice(ptr QIODevice_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIODevice_PTR().Pointer()
	}
	return nil
}

func NewQIODeviceFromPointer(ptr unsafe.Pointer) *QIODevice {
	var n = new(QIODevice)
	n.SetPointer(ptr)
	return n
}
func (ptr *QIODevice) GetChar(c string) bool {
	if ptr.Pointer() != nil {
		var cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
		return C.QIODevice_GetChar(ptr.Pointer(), cC) != 0
	}
	return false
}

func (ptr *QIODevice) PutChar(c string) bool {
	if ptr.Pointer() != nil {
		var cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
		return C.QIODevice_PutChar(ptr.Pointer(), cC) != 0
	}
	return false
}

//export callbackQIODevice_AboutToClose
func callbackQIODevice_AboutToClose(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::aboutToClose"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QIODevice) ConnectAboutToClose(f func()) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectAboutToClose(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::aboutToClose", f)
	}
}

func (ptr *QIODevice) DisconnectAboutToClose() {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectAboutToClose(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::aboutToClose")
	}
}

func (ptr *QIODevice) AboutToClose() {
	if ptr.Pointer() != nil {
		C.QIODevice_AboutToClose(ptr.Pointer())
	}
}

//export callbackQIODevice_AtEnd
func callbackQIODevice_AtEnd(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::atEnd"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).AtEndDefault())))
}

func (ptr *QIODevice) ConnectAtEnd(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::atEnd", f)
	}
}

func (ptr *QIODevice) DisconnectAtEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::atEnd")
	}
}

func (ptr *QIODevice) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) AtEndDefault() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_AtEndDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQIODevice_BytesAvailable
func callbackQIODevice_BytesAvailable(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::bytesAvailable"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQIODeviceFromPointer(ptr).BytesAvailableDefault())
}

func (ptr *QIODevice) ConnectBytesAvailable(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::bytesAvailable", f)
	}
}

func (ptr *QIODevice) DisconnectBytesAvailable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::bytesAvailable")
	}
}

func (ptr *QIODevice) BytesAvailable() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_BytesAvailable(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIODevice) BytesAvailableDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_BytesAvailableDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQIODevice_BytesToWrite
func callbackQIODevice_BytesToWrite(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::bytesToWrite"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQIODeviceFromPointer(ptr).BytesToWriteDefault())
}

func (ptr *QIODevice) ConnectBytesToWrite(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::bytesToWrite", f)
	}
}

func (ptr *QIODevice) DisconnectBytesToWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::bytesToWrite")
	}
}

func (ptr *QIODevice) BytesToWrite() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_BytesToWrite(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIODevice) BytesToWriteDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_BytesToWriteDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQIODevice_BytesWritten
func callbackQIODevice_BytesWritten(ptr unsafe.Pointer, bytes C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::bytesWritten"); signal != nil {
		signal.(func(int64))(int64(bytes))
	}

}

func (ptr *QIODevice) ConnectBytesWritten(f func(bytes int64)) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectBytesWritten(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::bytesWritten", f)
	}
}

func (ptr *QIODevice) DisconnectBytesWritten() {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectBytesWritten(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::bytesWritten")
	}
}

func (ptr *QIODevice) BytesWritten(bytes int64) {
	if ptr.Pointer() != nil {
		C.QIODevice_BytesWritten(ptr.Pointer(), C.longlong(bytes))
	}
}

//export callbackQIODevice_CanReadLine
func callbackQIODevice_CanReadLine(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::canReadLine"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).CanReadLineDefault())))
}

func (ptr *QIODevice) ConnectCanReadLine(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::canReadLine", f)
	}
}

func (ptr *QIODevice) DisconnectCanReadLine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::canReadLine")
	}
}

func (ptr *QIODevice) CanReadLine() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_CanReadLine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) CanReadLineDefault() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_CanReadLineDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQIODevice_ChannelBytesWritten
func callbackQIODevice_ChannelBytesWritten(ptr unsafe.Pointer, channel C.int, bytes C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::channelBytesWritten"); signal != nil {
		signal.(func(int, int64))(int(int32(channel)), int64(bytes))
	}

}

func (ptr *QIODevice) ConnectChannelBytesWritten(f func(channel int, bytes int64)) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectChannelBytesWritten(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::channelBytesWritten", f)
	}
}

func (ptr *QIODevice) DisconnectChannelBytesWritten() {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectChannelBytesWritten(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::channelBytesWritten")
	}
}

func (ptr *QIODevice) ChannelBytesWritten(channel int, bytes int64) {
	if ptr.Pointer() != nil {
		C.QIODevice_ChannelBytesWritten(ptr.Pointer(), C.int(int32(channel)), C.longlong(bytes))
	}
}

//export callbackQIODevice_ChannelReadyRead
func callbackQIODevice_ChannelReadyRead(ptr unsafe.Pointer, channel C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::channelReadyRead"); signal != nil {
		signal.(func(int))(int(int32(channel)))
	}

}

func (ptr *QIODevice) ConnectChannelReadyRead(f func(channel int)) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectChannelReadyRead(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::channelReadyRead", f)
	}
}

func (ptr *QIODevice) DisconnectChannelReadyRead() {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectChannelReadyRead(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::channelReadyRead")
	}
}

func (ptr *QIODevice) ChannelReadyRead(channel int) {
	if ptr.Pointer() != nil {
		C.QIODevice_ChannelReadyRead(ptr.Pointer(), C.int(int32(channel)))
	}
}

//export callbackQIODevice_Close
func callbackQIODevice_Close(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::close"); signal != nil {
		signal.(func())()
	} else {
		NewQIODeviceFromPointer(ptr).CloseDefault()
	}
}

func (ptr *QIODevice) ConnectClose(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::close", f)
	}
}

func (ptr *QIODevice) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::close")
	}
}

func (ptr *QIODevice) Close() {
	if ptr.Pointer() != nil {
		C.QIODevice_Close(ptr.Pointer())
	}
}

func (ptr *QIODevice) CloseDefault() {
	if ptr.Pointer() != nil {
		C.QIODevice_CloseDefault(ptr.Pointer())
	}
}

func (ptr *QIODevice) CommitTransaction() {
	if ptr.Pointer() != nil {
		C.QIODevice_CommitTransaction(ptr.Pointer())
	}
}

func (ptr *QIODevice) CurrentReadChannel() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIODevice_CurrentReadChannel(ptr.Pointer())))
	}
	return 0
}

func (ptr *QIODevice) CurrentWriteChannel() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIODevice_CurrentWriteChannel(ptr.Pointer())))
	}
	return 0
}

func (ptr *QIODevice) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QIODevice_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QIODevice) IsOpen() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_IsOpen(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) IsReadable() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_IsReadable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQIODevice_IsSequential
func callbackQIODevice_IsSequential(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::isSequential"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).IsSequentialDefault())))
}

func (ptr *QIODevice) ConnectIsSequential(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::isSequential", f)
	}
}

func (ptr *QIODevice) DisconnectIsSequential() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::isSequential")
	}
}

func (ptr *QIODevice) IsSequential() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_IsSequential(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) IsSequentialDefault() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_IsSequentialDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) IsTextModeEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_IsTextModeEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) IsTransactionStarted() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_IsTransactionStarted(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) IsWritable() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_IsWritable(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQIODevice_Open
func callbackQIODevice_Open(ptr unsafe.Pointer, mode C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::open"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QIODevice__OpenModeFlag) bool)(QIODevice__OpenModeFlag(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).OpenDefault(QIODevice__OpenModeFlag(mode)))))
}

func (ptr *QIODevice) ConnectOpen(f func(mode QIODevice__OpenModeFlag) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::open", f)
	}
}

func (ptr *QIODevice) DisconnectOpen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::open")
	}
}

func (ptr *QIODevice) Open(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_Open(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QIODevice) OpenDefault(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_OpenDefault(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QIODevice) OpenMode() QIODevice__OpenModeFlag {
	if ptr.Pointer() != nil {
		return QIODevice__OpenModeFlag(C.QIODevice_OpenMode(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIODevice) Peek2(maxSize int64) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QIODevice_Peek2(ptr.Pointer(), C.longlong(maxSize)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QIODevice) Peek(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_Peek(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

//export callbackQIODevice_Pos
func callbackQIODevice_Pos(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::pos"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQIODeviceFromPointer(ptr).PosDefault())
}

func (ptr *QIODevice) ConnectPos(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::pos", f)
	}
}

func (ptr *QIODevice) DisconnectPos() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::pos")
	}
}

func (ptr *QIODevice) Pos() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_Pos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIODevice) PosDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_PosDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIODevice) Read2(maxSize int64) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QIODevice_Read2(ptr.Pointer(), C.longlong(maxSize)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QIODevice) Read(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_Read(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

func (ptr *QIODevice) ReadAll() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QIODevice_ReadAll(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QIODevice) ReadChannelCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIODevice_ReadChannelCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQIODevice_ReadChannelFinished
func callbackQIODevice_ReadChannelFinished(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::readChannelFinished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QIODevice) ConnectReadChannelFinished(f func()) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectReadChannelFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::readChannelFinished", f)
	}
}

func (ptr *QIODevice) DisconnectReadChannelFinished() {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectReadChannelFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::readChannelFinished")
	}
}

func (ptr *QIODevice) ReadChannelFinished() {
	if ptr.Pointer() != nil {
		C.QIODevice_ReadChannelFinished(ptr.Pointer())
	}
}

func (ptr *QIODevice) ReadLine2(maxSize int64) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QIODevice_ReadLine2(ptr.Pointer(), C.longlong(maxSize)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QIODevice) ReadLine(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_ReadLine(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

//export callbackQIODevice_ReadLineData
func callbackQIODevice_ReadLineData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, maxSize C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::readLineData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(maxSize)))
	}

	return C.longlong(NewQIODeviceFromPointer(ptr).ReadLineDataDefault(cGoUnpackString(data), int64(maxSize)))
}

func (ptr *QIODevice) ConnectReadLineData(f func(data string, maxSize int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::readLineData", f)
	}
}

func (ptr *QIODevice) DisconnectReadLineData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::readLineData")
	}
}

func (ptr *QIODevice) ReadLineData(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_ReadLineData(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

func (ptr *QIODevice) ReadLineDataDefault(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_ReadLineDataDefault(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

//export callbackQIODevice_ReadyRead
func callbackQIODevice_ReadyRead(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::readyRead"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QIODevice) ConnectReadyRead(f func()) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectReadyRead(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::readyRead", f)
	}
}

func (ptr *QIODevice) DisconnectReadyRead() {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectReadyRead(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::readyRead")
	}
}

func (ptr *QIODevice) ReadyRead() {
	if ptr.Pointer() != nil {
		C.QIODevice_ReadyRead(ptr.Pointer())
	}
}

//export callbackQIODevice_Reset
func callbackQIODevice_Reset(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::reset"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).ResetDefault())))
}

func (ptr *QIODevice) ConnectReset(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::reset", f)
	}
}

func (ptr *QIODevice) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::reset")
	}
}

func (ptr *QIODevice) Reset() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_Reset(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) ResetDefault() bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_ResetDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIODevice) RollbackTransaction() {
	if ptr.Pointer() != nil {
		C.QIODevice_RollbackTransaction(ptr.Pointer())
	}
}

//export callbackQIODevice_Seek
func callbackQIODevice_Seek(ptr unsafe.Pointer, pos C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::seek"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(pos)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).SeekDefault(int64(pos)))))
}

func (ptr *QIODevice) ConnectSeek(f func(pos int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::seek", f)
	}
}

func (ptr *QIODevice) DisconnectSeek() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::seek")
	}
}

func (ptr *QIODevice) Seek(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_Seek(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QIODevice) SeekDefault(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_SeekDefault(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QIODevice) SetCurrentReadChannel(channel int) {
	if ptr.Pointer() != nil {
		C.QIODevice_SetCurrentReadChannel(ptr.Pointer(), C.int(int32(channel)))
	}
}

func (ptr *QIODevice) SetCurrentWriteChannel(channel int) {
	if ptr.Pointer() != nil {
		C.QIODevice_SetCurrentWriteChannel(ptr.Pointer(), C.int(int32(channel)))
	}
}

func (ptr *QIODevice) SetErrorString(str string) {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		C.QIODevice_SetErrorString(ptr.Pointer(), strC)
	}
}

func (ptr *QIODevice) SetOpenMode(openMode QIODevice__OpenModeFlag) {
	if ptr.Pointer() != nil {
		C.QIODevice_SetOpenMode(ptr.Pointer(), C.longlong(openMode))
	}
}

func (ptr *QIODevice) SetTextModeEnabled(enabled bool) {
	if ptr.Pointer() != nil {
		C.QIODevice_SetTextModeEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

//export callbackQIODevice_Size
func callbackQIODevice_Size(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::size"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQIODeviceFromPointer(ptr).SizeDefault())
}

func (ptr *QIODevice) ConnectSize(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::size", f)
	}
}

func (ptr *QIODevice) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::size")
	}
}

func (ptr *QIODevice) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIODevice) SizeDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_SizeDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIODevice) StartTransaction() {
	if ptr.Pointer() != nil {
		C.QIODevice_StartTransaction(ptr.Pointer())
	}
}

func (ptr *QIODevice) UngetChar(c string) {
	if ptr.Pointer() != nil {
		var cC = C.CString(c)
		defer C.free(unsafe.Pointer(cC))
		C.QIODevice_UngetChar(ptr.Pointer(), cC)
	}
}

//export callbackQIODevice_WaitForBytesWritten
func callbackQIODevice_WaitForBytesWritten(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::waitForBytesWritten"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).WaitForBytesWrittenDefault(int(int32(msecs))))))
}

func (ptr *QIODevice) ConnectWaitForBytesWritten(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::waitForBytesWritten", f)
	}
}

func (ptr *QIODevice) DisconnectWaitForBytesWritten() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::waitForBytesWritten")
	}
}

func (ptr *QIODevice) WaitForBytesWritten(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_WaitForBytesWritten(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QIODevice) WaitForBytesWrittenDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_WaitForBytesWrittenDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQIODevice_WaitForReadyRead
func callbackQIODevice_WaitForReadyRead(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::waitForReadyRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).WaitForReadyReadDefault(int(int32(msecs))))))
}

func (ptr *QIODevice) ConnectWaitForReadyRead(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::waitForReadyRead", f)
	}
}

func (ptr *QIODevice) DisconnectWaitForReadyRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::waitForReadyRead")
	}
}

func (ptr *QIODevice) WaitForReadyRead(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_WaitForReadyRead(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QIODevice) WaitForReadyReadDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_WaitForReadyReadDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QIODevice) Write3(byteArray QByteArray_ITF) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QIODevice_Write3(ptr.Pointer(), PointerFromQByteArray(byteArray)))
	}
	return 0
}

func (ptr *QIODevice) Write2(data string) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_Write2(ptr.Pointer(), dataC))
	}
	return 0
}

func (ptr *QIODevice) Write(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_Write(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

func (ptr *QIODevice) WriteChannelCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIODevice_WriteChannelCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQIODevice_WriteData
func callbackQIODevice_WriteData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, maxSize C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::writeData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(maxSize)))
	}

	return C.longlong(0)
}

func (ptr *QIODevice) ConnectWriteData(f func(data string, maxSize int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::writeData", f)
	}
}

func (ptr *QIODevice) DisconnectWriteData(data string, maxSize int64) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::writeData")
	}
}

func (ptr *QIODevice) WriteData(data string, maxSize int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QIODevice_WriteData(ptr.Pointer(), dataC, C.longlong(maxSize)))
	}
	return 0
}

//export callbackQIODevice_DestroyQIODevice
func callbackQIODevice_DestroyQIODevice(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::~QIODevice"); signal != nil {
		signal.(func())()
	} else {
		NewQIODeviceFromPointer(ptr).DestroyQIODeviceDefault()
	}
}

func (ptr *QIODevice) ConnectDestroyQIODevice(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::~QIODevice", f)
	}
}

func (ptr *QIODevice) DisconnectDestroyQIODevice() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::~QIODevice")
	}
}

func (ptr *QIODevice) DestroyQIODevice() {
	if ptr.Pointer() != nil {
		C.QIODevice_DestroyQIODevice(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIODevice) DestroyQIODeviceDefault() {
	if ptr.Pointer() != nil {
		C.QIODevice_DestroyQIODeviceDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIODevice_TimerEvent
func callbackQIODevice_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQIODeviceFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QIODevice) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::timerEvent", f)
	}
}

func (ptr *QIODevice) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::timerEvent")
	}
}

func (ptr *QIODevice) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QIODevice) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQIODevice_ChildEvent
func callbackQIODevice_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQIODeviceFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QIODevice) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::childEvent", f)
	}
}

func (ptr *QIODevice) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::childEvent")
	}
}

func (ptr *QIODevice) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QIODevice) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQIODevice_ConnectNotify
func callbackQIODevice_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQIODeviceFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIODevice) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::connectNotify", f)
	}
}

func (ptr *QIODevice) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::connectNotify")
	}
}

func (ptr *QIODevice) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIODevice) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQIODevice_CustomEvent
func callbackQIODevice_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQIODeviceFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QIODevice) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::customEvent", f)
	}
}

func (ptr *QIODevice) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::customEvent")
	}
}

func (ptr *QIODevice) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QIODevice) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQIODevice_DeleteLater
func callbackQIODevice_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQIODeviceFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QIODevice) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::deleteLater", f)
	}
}

func (ptr *QIODevice) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::deleteLater")
	}
}

func (ptr *QIODevice) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QIODevice_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIODevice) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QIODevice_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIODevice_DisconnectNotify
func callbackQIODevice_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQIODeviceFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIODevice) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::disconnectNotify", f)
	}
}

func (ptr *QIODevice) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::disconnectNotify")
	}
}

func (ptr *QIODevice) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIODevice) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIODevice_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQIODevice_Event
func callbackQIODevice_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QIODevice) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::event", f)
	}
}

func (ptr *QIODevice) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::event")
	}
}

func (ptr *QIODevice) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QIODevice) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQIODevice_EventFilter
func callbackQIODevice_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIODeviceFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QIODevice) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::eventFilter", f)
	}
}

func (ptr *QIODevice) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::eventFilter")
	}
}

func (ptr *QIODevice) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QIODevice) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIODevice_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQIODevice_MetaObject
func callbackQIODevice_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIODevice::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQIODeviceFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QIODevice) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::metaObject", f)
	}
}

func (ptr *QIODevice) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIODevice::metaObject")
	}
}

func (ptr *QIODevice) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QIODevice_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QIODevice) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QIODevice_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QIdentityProxyModel struct {
	QAbstractProxyModel
}

type QIdentityProxyModel_ITF interface {
	QAbstractProxyModel_ITF
	QIdentityProxyModel_PTR() *QIdentityProxyModel
}

func (p *QIdentityProxyModel) QIdentityProxyModel_PTR() *QIdentityProxyModel {
	return p
}

func (p *QIdentityProxyModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractProxyModel_PTR().Pointer()
	}
	return nil
}

func (p *QIdentityProxyModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractProxyModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQIdentityProxyModel(ptr QIdentityProxyModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QIdentityProxyModel_PTR().Pointer()
	}
	return nil
}

func NewQIdentityProxyModelFromPointer(ptr unsafe.Pointer) *QIdentityProxyModel {
	var n = new(QIdentityProxyModel)
	n.SetPointer(ptr)
	return n
}
func NewQIdentityProxyModel(parent QObject_ITF) *QIdentityProxyModel {
	var tmpValue = NewQIdentityProxyModelFromPointer(C.QIdentityProxyModel_NewQIdentityProxyModel(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQIdentityProxyModel_ColumnCount
func callbackQIdentityProxyModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::columnCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQIdentityProxyModelFromPointer(ptr).ColumnCountDefault(NewQModelIndexFromPointer(parent))))
}

func (ptr *QIdentityProxyModel) ConnectColumnCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::columnCount", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::columnCount")
	}
}

func (ptr *QIdentityProxyModel) ColumnCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIdentityProxyModel_ColumnCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QIdentityProxyModel) ColumnCountDefault(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIdentityProxyModel_ColumnCountDefault(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQIdentityProxyModel_DropMimeData
func callbackQIdentityProxyModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).DropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::dropMimeData", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::dropMimeData")
	}
}

func (ptr *QIdentityProxyModel) DropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_DropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) DropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_DropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_HeaderData
func callbackQIdentityProxyModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::headerData"); signal != nil {
		return PointerFromQVariant(signal.(func(int, Qt__Orientation, int) *QVariant)(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
	}

	return PointerFromQVariant(NewQIdentityProxyModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QIdentityProxyModel) ConnectHeaderData(f func(section int, orientation Qt__Orientation, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::headerData", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::headerData")
	}
}

func (ptr *QIdentityProxyModel) HeaderData(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QIdentityProxyModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) HeaderDataDefault(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QIdentityProxyModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_Index
func callbackQIdentityProxyModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::index"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
	}

	return PointerFromQModelIndex(NewQIdentityProxyModelFromPointer(ptr).IndexDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
}

func (ptr *QIdentityProxyModel) ConnectIndex(f func(row int, column int, parent *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::index", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::index")
	}
}

func (ptr *QIdentityProxyModel) Index(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) IndexDefault(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_IndexDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_InsertColumns
func callbackQIdentityProxyModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectInsertColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::insertColumns", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectInsertColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::insertColumns")
	}
}

func (ptr *QIdentityProxyModel) InsertColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) InsertColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_InsertRows
func callbackQIdentityProxyModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectInsertRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::insertRows", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectInsertRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::insertRows")
	}
}

func (ptr *QIdentityProxyModel) InsertRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) InsertRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_MapFromSource
func callbackQIdentityProxyModel_MapFromSource(ptr unsafe.Pointer, sourceIndex unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::mapFromSource"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(sourceIndex)))
	}

	return PointerFromQModelIndex(NewQIdentityProxyModelFromPointer(ptr).MapFromSourceDefault(NewQModelIndexFromPointer(sourceIndex)))
}

func (ptr *QIdentityProxyModel) ConnectMapFromSource(f func(sourceIndex *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapFromSource", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMapFromSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapFromSource")
	}
}

func (ptr *QIdentityProxyModel) MapFromSource(sourceIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_MapFromSource(ptr.Pointer(), PointerFromQModelIndex(sourceIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) MapFromSourceDefault(sourceIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_MapFromSourceDefault(ptr.Pointer(), PointerFromQModelIndex(sourceIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_MapSelectionFromSource
func callbackQIdentityProxyModel_MapSelectionFromSource(ptr unsafe.Pointer, selection unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::mapSelectionFromSource"); signal != nil {
		return PointerFromQItemSelection(signal.(func(*QItemSelection) *QItemSelection)(NewQItemSelectionFromPointer(selection)))
	}

	return PointerFromQItemSelection(NewQIdentityProxyModelFromPointer(ptr).MapSelectionFromSourceDefault(NewQItemSelectionFromPointer(selection)))
}

func (ptr *QIdentityProxyModel) ConnectMapSelectionFromSource(f func(selection *QItemSelection) *QItemSelection) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapSelectionFromSource", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMapSelectionFromSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapSelectionFromSource")
	}
}

func (ptr *QIdentityProxyModel) MapSelectionFromSource(selection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QIdentityProxyModel_MapSelectionFromSource(ptr.Pointer(), PointerFromQItemSelection(selection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) MapSelectionFromSourceDefault(selection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QIdentityProxyModel_MapSelectionFromSourceDefault(ptr.Pointer(), PointerFromQItemSelection(selection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_MapSelectionToSource
func callbackQIdentityProxyModel_MapSelectionToSource(ptr unsafe.Pointer, selection unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::mapSelectionToSource"); signal != nil {
		return PointerFromQItemSelection(signal.(func(*QItemSelection) *QItemSelection)(NewQItemSelectionFromPointer(selection)))
	}

	return PointerFromQItemSelection(NewQIdentityProxyModelFromPointer(ptr).MapSelectionToSourceDefault(NewQItemSelectionFromPointer(selection)))
}

func (ptr *QIdentityProxyModel) ConnectMapSelectionToSource(f func(selection *QItemSelection) *QItemSelection) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapSelectionToSource", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMapSelectionToSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapSelectionToSource")
	}
}

func (ptr *QIdentityProxyModel) MapSelectionToSource(selection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QIdentityProxyModel_MapSelectionToSource(ptr.Pointer(), PointerFromQItemSelection(selection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) MapSelectionToSourceDefault(selection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QIdentityProxyModel_MapSelectionToSourceDefault(ptr.Pointer(), PointerFromQItemSelection(selection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_MapToSource
func callbackQIdentityProxyModel_MapToSource(ptr unsafe.Pointer, proxyIndex unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::mapToSource"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(proxyIndex)))
	}

	return PointerFromQModelIndex(NewQIdentityProxyModelFromPointer(ptr).MapToSourceDefault(NewQModelIndexFromPointer(proxyIndex)))
}

func (ptr *QIdentityProxyModel) ConnectMapToSource(f func(proxyIndex *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapToSource", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMapToSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mapToSource")
	}
}

func (ptr *QIdentityProxyModel) MapToSource(proxyIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_MapToSource(ptr.Pointer(), PointerFromQModelIndex(proxyIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) MapToSourceDefault(proxyIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_MapToSourceDefault(ptr.Pointer(), PointerFromQModelIndex(proxyIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_Parent
func callbackQIdentityProxyModel_Parent(ptr unsafe.Pointer, child unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::parent"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(child)))
	}

	return PointerFromQModelIndex(NewQIdentityProxyModelFromPointer(ptr).ParentDefault(NewQModelIndexFromPointer(child)))
}

func (ptr *QIdentityProxyModel) ConnectParent(f func(child *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::parent", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::parent")
	}
}

func (ptr *QIdentityProxyModel) Parent(child QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_Parent(ptr.Pointer(), PointerFromQModelIndex(child)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) ParentDefault(child QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_ParentDefault(ptr.Pointer(), PointerFromQModelIndex(child)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_RemoveColumns
func callbackQIdentityProxyModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectRemoveColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::removeColumns", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectRemoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::removeColumns")
	}
}

func (ptr *QIdentityProxyModel) RemoveColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) RemoveColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_RemoveRows
func callbackQIdentityProxyModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectRemoveRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::removeRows", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectRemoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::removeRows")
	}
}

func (ptr *QIdentityProxyModel) RemoveRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) RemoveRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_RowCount
func callbackQIdentityProxyModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::rowCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQIdentityProxyModelFromPointer(ptr).RowCountDefault(NewQModelIndexFromPointer(parent))))
}

func (ptr *QIdentityProxyModel) ConnectRowCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::rowCount", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::rowCount")
	}
}

func (ptr *QIdentityProxyModel) RowCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIdentityProxyModel_RowCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QIdentityProxyModel) RowCountDefault(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QIdentityProxyModel_RowCountDefault(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQIdentityProxyModel_SetSourceModel
func callbackQIdentityProxyModel_SetSourceModel(ptr unsafe.Pointer, newSourceModel unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::setSourceModel"); signal != nil {
		signal.(func(*QAbstractItemModel))(NewQAbstractItemModelFromPointer(newSourceModel))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).SetSourceModelDefault(NewQAbstractItemModelFromPointer(newSourceModel))
	}
}

func (ptr *QIdentityProxyModel) ConnectSetSourceModel(f func(newSourceModel *QAbstractItemModel)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::setSourceModel", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSetSourceModel() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::setSourceModel")
	}
}

func (ptr *QIdentityProxyModel) SetSourceModel(newSourceModel QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_SetSourceModel(ptr.Pointer(), PointerFromQAbstractItemModel(newSourceModel))
	}
}

func (ptr *QIdentityProxyModel) SetSourceModelDefault(newSourceModel QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_SetSourceModelDefault(ptr.Pointer(), PointerFromQAbstractItemModel(newSourceModel))
	}
}

//export callbackQIdentityProxyModel_Sibling
func callbackQIdentityProxyModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::sibling"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
	}

	return PointerFromQModelIndex(NewQIdentityProxyModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
}

func (ptr *QIdentityProxyModel) ConnectSibling(f func(row int, column int, idx *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::sibling", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSibling() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::sibling")
	}
}

func (ptr *QIdentityProxyModel) Sibling(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) SiblingDefault(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) DestroyQIdentityProxyModel() {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_DestroyQIdentityProxyModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIdentityProxyModel) match_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_match_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_Buddy
func callbackQIdentityProxyModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::buddy"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQIdentityProxyModelFromPointer(ptr).BuddyDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QIdentityProxyModel) ConnectBuddy(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::buddy", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::buddy")
	}
}

func (ptr *QIdentityProxyModel) Buddy(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_Buddy(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) BuddyDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QIdentityProxyModel_BuddyDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_CanDropMimeData
func callbackQIdentityProxyModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).CanDropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectCanDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::canDropMimeData", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::canDropMimeData")
	}
}

func (ptr *QIdentityProxyModel) CanDropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_CanDropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) CanDropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_CanDropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_CanFetchMore
func callbackQIdentityProxyModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).CanFetchMoreDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectCanFetchMore(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::canFetchMore", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::canFetchMore")
	}
}

func (ptr *QIdentityProxyModel) CanFetchMore(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_CanFetchMore(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) CanFetchMoreDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_CanFetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_Data
func callbackQIdentityProxyModel_Data(ptr unsafe.Pointer, proxyIndex unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::data"); signal != nil {
		return PointerFromQVariant(signal.(func(*QModelIndex, int) *QVariant)(NewQModelIndexFromPointer(proxyIndex), int(int32(role))))
	}

	return PointerFromQVariant(NewQIdentityProxyModelFromPointer(ptr).DataDefault(NewQModelIndexFromPointer(proxyIndex), int(int32(role))))
}

func (ptr *QIdentityProxyModel) ConnectData(f func(proxyIndex *QModelIndex, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::data", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::data")
	}
}

func (ptr *QIdentityProxyModel) Data(proxyIndex QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QIdentityProxyModel_Data(ptr.Pointer(), PointerFromQModelIndex(proxyIndex), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) DataDefault(proxyIndex QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QIdentityProxyModel_DataDefault(ptr.Pointer(), PointerFromQModelIndex(proxyIndex), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_FetchMore
func callbackQIdentityProxyModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::fetchMore"); signal != nil {
		signal.(func(*QModelIndex))(NewQModelIndexFromPointer(parent))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).FetchMoreDefault(NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QIdentityProxyModel) ConnectFetchMore(f func(parent *QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::fetchMore", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::fetchMore")
	}
}

func (ptr *QIdentityProxyModel) FetchMore(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_FetchMore(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

func (ptr *QIdentityProxyModel) FetchMoreDefault(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_FetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

//export callbackQIdentityProxyModel_Flags
func callbackQIdentityProxyModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::flags"); signal != nil {
		return C.longlong(signal.(func(*QModelIndex) Qt__ItemFlag)(NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQIdentityProxyModelFromPointer(ptr).FlagsDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QIdentityProxyModel) ConnectFlags(f func(index *QModelIndex) Qt__ItemFlag) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::flags", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectFlags() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::flags")
	}
}

func (ptr *QIdentityProxyModel) Flags(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QIdentityProxyModel_Flags(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QIdentityProxyModel) FlagsDefault(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QIdentityProxyModel_FlagsDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQIdentityProxyModel_HasChildren
func callbackQIdentityProxyModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).HasChildrenDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QIdentityProxyModel) ConnectHasChildren(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::hasChildren", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectHasChildren() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::hasChildren")
	}
}

func (ptr *QIdentityProxyModel) HasChildren(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_HasChildren(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) HasChildrenDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_HasChildrenDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_MimeTypes
func callbackQIdentityProxyModel_MimeTypes(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQIdentityProxyModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QIdentityProxyModel) ConnectMimeTypes(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mimeTypes", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMimeTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::mimeTypes")
	}
}

func (ptr *QIdentityProxyModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QIdentityProxyModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QIdentityProxyModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QIdentityProxyModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQIdentityProxyModel_ResetInternalData
func callbackQIdentityProxyModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::resetInternalData"); signal != nil {
		signal.(func())()
	} else {
		NewQIdentityProxyModelFromPointer(ptr).ResetInternalDataDefault()
	}
}

func (ptr *QIdentityProxyModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::resetInternalData", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::resetInternalData")
	}
}

func (ptr *QIdentityProxyModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_ResetInternalData(ptr.Pointer())
	}
}

func (ptr *QIdentityProxyModel) ResetInternalDataDefault() {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_ResetInternalDataDefault(ptr.Pointer())
	}
}

//export callbackQIdentityProxyModel_Revert
func callbackQIdentityProxyModel_Revert(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQIdentityProxyModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QIdentityProxyModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::revert", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::revert")
	}
}

func (ptr *QIdentityProxyModel) Revert() {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_Revert(ptr.Pointer())
	}
}

func (ptr *QIdentityProxyModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQIdentityProxyModel_SetData
func callbackQIdentityProxyModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QVariant, int) bool)(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).SetDataDefault(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QIdentityProxyModel) ConnectSetData(f func(index *QModelIndex, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::setData", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::setData")
	}
}

func (ptr *QIdentityProxyModel) SetData(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_SetData(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) SetDataDefault(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_SetDataDefault(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_SetHeaderData
func callbackQIdentityProxyModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, Qt__Orientation, *QVariant, int) bool)(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QIdentityProxyModel) ConnectSetHeaderData(f func(section int, orientation Qt__Orientation, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::setHeaderData", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSetHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::setHeaderData")
	}
}

func (ptr *QIdentityProxyModel) SetHeaderData(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) SetHeaderDataDefault(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_Sort
func callbackQIdentityProxyModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::sort"); signal != nil {
		signal.(func(int, Qt__SortOrder))(int(int32(column)), Qt__SortOrder(order))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).SortDefault(int(int32(column)), Qt__SortOrder(order))
	}
}

func (ptr *QIdentityProxyModel) ConnectSort(f func(column int, order Qt__SortOrder)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::sort", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSort() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::sort")
	}
}

func (ptr *QIdentityProxyModel) Sort(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QIdentityProxyModel) SortDefault(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

//export callbackQIdentityProxyModel_Span
func callbackQIdentityProxyModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::span"); signal != nil {
		return PointerFromQSize(signal.(func(*QModelIndex) *QSize)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQSize(NewQIdentityProxyModelFromPointer(ptr).SpanDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QIdentityProxyModel) ConnectSpan(f func(index *QModelIndex) *QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::span", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::span")
	}
}

func (ptr *QIdentityProxyModel) Span(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QIdentityProxyModel_Span(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QIdentityProxyModel) SpanDefault(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QIdentityProxyModel_SpanDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQIdentityProxyModel_Submit
func callbackQIdentityProxyModel_Submit(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QIdentityProxyModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::submit", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::submit")
	}
}

func (ptr *QIdentityProxyModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_SupportedDragActions
func callbackQIdentityProxyModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQIdentityProxyModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QIdentityProxyModel) ConnectSupportedDragActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::supportedDragActions", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::supportedDragActions")
	}
}

func (ptr *QIdentityProxyModel) SupportedDragActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QIdentityProxyModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIdentityProxyModel) SupportedDragActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QIdentityProxyModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQIdentityProxyModel_SupportedDropActions
func callbackQIdentityProxyModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQIdentityProxyModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QIdentityProxyModel) ConnectSupportedDropActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::supportedDropActions", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectSupportedDropActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::supportedDropActions")
	}
}

func (ptr *QIdentityProxyModel) SupportedDropActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QIdentityProxyModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QIdentityProxyModel) SupportedDropActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QIdentityProxyModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQIdentityProxyModel_MoveColumns
func callbackQIdentityProxyModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).MoveColumnsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QIdentityProxyModel) ConnectMoveColumns(f func(sourceParent *QModelIndex, sourceColumn int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::moveColumns", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::moveColumns")
	}
}

func (ptr *QIdentityProxyModel) MoveColumns(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_MoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) MoveColumnsDefault(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_MoveColumnsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_MoveRows
func callbackQIdentityProxyModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).MoveRowsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QIdentityProxyModel) ConnectMoveRows(f func(sourceParent *QModelIndex, sourceRow int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::moveRows", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::moveRows")
	}
}

func (ptr *QIdentityProxyModel) MoveRows(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_MoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) MoveRowsDefault(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_MoveRowsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_TimerEvent
func callbackQIdentityProxyModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QIdentityProxyModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::timerEvent", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::timerEvent")
	}
}

func (ptr *QIdentityProxyModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QIdentityProxyModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQIdentityProxyModel_ChildEvent
func callbackQIdentityProxyModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QIdentityProxyModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::childEvent", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::childEvent")
	}
}

func (ptr *QIdentityProxyModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QIdentityProxyModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQIdentityProxyModel_ConnectNotify
func callbackQIdentityProxyModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIdentityProxyModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::connectNotify", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::connectNotify")
	}
}

func (ptr *QIdentityProxyModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIdentityProxyModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQIdentityProxyModel_CustomEvent
func callbackQIdentityProxyModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QIdentityProxyModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::customEvent", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::customEvent")
	}
}

func (ptr *QIdentityProxyModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QIdentityProxyModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQIdentityProxyModel_DeleteLater
func callbackQIdentityProxyModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQIdentityProxyModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QIdentityProxyModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::deleteLater", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::deleteLater")
	}
}

func (ptr *QIdentityProxyModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QIdentityProxyModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQIdentityProxyModel_DisconnectNotify
func callbackQIdentityProxyModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQIdentityProxyModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QIdentityProxyModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::disconnectNotify", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::disconnectNotify")
	}
}

func (ptr *QIdentityProxyModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QIdentityProxyModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QIdentityProxyModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQIdentityProxyModel_Event
func callbackQIdentityProxyModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QIdentityProxyModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::event", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::event")
	}
}

func (ptr *QIdentityProxyModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_EventFilter
func callbackQIdentityProxyModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQIdentityProxyModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QIdentityProxyModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::eventFilter", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::eventFilter")
	}
}

func (ptr *QIdentityProxyModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QIdentityProxyModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QIdentityProxyModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQIdentityProxyModel_MetaObject
func callbackQIdentityProxyModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QIdentityProxyModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQIdentityProxyModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QIdentityProxyModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::metaObject", f)
	}
}

func (ptr *QIdentityProxyModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QIdentityProxyModel::metaObject")
	}
}

func (ptr *QIdentityProxyModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QIdentityProxyModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QIdentityProxyModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QIdentityProxyModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QItemSelection struct {
	QList
}

type QItemSelection_ITF interface {
	QList_ITF
	QItemSelection_PTR() *QItemSelection
}

func (p *QItemSelection) QItemSelection_PTR() *QItemSelection {
	return p
}

func (p *QItemSelection) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QList_PTR().Pointer()
	}
	return nil
}

func (p *QItemSelection) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QList_PTR().SetPointer(ptr)
	}
}

func PointerFromQItemSelection(ptr QItemSelection_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QItemSelection_PTR().Pointer()
	}
	return nil
}

func NewQItemSelectionFromPointer(ptr unsafe.Pointer) *QItemSelection {
	var n = new(QItemSelection)
	n.SetPointer(ptr)
	return n
}

func (ptr *QItemSelection) DestroyQItemSelection() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQItemSelection() *QItemSelection {
	var tmpValue = NewQItemSelectionFromPointer(C.QItemSelection_NewQItemSelection())
	runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
	return tmpValue
}

func NewQItemSelection2(topLeft QModelIndex_ITF, bottomRight QModelIndex_ITF) *QItemSelection {
	var tmpValue = NewQItemSelectionFromPointer(C.QItemSelection_NewQItemSelection2(PointerFromQModelIndex(topLeft), PointerFromQModelIndex(bottomRight)))
	runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
	return tmpValue
}

func (ptr *QItemSelection) Contains(index QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelection_Contains(ptr.Pointer(), PointerFromQModelIndex(index)) != 0
	}
	return false
}

func (ptr *QItemSelection) Indexes() []*QModelIndex {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QModelIndex {
			var out = make([]*QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQItemSelectionFromPointer(l.data).indexes_atList(i)
			}
			return out
		}(C.QItemSelection_Indexes(ptr.Pointer()))
	}
	return nil
}

func (ptr *QItemSelection) Merge(other QItemSelection_ITF, command QItemSelectionModel__SelectionFlag) {
	if ptr.Pointer() != nil {
		C.QItemSelection_Merge(ptr.Pointer(), PointerFromQItemSelection(other), C.longlong(command))
	}
}

func (ptr *QItemSelection) Select(topLeft QModelIndex_ITF, bottomRight QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelection_Select(ptr.Pointer(), PointerFromQModelIndex(topLeft), PointerFromQModelIndex(bottomRight))
	}
}

func QItemSelection_Split(ran QItemSelectionRange_ITF, other QItemSelectionRange_ITF, result QItemSelection_ITF) {
	C.QItemSelection_QItemSelection_Split(PointerFromQItemSelectionRange(ran), PointerFromQItemSelectionRange(other), PointerFromQItemSelection(result))
}

func (ptr *QItemSelection) Split(ran QItemSelectionRange_ITF, other QItemSelectionRange_ITF, result QItemSelection_ITF) {
	C.QItemSelection_QItemSelection_Split(PointerFromQItemSelectionRange(ran), PointerFromQItemSelectionRange(other), PointerFromQItemSelection(result))
}

func (ptr *QItemSelection) indexes_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QItemSelection_indexes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//QItemSelectionModel::SelectionFlag
type QItemSelectionModel__SelectionFlag int64

const (
	QItemSelectionModel__NoUpdate       = QItemSelectionModel__SelectionFlag(0x0000)
	QItemSelectionModel__Clear          = QItemSelectionModel__SelectionFlag(0x0001)
	QItemSelectionModel__Select         = QItemSelectionModel__SelectionFlag(0x0002)
	QItemSelectionModel__Deselect       = QItemSelectionModel__SelectionFlag(0x0004)
	QItemSelectionModel__Toggle         = QItemSelectionModel__SelectionFlag(0x0008)
	QItemSelectionModel__Current        = QItemSelectionModel__SelectionFlag(0x0010)
	QItemSelectionModel__Rows           = QItemSelectionModel__SelectionFlag(0x0020)
	QItemSelectionModel__Columns        = QItemSelectionModel__SelectionFlag(0x0040)
	QItemSelectionModel__SelectCurrent  = QItemSelectionModel__SelectionFlag(QItemSelectionModel__Select | QItemSelectionModel__Current)
	QItemSelectionModel__ToggleCurrent  = QItemSelectionModel__SelectionFlag(QItemSelectionModel__Toggle | QItemSelectionModel__Current)
	QItemSelectionModel__ClearAndSelect = QItemSelectionModel__SelectionFlag(QItemSelectionModel__Clear | QItemSelectionModel__Select)
)

type QItemSelectionModel struct {
	QObject
}

type QItemSelectionModel_ITF interface {
	QObject_ITF
	QItemSelectionModel_PTR() *QItemSelectionModel
}

func (p *QItemSelectionModel) QItemSelectionModel_PTR() *QItemSelectionModel {
	return p
}

func (p *QItemSelectionModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QItemSelectionModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQItemSelectionModel(ptr QItemSelectionModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QItemSelectionModel_PTR().Pointer()
	}
	return nil
}

func NewQItemSelectionModelFromPointer(ptr unsafe.Pointer) *QItemSelectionModel {
	var n = new(QItemSelectionModel)
	n.SetPointer(ptr)
	return n
}
func NewQItemSelectionModel(model QAbstractItemModel_ITF) *QItemSelectionModel {
	var tmpValue = NewQItemSelectionModelFromPointer(C.QItemSelectionModel_NewQItemSelectionModel(PointerFromQAbstractItemModel(model)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQItemSelectionModel2(model QAbstractItemModel_ITF, parent QObject_ITF) *QItemSelectionModel {
	var tmpValue = NewQItemSelectionModelFromPointer(C.QItemSelectionModel_NewQItemSelectionModel2(PointerFromQAbstractItemModel(model), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQItemSelectionModel_Clear
func callbackQItemSelectionModel_Clear(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::clear"); signal != nil {
		signal.(func())()
	} else {
		NewQItemSelectionModelFromPointer(ptr).ClearDefault()
	}
}

func (ptr *QItemSelectionModel) ConnectClear(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::clear", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectClear() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::clear")
	}
}

func (ptr *QItemSelectionModel) Clear() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_Clear(ptr.Pointer())
	}
}

func (ptr *QItemSelectionModel) ClearDefault() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ClearDefault(ptr.Pointer())
	}
}

//export callbackQItemSelectionModel_ClearCurrentIndex
func callbackQItemSelectionModel_ClearCurrentIndex(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::clearCurrentIndex"); signal != nil {
		signal.(func())()
	} else {
		NewQItemSelectionModelFromPointer(ptr).ClearCurrentIndexDefault()
	}
}

func (ptr *QItemSelectionModel) ConnectClearCurrentIndex(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::clearCurrentIndex", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectClearCurrentIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::clearCurrentIndex")
	}
}

func (ptr *QItemSelectionModel) ClearCurrentIndex() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ClearCurrentIndex(ptr.Pointer())
	}
}

func (ptr *QItemSelectionModel) ClearCurrentIndexDefault() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ClearCurrentIndexDefault(ptr.Pointer())
	}
}

//export callbackQItemSelectionModel_ClearSelection
func callbackQItemSelectionModel_ClearSelection(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::clearSelection"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QItemSelectionModel) ConnectClearSelection(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::clearSelection", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectClearSelection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::clearSelection")
	}
}

func (ptr *QItemSelectionModel) ClearSelection() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ClearSelection(ptr.Pointer())
	}
}

func (ptr *QItemSelectionModel) ColumnIntersectsSelection(column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_ColumnIntersectsSelection(ptr.Pointer(), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQItemSelectionModel_CurrentChanged
func callbackQItemSelectionModel_CurrentChanged(ptr unsafe.Pointer, current unsafe.Pointer, previous unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::currentChanged"); signal != nil {
		signal.(func(*QModelIndex, *QModelIndex))(NewQModelIndexFromPointer(current), NewQModelIndexFromPointer(previous))
	}

}

func (ptr *QItemSelectionModel) ConnectCurrentChanged(f func(current *QModelIndex, previous *QModelIndex)) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ConnectCurrentChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::currentChanged", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectCurrentChanged() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DisconnectCurrentChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::currentChanged")
	}
}

func (ptr *QItemSelectionModel) CurrentChanged(current QModelIndex_ITF, previous QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_CurrentChanged(ptr.Pointer(), PointerFromQModelIndex(current), PointerFromQModelIndex(previous))
	}
}

//export callbackQItemSelectionModel_CurrentColumnChanged
func callbackQItemSelectionModel_CurrentColumnChanged(ptr unsafe.Pointer, current unsafe.Pointer, previous unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::currentColumnChanged"); signal != nil {
		signal.(func(*QModelIndex, *QModelIndex))(NewQModelIndexFromPointer(current), NewQModelIndexFromPointer(previous))
	}

}

func (ptr *QItemSelectionModel) ConnectCurrentColumnChanged(f func(current *QModelIndex, previous *QModelIndex)) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ConnectCurrentColumnChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::currentColumnChanged", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectCurrentColumnChanged() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DisconnectCurrentColumnChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::currentColumnChanged")
	}
}

func (ptr *QItemSelectionModel) CurrentColumnChanged(current QModelIndex_ITF, previous QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_CurrentColumnChanged(ptr.Pointer(), PointerFromQModelIndex(current), PointerFromQModelIndex(previous))
	}
}

func (ptr *QItemSelectionModel) CurrentIndex() *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QItemSelectionModel_CurrentIndex(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQItemSelectionModel_CurrentRowChanged
func callbackQItemSelectionModel_CurrentRowChanged(ptr unsafe.Pointer, current unsafe.Pointer, previous unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::currentRowChanged"); signal != nil {
		signal.(func(*QModelIndex, *QModelIndex))(NewQModelIndexFromPointer(current), NewQModelIndexFromPointer(previous))
	}

}

func (ptr *QItemSelectionModel) ConnectCurrentRowChanged(f func(current *QModelIndex, previous *QModelIndex)) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ConnectCurrentRowChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::currentRowChanged", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectCurrentRowChanged() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DisconnectCurrentRowChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::currentRowChanged")
	}
}

func (ptr *QItemSelectionModel) CurrentRowChanged(current QModelIndex_ITF, previous QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_CurrentRowChanged(ptr.Pointer(), PointerFromQModelIndex(current), PointerFromQModelIndex(previous))
	}
}

func (ptr *QItemSelectionModel) EmitSelectionChanged(newSelection QItemSelection_ITF, oldSelection QItemSelection_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_EmitSelectionChanged(ptr.Pointer(), PointerFromQItemSelection(newSelection), PointerFromQItemSelection(oldSelection))
	}
}

func (ptr *QItemSelectionModel) HasSelection() bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_HasSelection(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QItemSelectionModel) IsColumnSelected(column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_IsColumnSelected(ptr.Pointer(), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QItemSelectionModel) IsRowSelected(row int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_IsRowSelected(ptr.Pointer(), C.int(int32(row)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QItemSelectionModel) IsSelected(index QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_IsSelected(ptr.Pointer(), PointerFromQModelIndex(index)) != 0
	}
	return false
}

func (ptr *QItemSelectionModel) Model2() *QAbstractItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractItemModelFromPointer(C.QItemSelectionModel_Model2(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QItemSelectionModel) Model() *QAbstractItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractItemModelFromPointer(C.QItemSelectionModel_Model(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQItemSelectionModel_ModelChanged
func callbackQItemSelectionModel_ModelChanged(ptr unsafe.Pointer, model unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::modelChanged"); signal != nil {
		signal.(func(*QAbstractItemModel))(NewQAbstractItemModelFromPointer(model))
	}

}

func (ptr *QItemSelectionModel) ConnectModelChanged(f func(model *QAbstractItemModel)) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ConnectModelChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::modelChanged", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectModelChanged() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DisconnectModelChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::modelChanged")
	}
}

func (ptr *QItemSelectionModel) ModelChanged(model QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ModelChanged(ptr.Pointer(), PointerFromQAbstractItemModel(model))
	}
}

//export callbackQItemSelectionModel_Reset
func callbackQItemSelectionModel_Reset(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::reset"); signal != nil {
		signal.(func())()
	} else {
		NewQItemSelectionModelFromPointer(ptr).ResetDefault()
	}
}

func (ptr *QItemSelectionModel) ConnectReset(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::reset", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::reset")
	}
}

func (ptr *QItemSelectionModel) Reset() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_Reset(ptr.Pointer())
	}
}

func (ptr *QItemSelectionModel) ResetDefault() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ResetDefault(ptr.Pointer())
	}
}

func (ptr *QItemSelectionModel) RowIntersectsSelection(row int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_RowIntersectsSelection(ptr.Pointer(), C.int(int32(row)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQItemSelectionModel_Select2
func callbackQItemSelectionModel_Select2(ptr unsafe.Pointer, selection unsafe.Pointer, command C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::select2"); signal != nil {
		signal.(func(*QItemSelection, QItemSelectionModel__SelectionFlag))(NewQItemSelectionFromPointer(selection), QItemSelectionModel__SelectionFlag(command))
	} else {
		NewQItemSelectionModelFromPointer(ptr).Select2Default(NewQItemSelectionFromPointer(selection), QItemSelectionModel__SelectionFlag(command))
	}
}

func (ptr *QItemSelectionModel) ConnectSelect2(f func(selection *QItemSelection, command QItemSelectionModel__SelectionFlag)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::select2", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectSelect2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::select2")
	}
}

func (ptr *QItemSelectionModel) Select2(selection QItemSelection_ITF, command QItemSelectionModel__SelectionFlag) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_Select2(ptr.Pointer(), PointerFromQItemSelection(selection), C.longlong(command))
	}
}

func (ptr *QItemSelectionModel) Select2Default(selection QItemSelection_ITF, command QItemSelectionModel__SelectionFlag) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_Select2Default(ptr.Pointer(), PointerFromQItemSelection(selection), C.longlong(command))
	}
}

//export callbackQItemSelectionModel_Select
func callbackQItemSelectionModel_Select(ptr unsafe.Pointer, index unsafe.Pointer, command C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::select"); signal != nil {
		signal.(func(*QModelIndex, QItemSelectionModel__SelectionFlag))(NewQModelIndexFromPointer(index), QItemSelectionModel__SelectionFlag(command))
	} else {
		NewQItemSelectionModelFromPointer(ptr).SelectDefault(NewQModelIndexFromPointer(index), QItemSelectionModel__SelectionFlag(command))
	}
}

func (ptr *QItemSelectionModel) ConnectSelect(f func(index *QModelIndex, command QItemSelectionModel__SelectionFlag)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::select", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectSelect() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::select")
	}
}

func (ptr *QItemSelectionModel) Select(index QModelIndex_ITF, command QItemSelectionModel__SelectionFlag) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_Select(ptr.Pointer(), PointerFromQModelIndex(index), C.longlong(command))
	}
}

func (ptr *QItemSelectionModel) SelectDefault(index QModelIndex_ITF, command QItemSelectionModel__SelectionFlag) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_SelectDefault(ptr.Pointer(), PointerFromQModelIndex(index), C.longlong(command))
	}
}

func (ptr *QItemSelectionModel) SelectedColumns(row int) []*QModelIndex {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QModelIndex {
			var out = make([]*QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQItemSelectionModelFromPointer(l.data).selectedColumns_atList(i)
			}
			return out
		}(C.QItemSelectionModel_SelectedColumns(ptr.Pointer(), C.int(int32(row))))
	}
	return nil
}

func (ptr *QItemSelectionModel) SelectedIndexes() []*QModelIndex {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QModelIndex {
			var out = make([]*QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQItemSelectionModelFromPointer(l.data).selectedIndexes_atList(i)
			}
			return out
		}(C.QItemSelectionModel_SelectedIndexes(ptr.Pointer()))
	}
	return nil
}

func (ptr *QItemSelectionModel) SelectedRows(column int) []*QModelIndex {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QModelIndex {
			var out = make([]*QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQItemSelectionModelFromPointer(l.data).selectedRows_atList(i)
			}
			return out
		}(C.QItemSelectionModel_SelectedRows(ptr.Pointer(), C.int(int32(column))))
	}
	return nil
}

func (ptr *QItemSelectionModel) Selection() *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QItemSelectionModel_Selection(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

//export callbackQItemSelectionModel_SelectionChanged
func callbackQItemSelectionModel_SelectionChanged(ptr unsafe.Pointer, selected unsafe.Pointer, deselected unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::selectionChanged"); signal != nil {
		signal.(func(*QItemSelection, *QItemSelection))(NewQItemSelectionFromPointer(selected), NewQItemSelectionFromPointer(deselected))
	}

}

func (ptr *QItemSelectionModel) ConnectSelectionChanged(f func(selected *QItemSelection, deselected *QItemSelection)) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ConnectSelectionChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::selectionChanged", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectSelectionChanged() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DisconnectSelectionChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::selectionChanged")
	}
}

func (ptr *QItemSelectionModel) SelectionChanged(selected QItemSelection_ITF, deselected QItemSelection_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_SelectionChanged(ptr.Pointer(), PointerFromQItemSelection(selected), PointerFromQItemSelection(deselected))
	}
}

//export callbackQItemSelectionModel_SetCurrentIndex
func callbackQItemSelectionModel_SetCurrentIndex(ptr unsafe.Pointer, index unsafe.Pointer, command C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::setCurrentIndex"); signal != nil {
		signal.(func(*QModelIndex, QItemSelectionModel__SelectionFlag))(NewQModelIndexFromPointer(index), QItemSelectionModel__SelectionFlag(command))
	} else {
		NewQItemSelectionModelFromPointer(ptr).SetCurrentIndexDefault(NewQModelIndexFromPointer(index), QItemSelectionModel__SelectionFlag(command))
	}
}

func (ptr *QItemSelectionModel) ConnectSetCurrentIndex(f func(index *QModelIndex, command QItemSelectionModel__SelectionFlag)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::setCurrentIndex", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectSetCurrentIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::setCurrentIndex")
	}
}

func (ptr *QItemSelectionModel) SetCurrentIndex(index QModelIndex_ITF, command QItemSelectionModel__SelectionFlag) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_SetCurrentIndex(ptr.Pointer(), PointerFromQModelIndex(index), C.longlong(command))
	}
}

func (ptr *QItemSelectionModel) SetCurrentIndexDefault(index QModelIndex_ITF, command QItemSelectionModel__SelectionFlag) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_SetCurrentIndexDefault(ptr.Pointer(), PointerFromQModelIndex(index), C.longlong(command))
	}
}

func (ptr *QItemSelectionModel) SetModel(model QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_SetModel(ptr.Pointer(), PointerFromQAbstractItemModel(model))
	}
}

//export callbackQItemSelectionModel_DestroyQItemSelectionModel
func callbackQItemSelectionModel_DestroyQItemSelectionModel(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::~QItemSelectionModel"); signal != nil {
		signal.(func())()
	} else {
		NewQItemSelectionModelFromPointer(ptr).DestroyQItemSelectionModelDefault()
	}
}

func (ptr *QItemSelectionModel) ConnectDestroyQItemSelectionModel(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::~QItemSelectionModel", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectDestroyQItemSelectionModel() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::~QItemSelectionModel")
	}
}

func (ptr *QItemSelectionModel) DestroyQItemSelectionModel() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DestroyQItemSelectionModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QItemSelectionModel) DestroyQItemSelectionModelDefault() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DestroyQItemSelectionModelDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QItemSelectionModel) selectedColumns_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QItemSelectionModel_selectedColumns_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QItemSelectionModel) selectedIndexes_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QItemSelectionModel_selectedIndexes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QItemSelectionModel) selectedRows_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QItemSelectionModel_selectedRows_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQItemSelectionModel_TimerEvent
func callbackQItemSelectionModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQItemSelectionModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QItemSelectionModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::timerEvent", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::timerEvent")
	}
}

func (ptr *QItemSelectionModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QItemSelectionModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQItemSelectionModel_ChildEvent
func callbackQItemSelectionModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQItemSelectionModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QItemSelectionModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::childEvent", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::childEvent")
	}
}

func (ptr *QItemSelectionModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QItemSelectionModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQItemSelectionModel_ConnectNotify
func callbackQItemSelectionModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQItemSelectionModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QItemSelectionModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::connectNotify", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::connectNotify")
	}
}

func (ptr *QItemSelectionModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QItemSelectionModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQItemSelectionModel_CustomEvent
func callbackQItemSelectionModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQItemSelectionModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QItemSelectionModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::customEvent", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::customEvent")
	}
}

func (ptr *QItemSelectionModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QItemSelectionModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQItemSelectionModel_DeleteLater
func callbackQItemSelectionModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQItemSelectionModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QItemSelectionModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::deleteLater", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::deleteLater")
	}
}

func (ptr *QItemSelectionModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QItemSelectionModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQItemSelectionModel_DisconnectNotify
func callbackQItemSelectionModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQItemSelectionModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QItemSelectionModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::disconnectNotify", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::disconnectNotify")
	}
}

func (ptr *QItemSelectionModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QItemSelectionModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQItemSelectionModel_Event
func callbackQItemSelectionModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQItemSelectionModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QItemSelectionModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::event", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::event")
	}
}

func (ptr *QItemSelectionModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QItemSelectionModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQItemSelectionModel_EventFilter
func callbackQItemSelectionModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQItemSelectionModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QItemSelectionModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::eventFilter", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::eventFilter")
	}
}

func (ptr *QItemSelectionModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QItemSelectionModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQItemSelectionModel_MetaObject
func callbackQItemSelectionModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QItemSelectionModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQItemSelectionModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QItemSelectionModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::metaObject", f)
	}
}

func (ptr *QItemSelectionModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QItemSelectionModel::metaObject")
	}
}

func (ptr *QItemSelectionModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QItemSelectionModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QItemSelectionModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QItemSelectionModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QItemSelectionRange struct {
	ptr unsafe.Pointer
}

type QItemSelectionRange_ITF interface {
	QItemSelectionRange_PTR() *QItemSelectionRange
}

func (p *QItemSelectionRange) QItemSelectionRange_PTR() *QItemSelectionRange {
	return p
}

func (p *QItemSelectionRange) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QItemSelectionRange) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQItemSelectionRange(ptr QItemSelectionRange_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QItemSelectionRange_PTR().Pointer()
	}
	return nil
}

func NewQItemSelectionRangeFromPointer(ptr unsafe.Pointer) *QItemSelectionRange {
	var n = new(QItemSelectionRange)
	n.SetPointer(ptr)
	return n
}

func (ptr *QItemSelectionRange) DestroyQItemSelectionRange() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QItemSelectionRange) Intersected(other QItemSelectionRange_ITF) *QItemSelectionRange {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionRangeFromPointer(C.QItemSelectionRange_Intersected(ptr.Pointer(), PointerFromQItemSelectionRange(other)))
		runtime.SetFinalizer(tmpValue, (*QItemSelectionRange).DestroyQItemSelectionRange)
		return tmpValue
	}
	return nil
}

func (ptr *QItemSelectionRange) Intersects(other QItemSelectionRange_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionRange_Intersects(ptr.Pointer(), PointerFromQItemSelectionRange(other)) != 0
	}
	return false
}

func NewQItemSelectionRange() *QItemSelectionRange {
	var tmpValue = NewQItemSelectionRangeFromPointer(C.QItemSelectionRange_NewQItemSelectionRange())
	runtime.SetFinalizer(tmpValue, (*QItemSelectionRange).DestroyQItemSelectionRange)
	return tmpValue
}

func NewQItemSelectionRange3(other QItemSelectionRange_ITF) *QItemSelectionRange {
	var tmpValue = NewQItemSelectionRangeFromPointer(C.QItemSelectionRange_NewQItemSelectionRange3(PointerFromQItemSelectionRange(other)))
	runtime.SetFinalizer(tmpValue, (*QItemSelectionRange).DestroyQItemSelectionRange)
	return tmpValue
}

func NewQItemSelectionRange2(other QItemSelectionRange_ITF) *QItemSelectionRange {
	var tmpValue = NewQItemSelectionRangeFromPointer(C.QItemSelectionRange_NewQItemSelectionRange2(PointerFromQItemSelectionRange(other)))
	runtime.SetFinalizer(tmpValue, (*QItemSelectionRange).DestroyQItemSelectionRange)
	return tmpValue
}

func NewQItemSelectionRange5(index QModelIndex_ITF) *QItemSelectionRange {
	var tmpValue = NewQItemSelectionRangeFromPointer(C.QItemSelectionRange_NewQItemSelectionRange5(PointerFromQModelIndex(index)))
	runtime.SetFinalizer(tmpValue, (*QItemSelectionRange).DestroyQItemSelectionRange)
	return tmpValue
}

func NewQItemSelectionRange4(topLeft QModelIndex_ITF, bottomRight QModelIndex_ITF) *QItemSelectionRange {
	var tmpValue = NewQItemSelectionRangeFromPointer(C.QItemSelectionRange_NewQItemSelectionRange4(PointerFromQModelIndex(topLeft), PointerFromQModelIndex(bottomRight)))
	runtime.SetFinalizer(tmpValue, (*QItemSelectionRange).DestroyQItemSelectionRange)
	return tmpValue
}

func (ptr *QItemSelectionRange) Bottom() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QItemSelectionRange_Bottom(ptr.Pointer())))
	}
	return 0
}

func (ptr *QItemSelectionRange) BottomRight() *QPersistentModelIndex {
	if ptr.Pointer() != nil {
		return NewQPersistentModelIndexFromPointer(C.QItemSelectionRange_BottomRight(ptr.Pointer()))
	}
	return nil
}

func (ptr *QItemSelectionRange) Contains(index QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionRange_Contains(ptr.Pointer(), PointerFromQModelIndex(index)) != 0
	}
	return false
}

func (ptr *QItemSelectionRange) Contains2(row int, column int, parentIndex QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionRange_Contains2(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parentIndex)) != 0
	}
	return false
}

func (ptr *QItemSelectionRange) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QItemSelectionRange_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QItemSelectionRange) Indexes() []*QModelIndex {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QModelIndex {
			var out = make([]*QModelIndex, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQItemSelectionRangeFromPointer(l.data).indexes_atList(i)
			}
			return out
		}(C.QItemSelectionRange_Indexes(ptr.Pointer()))
	}
	return nil
}

func (ptr *QItemSelectionRange) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionRange_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QItemSelectionRange) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QItemSelectionRange_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QItemSelectionRange) Left() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QItemSelectionRange_Left(ptr.Pointer())))
	}
	return 0
}

func (ptr *QItemSelectionRange) Model() *QAbstractItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractItemModelFromPointer(C.QItemSelectionRange_Model(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QItemSelectionRange) Parent() *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QItemSelectionRange_Parent(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QItemSelectionRange) Right() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QItemSelectionRange_Right(ptr.Pointer())))
	}
	return 0
}

func (ptr *QItemSelectionRange) Swap(other QItemSelectionRange_ITF) {
	if ptr.Pointer() != nil {
		C.QItemSelectionRange_Swap(ptr.Pointer(), PointerFromQItemSelectionRange(other))
	}
}

func (ptr *QItemSelectionRange) Top() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QItemSelectionRange_Top(ptr.Pointer())))
	}
	return 0
}

func (ptr *QItemSelectionRange) TopLeft() *QPersistentModelIndex {
	if ptr.Pointer() != nil {
		return NewQPersistentModelIndexFromPointer(C.QItemSelectionRange_TopLeft(ptr.Pointer()))
	}
	return nil
}

func (ptr *QItemSelectionRange) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QItemSelectionRange_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QItemSelectionRange) indexes_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QItemSelectionRange_indexes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

type QJsonArray struct {
	ptr unsafe.Pointer
}

type QJsonArray_ITF interface {
	QJsonArray_PTR() *QJsonArray
}

func (p *QJsonArray) QJsonArray_PTR() *QJsonArray {
	return p
}

func (p *QJsonArray) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QJsonArray) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQJsonArray(ptr QJsonArray_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QJsonArray_PTR().Pointer()
	}
	return nil
}

func NewQJsonArrayFromPointer(ptr unsafe.Pointer) *QJsonArray {
	var n = new(QJsonArray)
	n.SetPointer(ptr)
	return n
}
func NewQJsonArray() *QJsonArray {
	var tmpValue = NewQJsonArrayFromPointer(C.QJsonArray_NewQJsonArray())
	runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
	return tmpValue
}

func NewQJsonArray3(other QJsonArray_ITF) *QJsonArray {
	var tmpValue = NewQJsonArrayFromPointer(C.QJsonArray_NewQJsonArray3(PointerFromQJsonArray(other)))
	runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
	return tmpValue
}

func (ptr *QJsonArray) Append(value QJsonValue_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonArray_Append(ptr.Pointer(), PointerFromQJsonValue(value))
	}
}

func (ptr *QJsonArray) At(i int) *QJsonValue {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonValueFromPointer(C.QJsonArray_At(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonArray) Contains(value QJsonValue_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QJsonArray_Contains(ptr.Pointer(), PointerFromQJsonValue(value)) != 0
	}
	return false
}

func (ptr *QJsonArray) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QJsonArray_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QJsonArray) Empty() bool {
	if ptr.Pointer() != nil {
		return C.QJsonArray_Empty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonArray) First() *QJsonValue {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonValueFromPointer(C.QJsonArray_First(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func QJsonArray_FromStringList(list []string) *QJsonArray {
	var listC = C.CString(strings.Join(list, "|"))
	defer C.free(unsafe.Pointer(listC))
	var tmpValue = NewQJsonArrayFromPointer(C.QJsonArray_QJsonArray_FromStringList(listC))
	runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
	return tmpValue
}

func (ptr *QJsonArray) FromStringList(list []string) *QJsonArray {
	var listC = C.CString(strings.Join(list, "|"))
	defer C.free(unsafe.Pointer(listC))
	var tmpValue = NewQJsonArrayFromPointer(C.QJsonArray_QJsonArray_FromStringList(listC))
	runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
	return tmpValue
}

func (ptr *QJsonArray) Insert(i int, value QJsonValue_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonArray_Insert(ptr.Pointer(), C.int(int32(i)), PointerFromQJsonValue(value))
	}
}

func (ptr *QJsonArray) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QJsonArray_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonArray) Last() *QJsonValue {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonValueFromPointer(C.QJsonArray_Last(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonArray) Pop_back() {
	if ptr.Pointer() != nil {
		C.QJsonArray_Pop_back(ptr.Pointer())
	}
}

func (ptr *QJsonArray) Pop_front() {
	if ptr.Pointer() != nil {
		C.QJsonArray_Pop_front(ptr.Pointer())
	}
}

func (ptr *QJsonArray) Prepend(value QJsonValue_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonArray_Prepend(ptr.Pointer(), PointerFromQJsonValue(value))
	}
}

func (ptr *QJsonArray) Push_back(value QJsonValue_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonArray_Push_back(ptr.Pointer(), PointerFromQJsonValue(value))
	}
}

func (ptr *QJsonArray) Push_front(value QJsonValue_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonArray_Push_front(ptr.Pointer(), PointerFromQJsonValue(value))
	}
}

func (ptr *QJsonArray) RemoveAt(i int) {
	if ptr.Pointer() != nil {
		C.QJsonArray_RemoveAt(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QJsonArray) RemoveFirst() {
	if ptr.Pointer() != nil {
		C.QJsonArray_RemoveFirst(ptr.Pointer())
	}
}

func (ptr *QJsonArray) RemoveLast() {
	if ptr.Pointer() != nil {
		C.QJsonArray_RemoveLast(ptr.Pointer())
	}
}

func (ptr *QJsonArray) Replace(i int, value QJsonValue_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonArray_Replace(ptr.Pointer(), C.int(int32(i)), PointerFromQJsonValue(value))
	}
}

func (ptr *QJsonArray) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QJsonArray_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QJsonArray) TakeAt(i int) *QJsonValue {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonValueFromPointer(C.QJsonArray_TakeAt(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonArray) ToVariantList() []*QVariant {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QVariant {
			var out = make([]*QVariant, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQJsonArrayFromPointer(l.data).toVariantList_atList(i)
			}
			return out
		}(C.QJsonArray_ToVariantList(ptr.Pointer()))
	}
	return nil
}

func (ptr *QJsonArray) DestroyQJsonArray() {
	if ptr.Pointer() != nil {
		C.QJsonArray_DestroyQJsonArray(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QJsonArray) toVariantList_atList(i int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QJsonArray_toVariantList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//QJsonDocument::DataValidation
type QJsonDocument__DataValidation int64

const (
	QJsonDocument__Validate         = QJsonDocument__DataValidation(0)
	QJsonDocument__BypassValidation = QJsonDocument__DataValidation(1)
)

//QJsonDocument::JsonFormat
type QJsonDocument__JsonFormat int64

const (
	QJsonDocument__Indented = QJsonDocument__JsonFormat(0)
	QJsonDocument__Compact  = QJsonDocument__JsonFormat(1)
)

type QJsonDocument struct {
	ptr unsafe.Pointer
}

type QJsonDocument_ITF interface {
	QJsonDocument_PTR() *QJsonDocument
}

func (p *QJsonDocument) QJsonDocument_PTR() *QJsonDocument {
	return p
}

func (p *QJsonDocument) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QJsonDocument) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQJsonDocument(ptr QJsonDocument_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QJsonDocument_PTR().Pointer()
	}
	return nil
}

func NewQJsonDocumentFromPointer(ptr unsafe.Pointer) *QJsonDocument {
	var n = new(QJsonDocument)
	n.SetPointer(ptr)
	return n
}
func NewQJsonDocument() *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_NewQJsonDocument())
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func NewQJsonDocument3(array QJsonArray_ITF) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_NewQJsonDocument3(PointerFromQJsonArray(array)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func NewQJsonDocument4(other QJsonDocument_ITF) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_NewQJsonDocument4(PointerFromQJsonDocument(other)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func NewQJsonDocument2(object QJsonObject_ITF) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_NewQJsonDocument2(PointerFromQJsonObject(object)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func (ptr *QJsonDocument) Array() *QJsonArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonArrayFromPointer(C.QJsonDocument_Array(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
		return tmpValue
	}
	return nil
}

func QJsonDocument_FromBinaryData(data QByteArray_ITF, validation QJsonDocument__DataValidation) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromBinaryData(PointerFromQByteArray(data), C.longlong(validation)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func (ptr *QJsonDocument) FromBinaryData(data QByteArray_ITF, validation QJsonDocument__DataValidation) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromBinaryData(PointerFromQByteArray(data), C.longlong(validation)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func QJsonDocument_FromJson(json QByteArray_ITF, error QJsonParseError_ITF) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromJson(PointerFromQByteArray(json), PointerFromQJsonParseError(error)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func (ptr *QJsonDocument) FromJson(json QByteArray_ITF, error QJsonParseError_ITF) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromJson(PointerFromQByteArray(json), PointerFromQJsonParseError(error)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func QJsonDocument_FromRawData(data string, size int, validation QJsonDocument__DataValidation) *QJsonDocument {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromRawData(dataC, C.int(int32(size)), C.longlong(validation)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func (ptr *QJsonDocument) FromRawData(data string, size int, validation QJsonDocument__DataValidation) *QJsonDocument {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromRawData(dataC, C.int(int32(size)), C.longlong(validation)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func QJsonDocument_FromVariant(variant QVariant_ITF) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromVariant(PointerFromQVariant(variant)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func (ptr *QJsonDocument) FromVariant(variant QVariant_ITF) *QJsonDocument {
	var tmpValue = NewQJsonDocumentFromPointer(C.QJsonDocument_QJsonDocument_FromVariant(PointerFromQVariant(variant)))
	runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
	return tmpValue
}

func (ptr *QJsonDocument) IsArray() bool {
	if ptr.Pointer() != nil {
		return C.QJsonDocument_IsArray(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonDocument) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QJsonDocument_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonDocument) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QJsonDocument_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonDocument) IsObject() bool {
	if ptr.Pointer() != nil {
		return C.QJsonDocument_IsObject(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonDocument) Object() *QJsonObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonObjectFromPointer(C.QJsonDocument_Object(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonDocument) RawData(size int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QJsonDocument_RawData(ptr.Pointer(), C.int(int32(size))))
	}
	return ""
}

func (ptr *QJsonDocument) SetArray(array QJsonArray_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonDocument_SetArray(ptr.Pointer(), PointerFromQJsonArray(array))
	}
}

func (ptr *QJsonDocument) SetObject(object QJsonObject_ITF) {
	if ptr.Pointer() != nil {
		C.QJsonDocument_SetObject(ptr.Pointer(), PointerFromQJsonObject(object))
	}
}

func (ptr *QJsonDocument) ToBinaryData() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QJsonDocument_ToBinaryData(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonDocument) ToJson(format QJsonDocument__JsonFormat) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QJsonDocument_ToJson(ptr.Pointer(), C.longlong(format)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonDocument) ToVariant() *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QJsonDocument_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonDocument) DestroyQJsonDocument() {
	if ptr.Pointer() != nil {
		C.QJsonDocument_DestroyQJsonDocument(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QJsonObject struct {
	ptr unsafe.Pointer
}

type QJsonObject_ITF interface {
	QJsonObject_PTR() *QJsonObject
}

func (p *QJsonObject) QJsonObject_PTR() *QJsonObject {
	return p
}

func (p *QJsonObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QJsonObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQJsonObject(ptr QJsonObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QJsonObject_PTR().Pointer()
	}
	return nil
}

func NewQJsonObjectFromPointer(ptr unsafe.Pointer) *QJsonObject {
	var n = new(QJsonObject)
	n.SetPointer(ptr)
	return n
}
func NewQJsonObject() *QJsonObject {
	var tmpValue = NewQJsonObjectFromPointer(C.QJsonObject_NewQJsonObject())
	runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
	return tmpValue
}

func NewQJsonObject3(other QJsonObject_ITF) *QJsonObject {
	var tmpValue = NewQJsonObjectFromPointer(C.QJsonObject_NewQJsonObject3(PointerFromQJsonObject(other)))
	runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
	return tmpValue
}

func (ptr *QJsonObject) Contains2(key QLatin1String_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QJsonObject_Contains2(ptr.Pointer(), PointerFromQLatin1String(key)) != 0
	}
	return false
}

func (ptr *QJsonObject) Contains(key string) bool {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return C.QJsonObject_Contains(ptr.Pointer(), keyC) != 0
	}
	return false
}

func (ptr *QJsonObject) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QJsonObject_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QJsonObject) Empty() bool {
	if ptr.Pointer() != nil {
		return C.QJsonObject_Empty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonObject) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QJsonObject_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonObject) Keys() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QJsonObject_Keys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QJsonObject) Length() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QJsonObject_Length(ptr.Pointer())))
	}
	return 0
}

func (ptr *QJsonObject) Remove(key string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QJsonObject_Remove(ptr.Pointer(), keyC)
	}
}

func (ptr *QJsonObject) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QJsonObject_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QJsonObject) Take(key string) *QJsonValue {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = NewQJsonValueFromPointer(C.QJsonObject_Take(ptr.Pointer(), keyC))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonObject) Value2(key QLatin1String_ITF) *QJsonValue {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonValueFromPointer(C.QJsonObject_Value2(ptr.Pointer(), PointerFromQLatin1String(key)))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonObject) Value(key string) *QJsonValue {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = NewQJsonValueFromPointer(C.QJsonObject_Value(ptr.Pointer(), keyC))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonObject) DestroyQJsonObject() {
	if ptr.Pointer() != nil {
		C.QJsonObject_DestroyQJsonObject(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QJsonParseError::ParseError
type QJsonParseError__ParseError int64

const (
	QJsonParseError__NoError               = QJsonParseError__ParseError(0)
	QJsonParseError__UnterminatedObject    = QJsonParseError__ParseError(1)
	QJsonParseError__MissingNameSeparator  = QJsonParseError__ParseError(2)
	QJsonParseError__UnterminatedArray     = QJsonParseError__ParseError(3)
	QJsonParseError__MissingValueSeparator = QJsonParseError__ParseError(4)
	QJsonParseError__IllegalValue          = QJsonParseError__ParseError(5)
	QJsonParseError__TerminationByNumber   = QJsonParseError__ParseError(6)
	QJsonParseError__IllegalNumber         = QJsonParseError__ParseError(7)
	QJsonParseError__IllegalEscapeSequence = QJsonParseError__ParseError(8)
	QJsonParseError__IllegalUTF8String     = QJsonParseError__ParseError(9)
	QJsonParseError__UnterminatedString    = QJsonParseError__ParseError(10)
	QJsonParseError__MissingObject         = QJsonParseError__ParseError(11)
	QJsonParseError__DeepNesting           = QJsonParseError__ParseError(12)
	QJsonParseError__DocumentTooLarge      = QJsonParseError__ParseError(13)
	QJsonParseError__GarbageAtEnd          = QJsonParseError__ParseError(14)
)

type QJsonParseError struct {
	ptr unsafe.Pointer
}

type QJsonParseError_ITF interface {
	QJsonParseError_PTR() *QJsonParseError
}

func (p *QJsonParseError) QJsonParseError_PTR() *QJsonParseError {
	return p
}

func (p *QJsonParseError) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QJsonParseError) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQJsonParseError(ptr QJsonParseError_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QJsonParseError_PTR().Pointer()
	}
	return nil
}

func NewQJsonParseErrorFromPointer(ptr unsafe.Pointer) *QJsonParseError {
	var n = new(QJsonParseError)
	n.SetPointer(ptr)
	return n
}

func (ptr *QJsonParseError) DestroyQJsonParseError() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QJsonParseError) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QJsonParseError_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QJsonParseError) Error() QJsonParseError__ParseError {
	if ptr.Pointer() != nil {
		return QJsonParseError__ParseError(C.QJsonParseError_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QJsonParseError) SetError(vpa QJsonParseError__ParseError) {
	if ptr.Pointer() != nil {
		C.QJsonParseError_SetError(ptr.Pointer(), C.longlong(vpa))
	}
}

func (ptr *QJsonParseError) Offset() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QJsonParseError_Offset(ptr.Pointer())))
	}
	return 0
}

func (ptr *QJsonParseError) SetOffset(vin int) {
	if ptr.Pointer() != nil {
		C.QJsonParseError_SetOffset(ptr.Pointer(), C.int(int32(vin)))
	}
}

//QJsonValue::Type
type QJsonValue__Type int64

const (
	QJsonValue__Null      = QJsonValue__Type(0x0)
	QJsonValue__Bool      = QJsonValue__Type(0x1)
	QJsonValue__Double    = QJsonValue__Type(0x2)
	QJsonValue__String    = QJsonValue__Type(0x3)
	QJsonValue__Array     = QJsonValue__Type(0x4)
	QJsonValue__Object    = QJsonValue__Type(0x5)
	QJsonValue__Undefined = QJsonValue__Type(0x80)
)

type QJsonValue struct {
	ptr unsafe.Pointer
}

type QJsonValue_ITF interface {
	QJsonValue_PTR() *QJsonValue
}

func (p *QJsonValue) QJsonValue_PTR() *QJsonValue {
	return p
}

func (p *QJsonValue) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QJsonValue) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQJsonValue(ptr QJsonValue_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QJsonValue_PTR().Pointer()
	}
	return nil
}

func NewQJsonValueFromPointer(ptr unsafe.Pointer) *QJsonValue {
	var n = new(QJsonValue)
	n.SetPointer(ptr)
	return n
}
func NewQJsonValue7(s QLatin1String_ITF) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue7(PointerFromQLatin1String(s)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue(ty QJsonValue__Type) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue(C.longlong(ty)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue2(b bool) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue2(C.char(int8(qt.GoBoolToInt(b)))))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue9(a QJsonArray_ITF) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue9(PointerFromQJsonArray(a)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue10(o QJsonObject_ITF) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue10(PointerFromQJsonObject(o)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue11(other QJsonValue_ITF) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue11(PointerFromQJsonValue(other)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue6(s string) *QJsonValue {
	var sC = C.CString(s)
	defer C.free(unsafe.Pointer(sC))
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue6(sC))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue8(s string) *QJsonValue {
	var sC = C.CString(s)
	defer C.free(unsafe.Pointer(sC))
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue8(sC))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue3(n float64) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue3(C.double(n)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue4(n int) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue4(C.int(int32(n))))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func NewQJsonValue5(n int64) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_NewQJsonValue5(C.longlong(n)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func QJsonValue_FromVariant(variant QVariant_ITF) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_QJsonValue_FromVariant(PointerFromQVariant(variant)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func (ptr *QJsonValue) FromVariant(variant QVariant_ITF) *QJsonValue {
	var tmpValue = NewQJsonValueFromPointer(C.QJsonValue_QJsonValue_FromVariant(PointerFromQVariant(variant)))
	runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
	return tmpValue
}

func (ptr *QJsonValue) IsArray() bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_IsArray(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonValue) IsBool() bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_IsBool(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonValue) IsDouble() bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_IsDouble(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonValue) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonValue) IsObject() bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_IsObject(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonValue) IsString() bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_IsString(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonValue) IsUndefined() bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_IsUndefined(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QJsonValue) ToArray2() *QJsonArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonArrayFromPointer(C.QJsonValue_ToArray2(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonValue) ToArray(defaultValue QJsonArray_ITF) *QJsonArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonArrayFromPointer(C.QJsonValue_ToArray(ptr.Pointer(), PointerFromQJsonArray(defaultValue)))
		runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonValue) ToBool(defaultValue bool) bool {
	if ptr.Pointer() != nil {
		return C.QJsonValue_ToBool(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(defaultValue)))) != 0
	}
	return false
}

func (ptr *QJsonValue) ToDouble(defaultValue float64) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QJsonValue_ToDouble(ptr.Pointer(), C.double(defaultValue)))
	}
	return 0
}

func (ptr *QJsonValue) ToInt(defaultValue int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QJsonValue_ToInt(ptr.Pointer(), C.int(int32(defaultValue)))))
	}
	return 0
}

func (ptr *QJsonValue) ToObject2() *QJsonObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonObjectFromPointer(C.QJsonValue_ToObject2(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonValue) ToObject(defaultValue QJsonObject_ITF) *QJsonObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonObjectFromPointer(C.QJsonValue_ToObject(ptr.Pointer(), PointerFromQJsonObject(defaultValue)))
		runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonValue) ToString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QJsonValue_ToString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QJsonValue) ToString2(defaultValue string) string {
	if ptr.Pointer() != nil {
		var defaultValueC = C.CString(defaultValue)
		defer C.free(unsafe.Pointer(defaultValueC))
		return cGoUnpackString(C.QJsonValue_ToString2(ptr.Pointer(), defaultValueC))
	}
	return ""
}

func (ptr *QJsonValue) ToVariant() *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QJsonValue_ToVariant(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QJsonValue) Type() QJsonValue__Type {
	if ptr.Pointer() != nil {
		return QJsonValue__Type(C.QJsonValue_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QJsonValue) DestroyQJsonValue() {
	if ptr.Pointer() != nil {
		C.QJsonValue_DestroyQJsonValue(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QLatin1Char struct {
	ptr unsafe.Pointer
}

type QLatin1Char_ITF interface {
	QLatin1Char_PTR() *QLatin1Char
}

func (p *QLatin1Char) QLatin1Char_PTR() *QLatin1Char {
	return p
}

func (p *QLatin1Char) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLatin1Char) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLatin1Char(ptr QLatin1Char_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLatin1Char_PTR().Pointer()
	}
	return nil
}

func NewQLatin1CharFromPointer(ptr unsafe.Pointer) *QLatin1Char {
	var n = new(QLatin1Char)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLatin1Char) DestroyQLatin1Char() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQLatin1Char(c string) *QLatin1Char {
	var cC = C.CString(c)
	defer C.free(unsafe.Pointer(cC))
	var tmpValue = NewQLatin1CharFromPointer(C.QLatin1Char_NewQLatin1Char(cC))
	runtime.SetFinalizer(tmpValue, (*QLatin1Char).DestroyQLatin1Char)
	return tmpValue
}

func (ptr *QLatin1Char) ToLatin1() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLatin1Char_ToLatin1(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLatin1Char) Unicode() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QLatin1Char_Unicode(ptr.Pointer()))
	}
	return 0
}

type QLatin1String struct {
	ptr unsafe.Pointer
}

type QLatin1String_ITF interface {
	QLatin1String_PTR() *QLatin1String
}

func (p *QLatin1String) QLatin1String_PTR() *QLatin1String {
	return p
}

func (p *QLatin1String) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLatin1String) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLatin1String(ptr QLatin1String_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLatin1String_PTR().Pointer()
	}
	return nil
}

func NewQLatin1StringFromPointer(ptr unsafe.Pointer) *QLatin1String {
	var n = new(QLatin1String)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLatin1String) DestroyQLatin1String() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQLatin1String() *QLatin1String {
	var tmpValue = NewQLatin1StringFromPointer(C.QLatin1String_NewQLatin1String())
	runtime.SetFinalizer(tmpValue, (*QLatin1String).DestroyQLatin1String)
	return tmpValue
}

func NewQLatin1String4(str QByteArray_ITF) *QLatin1String {
	var tmpValue = NewQLatin1StringFromPointer(C.QLatin1String_NewQLatin1String4(PointerFromQByteArray(str)))
	runtime.SetFinalizer(tmpValue, (*QLatin1String).DestroyQLatin1String)
	return tmpValue
}

func NewQLatin1String2(str string) *QLatin1String {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	var tmpValue = NewQLatin1StringFromPointer(C.QLatin1String_NewQLatin1String2(strC))
	runtime.SetFinalizer(tmpValue, (*QLatin1String).DestroyQLatin1String)
	return tmpValue
}

func NewQLatin1String3(str string, size int) *QLatin1String {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	var tmpValue = NewQLatin1StringFromPointer(C.QLatin1String_NewQLatin1String3(strC, C.int(int32(size))))
	runtime.SetFinalizer(tmpValue, (*QLatin1String).DestroyQLatin1String)
	return tmpValue
}

func (ptr *QLatin1String) Data() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLatin1String_Data(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLatin1String) Latin1() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLatin1String_Latin1(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLatin1String) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLatin1String_Size(ptr.Pointer())))
	}
	return 0
}

//QLibrary::LoadHint
type QLibrary__LoadHint int64

const (
	QLibrary__ResolveAllSymbolsHint     = QLibrary__LoadHint(0x01)
	QLibrary__ExportExternalSymbolsHint = QLibrary__LoadHint(0x02)
	QLibrary__LoadArchiveMemberHint     = QLibrary__LoadHint(0x04)
	QLibrary__PreventUnloadHint         = QLibrary__LoadHint(0x08)
	QLibrary__DeepBindHint              = QLibrary__LoadHint(0x10)
)

type QLibrary struct {
	QObject
}

type QLibrary_ITF interface {
	QObject_ITF
	QLibrary_PTR() *QLibrary
}

func (p *QLibrary) QLibrary_PTR() *QLibrary {
	return p
}

func (p *QLibrary) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QLibrary) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQLibrary(ptr QLibrary_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLibrary_PTR().Pointer()
	}
	return nil
}

func NewQLibraryFromPointer(ptr unsafe.Pointer) *QLibrary {
	var n = new(QLibrary)
	n.SetPointer(ptr)
	return n
}
func (ptr *QLibrary) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLibrary_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLibrary) LoadHints() QLibrary__LoadHint {
	if ptr.Pointer() != nil {
		return QLibrary__LoadHint(C.QLibrary_LoadHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLibrary) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QLibrary_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QLibrary) SetFileNameAndVersion(fileName string, versionNumber int) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QLibrary_SetFileNameAndVersion(ptr.Pointer(), fileNameC, C.int(int32(versionNumber)))
	}
}

func (ptr *QLibrary) SetLoadHints(hints QLibrary__LoadHint) {
	if ptr.Pointer() != nil {
		C.QLibrary_SetLoadHints(ptr.Pointer(), C.longlong(hints))
	}
}

func NewQLibrary(parent QObject_ITF) *QLibrary {
	var tmpValue = NewQLibraryFromPointer(C.QLibrary_NewQLibrary(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQLibrary2(fileName string, parent QObject_ITF) *QLibrary {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQLibraryFromPointer(C.QLibrary_NewQLibrary2(fileNameC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQLibrary4(fileName string, version string, parent QObject_ITF) *QLibrary {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var versionC = C.CString(version)
	defer C.free(unsafe.Pointer(versionC))
	var tmpValue = NewQLibraryFromPointer(C.QLibrary_NewQLibrary4(fileNameC, versionC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQLibrary3(fileName string, verNum int, parent QObject_ITF) *QLibrary {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQLibraryFromPointer(C.QLibrary_NewQLibrary3(fileNameC, C.int(int32(verNum)), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QLibrary) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLibrary_ErrorString(ptr.Pointer()))
	}
	return ""
}

func QLibrary_IsLibrary(fileName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QLibrary_QLibrary_IsLibrary(fileNameC) != 0
}

func (ptr *QLibrary) IsLibrary(fileName string) bool {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return C.QLibrary_QLibrary_IsLibrary(fileNameC) != 0
}

func (ptr *QLibrary) IsLoaded() bool {
	if ptr.Pointer() != nil {
		return C.QLibrary_IsLoaded(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLibrary) Load() bool {
	if ptr.Pointer() != nil {
		return C.QLibrary_Load(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLibrary) SetFileNameAndVersion2(fileName string, version string) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var versionC = C.CString(version)
		defer C.free(unsafe.Pointer(versionC))
		C.QLibrary_SetFileNameAndVersion2(ptr.Pointer(), fileNameC, versionC)
	}
}

func (ptr *QLibrary) Unload() bool {
	if ptr.Pointer() != nil {
		return C.QLibrary_Unload(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLibrary) DestroyQLibrary() {
	if ptr.Pointer() != nil {
		C.QLibrary_DestroyQLibrary(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQLibrary_TimerEvent
func callbackQLibrary_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQLibraryFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QLibrary) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::timerEvent", f)
	}
}

func (ptr *QLibrary) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::timerEvent")
	}
}

func (ptr *QLibrary) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QLibrary) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQLibrary_ChildEvent
func callbackQLibrary_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQLibraryFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QLibrary) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::childEvent", f)
	}
}

func (ptr *QLibrary) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::childEvent")
	}
}

func (ptr *QLibrary) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QLibrary) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQLibrary_ConnectNotify
func callbackQLibrary_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQLibraryFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QLibrary) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::connectNotify", f)
	}
}

func (ptr *QLibrary) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::connectNotify")
	}
}

func (ptr *QLibrary) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QLibrary) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQLibrary_CustomEvent
func callbackQLibrary_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQLibraryFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QLibrary) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::customEvent", f)
	}
}

func (ptr *QLibrary) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::customEvent")
	}
}

func (ptr *QLibrary) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QLibrary) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQLibrary_DeleteLater
func callbackQLibrary_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQLibraryFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QLibrary) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::deleteLater", f)
	}
}

func (ptr *QLibrary) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::deleteLater")
	}
}

func (ptr *QLibrary) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QLibrary_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QLibrary) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QLibrary_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQLibrary_DisconnectNotify
func callbackQLibrary_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQLibraryFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QLibrary) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::disconnectNotify", f)
	}
}

func (ptr *QLibrary) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::disconnectNotify")
	}
}

func (ptr *QLibrary) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QLibrary) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QLibrary_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQLibrary_Event
func callbackQLibrary_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQLibraryFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QLibrary) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::event", f)
	}
}

func (ptr *QLibrary) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::event")
	}
}

func (ptr *QLibrary) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QLibrary_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QLibrary) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QLibrary_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQLibrary_EventFilter
func callbackQLibrary_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQLibraryFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QLibrary) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::eventFilter", f)
	}
}

func (ptr *QLibrary) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::eventFilter")
	}
}

func (ptr *QLibrary) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QLibrary_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QLibrary) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QLibrary_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQLibrary_MetaObject
func callbackQLibrary_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QLibrary::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQLibraryFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QLibrary) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::metaObject", f)
	}
}

func (ptr *QLibrary) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QLibrary::metaObject")
	}
}

func (ptr *QLibrary) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QLibrary_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QLibrary) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QLibrary_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QLibraryInfo::LibraryLocation
type QLibraryInfo__LibraryLocation int64

const (
	QLibraryInfo__PrefixPath             = QLibraryInfo__LibraryLocation(0)
	QLibraryInfo__DocumentationPath      = QLibraryInfo__LibraryLocation(1)
	QLibraryInfo__HeadersPath            = QLibraryInfo__LibraryLocation(2)
	QLibraryInfo__LibrariesPath          = QLibraryInfo__LibraryLocation(3)
	QLibraryInfo__LibraryExecutablesPath = QLibraryInfo__LibraryLocation(4)
	QLibraryInfo__BinariesPath           = QLibraryInfo__LibraryLocation(5)
	QLibraryInfo__PluginsPath            = QLibraryInfo__LibraryLocation(6)
	QLibraryInfo__ImportsPath            = QLibraryInfo__LibraryLocation(7)
	QLibraryInfo__Qml2ImportsPath        = QLibraryInfo__LibraryLocation(8)
	QLibraryInfo__ArchDataPath           = QLibraryInfo__LibraryLocation(9)
	QLibraryInfo__DataPath               = QLibraryInfo__LibraryLocation(10)
	QLibraryInfo__TranslationsPath       = QLibraryInfo__LibraryLocation(11)
	QLibraryInfo__ExamplesPath           = QLibraryInfo__LibraryLocation(12)
	QLibraryInfo__TestsPath              = QLibraryInfo__LibraryLocation(13)
	QLibraryInfo__SettingsPath           = QLibraryInfo__LibraryLocation(100)
)

type QLibraryInfo struct {
	ptr unsafe.Pointer
}

type QLibraryInfo_ITF interface {
	QLibraryInfo_PTR() *QLibraryInfo
}

func (p *QLibraryInfo) QLibraryInfo_PTR() *QLibraryInfo {
	return p
}

func (p *QLibraryInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLibraryInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLibraryInfo(ptr QLibraryInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLibraryInfo_PTR().Pointer()
	}
	return nil
}

func NewQLibraryInfoFromPointer(ptr unsafe.Pointer) *QLibraryInfo {
	var n = new(QLibraryInfo)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLibraryInfo) DestroyQLibraryInfo() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QLibraryInfo_IsDebugBuild() bool {
	return C.QLibraryInfo_QLibraryInfo_IsDebugBuild() != 0
}

func (ptr *QLibraryInfo) IsDebugBuild() bool {
	return C.QLibraryInfo_QLibraryInfo_IsDebugBuild() != 0
}

func QLibraryInfo_LicensedProducts() string {
	return cGoUnpackString(C.QLibraryInfo_QLibraryInfo_LicensedProducts())
}

func (ptr *QLibraryInfo) LicensedProducts() string {
	return cGoUnpackString(C.QLibraryInfo_QLibraryInfo_LicensedProducts())
}

func QLibraryInfo_Licensee() string {
	return cGoUnpackString(C.QLibraryInfo_QLibraryInfo_Licensee())
}

func (ptr *QLibraryInfo) Licensee() string {
	return cGoUnpackString(C.QLibraryInfo_QLibraryInfo_Licensee())
}

func QLibraryInfo_Location(loc QLibraryInfo__LibraryLocation) string {
	return cGoUnpackString(C.QLibraryInfo_QLibraryInfo_Location(C.longlong(loc)))
}

func (ptr *QLibraryInfo) Location(loc QLibraryInfo__LibraryLocation) string {
	return cGoUnpackString(C.QLibraryInfo_QLibraryInfo_Location(C.longlong(loc)))
}

type QLine struct {
	ptr unsafe.Pointer
}

type QLine_ITF interface {
	QLine_PTR() *QLine
}

func (p *QLine) QLine_PTR() *QLine {
	return p
}

func (p *QLine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLine(ptr QLine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLine_PTR().Pointer()
	}
	return nil
}

func NewQLineFromPointer(ptr unsafe.Pointer) *QLine {
	var n = new(QLine)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLine) DestroyQLine() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQLine() *QLine {
	var tmpValue = NewQLineFromPointer(C.QLine_NewQLine())
	runtime.SetFinalizer(tmpValue, (*QLine).DestroyQLine)
	return tmpValue
}

func NewQLine2(p1 QPoint_ITF, p2 QPoint_ITF) *QLine {
	var tmpValue = NewQLineFromPointer(C.QLine_NewQLine2(PointerFromQPoint(p1), PointerFromQPoint(p2)))
	runtime.SetFinalizer(tmpValue, (*QLine).DestroyQLine)
	return tmpValue
}

func NewQLine3(x1 int, y1 int, x2 int, y2 int) *QLine {
	var tmpValue = NewQLineFromPointer(C.QLine_NewQLine3(C.int(int32(x1)), C.int(int32(y1)), C.int(int32(x2)), C.int(int32(y2))))
	runtime.SetFinalizer(tmpValue, (*QLine).DestroyQLine)
	return tmpValue
}

func (ptr *QLine) Dx() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLine_Dx(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLine) Dy() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLine_Dy(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLine) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QLine_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLine) P1() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QLine_P1(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QLine) P2() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QLine_P2(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QLine) SetLine(x1 int, y1 int, x2 int, y2 int) {
	if ptr.Pointer() != nil {
		C.QLine_SetLine(ptr.Pointer(), C.int(int32(x1)), C.int(int32(y1)), C.int(int32(x2)), C.int(int32(y2)))
	}
}

func (ptr *QLine) SetP1(p1 QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QLine_SetP1(ptr.Pointer(), PointerFromQPoint(p1))
	}
}

func (ptr *QLine) SetP2(p2 QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QLine_SetP2(ptr.Pointer(), PointerFromQPoint(p2))
	}
}

func (ptr *QLine) SetPoints(p1 QPoint_ITF, p2 QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QLine_SetPoints(ptr.Pointer(), PointerFromQPoint(p1), PointerFromQPoint(p2))
	}
}

func (ptr *QLine) Translate(offset QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QLine_Translate(ptr.Pointer(), PointerFromQPoint(offset))
	}
}

func (ptr *QLine) Translate2(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QLine_Translate2(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QLine) Translated(offset QPoint_ITF) *QLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFromPointer(C.QLine_Translated(ptr.Pointer(), PointerFromQPoint(offset)))
		runtime.SetFinalizer(tmpValue, (*QLine).DestroyQLine)
		return tmpValue
	}
	return nil
}

func (ptr *QLine) Translated2(dx int, dy int) *QLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFromPointer(C.QLine_Translated2(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy))))
		runtime.SetFinalizer(tmpValue, (*QLine).DestroyQLine)
		return tmpValue
	}
	return nil
}

func (ptr *QLine) X1() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLine_X1(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLine) X2() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLine_X2(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLine) Y1() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLine_Y1(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLine) Y2() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLine_Y2(ptr.Pointer())))
	}
	return 0
}

//QLineF::IntersectType
type QLineF__IntersectType int64

const (
	QLineF__NoIntersection        = QLineF__IntersectType(0)
	QLineF__BoundedIntersection   = QLineF__IntersectType(1)
	QLineF__UnboundedIntersection = QLineF__IntersectType(2)
)

type QLineF struct {
	ptr unsafe.Pointer
}

type QLineF_ITF interface {
	QLineF_PTR() *QLineF
}

func (p *QLineF) QLineF_PTR() *QLineF {
	return p
}

func (p *QLineF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLineF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLineF(ptr QLineF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLineF_PTR().Pointer()
	}
	return nil
}

func NewQLineFFromPointer(ptr unsafe.Pointer) *QLineF {
	var n = new(QLineF)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLineF) DestroyQLineF() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QLineF) AngleTo(line QLineF_ITF) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_AngleTo(ptr.Pointer(), PointerFromQLineF(line)))
	}
	return 0
}

func (ptr *QLineF) Intersect(line QLineF_ITF, intersectionPoint QPointF_ITF) QLineF__IntersectType {
	if ptr.Pointer() != nil {
		return QLineF__IntersectType(C.QLineF_Intersect(ptr.Pointer(), PointerFromQLineF(line), PointerFromQPointF(intersectionPoint)))
	}
	return 0
}

func NewQLineF() *QLineF {
	var tmpValue = NewQLineFFromPointer(C.QLineF_NewQLineF())
	runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
	return tmpValue
}

func NewQLineF4(line QLine_ITF) *QLineF {
	var tmpValue = NewQLineFFromPointer(C.QLineF_NewQLineF4(PointerFromQLine(line)))
	runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
	return tmpValue
}

func NewQLineF2(p1 QPointF_ITF, p2 QPointF_ITF) *QLineF {
	var tmpValue = NewQLineFFromPointer(C.QLineF_NewQLineF2(PointerFromQPointF(p1), PointerFromQPointF(p2)))
	runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
	return tmpValue
}

func NewQLineF3(x1 float64, y1 float64, x2 float64, y2 float64) *QLineF {
	var tmpValue = NewQLineFFromPointer(C.QLineF_NewQLineF3(C.double(x1), C.double(y1), C.double(x2), C.double(y2)))
	runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
	return tmpValue
}

func (ptr *QLineF) Angle() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_Angle(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLineF) Dx() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_Dx(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLineF) Dy() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_Dy(ptr.Pointer()))
	}
	return 0
}

func QLineF_FromPolar(length float64, angle float64) *QLineF {
	var tmpValue = NewQLineFFromPointer(C.QLineF_QLineF_FromPolar(C.double(length), C.double(angle)))
	runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
	return tmpValue
}

func (ptr *QLineF) FromPolar(length float64, angle float64) *QLineF {
	var tmpValue = NewQLineFFromPointer(C.QLineF_QLineF_FromPolar(C.double(length), C.double(angle)))
	runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
	return tmpValue
}

func (ptr *QLineF) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QLineF_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLineF) Length() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_Length(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLineF) NormalVector() *QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFFromPointer(C.QLineF_NormalVector(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) P1() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QLineF_P1(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) P2() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QLineF_P2(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) PointAt(t float64) *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QLineF_PointAt(ptr.Pointer(), C.double(t)))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) SetAngle(angle float64) {
	if ptr.Pointer() != nil {
		C.QLineF_SetAngle(ptr.Pointer(), C.double(angle))
	}
}

func (ptr *QLineF) SetLength(length float64) {
	if ptr.Pointer() != nil {
		C.QLineF_SetLength(ptr.Pointer(), C.double(length))
	}
}

func (ptr *QLineF) SetLine(x1 float64, y1 float64, x2 float64, y2 float64) {
	if ptr.Pointer() != nil {
		C.QLineF_SetLine(ptr.Pointer(), C.double(x1), C.double(y1), C.double(x2), C.double(y2))
	}
}

func (ptr *QLineF) SetP1(p1 QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLineF_SetP1(ptr.Pointer(), PointerFromQPointF(p1))
	}
}

func (ptr *QLineF) SetP2(p2 QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLineF_SetP2(ptr.Pointer(), PointerFromQPointF(p2))
	}
}

func (ptr *QLineF) SetPoints(p1 QPointF_ITF, p2 QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLineF_SetPoints(ptr.Pointer(), PointerFromQPointF(p1), PointerFromQPointF(p2))
	}
}

func (ptr *QLineF) ToLine() *QLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFromPointer(C.QLineF_ToLine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLine).DestroyQLine)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) Translate(offset QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QLineF_Translate(ptr.Pointer(), PointerFromQPointF(offset))
	}
}

func (ptr *QLineF) Translate2(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QLineF_Translate2(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QLineF) Translated(offset QPointF_ITF) *QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFFromPointer(C.QLineF_Translated(ptr.Pointer(), PointerFromQPointF(offset)))
		runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) Translated2(dx float64, dy float64) *QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFFromPointer(C.QLineF_Translated2(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) UnitVector() *QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFFromPointer(C.QLineF_UnitVector(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QLineF) X1() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_X1(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLineF) X2() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_X2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLineF) Y1() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_Y1(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLineF) Y2() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLineF_Y2(ptr.Pointer()))
	}
	return 0
}

type QLinkedList struct {
	ptr unsafe.Pointer
}

type QLinkedList_ITF interface {
	QLinkedList_PTR() *QLinkedList
}

func (p *QLinkedList) QLinkedList_PTR() *QLinkedList {
	return p
}

func (p *QLinkedList) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLinkedList) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLinkedList(ptr QLinkedList_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLinkedList_PTR().Pointer()
	}
	return nil
}

func NewQLinkedListFromPointer(ptr unsafe.Pointer) *QLinkedList {
	var n = new(QLinkedList)
	n.SetPointer(ptr)
	return n
}

type QLinkedListIterator struct {
	ptr unsafe.Pointer
}

type QLinkedListIterator_ITF interface {
	QLinkedListIterator_PTR() *QLinkedListIterator
}

func (p *QLinkedListIterator) QLinkedListIterator_PTR() *QLinkedListIterator {
	return p
}

func (p *QLinkedListIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLinkedListIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLinkedListIterator(ptr QLinkedListIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLinkedListIterator_PTR().Pointer()
	}
	return nil
}

func NewQLinkedListIteratorFromPointer(ptr unsafe.Pointer) *QLinkedListIterator {
	var n = new(QLinkedListIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QLinkedListIterator) DestroyQLinkedListIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QList struct {
	ptr unsafe.Pointer
}

type QList_ITF interface {
	QList_PTR() *QList
}

func (p *QList) QList_PTR() *QList {
	return p
}

func (p *QList) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QList) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQList(ptr QList_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QList_PTR().Pointer()
	}
	return nil
}

func NewQListFromPointer(ptr unsafe.Pointer) *QList {
	var n = new(QList)
	n.SetPointer(ptr)
	return n
}

type QListIterator struct {
	ptr unsafe.Pointer
}

type QListIterator_ITF interface {
	QListIterator_PTR() *QListIterator
}

func (p *QListIterator) QListIterator_PTR() *QListIterator {
	return p
}

func (p *QListIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QListIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQListIterator(ptr QListIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QListIterator_PTR().Pointer()
	}
	return nil
}

func NewQListIteratorFromPointer(ptr unsafe.Pointer) *QListIterator {
	var n = new(QListIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QListIterator) DestroyQListIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QLocale::Country
type QLocale__Country int64

const (
	QLocale__AnyCountry                             = QLocale__Country(0)
	QLocale__Afghanistan                            = QLocale__Country(1)
	QLocale__Albania                                = QLocale__Country(2)
	QLocale__Algeria                                = QLocale__Country(3)
	QLocale__AmericanSamoa                          = QLocale__Country(4)
	QLocale__Andorra                                = QLocale__Country(5)
	QLocale__Angola                                 = QLocale__Country(6)
	QLocale__Anguilla                               = QLocale__Country(7)
	QLocale__Antarctica                             = QLocale__Country(8)
	QLocale__AntiguaAndBarbuda                      = QLocale__Country(9)
	QLocale__Argentina                              = QLocale__Country(10)
	QLocale__Armenia                                = QLocale__Country(11)
	QLocale__Aruba                                  = QLocale__Country(12)
	QLocale__Australia                              = QLocale__Country(13)
	QLocale__Austria                                = QLocale__Country(14)
	QLocale__Azerbaijan                             = QLocale__Country(15)
	QLocale__Bahamas                                = QLocale__Country(16)
	QLocale__Bahrain                                = QLocale__Country(17)
	QLocale__Bangladesh                             = QLocale__Country(18)
	QLocale__Barbados                               = QLocale__Country(19)
	QLocale__Belarus                                = QLocale__Country(20)
	QLocale__Belgium                                = QLocale__Country(21)
	QLocale__Belize                                 = QLocale__Country(22)
	QLocale__Benin                                  = QLocale__Country(23)
	QLocale__Bermuda                                = QLocale__Country(24)
	QLocale__Bhutan                                 = QLocale__Country(25)
	QLocale__Bolivia                                = QLocale__Country(26)
	QLocale__BosniaAndHerzegowina                   = QLocale__Country(27)
	QLocale__Botswana                               = QLocale__Country(28)
	QLocale__BouvetIsland                           = QLocale__Country(29)
	QLocale__Brazil                                 = QLocale__Country(30)
	QLocale__BritishIndianOceanTerritory            = QLocale__Country(31)
	QLocale__Brunei                                 = QLocale__Country(32)
	QLocale__Bulgaria                               = QLocale__Country(33)
	QLocale__BurkinaFaso                            = QLocale__Country(34)
	QLocale__Burundi                                = QLocale__Country(35)
	QLocale__Cambodia                               = QLocale__Country(36)
	QLocale__Cameroon                               = QLocale__Country(37)
	QLocale__Canada                                 = QLocale__Country(38)
	QLocale__CapeVerde                              = QLocale__Country(39)
	QLocale__CaymanIslands                          = QLocale__Country(40)
	QLocale__CentralAfricanRepublic                 = QLocale__Country(41)
	QLocale__Chad                                   = QLocale__Country(42)
	QLocale__Chile                                  = QLocale__Country(43)
	QLocale__China                                  = QLocale__Country(44)
	QLocale__ChristmasIsland                        = QLocale__Country(45)
	QLocale__CocosIslands                           = QLocale__Country(46)
	QLocale__Colombia                               = QLocale__Country(47)
	QLocale__Comoros                                = QLocale__Country(48)
	QLocale__CongoKinshasa                          = QLocale__Country(49)
	QLocale__CongoBrazzaville                       = QLocale__Country(50)
	QLocale__CookIslands                            = QLocale__Country(51)
	QLocale__CostaRica                              = QLocale__Country(52)
	QLocale__IvoryCoast                             = QLocale__Country(53)
	QLocale__Croatia                                = QLocale__Country(54)
	QLocale__Cuba                                   = QLocale__Country(55)
	QLocale__Cyprus                                 = QLocale__Country(56)
	QLocale__CzechRepublic                          = QLocale__Country(57)
	QLocale__Denmark                                = QLocale__Country(58)
	QLocale__Djibouti                               = QLocale__Country(59)
	QLocale__Dominica                               = QLocale__Country(60)
	QLocale__DominicanRepublic                      = QLocale__Country(61)
	QLocale__EastTimor                              = QLocale__Country(62)
	QLocale__Ecuador                                = QLocale__Country(63)
	QLocale__Egypt                                  = QLocale__Country(64)
	QLocale__ElSalvador                             = QLocale__Country(65)
	QLocale__EquatorialGuinea                       = QLocale__Country(66)
	QLocale__Eritrea                                = QLocale__Country(67)
	QLocale__Estonia                                = QLocale__Country(68)
	QLocale__Ethiopia                               = QLocale__Country(69)
	QLocale__FalklandIslands                        = QLocale__Country(70)
	QLocale__FaroeIslands                           = QLocale__Country(71)
	QLocale__Fiji                                   = QLocale__Country(72)
	QLocale__Finland                                = QLocale__Country(73)
	QLocale__France                                 = QLocale__Country(74)
	QLocale__Guernsey                               = QLocale__Country(75)
	QLocale__FrenchGuiana                           = QLocale__Country(76)
	QLocale__FrenchPolynesia                        = QLocale__Country(77)
	QLocale__FrenchSouthernTerritories              = QLocale__Country(78)
	QLocale__Gabon                                  = QLocale__Country(79)
	QLocale__Gambia                                 = QLocale__Country(80)
	QLocale__Georgia                                = QLocale__Country(81)
	QLocale__Germany                                = QLocale__Country(82)
	QLocale__Ghana                                  = QLocale__Country(83)
	QLocale__Gibraltar                              = QLocale__Country(84)
	QLocale__Greece                                 = QLocale__Country(85)
	QLocale__Greenland                              = QLocale__Country(86)
	QLocale__Grenada                                = QLocale__Country(87)
	QLocale__Guadeloupe                             = QLocale__Country(88)
	QLocale__Guam                                   = QLocale__Country(89)
	QLocale__Guatemala                              = QLocale__Country(90)
	QLocale__Guinea                                 = QLocale__Country(91)
	QLocale__GuineaBissau                           = QLocale__Country(92)
	QLocale__Guyana                                 = QLocale__Country(93)
	QLocale__Haiti                                  = QLocale__Country(94)
	QLocale__HeardAndMcDonaldIslands                = QLocale__Country(95)
	QLocale__Honduras                               = QLocale__Country(96)
	QLocale__HongKong                               = QLocale__Country(97)
	QLocale__Hungary                                = QLocale__Country(98)
	QLocale__Iceland                                = QLocale__Country(99)
	QLocale__India                                  = QLocale__Country(100)
	QLocale__Indonesia                              = QLocale__Country(101)
	QLocale__Iran                                   = QLocale__Country(102)
	QLocale__Iraq                                   = QLocale__Country(103)
	QLocale__Ireland                                = QLocale__Country(104)
	QLocale__Israel                                 = QLocale__Country(105)
	QLocale__Italy                                  = QLocale__Country(106)
	QLocale__Jamaica                                = QLocale__Country(107)
	QLocale__Japan                                  = QLocale__Country(108)
	QLocale__Jordan                                 = QLocale__Country(109)
	QLocale__Kazakhstan                             = QLocale__Country(110)
	QLocale__Kenya                                  = QLocale__Country(111)
	QLocale__Kiribati                               = QLocale__Country(112)
	QLocale__NorthKorea                             = QLocale__Country(113)
	QLocale__SouthKorea                             = QLocale__Country(114)
	QLocale__Kuwait                                 = QLocale__Country(115)
	QLocale__Kyrgyzstan                             = QLocale__Country(116)
	QLocale__Laos                                   = QLocale__Country(117)
	QLocale__Latvia                                 = QLocale__Country(118)
	QLocale__Lebanon                                = QLocale__Country(119)
	QLocale__Lesotho                                = QLocale__Country(120)
	QLocale__Liberia                                = QLocale__Country(121)
	QLocale__Libya                                  = QLocale__Country(122)
	QLocale__Liechtenstein                          = QLocale__Country(123)
	QLocale__Lithuania                              = QLocale__Country(124)
	QLocale__Luxembourg                             = QLocale__Country(125)
	QLocale__Macau                                  = QLocale__Country(126)
	QLocale__Macedonia                              = QLocale__Country(127)
	QLocale__Madagascar                             = QLocale__Country(128)
	QLocale__Malawi                                 = QLocale__Country(129)
	QLocale__Malaysia                               = QLocale__Country(130)
	QLocale__Maldives                               = QLocale__Country(131)
	QLocale__Mali                                   = QLocale__Country(132)
	QLocale__Malta                                  = QLocale__Country(133)
	QLocale__MarshallIslands                        = QLocale__Country(134)
	QLocale__Martinique                             = QLocale__Country(135)
	QLocale__Mauritania                             = QLocale__Country(136)
	QLocale__Mauritius                              = QLocale__Country(137)
	QLocale__Mayotte                                = QLocale__Country(138)
	QLocale__Mexico                                 = QLocale__Country(139)
	QLocale__Micronesia                             = QLocale__Country(140)
	QLocale__Moldova                                = QLocale__Country(141)
	QLocale__Monaco                                 = QLocale__Country(142)
	QLocale__Mongolia                               = QLocale__Country(143)
	QLocale__Montserrat                             = QLocale__Country(144)
	QLocale__Morocco                                = QLocale__Country(145)
	QLocale__Mozambique                             = QLocale__Country(146)
	QLocale__Myanmar                                = QLocale__Country(147)
	QLocale__Namibia                                = QLocale__Country(148)
	QLocale__NauruCountry                           = QLocale__Country(149)
	QLocale__Nepal                                  = QLocale__Country(150)
	QLocale__Netherlands                            = QLocale__Country(151)
	QLocale__CuraSao                                = QLocale__Country(152)
	QLocale__NewCaledonia                           = QLocale__Country(153)
	QLocale__NewZealand                             = QLocale__Country(154)
	QLocale__Nicaragua                              = QLocale__Country(155)
	QLocale__Niger                                  = QLocale__Country(156)
	QLocale__Nigeria                                = QLocale__Country(157)
	QLocale__Niue                                   = QLocale__Country(158)
	QLocale__NorfolkIsland                          = QLocale__Country(159)
	QLocale__NorthernMarianaIslands                 = QLocale__Country(160)
	QLocale__Norway                                 = QLocale__Country(161)
	QLocale__Oman                                   = QLocale__Country(162)
	QLocale__Pakistan                               = QLocale__Country(163)
	QLocale__Palau                                  = QLocale__Country(164)
	QLocale__PalestinianTerritories                 = QLocale__Country(165)
	QLocale__Panama                                 = QLocale__Country(166)
	QLocale__PapuaNewGuinea                         = QLocale__Country(167)
	QLocale__Paraguay                               = QLocale__Country(168)
	QLocale__Peru                                   = QLocale__Country(169)
	QLocale__Philippines                            = QLocale__Country(170)
	QLocale__Pitcairn                               = QLocale__Country(171)
	QLocale__Poland                                 = QLocale__Country(172)
	QLocale__Portugal                               = QLocale__Country(173)
	QLocale__PuertoRico                             = QLocale__Country(174)
	QLocale__Qatar                                  = QLocale__Country(175)
	QLocale__Reunion                                = QLocale__Country(176)
	QLocale__Romania                                = QLocale__Country(177)
	QLocale__Russia                                 = QLocale__Country(178)
	QLocale__Rwanda                                 = QLocale__Country(179)
	QLocale__SaintKittsAndNevis                     = QLocale__Country(180)
	QLocale__SaintLucia                             = QLocale__Country(181)
	QLocale__SaintVincentAndTheGrenadines           = QLocale__Country(182)
	QLocale__Samoa                                  = QLocale__Country(183)
	QLocale__SanMarino                              = QLocale__Country(184)
	QLocale__SaoTomeAndPrincipe                     = QLocale__Country(185)
	QLocale__SaudiArabia                            = QLocale__Country(186)
	QLocale__Senegal                                = QLocale__Country(187)
	QLocale__Seychelles                             = QLocale__Country(188)
	QLocale__SierraLeone                            = QLocale__Country(189)
	QLocale__Singapore                              = QLocale__Country(190)
	QLocale__Slovakia                               = QLocale__Country(191)
	QLocale__Slovenia                               = QLocale__Country(192)
	QLocale__SolomonIslands                         = QLocale__Country(193)
	QLocale__Somalia                                = QLocale__Country(194)
	QLocale__SouthAfrica                            = QLocale__Country(195)
	QLocale__SouthGeorgiaAndTheSouthSandwichIslands = QLocale__Country(196)
	QLocale__Spain                                  = QLocale__Country(197)
	QLocale__SriLanka                               = QLocale__Country(198)
	QLocale__SaintHelena                            = QLocale__Country(199)
	QLocale__SaintPierreAndMiquelon                 = QLocale__Country(200)
	QLocale__Sudan                                  = QLocale__Country(201)
	QLocale__Suriname                               = QLocale__Country(202)
	QLocale__SvalbardAndJanMayenIslands             = QLocale__Country(203)
	QLocale__Swaziland                              = QLocale__Country(204)
	QLocale__Sweden                                 = QLocale__Country(205)
	QLocale__Switzerland                            = QLocale__Country(206)
	QLocale__Syria                                  = QLocale__Country(207)
	QLocale__Taiwan                                 = QLocale__Country(208)
	QLocale__Tajikistan                             = QLocale__Country(209)
	QLocale__Tanzania                               = QLocale__Country(210)
	QLocale__Thailand                               = QLocale__Country(211)
	QLocale__Togo                                   = QLocale__Country(212)
	QLocale__TokelauCountry                         = QLocale__Country(213)
	QLocale__Tonga                                  = QLocale__Country(214)
	QLocale__TrinidadAndTobago                      = QLocale__Country(215)
	QLocale__Tunisia                                = QLocale__Country(216)
	QLocale__Turkey                                 = QLocale__Country(217)
	QLocale__Turkmenistan                           = QLocale__Country(218)
	QLocale__TurksAndCaicosIslands                  = QLocale__Country(219)
	QLocale__TuvaluCountry                          = QLocale__Country(220)
	QLocale__Uganda                                 = QLocale__Country(221)
	QLocale__Ukraine                                = QLocale__Country(222)
	QLocale__UnitedArabEmirates                     = QLocale__Country(223)
	QLocale__UnitedKingdom                          = QLocale__Country(224)
	QLocale__UnitedStates                           = QLocale__Country(225)
	QLocale__UnitedStatesMinorOutlyingIslands       = QLocale__Country(226)
	QLocale__Uruguay                                = QLocale__Country(227)
	QLocale__Uzbekistan                             = QLocale__Country(228)
	QLocale__Vanuatu                                = QLocale__Country(229)
	QLocale__VaticanCityState                       = QLocale__Country(230)
	QLocale__Venezuela                              = QLocale__Country(231)
	QLocale__Vietnam                                = QLocale__Country(232)
	QLocale__BritishVirginIslands                   = QLocale__Country(233)
	QLocale__UnitedStatesVirginIslands              = QLocale__Country(234)
	QLocale__WallisAndFutunaIslands                 = QLocale__Country(235)
	QLocale__WesternSahara                          = QLocale__Country(236)
	QLocale__Yemen                                  = QLocale__Country(237)
	QLocale__CanaryIslands                          = QLocale__Country(238)
	QLocale__Zambia                                 = QLocale__Country(239)
	QLocale__Zimbabwe                               = QLocale__Country(240)
	QLocale__ClippertonIsland                       = QLocale__Country(241)
	QLocale__Montenegro                             = QLocale__Country(242)
	QLocale__Serbia                                 = QLocale__Country(243)
	QLocale__SaintBarthelemy                        = QLocale__Country(244)
	QLocale__SaintMartin                            = QLocale__Country(245)
	QLocale__LatinAmericaAndTheCaribbean            = QLocale__Country(246)
	QLocale__AscensionIsland                        = QLocale__Country(247)
	QLocale__AlandIslands                           = QLocale__Country(248)
	QLocale__DiegoGarcia                            = QLocale__Country(249)
	QLocale__CeutaAndMelilla                        = QLocale__Country(250)
	QLocale__IsleOfMan                              = QLocale__Country(251)
	QLocale__Jersey                                 = QLocale__Country(252)
	QLocale__TristanDaCunha                         = QLocale__Country(253)
	QLocale__SouthSudan                             = QLocale__Country(254)
	QLocale__Bonaire                                = QLocale__Country(255)
	QLocale__SintMaarten                            = QLocale__Country(256)
	QLocale__Kosovo                                 = QLocale__Country(257)
	QLocale__EuropeanUnion                          = QLocale__Country(258)
	QLocale__OutlyingOceania                        = QLocale__Country(259)
	QLocale__Tokelau                                = QLocale__Country(QLocale__TokelauCountry)
	QLocale__Tuvalu                                 = QLocale__Country(QLocale__TuvaluCountry)
	QLocale__DemocraticRepublicOfCongo              = QLocale__Country(QLocale__CongoKinshasa)
	QLocale__PeoplesRepublicOfCongo                 = QLocale__Country(QLocale__CongoBrazzaville)
	QLocale__DemocraticRepublicOfKorea              = QLocale__Country(QLocale__NorthKorea)
	QLocale__RepublicOfKorea                        = QLocale__Country(QLocale__SouthKorea)
	QLocale__RussianFederation                      = QLocale__Country(QLocale__Russia)
	QLocale__SyrianArabRepublic                     = QLocale__Country(QLocale__Syria)
	QLocale__LastCountry                            = QLocale__Country(QLocale__OutlyingOceania)
)

//QLocale::CurrencySymbolFormat
type QLocale__CurrencySymbolFormat int64

const (
	QLocale__CurrencyIsoCode     = QLocale__CurrencySymbolFormat(0)
	QLocale__CurrencySymbol      = QLocale__CurrencySymbolFormat(1)
	QLocale__CurrencyDisplayName = QLocale__CurrencySymbolFormat(2)
)

//QLocale::FloatingPointPrecisionOption
type QLocale__FloatingPointPrecisionOption int64

const (
	QLocale__FloatingPointShortest = QLocale__FloatingPointPrecisionOption(-128)
)

//QLocale::FormatType
type QLocale__FormatType int64

const (
	QLocale__LongFormat   = QLocale__FormatType(0)
	QLocale__ShortFormat  = QLocale__FormatType(1)
	QLocale__NarrowFormat = QLocale__FormatType(2)
)

//QLocale::Language
type QLocale__Language int64

const (
	QLocale__AnyLanguage               = QLocale__Language(0)
	QLocale__C                         = QLocale__Language(1)
	QLocale__Abkhazian                 = QLocale__Language(2)
	QLocale__Oromo                     = QLocale__Language(3)
	QLocale__Afar                      = QLocale__Language(4)
	QLocale__Afrikaans                 = QLocale__Language(5)
	QLocale__Albanian                  = QLocale__Language(6)
	QLocale__Amharic                   = QLocale__Language(7)
	QLocale__Arabic                    = QLocale__Language(8)
	QLocale__Armenian                  = QLocale__Language(9)
	QLocale__Assamese                  = QLocale__Language(10)
	QLocale__Aymara                    = QLocale__Language(11)
	QLocale__Azerbaijani               = QLocale__Language(12)
	QLocale__Bashkir                   = QLocale__Language(13)
	QLocale__Basque                    = QLocale__Language(14)
	QLocale__Bengali                   = QLocale__Language(15)
	QLocale__Dzongkha                  = QLocale__Language(16)
	QLocale__Bihari                    = QLocale__Language(17)
	QLocale__Bislama                   = QLocale__Language(18)
	QLocale__Breton                    = QLocale__Language(19)
	QLocale__Bulgarian                 = QLocale__Language(20)
	QLocale__Burmese                   = QLocale__Language(21)
	QLocale__Belarusian                = QLocale__Language(22)
	QLocale__Khmer                     = QLocale__Language(23)
	QLocale__Catalan                   = QLocale__Language(24)
	QLocale__Chinese                   = QLocale__Language(25)
	QLocale__Corsican                  = QLocale__Language(26)
	QLocale__Croatian                  = QLocale__Language(27)
	QLocale__Czech                     = QLocale__Language(28)
	QLocale__Danish                    = QLocale__Language(29)
	QLocale__Dutch                     = QLocale__Language(30)
	QLocale__English                   = QLocale__Language(31)
	QLocale__Esperanto                 = QLocale__Language(32)
	QLocale__Estonian                  = QLocale__Language(33)
	QLocale__Faroese                   = QLocale__Language(34)
	QLocale__Fijian                    = QLocale__Language(35)
	QLocale__Finnish                   = QLocale__Language(36)
	QLocale__French                    = QLocale__Language(37)
	QLocale__WesternFrisian            = QLocale__Language(38)
	QLocale__Gaelic                    = QLocale__Language(39)
	QLocale__Galician                  = QLocale__Language(40)
	QLocale__Georgian                  = QLocale__Language(41)
	QLocale__German                    = QLocale__Language(42)
	QLocale__Greek                     = QLocale__Language(43)
	QLocale__Greenlandic               = QLocale__Language(44)
	QLocale__Guarani                   = QLocale__Language(45)
	QLocale__Gujarati                  = QLocale__Language(46)
	QLocale__Hausa                     = QLocale__Language(47)
	QLocale__Hebrew                    = QLocale__Language(48)
	QLocale__Hindi                     = QLocale__Language(49)
	QLocale__Hungarian                 = QLocale__Language(50)
	QLocale__Icelandic                 = QLocale__Language(51)
	QLocale__Indonesian                = QLocale__Language(52)
	QLocale__Interlingua               = QLocale__Language(53)
	QLocale__Interlingue               = QLocale__Language(54)
	QLocale__Inuktitut                 = QLocale__Language(55)
	QLocale__Inupiak                   = QLocale__Language(56)
	QLocale__Irish                     = QLocale__Language(57)
	QLocale__Italian                   = QLocale__Language(58)
	QLocale__Japanese                  = QLocale__Language(59)
	QLocale__Javanese                  = QLocale__Language(60)
	QLocale__Kannada                   = QLocale__Language(61)
	QLocale__Kashmiri                  = QLocale__Language(62)
	QLocale__Kazakh                    = QLocale__Language(63)
	QLocale__Kinyarwanda               = QLocale__Language(64)
	QLocale__Kirghiz                   = QLocale__Language(65)
	QLocale__Korean                    = QLocale__Language(66)
	QLocale__Kurdish                   = QLocale__Language(67)
	QLocale__Rundi                     = QLocale__Language(68)
	QLocale__Lao                       = QLocale__Language(69)
	QLocale__Latin                     = QLocale__Language(70)
	QLocale__Latvian                   = QLocale__Language(71)
	QLocale__Lingala                   = QLocale__Language(72)
	QLocale__Lithuanian                = QLocale__Language(73)
	QLocale__Macedonian                = QLocale__Language(74)
	QLocale__Malagasy                  = QLocale__Language(75)
	QLocale__Malay                     = QLocale__Language(76)
	QLocale__Malayalam                 = QLocale__Language(77)
	QLocale__Maltese                   = QLocale__Language(78)
	QLocale__Maori                     = QLocale__Language(79)
	QLocale__Marathi                   = QLocale__Language(80)
	QLocale__Marshallese               = QLocale__Language(81)
	QLocale__Mongolian                 = QLocale__Language(82)
	QLocale__NauruLanguage             = QLocale__Language(83)
	QLocale__Nepali                    = QLocale__Language(84)
	QLocale__NorwegianBokmal           = QLocale__Language(85)
	QLocale__Occitan                   = QLocale__Language(86)
	QLocale__Oriya                     = QLocale__Language(87)
	QLocale__Pashto                    = QLocale__Language(88)
	QLocale__Persian                   = QLocale__Language(89)
	QLocale__Polish                    = QLocale__Language(90)
	QLocale__Portuguese                = QLocale__Language(91)
	QLocale__Punjabi                   = QLocale__Language(92)
	QLocale__Quechua                   = QLocale__Language(93)
	QLocale__Romansh                   = QLocale__Language(94)
	QLocale__Romanian                  = QLocale__Language(95)
	QLocale__Russian                   = QLocale__Language(96)
	QLocale__Samoan                    = QLocale__Language(97)
	QLocale__Sango                     = QLocale__Language(98)
	QLocale__Sanskrit                  = QLocale__Language(99)
	QLocale__Serbian                   = QLocale__Language(100)
	QLocale__Ossetic                   = QLocale__Language(101)
	QLocale__SouthernSotho             = QLocale__Language(102)
	QLocale__Tswana                    = QLocale__Language(103)
	QLocale__Shona                     = QLocale__Language(104)
	QLocale__Sindhi                    = QLocale__Language(105)
	QLocale__Sinhala                   = QLocale__Language(106)
	QLocale__Swati                     = QLocale__Language(107)
	QLocale__Slovak                    = QLocale__Language(108)
	QLocale__Slovenian                 = QLocale__Language(109)
	QLocale__Somali                    = QLocale__Language(110)
	QLocale__Spanish                   = QLocale__Language(111)
	QLocale__Sundanese                 = QLocale__Language(112)
	QLocale__Swahili                   = QLocale__Language(113)
	QLocale__Swedish                   = QLocale__Language(114)
	QLocale__Sardinian                 = QLocale__Language(115)
	QLocale__Tajik                     = QLocale__Language(116)
	QLocale__Tamil                     = QLocale__Language(117)
	QLocale__Tatar                     = QLocale__Language(118)
	QLocale__Telugu                    = QLocale__Language(119)
	QLocale__Thai                      = QLocale__Language(120)
	QLocale__Tibetan                   = QLocale__Language(121)
	QLocale__Tigrinya                  = QLocale__Language(122)
	QLocale__Tongan                    = QLocale__Language(123)
	QLocale__Tsonga                    = QLocale__Language(124)
	QLocale__Turkish                   = QLocale__Language(125)
	QLocale__Turkmen                   = QLocale__Language(126)
	QLocale__Tahitian                  = QLocale__Language(127)
	QLocale__Uighur                    = QLocale__Language(128)
	QLocale__Ukrainian                 = QLocale__Language(129)
	QLocale__Urdu                      = QLocale__Language(130)
	QLocale__Uzbek                     = QLocale__Language(131)
	QLocale__Vietnamese                = QLocale__Language(132)
	QLocale__Volapuk                   = QLocale__Language(133)
	QLocale__Welsh                     = QLocale__Language(134)
	QLocale__Wolof                     = QLocale__Language(135)
	QLocale__Xhosa                     = QLocale__Language(136)
	QLocale__Yiddish                   = QLocale__Language(137)
	QLocale__Yoruba                    = QLocale__Language(138)
	QLocale__Zhuang                    = QLocale__Language(139)
	QLocale__Zulu                      = QLocale__Language(140)
	QLocale__NorwegianNynorsk          = QLocale__Language(141)
	QLocale__Bosnian                   = QLocale__Language(142)
	QLocale__Divehi                    = QLocale__Language(143)
	QLocale__Manx                      = QLocale__Language(144)
	QLocale__Cornish                   = QLocale__Language(145)
	QLocale__Akan                      = QLocale__Language(146)
	QLocale__Konkani                   = QLocale__Language(147)
	QLocale__Ga                        = QLocale__Language(148)
	QLocale__Igbo                      = QLocale__Language(149)
	QLocale__Kamba                     = QLocale__Language(150)
	QLocale__Syriac                    = QLocale__Language(151)
	QLocale__Blin                      = QLocale__Language(152)
	QLocale__Geez                      = QLocale__Language(153)
	QLocale__Koro                      = QLocale__Language(154)
	QLocale__Sidamo                    = QLocale__Language(155)
	QLocale__Atsam                     = QLocale__Language(156)
	QLocale__Tigre                     = QLocale__Language(157)
	QLocale__Jju                       = QLocale__Language(158)
	QLocale__Friulian                  = QLocale__Language(159)
	QLocale__Venda                     = QLocale__Language(160)
	QLocale__Ewe                       = QLocale__Language(161)
	QLocale__Walamo                    = QLocale__Language(162)
	QLocale__Hawaiian                  = QLocale__Language(163)
	QLocale__Tyap                      = QLocale__Language(164)
	QLocale__Nyanja                    = QLocale__Language(165)
	QLocale__Filipino                  = QLocale__Language(166)
	QLocale__SwissGerman               = QLocale__Language(167)
	QLocale__SichuanYi                 = QLocale__Language(168)
	QLocale__Kpelle                    = QLocale__Language(169)
	QLocale__LowGerman                 = QLocale__Language(170)
	QLocale__SouthNdebele              = QLocale__Language(171)
	QLocale__NorthernSotho             = QLocale__Language(172)
	QLocale__NorthernSami              = QLocale__Language(173)
	QLocale__Taroko                    = QLocale__Language(174)
	QLocale__Gusii                     = QLocale__Language(175)
	QLocale__Taita                     = QLocale__Language(176)
	QLocale__Fulah                     = QLocale__Language(177)
	QLocale__Kikuyu                    = QLocale__Language(178)
	QLocale__Samburu                   = QLocale__Language(179)
	QLocale__Sena                      = QLocale__Language(180)
	QLocale__NorthNdebele              = QLocale__Language(181)
	QLocale__Rombo                     = QLocale__Language(182)
	QLocale__Tachelhit                 = QLocale__Language(183)
	QLocale__Kabyle                    = QLocale__Language(184)
	QLocale__Nyankole                  = QLocale__Language(185)
	QLocale__Bena                      = QLocale__Language(186)
	QLocale__Vunjo                     = QLocale__Language(187)
	QLocale__Bambara                   = QLocale__Language(188)
	QLocale__Embu                      = QLocale__Language(189)
	QLocale__Cherokee                  = QLocale__Language(190)
	QLocale__Morisyen                  = QLocale__Language(191)
	QLocale__Makonde                   = QLocale__Language(192)
	QLocale__Langi                     = QLocale__Language(193)
	QLocale__Ganda                     = QLocale__Language(194)
	QLocale__Bemba                     = QLocale__Language(195)
	QLocale__Kabuverdianu              = QLocale__Language(196)
	QLocale__Meru                      = QLocale__Language(197)
	QLocale__Kalenjin                  = QLocale__Language(198)
	QLocale__Nama                      = QLocale__Language(199)
	QLocale__Machame                   = QLocale__Language(200)
	QLocale__Colognian                 = QLocale__Language(201)
	QLocale__Masai                     = QLocale__Language(202)
	QLocale__Soga                      = QLocale__Language(203)
	QLocale__Luyia                     = QLocale__Language(204)
	QLocale__Asu                       = QLocale__Language(205)
	QLocale__Teso                      = QLocale__Language(206)
	QLocale__Saho                      = QLocale__Language(207)
	QLocale__KoyraChiini               = QLocale__Language(208)
	QLocale__Rwa                       = QLocale__Language(209)
	QLocale__Luo                       = QLocale__Language(210)
	QLocale__Chiga                     = QLocale__Language(211)
	QLocale__CentralMoroccoTamazight   = QLocale__Language(212)
	QLocale__KoyraboroSenni            = QLocale__Language(213)
	QLocale__Shambala                  = QLocale__Language(214)
	QLocale__Bodo                      = QLocale__Language(215)
	QLocale__Avaric                    = QLocale__Language(216)
	QLocale__Chamorro                  = QLocale__Language(217)
	QLocale__Chechen                   = QLocale__Language(218)
	QLocale__Church                    = QLocale__Language(219)
	QLocale__Chuvash                   = QLocale__Language(220)
	QLocale__Cree                      = QLocale__Language(221)
	QLocale__Haitian                   = QLocale__Language(222)
	QLocale__Herero                    = QLocale__Language(223)
	QLocale__HiriMotu                  = QLocale__Language(224)
	QLocale__Kanuri                    = QLocale__Language(225)
	QLocale__Komi                      = QLocale__Language(226)
	QLocale__Kongo                     = QLocale__Language(227)
	QLocale__Kwanyama                  = QLocale__Language(228)
	QLocale__Limburgish                = QLocale__Language(229)
	QLocale__LubaKatanga               = QLocale__Language(230)
	QLocale__Luxembourgish             = QLocale__Language(231)
	QLocale__Navaho                    = QLocale__Language(232)
	QLocale__Ndonga                    = QLocale__Language(233)
	QLocale__Ojibwa                    = QLocale__Language(234)
	QLocale__Pali                      = QLocale__Language(235)
	QLocale__Walloon                   = QLocale__Language(236)
	QLocale__Aghem                     = QLocale__Language(237)
	QLocale__Basaa                     = QLocale__Language(238)
	QLocale__Zarma                     = QLocale__Language(239)
	QLocale__Duala                     = QLocale__Language(240)
	QLocale__JolaFonyi                 = QLocale__Language(241)
	QLocale__Ewondo                    = QLocale__Language(242)
	QLocale__Bafia                     = QLocale__Language(243)
	QLocale__MakhuwaMeetto             = QLocale__Language(244)
	QLocale__Mundang                   = QLocale__Language(245)
	QLocale__Kwasio                    = QLocale__Language(246)
	QLocale__Nuer                      = QLocale__Language(247)
	QLocale__Sakha                     = QLocale__Language(248)
	QLocale__Sangu                     = QLocale__Language(249)
	QLocale__CongoSwahili              = QLocale__Language(250)
	QLocale__Tasawaq                   = QLocale__Language(251)
	QLocale__Vai                       = QLocale__Language(252)
	QLocale__Walser                    = QLocale__Language(253)
	QLocale__Yangben                   = QLocale__Language(254)
	QLocale__Avestan                   = QLocale__Language(255)
	QLocale__Asturian                  = QLocale__Language(256)
	QLocale__Ngomba                    = QLocale__Language(257)
	QLocale__Kako                      = QLocale__Language(258)
	QLocale__Meta                      = QLocale__Language(259)
	QLocale__Ngiemboon                 = QLocale__Language(260)
	QLocale__Aragonese                 = QLocale__Language(261)
	QLocale__Akkadian                  = QLocale__Language(262)
	QLocale__AncientEgyptian           = QLocale__Language(263)
	QLocale__AncientGreek              = QLocale__Language(264)
	QLocale__Aramaic                   = QLocale__Language(265)
	QLocale__Balinese                  = QLocale__Language(266)
	QLocale__Bamun                     = QLocale__Language(267)
	QLocale__BatakToba                 = QLocale__Language(268)
	QLocale__Buginese                  = QLocale__Language(269)
	QLocale__Buhid                     = QLocale__Language(270)
	QLocale__Carian                    = QLocale__Language(271)
	QLocale__Chakma                    = QLocale__Language(272)
	QLocale__ClassicalMandaic          = QLocale__Language(273)
	QLocale__Coptic                    = QLocale__Language(274)
	QLocale__Dogri                     = QLocale__Language(275)
	QLocale__EasternCham               = QLocale__Language(276)
	QLocale__EasternKayah              = QLocale__Language(277)
	QLocale__Etruscan                  = QLocale__Language(278)
	QLocale__Gothic                    = QLocale__Language(279)
	QLocale__Hanunoo                   = QLocale__Language(280)
	QLocale__Ingush                    = QLocale__Language(281)
	QLocale__LargeFloweryMiao          = QLocale__Language(282)
	QLocale__Lepcha                    = QLocale__Language(283)
	QLocale__Limbu                     = QLocale__Language(284)
	QLocale__Lisu                      = QLocale__Language(285)
	QLocale__Lu                        = QLocale__Language(286)
	QLocale__Lycian                    = QLocale__Language(287)
	QLocale__Lydian                    = QLocale__Language(288)
	QLocale__Mandingo                  = QLocale__Language(289)
	QLocale__Manipuri                  = QLocale__Language(290)
	QLocale__Meroitic                  = QLocale__Language(291)
	QLocale__NorthernThai              = QLocale__Language(292)
	QLocale__OldIrish                  = QLocale__Language(293)
	QLocale__OldNorse                  = QLocale__Language(294)
	QLocale__OldPersian                = QLocale__Language(295)
	QLocale__OldTurkish                = QLocale__Language(296)
	QLocale__Pahlavi                   = QLocale__Language(297)
	QLocale__Parthian                  = QLocale__Language(298)
	QLocale__Phoenician                = QLocale__Language(299)
	QLocale__PrakritLanguage           = QLocale__Language(300)
	QLocale__Rejang                    = QLocale__Language(301)
	QLocale__Sabaean                   = QLocale__Language(302)
	QLocale__Samaritan                 = QLocale__Language(303)
	QLocale__Santali                   = QLocale__Language(304)
	QLocale__Saurashtra                = QLocale__Language(305)
	QLocale__Sora                      = QLocale__Language(306)
	QLocale__Sylheti                   = QLocale__Language(307)
	QLocale__Tagbanwa                  = QLocale__Language(308)
	QLocale__TaiDam                    = QLocale__Language(309)
	QLocale__TaiNua                    = QLocale__Language(310)
	QLocale__Ugaritic                  = QLocale__Language(311)
	QLocale__Akoose                    = QLocale__Language(312)
	QLocale__Lakota                    = QLocale__Language(313)
	QLocale__StandardMoroccanTamazight = QLocale__Language(314)
	QLocale__Mapuche                   = QLocale__Language(315)
	QLocale__CentralKurdish            = QLocale__Language(316)
	QLocale__LowerSorbian              = QLocale__Language(317)
	QLocale__UpperSorbian              = QLocale__Language(318)
	QLocale__Kenyang                   = QLocale__Language(319)
	QLocale__Mohawk                    = QLocale__Language(320)
	QLocale__Nko                       = QLocale__Language(321)
	QLocale__Prussian                  = QLocale__Language(322)
	QLocale__Kiche                     = QLocale__Language(323)
	QLocale__SouthernSami              = QLocale__Language(324)
	QLocale__LuleSami                  = QLocale__Language(325)
	QLocale__InariSami                 = QLocale__Language(326)
	QLocale__SkoltSami                 = QLocale__Language(327)
	QLocale__Warlpiri                  = QLocale__Language(328)
	QLocale__ManichaeanMiddlePersian   = QLocale__Language(329)
	QLocale__Mende                     = QLocale__Language(330)
	QLocale__AncientNorthArabian       = QLocale__Language(331)
	QLocale__LinearA                   = QLocale__Language(332)
	QLocale__HmongNjua                 = QLocale__Language(333)
	QLocale__Ho                        = QLocale__Language(334)
	QLocale__Lezghian                  = QLocale__Language(335)
	QLocale__Bassa                     = QLocale__Language(336)
	QLocale__Mono                      = QLocale__Language(337)
	QLocale__TedimChin                 = QLocale__Language(338)
	QLocale__Maithili                  = QLocale__Language(339)
	QLocale__Ahom                      = QLocale__Language(340)
	QLocale__AmericanSignLanguage      = QLocale__Language(341)
	QLocale__ArdhamagadhiPrakrit       = QLocale__Language(342)
	QLocale__Bhojpuri                  = QLocale__Language(343)
	QLocale__HieroglyphicLuwian        = QLocale__Language(344)
	QLocale__LiteraryChinese           = QLocale__Language(345)
	QLocale__Mazanderani               = QLocale__Language(346)
	QLocale__Mru                       = QLocale__Language(347)
	QLocale__Newari                    = QLocale__Language(348)
	QLocale__NorthernLuri              = QLocale__Language(349)
	QLocale__Palauan                   = QLocale__Language(350)
	QLocale__Papiamento                = QLocale__Language(351)
	QLocale__Saraiki                   = QLocale__Language(352)
	QLocale__TokelauLanguage           = QLocale__Language(353)
	QLocale__TokPisin                  = QLocale__Language(354)
	QLocale__TuvaluLanguage            = QLocale__Language(355)
	QLocale__UncodedLanguages          = QLocale__Language(356)
	QLocale__Cantonese                 = QLocale__Language(357)
	QLocale__Osage                     = QLocale__Language(358)
	QLocale__Tangut                    = QLocale__Language(359)
	QLocale__Norwegian                 = QLocale__Language(QLocale__NorwegianBokmal)
	QLocale__Moldavian                 = QLocale__Language(QLocale__Romanian)
	QLocale__SerboCroatian             = QLocale__Language(QLocale__Serbian)
	QLocale__Tagalog                   = QLocale__Language(QLocale__Filipino)
	QLocale__Twi                       = QLocale__Language(QLocale__Akan)
	QLocale__Afan                      = QLocale__Language(QLocale__Oromo)
	QLocale__Byelorussian              = QLocale__Language(QLocale__Belarusian)
	QLocale__Bhutani                   = QLocale__Language(QLocale__Dzongkha)
	QLocale__Cambodian                 = QLocale__Language(QLocale__Khmer)
	QLocale__Kurundi                   = QLocale__Language(QLocale__Rundi)
	QLocale__RhaetoRomance             = QLocale__Language(QLocale__Romansh)
	QLocale__Chewa                     = QLocale__Language(QLocale__Nyanja)
	QLocale__Frisian                   = QLocale__Language(QLocale__WesternFrisian)
	QLocale__Uigur                     = QLocale__Language(QLocale__Uighur)
	QLocale__LastLanguage              = QLocale__Language(QLocale__Tangut)
)

//QLocale::MeasurementSystem
type QLocale__MeasurementSystem int64

const (
	QLocale__MetricSystem     = QLocale__MeasurementSystem(0)
	QLocale__ImperialUSSystem = QLocale__MeasurementSystem(1)
	QLocale__ImperialUKSystem = QLocale__MeasurementSystem(2)
	QLocale__ImperialSystem   = QLocale__MeasurementSystem(QLocale__ImperialUSSystem)
)

//QLocale::NumberOption
type QLocale__NumberOption int64

const (
	QLocale__DefaultNumberOptions        = QLocale__NumberOption(0x0)
	QLocale__OmitGroupSeparator          = QLocale__NumberOption(0x01)
	QLocale__RejectGroupSeparator        = QLocale__NumberOption(0x02)
	QLocale__OmitLeadingZeroInExponent   = QLocale__NumberOption(0x04)
	QLocale__RejectLeadingZeroInExponent = QLocale__NumberOption(0x08)
)

//QLocale::QuotationStyle
type QLocale__QuotationStyle int64

var (
	QLocale__StandardQuotation  = QLocale__QuotationStyle(0)
	QLocale__AlternateQuotation = QLocale__QuotationStyle(1)
)

//QLocale::Script
type QLocale__Script int64

const (
	QLocale__AnyScript                   = QLocale__Script(0)
	QLocale__ArabicScript                = QLocale__Script(1)
	QLocale__CyrillicScript              = QLocale__Script(2)
	QLocale__DeseretScript               = QLocale__Script(3)
	QLocale__GurmukhiScript              = QLocale__Script(4)
	QLocale__SimplifiedHanScript         = QLocale__Script(5)
	QLocale__TraditionalHanScript        = QLocale__Script(6)
	QLocale__LatinScript                 = QLocale__Script(7)
	QLocale__MongolianScript             = QLocale__Script(8)
	QLocale__TifinaghScript              = QLocale__Script(9)
	QLocale__ArmenianScript              = QLocale__Script(10)
	QLocale__BengaliScript               = QLocale__Script(11)
	QLocale__CherokeeScript              = QLocale__Script(12)
	QLocale__DevanagariScript            = QLocale__Script(13)
	QLocale__EthiopicScript              = QLocale__Script(14)
	QLocale__GeorgianScript              = QLocale__Script(15)
	QLocale__GreekScript                 = QLocale__Script(16)
	QLocale__GujaratiScript              = QLocale__Script(17)
	QLocale__HebrewScript                = QLocale__Script(18)
	QLocale__JapaneseScript              = QLocale__Script(19)
	QLocale__KhmerScript                 = QLocale__Script(20)
	QLocale__KannadaScript               = QLocale__Script(21)
	QLocale__KoreanScript                = QLocale__Script(22)
	QLocale__LaoScript                   = QLocale__Script(23)
	QLocale__MalayalamScript             = QLocale__Script(24)
	QLocale__MyanmarScript               = QLocale__Script(25)
	QLocale__OriyaScript                 = QLocale__Script(26)
	QLocale__TamilScript                 = QLocale__Script(27)
	QLocale__TeluguScript                = QLocale__Script(28)
	QLocale__ThaanaScript                = QLocale__Script(29)
	QLocale__ThaiScript                  = QLocale__Script(30)
	QLocale__TibetanScript               = QLocale__Script(31)
	QLocale__SinhalaScript               = QLocale__Script(32)
	QLocale__SyriacScript                = QLocale__Script(33)
	QLocale__YiScript                    = QLocale__Script(34)
	QLocale__VaiScript                   = QLocale__Script(35)
	QLocale__AvestanScript               = QLocale__Script(36)
	QLocale__BalineseScript              = QLocale__Script(37)
	QLocale__BamumScript                 = QLocale__Script(38)
	QLocale__BatakScript                 = QLocale__Script(39)
	QLocale__BopomofoScript              = QLocale__Script(40)
	QLocale__BrahmiScript                = QLocale__Script(41)
	QLocale__BugineseScript              = QLocale__Script(42)
	QLocale__BuhidScript                 = QLocale__Script(43)
	QLocale__CanadianAboriginalScript    = QLocale__Script(44)
	QLocale__CarianScript                = QLocale__Script(45)
	QLocale__ChakmaScript                = QLocale__Script(46)
	QLocale__ChamScript                  = QLocale__Script(47)
	QLocale__CopticScript                = QLocale__Script(48)
	QLocale__CypriotScript               = QLocale__Script(49)
	QLocale__EgyptianHieroglyphsScript   = QLocale__Script(50)
	QLocale__FraserScript                = QLocale__Script(51)
	QLocale__GlagoliticScript            = QLocale__Script(52)
	QLocale__GothicScript                = QLocale__Script(53)
	QLocale__HanScript                   = QLocale__Script(54)
	QLocale__HangulScript                = QLocale__Script(55)
	QLocale__HanunooScript               = QLocale__Script(56)
	QLocale__ImperialAramaicScript       = QLocale__Script(57)
	QLocale__InscriptionalPahlaviScript  = QLocale__Script(58)
	QLocale__InscriptionalParthianScript = QLocale__Script(59)
	QLocale__JavaneseScript              = QLocale__Script(60)
	QLocale__KaithiScript                = QLocale__Script(61)
	QLocale__KatakanaScript              = QLocale__Script(62)
	QLocale__KayahLiScript               = QLocale__Script(63)
	QLocale__KharoshthiScript            = QLocale__Script(64)
	QLocale__LannaScript                 = QLocale__Script(65)
	QLocale__LepchaScript                = QLocale__Script(66)
	QLocale__LimbuScript                 = QLocale__Script(67)
	QLocale__LinearBScript               = QLocale__Script(68)
	QLocale__LycianScript                = QLocale__Script(69)
	QLocale__LydianScript                = QLocale__Script(70)
	QLocale__MandaeanScript              = QLocale__Script(71)
	QLocale__MeiteiMayekScript           = QLocale__Script(72)
	QLocale__MeroiticScript              = QLocale__Script(73)
	QLocale__MeroiticCursiveScript       = QLocale__Script(74)
	QLocale__NkoScript                   = QLocale__Script(75)
	QLocale__NewTaiLueScript             = QLocale__Script(76)
	QLocale__OghamScript                 = QLocale__Script(77)
	QLocale__OlChikiScript               = QLocale__Script(78)
	QLocale__OldItalicScript             = QLocale__Script(79)
	QLocale__OldPersianScript            = QLocale__Script(80)
	QLocale__OldSouthArabianScript       = QLocale__Script(81)
	QLocale__OrkhonScript                = QLocale__Script(82)
	QLocale__OsmanyaScript               = QLocale__Script(83)
	QLocale__PhagsPaScript               = QLocale__Script(84)
	QLocale__PhoenicianScript            = QLocale__Script(85)
	QLocale__PollardPhoneticScript       = QLocale__Script(86)
	QLocale__RejangScript                = QLocale__Script(87)
	QLocale__RunicScript                 = QLocale__Script(88)
	QLocale__SamaritanScript             = QLocale__Script(89)
	QLocale__SaurashtraScript            = QLocale__Script(90)
	QLocale__SharadaScript               = QLocale__Script(91)
	QLocale__ShavianScript               = QLocale__Script(92)
	QLocale__SoraSompengScript           = QLocale__Script(93)
	QLocale__CuneiformScript             = QLocale__Script(94)
	QLocale__SundaneseScript             = QLocale__Script(95)
	QLocale__SylotiNagriScript           = QLocale__Script(96)
	QLocale__TagalogScript               = QLocale__Script(97)
	QLocale__TagbanwaScript              = QLocale__Script(98)
	QLocale__TaiLeScript                 = QLocale__Script(99)
	QLocale__TaiVietScript               = QLocale__Script(100)
	QLocale__TakriScript                 = QLocale__Script(101)
	QLocale__UgariticScript              = QLocale__Script(102)
	QLocale__BrailleScript               = QLocale__Script(103)
	QLocale__HiraganaScript              = QLocale__Script(104)
	QLocale__CaucasianAlbanianScript     = QLocale__Script(105)
	QLocale__BassaVahScript              = QLocale__Script(106)
	QLocale__DuployanScript              = QLocale__Script(107)
	QLocale__ElbasanScript               = QLocale__Script(108)
	QLocale__GranthaScript               = QLocale__Script(109)
	QLocale__PahawhHmongScript           = QLocale__Script(110)
	QLocale__KhojkiScript                = QLocale__Script(111)
	QLocale__LinearAScript               = QLocale__Script(112)
	QLocale__MahajaniScript              = QLocale__Script(113)
	QLocale__ManichaeanScript            = QLocale__Script(114)
	QLocale__MendeKikakuiScript          = QLocale__Script(115)
	QLocale__ModiScript                  = QLocale__Script(116)
	QLocale__MroScript                   = QLocale__Script(117)
	QLocale__OldNorthArabianScript       = QLocale__Script(118)
	QLocale__NabataeanScript             = QLocale__Script(119)
	QLocale__PalmyreneScript             = QLocale__Script(120)
	QLocale__PauCinHauScript             = QLocale__Script(121)
	QLocale__OldPermicScript             = QLocale__Script(122)
	QLocale__PsalterPahlaviScript        = QLocale__Script(123)
	QLocale__SiddhamScript               = QLocale__Script(124)
	QLocale__KhudawadiScript             = QLocale__Script(125)
	QLocale__TirhutaScript               = QLocale__Script(126)
	QLocale__VarangKshitiScript          = QLocale__Script(127)
	QLocale__AhomScript                  = QLocale__Script(128)
	QLocale__AnatolianHieroglyphsScript  = QLocale__Script(129)
	QLocale__HatranScript                = QLocale__Script(130)
	QLocale__MultaniScript               = QLocale__Script(131)
	QLocale__OldHungarianScript          = QLocale__Script(132)
	QLocale__SignWritingScript           = QLocale__Script(133)
	QLocale__AdlamScript                 = QLocale__Script(134)
	QLocale__BhaiksukiScript             = QLocale__Script(135)
	QLocale__MarchenScript               = QLocale__Script(136)
	QLocale__NewaScript                  = QLocale__Script(137)
	QLocale__OsageScript                 = QLocale__Script(138)
	QLocale__TangutScript                = QLocale__Script(139)
	QLocale__HanWithBopomofoScript       = QLocale__Script(140)
	QLocale__JamoScript                  = QLocale__Script(141)
	QLocale__SimplifiedChineseScript     = QLocale__Script(QLocale__SimplifiedHanScript)
	QLocale__TraditionalChineseScript    = QLocale__Script(QLocale__TraditionalHanScript)
	QLocale__LastScript                  = QLocale__Script(QLocale__JamoScript)
)

type QLocale struct {
	ptr unsafe.Pointer
}

type QLocale_ITF interface {
	QLocale_PTR() *QLocale
}

func (p *QLocale) QLocale_PTR() *QLocale {
	return p
}

func (p *QLocale) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLocale) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLocale(ptr QLocale_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLocale_PTR().Pointer()
	}
	return nil
}

func NewQLocaleFromPointer(ptr unsafe.Pointer) *QLocale {
	var n = new(QLocale)
	n.SetPointer(ptr)
	return n
}
func NewQLocale() *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_NewQLocale())
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func NewQLocale3(language QLocale__Language, country QLocale__Country) *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_NewQLocale3(C.longlong(language), C.longlong(country)))
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func NewQLocale4(language QLocale__Language, script QLocale__Script, country QLocale__Country) *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_NewQLocale4(C.longlong(language), C.longlong(script), C.longlong(country)))
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func NewQLocale5(other QLocale_ITF) *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_NewQLocale5(PointerFromQLocale(other)))
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func NewQLocale2(name string) *QLocale {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQLocaleFromPointer(C.QLocale_NewQLocale2(nameC))
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func (ptr *QLocale) AmText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_AmText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLocale) Bcp47Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_Bcp47Name(ptr.Pointer()))
	}
	return ""
}

func QLocale_C() *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_QLocale_C())
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func (ptr *QLocale) C() *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_QLocale_C())
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func (ptr *QLocale) Country() QLocale__Country {
	if ptr.Pointer() != nil {
		return QLocale__Country(C.QLocale_Country(ptr.Pointer()))
	}
	return 0
}

func QLocale_CountryToString(country QLocale__Country) string {
	return cGoUnpackString(C.QLocale_QLocale_CountryToString(C.longlong(country)))
}

func (ptr *QLocale) CountryToString(country QLocale__Country) string {
	return cGoUnpackString(C.QLocale_QLocale_CountryToString(C.longlong(country)))
}

func (ptr *QLocale) CreateSeparatedList(list []string) string {
	if ptr.Pointer() != nil {
		var listC = C.CString(strings.Join(list, "|"))
		defer C.free(unsafe.Pointer(listC))
		return cGoUnpackString(C.QLocale_CreateSeparatedList(ptr.Pointer(), listC))
	}
	return ""
}

func (ptr *QLocale) CurrencySymbol(format QLocale__CurrencySymbolFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_CurrencySymbol(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QLocale) DateFormat(format QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_DateFormat(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QLocale) DateTimeFormat(format QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_DateTimeFormat(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QLocale) DayName(day int, ty QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_DayName(ptr.Pointer(), C.int(int32(day)), C.longlong(ty)))
	}
	return ""
}

func (ptr *QLocale) DecimalPoint() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QLocale_DecimalPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) Exponential() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QLocale_Exponential(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) FirstDayOfWeek() Qt__DayOfWeek {
	if ptr.Pointer() != nil {
		return Qt__DayOfWeek(C.QLocale_FirstDayOfWeek(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLocale) GroupSeparator() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QLocale_GroupSeparator(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) Language() QLocale__Language {
	if ptr.Pointer() != nil {
		return QLocale__Language(C.QLocale_Language(ptr.Pointer()))
	}
	return 0
}

func QLocale_LanguageToString(language QLocale__Language) string {
	return cGoUnpackString(C.QLocale_QLocale_LanguageToString(C.longlong(language)))
}

func (ptr *QLocale) LanguageToString(language QLocale__Language) string {
	return cGoUnpackString(C.QLocale_QLocale_LanguageToString(C.longlong(language)))
}

func QLocale_MatchingLocales(language QLocale__Language, script QLocale__Script, country QLocale__Country) []*QLocale {
	return func(l C.struct_QtCore_PackedList) []*QLocale {
		var out = make([]*QLocale, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQLocaleFromPointer(l.data).matchingLocales_atList(i)
		}
		return out
	}(C.QLocale_QLocale_MatchingLocales(C.longlong(language), C.longlong(script), C.longlong(country)))
}

func (ptr *QLocale) MatchingLocales(language QLocale__Language, script QLocale__Script, country QLocale__Country) []*QLocale {
	return func(l C.struct_QtCore_PackedList) []*QLocale {
		var out = make([]*QLocale, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQLocaleFromPointer(l.data).matchingLocales_atList(i)
		}
		return out
	}(C.QLocale_QLocale_MatchingLocales(C.longlong(language), C.longlong(script), C.longlong(country)))
}

func (ptr *QLocale) MeasurementSystem() QLocale__MeasurementSystem {
	if ptr.Pointer() != nil {
		return QLocale__MeasurementSystem(C.QLocale_MeasurementSystem(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLocale) MonthName(month int, ty QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_MonthName(ptr.Pointer(), C.int(int32(month)), C.longlong(ty)))
	}
	return ""
}

func (ptr *QLocale) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLocale) NativeCountryName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_NativeCountryName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLocale) NativeLanguageName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_NativeLanguageName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLocale) NegativeSign() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QLocale_NegativeSign(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) NumberOptions() QLocale__NumberOption {
	if ptr.Pointer() != nil {
		return QLocale__NumberOption(C.QLocale_NumberOptions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLocale) Percent() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QLocale_Percent(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) PmText() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_PmText(ptr.Pointer()))
	}
	return ""
}

func (ptr *QLocale) PositiveSign() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QLocale_PositiveSign(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) QuoteString(str string, style QLocale__QuotationStyle) string {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return cGoUnpackString(C.QLocale_QuoteString(ptr.Pointer(), strC, C.longlong(style)))
	}
	return ""
}

func (ptr *QLocale) QuoteString2(str QStringRef_ITF, style QLocale__QuotationStyle) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_QuoteString2(ptr.Pointer(), PointerFromQStringRef(str), C.longlong(style)))
	}
	return ""
}

func (ptr *QLocale) Script() QLocale__Script {
	if ptr.Pointer() != nil {
		return QLocale__Script(C.QLocale_Script(ptr.Pointer()))
	}
	return 0
}

func QLocale_ScriptToString(script QLocale__Script) string {
	return cGoUnpackString(C.QLocale_QLocale_ScriptToString(C.longlong(script)))
}

func (ptr *QLocale) ScriptToString(script QLocale__Script) string {
	return cGoUnpackString(C.QLocale_QLocale_ScriptToString(C.longlong(script)))
}

func QLocale_SetDefault(locale QLocale_ITF) {
	C.QLocale_QLocale_SetDefault(PointerFromQLocale(locale))
}

func (ptr *QLocale) SetDefault(locale QLocale_ITF) {
	C.QLocale_QLocale_SetDefault(PointerFromQLocale(locale))
}

func (ptr *QLocale) SetNumberOptions(options QLocale__NumberOption) {
	if ptr.Pointer() != nil {
		C.QLocale_SetNumberOptions(ptr.Pointer(), C.longlong(options))
	}
}

func (ptr *QLocale) StandaloneDayName(day int, ty QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_StandaloneDayName(ptr.Pointer(), C.int(int32(day)), C.longlong(ty)))
	}
	return ""
}

func (ptr *QLocale) StandaloneMonthName(month int, ty QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_StandaloneMonthName(ptr.Pointer(), C.int(int32(month)), C.longlong(ty)))
	}
	return ""
}

func (ptr *QLocale) Swap(other QLocale_ITF) {
	if ptr.Pointer() != nil {
		C.QLocale_Swap(ptr.Pointer(), PointerFromQLocale(other))
	}
}

func QLocale_System() *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_QLocale_System())
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func (ptr *QLocale) System() *QLocale {
	var tmpValue = NewQLocaleFromPointer(C.QLocale_QLocale_System())
	runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
	return tmpValue
}

func (ptr *QLocale) TextDirection() Qt__LayoutDirection {
	if ptr.Pointer() != nil {
		return Qt__LayoutDirection(C.QLocale_TextDirection(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLocale) TimeFormat(format QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_TimeFormat(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString7(value float64, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString7(ptr.Pointer(), C.double(value), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString8(value float64, symbol string, precision int) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString8(ptr.Pointer(), C.double(value), symbolC, C.int(int32(precision))))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString10(i float32, symbol string, precision int) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString10(ptr.Pointer(), C.float(i), symbolC, C.int(int32(precision))))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString9(value float32, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString9(ptr.Pointer(), C.float(value), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString5(value int, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString5(ptr.Pointer(), C.int(int32(value)), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString(value int64, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString(ptr.Pointer(), C.longlong(value), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString2(value uint64, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString2(ptr.Pointer(), C.ulonglong(value), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString3(value int16, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString3(ptr.Pointer(), C.short(value), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString6(value uint, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString6(ptr.Pointer(), C.uint(uint32(value)), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToCurrencyString4(value uint16, symbol string) string {
	if ptr.Pointer() != nil {
		var symbolC = C.CString(symbol)
		defer C.free(unsafe.Pointer(symbolC))
		return cGoUnpackString(C.QLocale_ToCurrencyString4(ptr.Pointer(), C.ushort(value), symbolC))
	}
	return ""
}

func (ptr *QLocale) ToDate(stri string, format QLocale__FormatType) *QDate {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var tmpValue = NewQDateFromPointer(C.QLocale_ToDate(ptr.Pointer(), striC, C.longlong(format)))
		runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) ToDate2(stri string, format string) *QDate {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		var tmpValue = NewQDateFromPointer(C.QLocale_ToDate2(ptr.Pointer(), striC, formatC))
		runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) ToDateTime(stri string, format QLocale__FormatType) *QDateTime {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var tmpValue = NewQDateTimeFromPointer(C.QLocale_ToDateTime(ptr.Pointer(), striC, C.longlong(format)))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) ToDateTime2(stri string, format string) *QDateTime {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		var tmpValue = NewQDateTimeFromPointer(C.QLocale_ToDateTime2(ptr.Pointer(), striC, formatC))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) ToDouble(s string, ok bool) float64 {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return float64(C.QLocale_ToDouble(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToDouble2(s QStringRef_ITF, ok bool) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QLocale_ToDouble2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToFloat(s string, ok bool) float32 {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return float32(C.QLocale_ToFloat(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToFloat2(s QStringRef_ITF, ok bool) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QLocale_ToFloat2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToInt(s string, ok bool) int {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return int(int32(C.QLocale_ToInt(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QLocale) ToInt2(s QStringRef_ITF, ok bool) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLocale_ToInt2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QLocale) ToLongLong(s string, ok bool) int64 {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return int64(C.QLocale_ToLongLong(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToLongLong2(s QStringRef_ITF, ok bool) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QLocale_ToLongLong2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToLower(str string) string {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return cGoUnpackString(C.QLocale_ToLower(ptr.Pointer(), strC))
	}
	return ""
}

func (ptr *QLocale) ToShort(s string, ok bool) int16 {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return int16(C.QLocale_ToShort(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToShort2(s QStringRef_ITF, ok bool) int16 {
	if ptr.Pointer() != nil {
		return int16(C.QLocale_ToShort2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToString10(date QDate_ITF, format QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString10(ptr.Pointer(), PointerFromQDate(date), C.longlong(format)))
	}
	return ""
}

func (ptr *QLocale) ToString9(date QDate_ITF, format string) string {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return cGoUnpackString(C.QLocale_ToString9(ptr.Pointer(), PointerFromQDate(date), formatC))
	}
	return ""
}

func (ptr *QLocale) ToString13(dateTime QDateTime_ITF, format QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString13(ptr.Pointer(), PointerFromQDateTime(dateTime), C.longlong(format)))
	}
	return ""
}

func (ptr *QLocale) ToString14(dateTime QDateTime_ITF, format string) string {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return cGoUnpackString(C.QLocale_ToString14(ptr.Pointer(), PointerFromQDateTime(dateTime), formatC))
	}
	return ""
}

func (ptr *QLocale) ToString12(time QTime_ITF, format QLocale__FormatType) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString12(ptr.Pointer(), PointerFromQTime(time), C.longlong(format)))
	}
	return ""
}

func (ptr *QLocale) ToString11(time QTime_ITF, format string) string {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return cGoUnpackString(C.QLocale_ToString11(ptr.Pointer(), PointerFromQTime(time), formatC))
	}
	return ""
}

func (ptr *QLocale) ToString7(i float64, f string, prec int) string {
	if ptr.Pointer() != nil {
		var fC = C.CString(f)
		defer C.free(unsafe.Pointer(fC))
		return cGoUnpackString(C.QLocale_ToString7(ptr.Pointer(), C.double(i), fC, C.int(int32(prec))))
	}
	return ""
}

func (ptr *QLocale) ToString8(i float32, f string, prec int) string {
	if ptr.Pointer() != nil {
		var fC = C.CString(f)
		defer C.free(unsafe.Pointer(fC))
		return cGoUnpackString(C.QLocale_ToString8(ptr.Pointer(), C.float(i), fC, C.int(int32(prec))))
	}
	return ""
}

func (ptr *QLocale) ToString5(i int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString5(ptr.Pointer(), C.int(int32(i))))
	}
	return ""
}

func (ptr *QLocale) ToString(i int64) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString(ptr.Pointer(), C.longlong(i)))
	}
	return ""
}

func (ptr *QLocale) ToString2(i uint64) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString2(ptr.Pointer(), C.ulonglong(i)))
	}
	return ""
}

func (ptr *QLocale) ToString3(i int16) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString3(ptr.Pointer(), C.short(i)))
	}
	return ""
}

func (ptr *QLocale) ToString6(i uint) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString6(ptr.Pointer(), C.uint(uint32(i))))
	}
	return ""
}

func (ptr *QLocale) ToString4(i uint16) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLocale_ToString4(ptr.Pointer(), C.ushort(i)))
	}
	return ""
}

func (ptr *QLocale) ToTime(stri string, format QLocale__FormatType) *QTime {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var tmpValue = NewQTimeFromPointer(C.QLocale_ToTime(ptr.Pointer(), striC, C.longlong(format)))
		runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) ToTime2(stri string, format string) *QTime {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		var tmpValue = NewQTimeFromPointer(C.QLocale_ToTime2(ptr.Pointer(), striC, formatC))
		runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) ToUInt(s string, ok bool) uint {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return uint(uint32(C.QLocale_ToUInt(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QLocale) ToUInt2(s QStringRef_ITF, ok bool) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QLocale_ToUInt2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QLocale) ToULongLong(s string, ok bool) uint64 {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return uint64(C.QLocale_ToULongLong(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToULongLong2(s QStringRef_ITF, ok bool) uint64 {
	if ptr.Pointer() != nil {
		return uint64(C.QLocale_ToULongLong2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToUShort(s string, ok bool) uint16 {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return uint16(C.QLocale_ToUShort(ptr.Pointer(), sC, C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToUShort2(s QStringRef_ITF, ok bool) uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QLocale_ToUShort2(ptr.Pointer(), PointerFromQStringRef(s), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QLocale) ToUpper(str string) string {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return cGoUnpackString(C.QLocale_ToUpper(ptr.Pointer(), strC))
	}
	return ""
}

func (ptr *QLocale) UiLanguages() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QLocale_UiLanguages(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QLocale) ZeroDigit() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QLocale_ZeroDigit(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QLocale) DestroyQLocale() {
	if ptr.Pointer() != nil {
		C.QLocale_DestroyQLocale(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QLocale) matchingLocales_atList(i int) *QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLocaleFromPointer(C.QLocale_matchingLocales_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

//QLockFile::LockError
type QLockFile__LockError int64

const (
	QLockFile__NoError         = QLockFile__LockError(0)
	QLockFile__LockFailedError = QLockFile__LockError(1)
	QLockFile__PermissionError = QLockFile__LockError(2)
	QLockFile__UnknownError    = QLockFile__LockError(3)
)

type QLockFile struct {
	ptr unsafe.Pointer
}

type QLockFile_ITF interface {
	QLockFile_PTR() *QLockFile
}

func (p *QLockFile) QLockFile_PTR() *QLockFile {
	return p
}

func (p *QLockFile) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLockFile) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLockFile(ptr QLockFile_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLockFile_PTR().Pointer()
	}
	return nil
}

func NewQLockFileFromPointer(ptr unsafe.Pointer) *QLockFile {
	var n = new(QLockFile)
	n.SetPointer(ptr)
	return n
}
func NewQLockFile(fileName string) *QLockFile {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQLockFileFromPointer(C.QLockFile_NewQLockFile(fileNameC))
	runtime.SetFinalizer(tmpValue, (*QLockFile).DestroyQLockFile)
	return tmpValue
}

func (ptr *QLockFile) Error() QLockFile__LockError {
	if ptr.Pointer() != nil {
		return QLockFile__LockError(C.QLockFile_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QLockFile) GetLockInfo(pid int64, hostname string, appname string) bool {
	if ptr.Pointer() != nil {
		var hostnameC = C.CString(hostname)
		defer C.free(unsafe.Pointer(hostnameC))
		var appnameC = C.CString(appname)
		defer C.free(unsafe.Pointer(appnameC))
		return C.QLockFile_GetLockInfo(ptr.Pointer(), C.longlong(pid), hostnameC, appnameC) != 0
	}
	return false
}

func (ptr *QLockFile) IsLocked() bool {
	if ptr.Pointer() != nil {
		return C.QLockFile_IsLocked(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLockFile) Lock() bool {
	if ptr.Pointer() != nil {
		return C.QLockFile_Lock(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLockFile) RemoveStaleLockFile() bool {
	if ptr.Pointer() != nil {
		return C.QLockFile_RemoveStaleLockFile(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLockFile) SetStaleLockTime(staleLockTime int) {
	if ptr.Pointer() != nil {
		C.QLockFile_SetStaleLockTime(ptr.Pointer(), C.int(int32(staleLockTime)))
	}
}

func (ptr *QLockFile) StaleLockTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QLockFile_StaleLockTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QLockFile) TryLock(timeout int) bool {
	if ptr.Pointer() != nil {
		return C.QLockFile_TryLock(ptr.Pointer(), C.int(int32(timeout))) != 0
	}
	return false
}

func (ptr *QLockFile) DestroyQLockFile() {
	if ptr.Pointer() != nil {
		C.QLockFile_DestroyQLockFile(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QLockFile) Unlock() {
	if ptr.Pointer() != nil {
		C.QLockFile_Unlock(ptr.Pointer())
	}
}

type QLoggingCategory struct {
	ptr unsafe.Pointer
}

type QLoggingCategory_ITF interface {
	QLoggingCategory_PTR() *QLoggingCategory
}

func (p *QLoggingCategory) QLoggingCategory_PTR() *QLoggingCategory {
	return p
}

func (p *QLoggingCategory) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QLoggingCategory) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQLoggingCategory(ptr QLoggingCategory_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QLoggingCategory_PTR().Pointer()
	}
	return nil
}

func NewQLoggingCategoryFromPointer(ptr unsafe.Pointer) *QLoggingCategory {
	var n = new(QLoggingCategory)
	n.SetPointer(ptr)
	return n
}
func NewQLoggingCategory(category string) *QLoggingCategory {
	var categoryC = C.CString(category)
	defer C.free(unsafe.Pointer(categoryC))
	var tmpValue = NewQLoggingCategoryFromPointer(C.QLoggingCategory_NewQLoggingCategory(categoryC))
	runtime.SetFinalizer(tmpValue, (*QLoggingCategory).DestroyQLoggingCategory)
	return tmpValue
}

func (ptr *QLoggingCategory) CategoryName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QLoggingCategory_CategoryName(ptr.Pointer()))
	}
	return ""
}

func QLoggingCategory_DefaultCategory() *QLoggingCategory {
	return NewQLoggingCategoryFromPointer(C.QLoggingCategory_QLoggingCategory_DefaultCategory())
}

func (ptr *QLoggingCategory) DefaultCategory() *QLoggingCategory {
	return NewQLoggingCategoryFromPointer(C.QLoggingCategory_QLoggingCategory_DefaultCategory())
}

func (ptr *QLoggingCategory) IsCriticalEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QLoggingCategory_IsCriticalEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLoggingCategory) IsDebugEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QLoggingCategory_IsDebugEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLoggingCategory) IsInfoEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QLoggingCategory_IsInfoEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QLoggingCategory) IsWarningEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QLoggingCategory_IsWarningEnabled(ptr.Pointer()) != 0
	}
	return false
}

func QLoggingCategory_SetFilterRules(rules string) {
	var rulesC = C.CString(rules)
	defer C.free(unsafe.Pointer(rulesC))
	C.QLoggingCategory_QLoggingCategory_SetFilterRules(rulesC)
}

func (ptr *QLoggingCategory) SetFilterRules(rules string) {
	var rulesC = C.CString(rules)
	defer C.free(unsafe.Pointer(rulesC))
	C.QLoggingCategory_QLoggingCategory_SetFilterRules(rulesC)
}

func (ptr *QLoggingCategory) DestroyQLoggingCategory() {
	if ptr.Pointer() != nil {
		C.QLoggingCategory_DestroyQLoggingCategory(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QMap struct {
	ptr unsafe.Pointer
}

type QMap_ITF interface {
	QMap_PTR() *QMap
}

func (p *QMap) QMap_PTR() *QMap {
	return p
}

func (p *QMap) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMap) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMap(ptr QMap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMap_PTR().Pointer()
	}
	return nil
}

func NewQMapFromPointer(ptr unsafe.Pointer) *QMap {
	var n = new(QMap)
	n.SetPointer(ptr)
	return n
}

type QMapIterator struct {
	ptr unsafe.Pointer
}

type QMapIterator_ITF interface {
	QMapIterator_PTR() *QMapIterator
}

func (p *QMapIterator) QMapIterator_PTR() *QMapIterator {
	return p
}

func (p *QMapIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMapIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMapIterator(ptr QMapIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMapIterator_PTR().Pointer()
	}
	return nil
}

func NewQMapIteratorFromPointer(ptr unsafe.Pointer) *QMapIterator {
	var n = new(QMapIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMapIterator) DestroyQMapIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMargins struct {
	ptr unsafe.Pointer
}

type QMargins_ITF interface {
	QMargins_PTR() *QMargins
}

func (p *QMargins) QMargins_PTR() *QMargins {
	return p
}

func (p *QMargins) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMargins) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMargins(ptr QMargins_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMargins_PTR().Pointer()
	}
	return nil
}

func NewQMarginsFromPointer(ptr unsafe.Pointer) *QMargins {
	var n = new(QMargins)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMargins) DestroyQMargins() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQMargins() *QMargins {
	var tmpValue = NewQMarginsFromPointer(C.QMargins_NewQMargins())
	runtime.SetFinalizer(tmpValue, (*QMargins).DestroyQMargins)
	return tmpValue
}

func NewQMargins2(left int, top int, right int, bottom int) *QMargins {
	var tmpValue = NewQMarginsFromPointer(C.QMargins_NewQMargins2(C.int(int32(left)), C.int(int32(top)), C.int(int32(right)), C.int(int32(bottom))))
	runtime.SetFinalizer(tmpValue, (*QMargins).DestroyQMargins)
	return tmpValue
}

func (ptr *QMargins) Bottom() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMargins_Bottom(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMargins) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QMargins_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMargins) Left() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMargins_Left(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMargins) Right() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMargins_Right(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMargins) SetBottom(bottom int) {
	if ptr.Pointer() != nil {
		C.QMargins_SetBottom(ptr.Pointer(), C.int(int32(bottom)))
	}
}

func (ptr *QMargins) SetLeft(left int) {
	if ptr.Pointer() != nil {
		C.QMargins_SetLeft(ptr.Pointer(), C.int(int32(left)))
	}
}

func (ptr *QMargins) SetRight(right int) {
	if ptr.Pointer() != nil {
		C.QMargins_SetRight(ptr.Pointer(), C.int(int32(right)))
	}
}

func (ptr *QMargins) SetTop(Top int) {
	if ptr.Pointer() != nil {
		C.QMargins_SetTop(ptr.Pointer(), C.int(int32(Top)))
	}
}

func (ptr *QMargins) Top() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMargins_Top(ptr.Pointer())))
	}
	return 0
}

type QMarginsF struct {
	ptr unsafe.Pointer
}

type QMarginsF_ITF interface {
	QMarginsF_PTR() *QMarginsF
}

func (p *QMarginsF) QMarginsF_PTR() *QMarginsF {
	return p
}

func (p *QMarginsF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMarginsF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMarginsF(ptr QMarginsF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMarginsF_PTR().Pointer()
	}
	return nil
}

func NewQMarginsFFromPointer(ptr unsafe.Pointer) *QMarginsF {
	var n = new(QMarginsF)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMarginsF) DestroyQMarginsF() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQMarginsF() *QMarginsF {
	var tmpValue = NewQMarginsFFromPointer(C.QMarginsF_NewQMarginsF())
	runtime.SetFinalizer(tmpValue, (*QMarginsF).DestroyQMarginsF)
	return tmpValue
}

func NewQMarginsF3(margins QMargins_ITF) *QMarginsF {
	var tmpValue = NewQMarginsFFromPointer(C.QMarginsF_NewQMarginsF3(PointerFromQMargins(margins)))
	runtime.SetFinalizer(tmpValue, (*QMarginsF).DestroyQMarginsF)
	return tmpValue
}

func NewQMarginsF2(left float64, top float64, right float64, bottom float64) *QMarginsF {
	var tmpValue = NewQMarginsFFromPointer(C.QMarginsF_NewQMarginsF2(C.double(left), C.double(top), C.double(right), C.double(bottom)))
	runtime.SetFinalizer(tmpValue, (*QMarginsF).DestroyQMarginsF)
	return tmpValue
}

func (ptr *QMarginsF) Bottom() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QMarginsF_Bottom(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMarginsF) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QMarginsF_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMarginsF) Left() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QMarginsF_Left(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMarginsF) Right() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QMarginsF_Right(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMarginsF) SetBottom(bottom float64) {
	if ptr.Pointer() != nil {
		C.QMarginsF_SetBottom(ptr.Pointer(), C.double(bottom))
	}
}

func (ptr *QMarginsF) SetLeft(left float64) {
	if ptr.Pointer() != nil {
		C.QMarginsF_SetLeft(ptr.Pointer(), C.double(left))
	}
}

func (ptr *QMarginsF) SetRight(right float64) {
	if ptr.Pointer() != nil {
		C.QMarginsF_SetRight(ptr.Pointer(), C.double(right))
	}
}

func (ptr *QMarginsF) SetTop(Top float64) {
	if ptr.Pointer() != nil {
		C.QMarginsF_SetTop(ptr.Pointer(), C.double(Top))
	}
}

func (ptr *QMarginsF) ToMargins() *QMargins {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMarginsFromPointer(C.QMarginsF_ToMargins(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMargins).DestroyQMargins)
		return tmpValue
	}
	return nil
}

func (ptr *QMarginsF) Top() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QMarginsF_Top(ptr.Pointer()))
	}
	return 0
}

type QMessageAuthenticationCode struct {
	ptr unsafe.Pointer
}

type QMessageAuthenticationCode_ITF interface {
	QMessageAuthenticationCode_PTR() *QMessageAuthenticationCode
}

func (p *QMessageAuthenticationCode) QMessageAuthenticationCode_PTR() *QMessageAuthenticationCode {
	return p
}

func (p *QMessageAuthenticationCode) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMessageAuthenticationCode) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMessageAuthenticationCode(ptr QMessageAuthenticationCode_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMessageAuthenticationCode_PTR().Pointer()
	}
	return nil
}

func NewQMessageAuthenticationCodeFromPointer(ptr unsafe.Pointer) *QMessageAuthenticationCode {
	var n = new(QMessageAuthenticationCode)
	n.SetPointer(ptr)
	return n
}
func NewQMessageAuthenticationCode(method QCryptographicHash__Algorithm, key QByteArray_ITF) *QMessageAuthenticationCode {
	var tmpValue = NewQMessageAuthenticationCodeFromPointer(C.QMessageAuthenticationCode_NewQMessageAuthenticationCode(C.longlong(method), PointerFromQByteArray(key)))
	runtime.SetFinalizer(tmpValue, (*QMessageAuthenticationCode).DestroyQMessageAuthenticationCode)
	return tmpValue
}

func (ptr *QMessageAuthenticationCode) AddData3(device QIODevice_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMessageAuthenticationCode_AddData3(ptr.Pointer(), PointerFromQIODevice(device)) != 0
	}
	return false
}

func (ptr *QMessageAuthenticationCode) AddData2(data QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QMessageAuthenticationCode_AddData2(ptr.Pointer(), PointerFromQByteArray(data))
	}
}

func (ptr *QMessageAuthenticationCode) AddData(data string, length int) {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QMessageAuthenticationCode_AddData(ptr.Pointer(), dataC, C.int(int32(length)))
	}
}

func QMessageAuthenticationCode_Hash(message QByteArray_ITF, key QByteArray_ITF, method QCryptographicHash__Algorithm) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QMessageAuthenticationCode_QMessageAuthenticationCode_Hash(PointerFromQByteArray(message), PointerFromQByteArray(key), C.longlong(method)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QMessageAuthenticationCode) Hash(message QByteArray_ITF, key QByteArray_ITF, method QCryptographicHash__Algorithm) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QMessageAuthenticationCode_QMessageAuthenticationCode_Hash(PointerFromQByteArray(message), PointerFromQByteArray(key), C.longlong(method)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QMessageAuthenticationCode) Reset() {
	if ptr.Pointer() != nil {
		C.QMessageAuthenticationCode_Reset(ptr.Pointer())
	}
}

func (ptr *QMessageAuthenticationCode) Result() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QMessageAuthenticationCode_Result(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageAuthenticationCode) SetKey(key QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QMessageAuthenticationCode_SetKey(ptr.Pointer(), PointerFromQByteArray(key))
	}
}

func (ptr *QMessageAuthenticationCode) DestroyQMessageAuthenticationCode() {
	if ptr.Pointer() != nil {
		C.QMessageAuthenticationCode_DestroyQMessageAuthenticationCode(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QMessageLogContext struct {
	ptr unsafe.Pointer
}

type QMessageLogContext_ITF interface {
	QMessageLogContext_PTR() *QMessageLogContext
}

func (p *QMessageLogContext) QMessageLogContext_PTR() *QMessageLogContext {
	return p
}

func (p *QMessageLogContext) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMessageLogContext) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMessageLogContext(ptr QMessageLogContext_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMessageLogContext_PTR().Pointer()
	}
	return nil
}

func NewQMessageLogContextFromPointer(ptr unsafe.Pointer) *QMessageLogContext {
	var n = new(QMessageLogContext)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMessageLogContext) DestroyQMessageLogContext() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QMessageLogContext) Category() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMessageLogContext_Category(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMessageLogContext) File() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMessageLogContext_File(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMessageLogContext) Function() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMessageLogContext_Function(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMessageLogContext) Line() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMessageLogContext_Line(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMessageLogContext) SetLine(vin int) {
	if ptr.Pointer() != nil {
		C.QMessageLogContext_SetLine(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QMessageLogContext) Version() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMessageLogContext_Version(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMessageLogContext) SetVersion(vin int) {
	if ptr.Pointer() != nil {
		C.QMessageLogContext_SetVersion(ptr.Pointer(), C.int(int32(vin)))
	}
}

type QMessageLogger struct {
	ptr unsafe.Pointer
}

type QMessageLogger_ITF interface {
	QMessageLogger_PTR() *QMessageLogger
}

func (p *QMessageLogger) QMessageLogger_PTR() *QMessageLogger {
	return p
}

func (p *QMessageLogger) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMessageLogger) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMessageLogger(ptr QMessageLogger_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMessageLogger_PTR().Pointer()
	}
	return nil
}

func NewQMessageLoggerFromPointer(ptr unsafe.Pointer) *QMessageLogger {
	var n = new(QMessageLogger)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMessageLogger) DestroyQMessageLogger() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQMessageLogger() *QMessageLogger {
	var tmpValue = NewQMessageLoggerFromPointer(C.QMessageLogger_NewQMessageLogger())
	runtime.SetFinalizer(tmpValue, (*QMessageLogger).DestroyQMessageLogger)
	return tmpValue
}

func NewQMessageLogger2(file string, line int, function string) *QMessageLogger {
	var fileC = C.CString(file)
	defer C.free(unsafe.Pointer(fileC))
	var functionC = C.CString(function)
	defer C.free(unsafe.Pointer(functionC))
	var tmpValue = NewQMessageLoggerFromPointer(C.QMessageLogger_NewQMessageLogger2(fileC, C.int(int32(line)), functionC))
	runtime.SetFinalizer(tmpValue, (*QMessageLogger).DestroyQMessageLogger)
	return tmpValue
}

func NewQMessageLogger3(file string, line int, function string, category string) *QMessageLogger {
	var fileC = C.CString(file)
	defer C.free(unsafe.Pointer(fileC))
	var functionC = C.CString(function)
	defer C.free(unsafe.Pointer(functionC))
	var categoryC = C.CString(category)
	defer C.free(unsafe.Pointer(categoryC))
	var tmpValue = NewQMessageLoggerFromPointer(C.QMessageLogger_NewQMessageLogger3(fileC, C.int(int32(line)), functionC, categoryC))
	runtime.SetFinalizer(tmpValue, (*QMessageLogger).DestroyQMessageLogger)
	return tmpValue
}

func (ptr *QMessageLogger) Critical4() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Critical4(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageLogger) Critical5(cat QLoggingCategory_ITF) *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Critical5(ptr.Pointer(), PointerFromQLoggingCategory(cat)))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageLogger) Debug4() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Debug4(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageLogger) Debug5(cat QLoggingCategory_ITF) *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Debug5(ptr.Pointer(), PointerFromQLoggingCategory(cat)))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageLogger) Info4() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Info4(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageLogger) Info5(cat QLoggingCategory_ITF) *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Info5(ptr.Pointer(), PointerFromQLoggingCategory(cat)))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageLogger) Warning4() *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Warning4(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

func (ptr *QMessageLogger) Warning5(cat QLoggingCategory_ITF) *QDebug {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDebugFromPointer(C.QMessageLogger_Warning5(ptr.Pointer(), PointerFromQLoggingCategory(cat)))
		runtime.SetFinalizer(tmpValue, (*QDebug).DestroyQDebug)
		return tmpValue
	}
	return nil
}

type QMetaClassInfo struct {
	ptr unsafe.Pointer
}

type QMetaClassInfo_ITF interface {
	QMetaClassInfo_PTR() *QMetaClassInfo
}

func (p *QMetaClassInfo) QMetaClassInfo_PTR() *QMetaClassInfo {
	return p
}

func (p *QMetaClassInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMetaClassInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMetaClassInfo(ptr QMetaClassInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaClassInfo_PTR().Pointer()
	}
	return nil
}

func NewQMetaClassInfoFromPointer(ptr unsafe.Pointer) *QMetaClassInfo {
	var n = new(QMetaClassInfo)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMetaClassInfo) DestroyQMetaClassInfo() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QMetaClassInfo) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaClassInfo_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaClassInfo) Value() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaClassInfo_Value(ptr.Pointer()))
	}
	return ""
}

type QMetaEnum struct {
	ptr unsafe.Pointer
}

type QMetaEnum_ITF interface {
	QMetaEnum_PTR() *QMetaEnum
}

func (p *QMetaEnum) QMetaEnum_PTR() *QMetaEnum {
	return p
}

func (p *QMetaEnum) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMetaEnum) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMetaEnum(ptr QMetaEnum_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaEnum_PTR().Pointer()
	}
	return nil
}

func NewQMetaEnumFromPointer(ptr unsafe.Pointer) *QMetaEnum {
	var n = new(QMetaEnum)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMetaEnum) DestroyQMetaEnum() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QMetaEnum) IsFlag() bool {
	if ptr.Pointer() != nil {
		return C.QMetaEnum_IsFlag(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaEnum) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QMetaEnum_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaEnum) Key(index int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaEnum_Key(ptr.Pointer(), C.int(int32(index))))
	}
	return ""
}

func (ptr *QMetaEnum) KeyCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaEnum_KeyCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaEnum) KeyToValue(key string, ok bool) int {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return int(int32(C.QMetaEnum_KeyToValue(ptr.Pointer(), keyC, C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QMetaEnum) KeysToValue(keys string, ok bool) int {
	if ptr.Pointer() != nil {
		var keysC = C.CString(keys)
		defer C.free(unsafe.Pointer(keysC))
		return int(int32(C.QMetaEnum_KeysToValue(ptr.Pointer(), keysC, C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QMetaEnum) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaEnum_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaEnum) Scope() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaEnum_Scope(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaEnum) Value(index int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaEnum_Value(ptr.Pointer(), C.int(int32(index)))))
	}
	return 0
}

func (ptr *QMetaEnum) ValueToKey(value int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaEnum_ValueToKey(ptr.Pointer(), C.int(int32(value))))
	}
	return ""
}

func (ptr *QMetaEnum) ValueToKeys(value int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QMetaEnum_ValueToKeys(ptr.Pointer(), C.int(int32(value))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//QMetaMethod::Access
type QMetaMethod__Access int64

const (
	QMetaMethod__Private   = QMetaMethod__Access(0)
	QMetaMethod__Protected = QMetaMethod__Access(1)
	QMetaMethod__Public    = QMetaMethod__Access(2)
)

//QMetaMethod::MethodType
type QMetaMethod__MethodType int64

const (
	QMetaMethod__Method      = QMetaMethod__MethodType(0)
	QMetaMethod__Signal      = QMetaMethod__MethodType(1)
	QMetaMethod__Slot        = QMetaMethod__MethodType(2)
	QMetaMethod__Constructor = QMetaMethod__MethodType(3)
)

type QMetaMethod struct {
	ptr unsafe.Pointer
}

type QMetaMethod_ITF interface {
	QMetaMethod_PTR() *QMetaMethod
}

func (p *QMetaMethod) QMetaMethod_PTR() *QMetaMethod {
	return p
}

func (p *QMetaMethod) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMetaMethod) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMetaMethod(ptr QMetaMethod_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaMethod_PTR().Pointer()
	}
	return nil
}

func NewQMetaMethodFromPointer(ptr unsafe.Pointer) *QMetaMethod {
	var n = new(QMetaMethod)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMetaMethod) DestroyQMetaMethod() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QMetaMethod) Access() QMetaMethod__Access {
	if ptr.Pointer() != nil {
		return QMetaMethod__Access(C.QMetaMethod_Access(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMetaMethod) Invoke4(object QObject_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaMethod_Invoke4(ptr.Pointer(), PointerFromQObject(object), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
	}
	return false
}

func (ptr *QMetaMethod) Invoke2(object QObject_ITF, returnValue QGenericReturnArgument_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaMethod_Invoke2(ptr.Pointer(), PointerFromQObject(object), PointerFromQGenericReturnArgument(returnValue), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
	}
	return false
}

func (ptr *QMetaMethod) Invoke3(object QObject_ITF, connectionType Qt__ConnectionType, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaMethod_Invoke3(ptr.Pointer(), PointerFromQObject(object), C.longlong(connectionType), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
	}
	return false
}

func (ptr *QMetaMethod) Invoke(object QObject_ITF, connectionType Qt__ConnectionType, returnValue QGenericReturnArgument_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaMethod_Invoke(ptr.Pointer(), PointerFromQObject(object), C.longlong(connectionType), PointerFromQGenericReturnArgument(returnValue), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
	}
	return false
}

func (ptr *QMetaMethod) InvokeOnGadget2(gadget unsafe.Pointer, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaMethod_InvokeOnGadget2(ptr.Pointer(), gadget, PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
	}
	return false
}

func (ptr *QMetaMethod) InvokeOnGadget(gadget unsafe.Pointer, returnValue QGenericReturnArgument_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaMethod_InvokeOnGadget(ptr.Pointer(), gadget, PointerFromQGenericReturnArgument(returnValue), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
	}
	return false
}

func (ptr *QMetaMethod) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QMetaMethod_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaMethod) MethodIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaMethod_MethodIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaMethod) MethodSignature() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QMetaMethod_MethodSignature(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaMethod) MethodType() QMetaMethod__MethodType {
	if ptr.Pointer() != nil {
		return QMetaMethod__MethodType(C.QMetaMethod_MethodType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QMetaMethod) Name() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QMetaMethod_Name(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaMethod) ParameterCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaMethod_ParameterCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaMethod) ParameterNames() []*QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QByteArray {
			var out = make([]*QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQMetaMethodFromPointer(l.data).parameterNames_atList(i)
			}
			return out
		}(C.QMetaMethod_ParameterNames(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMetaMethod) ParameterType(index int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaMethod_ParameterType(ptr.Pointer(), C.int(int32(index)))))
	}
	return 0
}

func (ptr *QMetaMethod) ParameterTypes() []*QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QByteArray {
			var out = make([]*QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQMetaMethodFromPointer(l.data).parameterTypes_atList(i)
			}
			return out
		}(C.QMetaMethod_ParameterTypes(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMetaMethod) ReturnType() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaMethod_ReturnType(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaMethod) Revision() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaMethod_Revision(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaMethod) Tag() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaMethod_Tag(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaMethod) TypeName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaMethod_TypeName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaMethod) parameterNames_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QMetaMethod_parameterNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaMethod) parameterTypes_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QMetaMethod_parameterTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

type QMetaObject struct {
	ptr unsafe.Pointer
}

type QMetaObject_ITF interface {
	QMetaObject_PTR() *QMetaObject
}

func (p *QMetaObject) QMetaObject_PTR() *QMetaObject {
	return p
}

func (p *QMetaObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMetaObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMetaObject(ptr QMetaObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaObject_PTR().Pointer()
	}
	return nil
}

func NewQMetaObjectFromPointer(ptr unsafe.Pointer) *QMetaObject {
	var n = new(QMetaObject)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMetaObject) DestroyQMetaObject() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QMetaObject_ConnectSlotsByName(object QObject_ITF) {
	C.QMetaObject_QMetaObject_ConnectSlotsByName(PointerFromQObject(object))
}

func (ptr *QMetaObject) ConnectSlotsByName(object QObject_ITF) {
	C.QMetaObject_QMetaObject_ConnectSlotsByName(PointerFromQObject(object))
}

func QMetaObject_CheckConnectArgs2(sign QMetaMethod_ITF, method QMetaMethod_ITF) bool {
	return C.QMetaObject_QMetaObject_CheckConnectArgs2(PointerFromQMetaMethod(sign), PointerFromQMetaMethod(method)) != 0
}

func (ptr *QMetaObject) CheckConnectArgs2(sign QMetaMethod_ITF, method QMetaMethod_ITF) bool {
	return C.QMetaObject_QMetaObject_CheckConnectArgs2(PointerFromQMetaMethod(sign), PointerFromQMetaMethod(method)) != 0
}

func QMetaObject_CheckConnectArgs(sign string, method string) bool {
	var signC = C.CString(sign)
	defer C.free(unsafe.Pointer(signC))
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	return C.QMetaObject_QMetaObject_CheckConnectArgs(signC, methodC) != 0
}

func (ptr *QMetaObject) CheckConnectArgs(sign string, method string) bool {
	var signC = C.CString(sign)
	defer C.free(unsafe.Pointer(signC))
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	return C.QMetaObject_QMetaObject_CheckConnectArgs(signC, methodC) != 0
}

func (ptr *QMetaObject) ClassInfoCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_ClassInfoCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) ClassInfoOffset() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_ClassInfoOffset(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) ClassName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaObject_ClassName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaObject) Constructor(index int) *QMetaMethod {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMetaMethodFromPointer(C.QMetaObject_Constructor(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*QMetaMethod).DestroyQMetaMethod)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaObject) ConstructorCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_ConstructorCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) EnumeratorCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_EnumeratorCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) EnumeratorOffset() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_EnumeratorOffset(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) IndexOfClassInfo(name string) int {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return int(int32(C.QMetaObject_IndexOfClassInfo(ptr.Pointer(), nameC)))
	}
	return 0
}

func (ptr *QMetaObject) IndexOfConstructor(constructor string) int {
	if ptr.Pointer() != nil {
		var constructorC = C.CString(constructor)
		defer C.free(unsafe.Pointer(constructorC))
		return int(int32(C.QMetaObject_IndexOfConstructor(ptr.Pointer(), constructorC)))
	}
	return 0
}

func (ptr *QMetaObject) IndexOfEnumerator(name string) int {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return int(int32(C.QMetaObject_IndexOfEnumerator(ptr.Pointer(), nameC)))
	}
	return 0
}

func (ptr *QMetaObject) IndexOfMethod(method string) int {
	if ptr.Pointer() != nil {
		var methodC = C.CString(method)
		defer C.free(unsafe.Pointer(methodC))
		return int(int32(C.QMetaObject_IndexOfMethod(ptr.Pointer(), methodC)))
	}
	return 0
}

func (ptr *QMetaObject) IndexOfProperty(name string) int {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return int(int32(C.QMetaObject_IndexOfProperty(ptr.Pointer(), nameC)))
	}
	return 0
}

func (ptr *QMetaObject) IndexOfSignal(sign string) int {
	if ptr.Pointer() != nil {
		var signC = C.CString(sign)
		defer C.free(unsafe.Pointer(signC))
		return int(int32(C.QMetaObject_IndexOfSignal(ptr.Pointer(), signC)))
	}
	return 0
}

func (ptr *QMetaObject) IndexOfSlot(slot string) int {
	if ptr.Pointer() != nil {
		var slotC = C.CString(slot)
		defer C.free(unsafe.Pointer(slotC))
		return int(int32(C.QMetaObject_IndexOfSlot(ptr.Pointer(), slotC)))
	}
	return 0
}

func (ptr *QMetaObject) Inherits(metaObject QMetaObject_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaObject_Inherits(ptr.Pointer(), PointerFromQMetaObject(metaObject)) != 0
	}
	return false
}

func QMetaObject_InvokeMethod4(obj QObject_ITF, member string, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod4(PointerFromQObject(obj), memberC, PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func (ptr *QMetaObject) InvokeMethod4(obj QObject_ITF, member string, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod4(PointerFromQObject(obj), memberC, PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func QMetaObject_InvokeMethod2(obj QObject_ITF, member string, ret QGenericReturnArgument_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod2(PointerFromQObject(obj), memberC, PointerFromQGenericReturnArgument(ret), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func (ptr *QMetaObject) InvokeMethod2(obj QObject_ITF, member string, ret QGenericReturnArgument_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod2(PointerFromQObject(obj), memberC, PointerFromQGenericReturnArgument(ret), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func QMetaObject_InvokeMethod3(obj QObject_ITF, member string, ty Qt__ConnectionType, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod3(PointerFromQObject(obj), memberC, C.longlong(ty), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func (ptr *QMetaObject) InvokeMethod3(obj QObject_ITF, member string, ty Qt__ConnectionType, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod3(PointerFromQObject(obj), memberC, C.longlong(ty), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func QMetaObject_InvokeMethod(obj QObject_ITF, member string, ty Qt__ConnectionType, ret QGenericReturnArgument_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod(PointerFromQObject(obj), memberC, C.longlong(ty), PointerFromQGenericReturnArgument(ret), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func (ptr *QMetaObject) InvokeMethod(obj QObject_ITF, member string, ty Qt__ConnectionType, ret QGenericReturnArgument_ITF, val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) bool {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	return C.QMetaObject_QMetaObject_InvokeMethod(PointerFromQObject(obj), memberC, C.longlong(ty), PointerFromQGenericReturnArgument(ret), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)) != 0
}

func (ptr *QMetaObject) Method(index int) *QMetaMethod {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMetaMethodFromPointer(C.QMetaObject_Method(ptr.Pointer(), C.int(int32(index))))
		runtime.SetFinalizer(tmpValue, (*QMetaMethod).DestroyQMetaMethod)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaObject) MethodCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_MethodCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) MethodOffset() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_MethodOffset(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) NewInstance(val0 QGenericArgument_ITF, val1 QGenericArgument_ITF, val2 QGenericArgument_ITF, val3 QGenericArgument_ITF, val4 QGenericArgument_ITF, val5 QGenericArgument_ITF, val6 QGenericArgument_ITF, val7 QGenericArgument_ITF, val8 QGenericArgument_ITF, val9 QGenericArgument_ITF) *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QMetaObject_NewInstance(ptr.Pointer(), PointerFromQGenericArgument(val0), PointerFromQGenericArgument(val1), PointerFromQGenericArgument(val2), PointerFromQGenericArgument(val3), PointerFromQGenericArgument(val4), PointerFromQGenericArgument(val5), PointerFromQGenericArgument(val6), PointerFromQGenericArgument(val7), PointerFromQGenericArgument(val8), PointerFromQGenericArgument(val9)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func QMetaObject_NormalizedSignature(method string) *QByteArray {
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	var tmpValue = NewQByteArrayFromPointer(C.QMetaObject_QMetaObject_NormalizedSignature(methodC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QMetaObject) NormalizedSignature(method string) *QByteArray {
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	var tmpValue = NewQByteArrayFromPointer(C.QMetaObject_QMetaObject_NormalizedSignature(methodC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QMetaObject_NormalizedType(ty string) *QByteArray {
	var tyC = C.CString(ty)
	defer C.free(unsafe.Pointer(tyC))
	var tmpValue = NewQByteArrayFromPointer(C.QMetaObject_QMetaObject_NormalizedType(tyC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QMetaObject) NormalizedType(ty string) *QByteArray {
	var tyC = C.CString(ty)
	defer C.free(unsafe.Pointer(tyC))
	var tmpValue = NewQByteArrayFromPointer(C.QMetaObject_QMetaObject_NormalizedType(tyC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QMetaObject) PropertyCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_PropertyCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) PropertyOffset() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaObject_PropertyOffset(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaObject) SuperClass() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QMetaObject_SuperClass(ptr.Pointer()))
	}
	return nil
}

type QMetaProperty struct {
	ptr unsafe.Pointer
}

type QMetaProperty_ITF interface {
	QMetaProperty_PTR() *QMetaProperty
}

func (p *QMetaProperty) QMetaProperty_PTR() *QMetaProperty {
	return p
}

func (p *QMetaProperty) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMetaProperty) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMetaProperty(ptr QMetaProperty_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaProperty_PTR().Pointer()
	}
	return nil
}

func NewQMetaPropertyFromPointer(ptr unsafe.Pointer) *QMetaProperty {
	var n = new(QMetaProperty)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMetaProperty) DestroyQMetaProperty() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QMetaProperty) HasNotifySignal() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_HasNotifySignal(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsConstant() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsConstant(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsDesignable(object QObject_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsDesignable(ptr.Pointer(), PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsEnumType() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsEnumType(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsFinal() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsFinal(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsFlagType() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsFlagType(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsReadable() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsReadable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsResettable() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsResettable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsScriptable(object QObject_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsScriptable(ptr.Pointer(), PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsStored(object QObject_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsStored(ptr.Pointer(), PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsUser(object QObject_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsUser(ptr.Pointer(), PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) IsWritable() bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_IsWritable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaProperty) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaProperty_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaProperty) NotifySignal() *QMetaMethod {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMetaMethodFromPointer(C.QMetaProperty_NotifySignal(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QMetaMethod).DestroyQMetaMethod)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaProperty) NotifySignalIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaProperty_NotifySignalIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaProperty) PropertyIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaProperty_PropertyIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaProperty) Read(object QObject_ITF) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QMetaProperty_Read(ptr.Pointer(), PointerFromQObject(object)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaProperty) ReadOnGadget(gadget unsafe.Pointer) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QMetaProperty_ReadOnGadget(ptr.Pointer(), gadget))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QMetaProperty) Reset(object QObject_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_Reset(ptr.Pointer(), PointerFromQObject(object)) != 0
	}
	return false
}

func (ptr *QMetaProperty) ResetOnGadget(gadget unsafe.Pointer) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_ResetOnGadget(ptr.Pointer(), gadget) != 0
	}
	return false
}

func (ptr *QMetaProperty) Revision() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaProperty_Revision(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaProperty) TypeName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMetaProperty_TypeName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMetaProperty) UserType() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaProperty_UserType(ptr.Pointer())))
	}
	return 0
}

func (ptr *QMetaProperty) Write(object QObject_ITF, value QVariant_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_Write(ptr.Pointer(), PointerFromQObject(object), PointerFromQVariant(value)) != 0
	}
	return false
}

func (ptr *QMetaProperty) WriteOnGadget(gadget unsafe.Pointer, value QVariant_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMetaProperty_WriteOnGadget(ptr.Pointer(), gadget, PointerFromQVariant(value)) != 0
	}
	return false
}

//QMetaType::Type
type QMetaType__Type int64

const (
	QMetaType__UnknownType           = QMetaType__Type(0)
	QMetaType__Bool                  = QMetaType__Type(1)
	QMetaType__Int                   = QMetaType__Type(2)
	QMetaType__UInt                  = QMetaType__Type(3)
	QMetaType__LongLong              = QMetaType__Type(4)
	QMetaType__ULongLong             = QMetaType__Type(5)
	QMetaType__Double                = QMetaType__Type(6)
	QMetaType__Long                  = QMetaType__Type(32)
	QMetaType__Short                 = QMetaType__Type(33)
	QMetaType__Char                  = QMetaType__Type(34)
	QMetaType__ULong                 = QMetaType__Type(35)
	QMetaType__UShort                = QMetaType__Type(36)
	QMetaType__UChar                 = QMetaType__Type(37)
	QMetaType__Float                 = QMetaType__Type(38)
	QMetaType__VoidStar              = QMetaType__Type(31)
	QMetaType__QChar                 = QMetaType__Type(7)
	QMetaType__QString               = QMetaType__Type(10)
	QMetaType__QStringList           = QMetaType__Type(11)
	QMetaType__QByteArray            = QMetaType__Type(12)
	QMetaType__QBitArray             = QMetaType__Type(13)
	QMetaType__QDate                 = QMetaType__Type(14)
	QMetaType__QTime                 = QMetaType__Type(15)
	QMetaType__QDateTime             = QMetaType__Type(16)
	QMetaType__QUrl                  = QMetaType__Type(17)
	QMetaType__QLocale               = QMetaType__Type(18)
	QMetaType__QRect                 = QMetaType__Type(19)
	QMetaType__QRectF                = QMetaType__Type(20)
	QMetaType__QSize                 = QMetaType__Type(21)
	QMetaType__QSizeF                = QMetaType__Type(22)
	QMetaType__QLine                 = QMetaType__Type(23)
	QMetaType__QLineF                = QMetaType__Type(24)
	QMetaType__QPoint                = QMetaType__Type(25)
	QMetaType__QPointF               = QMetaType__Type(26)
	QMetaType__QRegExp               = QMetaType__Type(27)
	QMetaType__QEasingCurve          = QMetaType__Type(29)
	QMetaType__QUuid                 = QMetaType__Type(30)
	QMetaType__QVariant              = QMetaType__Type(41)
	QMetaType__QModelIndex           = QMetaType__Type(42)
	QMetaType__QPersistentModelIndex = QMetaType__Type(50)
	QMetaType__QRegularExpression    = QMetaType__Type(44)
	QMetaType__QJsonValue            = QMetaType__Type(45)
	QMetaType__QJsonObject           = QMetaType__Type(46)
	QMetaType__QJsonArray            = QMetaType__Type(47)
	QMetaType__QJsonDocument         = QMetaType__Type(48)
	QMetaType__QByteArrayList        = QMetaType__Type(49)
	QMetaType__QObjectStar           = QMetaType__Type(39)
	QMetaType__SChar                 = QMetaType__Type(40)
	QMetaType__Void                  = QMetaType__Type(43)
	QMetaType__QVariantMap           = QMetaType__Type(8)
	QMetaType__QVariantList          = QMetaType__Type(9)
	QMetaType__QVariantHash          = QMetaType__Type(28)
	QMetaType__QFont                 = QMetaType__Type(64)
	QMetaType__QPixmap               = QMetaType__Type(65)
	QMetaType__QBrush                = QMetaType__Type(66)
	QMetaType__QColor                = QMetaType__Type(67)
	QMetaType__QPalette              = QMetaType__Type(68)
	QMetaType__QIcon                 = QMetaType__Type(69)
	QMetaType__QImage                = QMetaType__Type(70)
	QMetaType__QPolygon              = QMetaType__Type(71)
	QMetaType__QRegion               = QMetaType__Type(72)
	QMetaType__QBitmap               = QMetaType__Type(73)
	QMetaType__QCursor               = QMetaType__Type(74)
	QMetaType__QKeySequence          = QMetaType__Type(75)
	QMetaType__QPen                  = QMetaType__Type(76)
	QMetaType__QTextLength           = QMetaType__Type(77)
	QMetaType__QTextFormat           = QMetaType__Type(78)
	QMetaType__QMatrix               = QMetaType__Type(79)
	QMetaType__QTransform            = QMetaType__Type(80)
	QMetaType__QMatrix4x4            = QMetaType__Type(81)
	QMetaType__QVector2D             = QMetaType__Type(82)
	QMetaType__QVector3D             = QMetaType__Type(83)
	QMetaType__QVector4D             = QMetaType__Type(84)
	QMetaType__QQuaternion           = QMetaType__Type(85)
	QMetaType__QPolygonF             = QMetaType__Type(86)
	QMetaType__QSizePolicy           = QMetaType__Type(121)
	QMetaType__User                  = QMetaType__Type(1024)
)

//QMetaType::TypeFlag
type QMetaType__TypeFlag int64

const (
	QMetaType__NeedsConstruction        = QMetaType__TypeFlag(0x1)
	QMetaType__NeedsDestruction         = QMetaType__TypeFlag(0x2)
	QMetaType__MovableType              = QMetaType__TypeFlag(0x4)
	QMetaType__PointerToQObject         = QMetaType__TypeFlag(0x8)
	QMetaType__IsEnumeration            = QMetaType__TypeFlag(0x10)
	QMetaType__SharedPointerToQObject   = QMetaType__TypeFlag(0x20)
	QMetaType__WeakPointerToQObject     = QMetaType__TypeFlag(0x40)
	QMetaType__TrackingPointerToQObject = QMetaType__TypeFlag(0x80)
	QMetaType__WasDeclaredAsMetaType    = QMetaType__TypeFlag(0x100)
	QMetaType__IsGadget                 = QMetaType__TypeFlag(0x200)
)

type QMetaType struct {
	ptr unsafe.Pointer
}

type QMetaType_ITF interface {
	QMetaType_PTR() *QMetaType
}

func (p *QMetaType) QMetaType_PTR() *QMetaType {
	return p
}

func (p *QMetaType) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMetaType) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMetaType(ptr QMetaType_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMetaType_PTR().Pointer()
	}
	return nil
}

func NewQMetaTypeFromPointer(ptr unsafe.Pointer) *QMetaType {
	var n = new(QMetaType)
	n.SetPointer(ptr)
	return n
}
func NewQMetaType(typeId int) *QMetaType {
	var tmpValue = NewQMetaTypeFromPointer(C.QMetaType_NewQMetaType(C.int(int32(typeId))))
	runtime.SetFinalizer(tmpValue, (*QMetaType).DestroyQMetaType)
	return tmpValue
}

func QMetaType_Compare(lhs unsafe.Pointer, rhs unsafe.Pointer, typeId int, result int) bool {
	return C.QMetaType_QMetaType_Compare(lhs, rhs, C.int(int32(typeId)), C.int(int32(result))) != 0
}

func (ptr *QMetaType) Compare(lhs unsafe.Pointer, rhs unsafe.Pointer, typeId int, result int) bool {
	return C.QMetaType_QMetaType_Compare(lhs, rhs, C.int(int32(typeId)), C.int(int32(result))) != 0
}

func QMetaType_Construct(ty int, where unsafe.Pointer, copy unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C.QMetaType_QMetaType_Construct(C.int(int32(ty)), where, copy))
}

func (ptr *QMetaType) Construct(ty int, where unsafe.Pointer, copy unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C.QMetaType_QMetaType_Construct(C.int(int32(ty)), where, copy))
}

func (ptr *QMetaType) Construct3(where unsafe.Pointer, copy unsafe.Pointer) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QMetaType_Construct3(ptr.Pointer(), where, copy))
	}
	return nil
}

func QMetaType_Convert(from unsafe.Pointer, fromTypeId int, to unsafe.Pointer, toTypeId int) bool {
	return C.QMetaType_QMetaType_Convert(from, C.int(int32(fromTypeId)), to, C.int(int32(toTypeId))) != 0
}

func (ptr *QMetaType) Convert(from unsafe.Pointer, fromTypeId int, to unsafe.Pointer, toTypeId int) bool {
	return C.QMetaType_QMetaType_Convert(from, C.int(int32(fromTypeId)), to, C.int(int32(toTypeId))) != 0
}

func QMetaType_Create(ty int, copy unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C.QMetaType_QMetaType_Create(C.int(int32(ty)), copy))
}

func (ptr *QMetaType) Create(ty int, copy unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C.QMetaType_QMetaType_Create(C.int(int32(ty)), copy))
}

func (ptr *QMetaType) Create2(copy unsafe.Pointer) unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QMetaType_Create2(ptr.Pointer(), copy))
	}
	return nil
}

func QMetaType_DebugStream(dbg QDebug_ITF, rhs unsafe.Pointer, typeId int) bool {
	return C.QMetaType_QMetaType_DebugStream(PointerFromQDebug(dbg), rhs, C.int(int32(typeId))) != 0
}

func (ptr *QMetaType) DebugStream(dbg QDebug_ITF, rhs unsafe.Pointer, typeId int) bool {
	return C.QMetaType_QMetaType_DebugStream(PointerFromQDebug(dbg), rhs, C.int(int32(typeId))) != 0
}

func QMetaType_Destroy(ty int, data unsafe.Pointer) {
	C.QMetaType_QMetaType_Destroy(C.int(int32(ty)), data)
}

func (ptr *QMetaType) Destroy(ty int, data unsafe.Pointer) {
	C.QMetaType_QMetaType_Destroy(C.int(int32(ty)), data)
}

func (ptr *QMetaType) Destroy2(data unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QMetaType_Destroy2(ptr.Pointer(), data)
	}
}

func QMetaType_Destruct(ty int, where unsafe.Pointer) {
	C.QMetaType_QMetaType_Destruct(C.int(int32(ty)), where)
}

func (ptr *QMetaType) Destruct(ty int, where unsafe.Pointer) {
	C.QMetaType_QMetaType_Destruct(C.int(int32(ty)), where)
}

func (ptr *QMetaType) Destruct2(data unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QMetaType_Destruct2(ptr.Pointer(), data)
	}
}

func QMetaType_Equals(lhs unsafe.Pointer, rhs unsafe.Pointer, typeId int, result int) bool {
	return C.QMetaType_QMetaType_Equals(lhs, rhs, C.int(int32(typeId)), C.int(int32(result))) != 0
}

func (ptr *QMetaType) Equals(lhs unsafe.Pointer, rhs unsafe.Pointer, typeId int, result int) bool {
	return C.QMetaType_QMetaType_Equals(lhs, rhs, C.int(int32(typeId)), C.int(int32(result))) != 0
}

func (ptr *QMetaType) Flags() QMetaType__TypeFlag {
	if ptr.Pointer() != nil {
		return QMetaType__TypeFlag(C.QMetaType_Flags(ptr.Pointer()))
	}
	return 0
}

func QMetaType_IsRegistered(ty int) bool {
	return C.QMetaType_QMetaType_IsRegistered(C.int(int32(ty))) != 0
}

func (ptr *QMetaType) IsRegistered(ty int) bool {
	return C.QMetaType_QMetaType_IsRegistered(C.int(int32(ty))) != 0
}

func (ptr *QMetaType) IsRegistered2() bool {
	if ptr.Pointer() != nil {
		return C.QMetaType_IsRegistered2(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMetaType) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QMetaType_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QMetaType_Load(stream QDataStream_ITF, ty int, data unsafe.Pointer) bool {
	return C.QMetaType_QMetaType_Load(PointerFromQDataStream(stream), C.int(int32(ty)), data) != 0
}

func (ptr *QMetaType) Load(stream QDataStream_ITF, ty int, data unsafe.Pointer) bool {
	return C.QMetaType_QMetaType_Load(PointerFromQDataStream(stream), C.int(int32(ty)), data) != 0
}

func (ptr *QMetaType) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QMetaType_MetaObject(ptr.Pointer()))
	}
	return nil
}

func QMetaType_MetaObjectForType(ty int) *QMetaObject {
	return NewQMetaObjectFromPointer(C.QMetaType_QMetaType_MetaObjectForType(C.int(int32(ty))))
}

func (ptr *QMetaType) MetaObjectForType(ty int) *QMetaObject {
	return NewQMetaObjectFromPointer(C.QMetaType_QMetaType_MetaObjectForType(C.int(int32(ty))))
}

func QMetaType_Save(stream QDataStream_ITF, ty int, data unsafe.Pointer) bool {
	return C.QMetaType_QMetaType_Save(PointerFromQDataStream(stream), C.int(int32(ty)), data) != 0
}

func (ptr *QMetaType) Save(stream QDataStream_ITF, ty int, data unsafe.Pointer) bool {
	return C.QMetaType_QMetaType_Save(PointerFromQDataStream(stream), C.int(int32(ty)), data) != 0
}

func QMetaType_SizeOf(ty int) int {
	return int(int32(C.QMetaType_QMetaType_SizeOf(C.int(int32(ty)))))
}

func (ptr *QMetaType) SizeOf(ty int) int {
	return int(int32(C.QMetaType_QMetaType_SizeOf(C.int(int32(ty)))))
}

func (ptr *QMetaType) SizeOf2() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QMetaType_SizeOf2(ptr.Pointer())))
	}
	return 0
}

func QMetaType_Type2(typeName QByteArray_ITF) int {
	return int(int32(C.QMetaType_QMetaType_Type2(PointerFromQByteArray(typeName))))
}

func (ptr *QMetaType) Type2(typeName QByteArray_ITF) int {
	return int(int32(C.QMetaType_QMetaType_Type2(PointerFromQByteArray(typeName))))
}

func QMetaType_Type(typeName string) int {
	var typeNameC = C.CString(typeName)
	defer C.free(unsafe.Pointer(typeNameC))
	return int(int32(C.QMetaType_QMetaType_Type(typeNameC)))
}

func (ptr *QMetaType) Type(typeName string) int {
	var typeNameC = C.CString(typeName)
	defer C.free(unsafe.Pointer(typeNameC))
	return int(int32(C.QMetaType_QMetaType_Type(typeNameC)))
}

func QMetaType_TypeFlags(ty int) QMetaType__TypeFlag {
	return QMetaType__TypeFlag(C.QMetaType_QMetaType_TypeFlags(C.int(int32(ty))))
}

func (ptr *QMetaType) TypeFlags(ty int) QMetaType__TypeFlag {
	return QMetaType__TypeFlag(C.QMetaType_QMetaType_TypeFlags(C.int(int32(ty))))
}

func QMetaType_TypeName(typeId int) string {
	return cGoUnpackString(C.QMetaType_QMetaType_TypeName(C.int(int32(typeId))))
}

func (ptr *QMetaType) TypeName(typeId int) string {
	return cGoUnpackString(C.QMetaType_QMetaType_TypeName(C.int(int32(typeId))))
}

func (ptr *QMetaType) DestroyQMetaType() {
	if ptr.Pointer() != nil {
		C.QMetaType_DestroyQMetaType(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QMimeData struct {
	QObject
}

type QMimeData_ITF interface {
	QObject_ITF
	QMimeData_PTR() *QMimeData
}

func (p *QMimeData) QMimeData_PTR() *QMimeData {
	return p
}

func (p *QMimeData) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QMimeData) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQMimeData(ptr QMimeData_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMimeData_PTR().Pointer()
	}
	return nil
}

func NewQMimeDataFromPointer(ptr unsafe.Pointer) *QMimeData {
	var n = new(QMimeData)
	n.SetPointer(ptr)
	return n
}
func NewQMimeData() *QMimeData {
	var tmpValue = NewQMimeDataFromPointer(C.QMimeData_NewQMimeData())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QMimeData) Clear() {
	if ptr.Pointer() != nil {
		C.QMimeData_Clear(ptr.Pointer())
	}
}

func (ptr *QMimeData) ColorData() *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QMimeData_ColorData(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeData) Data(mimeType string) *QByteArray {
	if ptr.Pointer() != nil {
		var mimeTypeC = C.CString(mimeType)
		defer C.free(unsafe.Pointer(mimeTypeC))
		var tmpValue = NewQByteArrayFromPointer(C.QMimeData_Data(ptr.Pointer(), mimeTypeC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//export callbackQMimeData_Formats
func callbackQMimeData_Formats(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::formats"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQMimeDataFromPointer(ptr).FormatsDefault(), "|"))
}

func (ptr *QMimeData) ConnectFormats(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::formats", f)
	}
}

func (ptr *QMimeData) DisconnectFormats() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::formats")
	}
}

func (ptr *QMimeData) Formats() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QMimeData_Formats(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMimeData) FormatsDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QMimeData_FormatsDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMimeData) HasColor() bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_HasColor(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQMimeData_HasFormat
func callbackQMimeData_HasFormat(ptr unsafe.Pointer, mimeType C.struct_QtCore_PackedString) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::hasFormat"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(string) bool)(cGoUnpackString(mimeType)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMimeDataFromPointer(ptr).HasFormatDefault(cGoUnpackString(mimeType)))))
}

func (ptr *QMimeData) ConnectHasFormat(f func(mimeType string) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::hasFormat", f)
	}
}

func (ptr *QMimeData) DisconnectHasFormat() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::hasFormat")
	}
}

func (ptr *QMimeData) HasFormat(mimeType string) bool {
	if ptr.Pointer() != nil {
		var mimeTypeC = C.CString(mimeType)
		defer C.free(unsafe.Pointer(mimeTypeC))
		return C.QMimeData_HasFormat(ptr.Pointer(), mimeTypeC) != 0
	}
	return false
}

func (ptr *QMimeData) HasFormatDefault(mimeType string) bool {
	if ptr.Pointer() != nil {
		var mimeTypeC = C.CString(mimeType)
		defer C.free(unsafe.Pointer(mimeTypeC))
		return C.QMimeData_HasFormatDefault(ptr.Pointer(), mimeTypeC) != 0
	}
	return false
}

func (ptr *QMimeData) HasHtml() bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_HasHtml(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMimeData) HasImage() bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_HasImage(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMimeData) HasText() bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_HasText(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMimeData) HasUrls() bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_HasUrls(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMimeData) Html() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeData_Html(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeData) ImageData() *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QMimeData_ImageData(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeData) RemoveFormat(mimeType string) {
	if ptr.Pointer() != nil {
		var mimeTypeC = C.CString(mimeType)
		defer C.free(unsafe.Pointer(mimeTypeC))
		C.QMimeData_RemoveFormat(ptr.Pointer(), mimeTypeC)
	}
}

func (ptr *QMimeData) SetColorData(color QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_SetColorData(ptr.Pointer(), PointerFromQVariant(color))
	}
}

func (ptr *QMimeData) SetData(mimeType string, data QByteArray_ITF) {
	if ptr.Pointer() != nil {
		var mimeTypeC = C.CString(mimeType)
		defer C.free(unsafe.Pointer(mimeTypeC))
		C.QMimeData_SetData(ptr.Pointer(), mimeTypeC, PointerFromQByteArray(data))
	}
}

func (ptr *QMimeData) SetHtml(html string) {
	if ptr.Pointer() != nil {
		var htmlC = C.CString(html)
		defer C.free(unsafe.Pointer(htmlC))
		C.QMimeData_SetHtml(ptr.Pointer(), htmlC)
	}
}

func (ptr *QMimeData) SetImageData(image QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_SetImageData(ptr.Pointer(), PointerFromQVariant(image))
	}
}

func (ptr *QMimeData) SetText(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QMimeData_SetText(ptr.Pointer(), textC)
	}
}

func (ptr *QMimeData) Text() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeData_Text(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeData) Urls() []*QUrl {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QUrl {
			var out = make([]*QUrl, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQMimeDataFromPointer(l.data).urls_atList(i)
			}
			return out
		}(C.QMimeData_Urls(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMimeData) DestroyQMimeData() {
	if ptr.Pointer() != nil {
		C.QMimeData_DestroyQMimeData(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMimeData) urls_atList(i int) *QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = NewQUrlFromPointer(C.QMimeData_urls_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

//export callbackQMimeData_TimerEvent
func callbackQMimeData_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQMimeDataFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QMimeData) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::timerEvent", f)
	}
}

func (ptr *QMimeData) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::timerEvent")
	}
}

func (ptr *QMimeData) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QMimeData) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQMimeData_ChildEvent
func callbackQMimeData_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQMimeDataFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QMimeData) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::childEvent", f)
	}
}

func (ptr *QMimeData) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::childEvent")
	}
}

func (ptr *QMimeData) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QMimeData) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQMimeData_ConnectNotify
func callbackQMimeData_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQMimeDataFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMimeData) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::connectNotify", f)
	}
}

func (ptr *QMimeData) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::connectNotify")
	}
}

func (ptr *QMimeData) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMimeData) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQMimeData_CustomEvent
func callbackQMimeData_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQMimeDataFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QMimeData) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::customEvent", f)
	}
}

func (ptr *QMimeData) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::customEvent")
	}
}

func (ptr *QMimeData) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QMimeData) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQMimeData_DeleteLater
func callbackQMimeData_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQMimeDataFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QMimeData) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::deleteLater", f)
	}
}

func (ptr *QMimeData) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::deleteLater")
	}
}

func (ptr *QMimeData) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QMimeData_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QMimeData) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QMimeData_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQMimeData_DisconnectNotify
func callbackQMimeData_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQMimeDataFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QMimeData) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::disconnectNotify", f)
	}
}

func (ptr *QMimeData) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::disconnectNotify")
	}
}

func (ptr *QMimeData) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QMimeData) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeData_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQMimeData_Event
func callbackQMimeData_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMimeDataFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QMimeData) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::event", f)
	}
}

func (ptr *QMimeData) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::event")
	}
}

func (ptr *QMimeData) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QMimeData) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQMimeData_EventFilter
func callbackQMimeData_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQMimeDataFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QMimeData) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::eventFilter", f)
	}
}

func (ptr *QMimeData) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::eventFilter")
	}
}

func (ptr *QMimeData) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QMimeData) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QMimeData_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQMimeData_MetaObject
func callbackQMimeData_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QMimeData::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQMimeDataFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QMimeData) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::metaObject", f)
	}
}

func (ptr *QMimeData) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QMimeData::metaObject")
	}
}

func (ptr *QMimeData) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QMimeData_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMimeData) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QMimeData_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QMimeDatabase::MatchMode
type QMimeDatabase__MatchMode int64

const (
	QMimeDatabase__MatchDefault   = QMimeDatabase__MatchMode(0x0)
	QMimeDatabase__MatchExtension = QMimeDatabase__MatchMode(0x1)
	QMimeDatabase__MatchContent   = QMimeDatabase__MatchMode(0x2)
)

type QMimeDatabase struct {
	ptr unsafe.Pointer
}

type QMimeDatabase_ITF interface {
	QMimeDatabase_PTR() *QMimeDatabase
}

func (p *QMimeDatabase) QMimeDatabase_PTR() *QMimeDatabase {
	return p
}

func (p *QMimeDatabase) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMimeDatabase) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMimeDatabase(ptr QMimeDatabase_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMimeDatabase_PTR().Pointer()
	}
	return nil
}

func NewQMimeDatabaseFromPointer(ptr unsafe.Pointer) *QMimeDatabase {
	var n = new(QMimeDatabase)
	n.SetPointer(ptr)
	return n
}
func NewQMimeDatabase() *QMimeDatabase {
	var tmpValue = NewQMimeDatabaseFromPointer(C.QMimeDatabase_NewQMimeDatabase())
	runtime.SetFinalizer(tmpValue, (*QMimeDatabase).DestroyQMimeDatabase)
	return tmpValue
}

func (ptr *QMimeDatabase) MimeTypeForName(nameOrAlias string) *QMimeType {
	if ptr.Pointer() != nil {
		var nameOrAliasC = C.CString(nameOrAlias)
		defer C.free(unsafe.Pointer(nameOrAliasC))
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForName(ptr.Pointer(), nameOrAliasC))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) DestroyQMimeDatabase() {
	if ptr.Pointer() != nil {
		C.QMimeDatabase_DestroyQMimeDatabase(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QMimeDatabase) AllMimeTypes() []*QMimeType {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QMimeType {
			var out = make([]*QMimeType, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQMimeDatabaseFromPointer(l.data).allMimeTypes_atList(i)
			}
			return out
		}(C.QMimeDatabase_AllMimeTypes(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypeForData2(device QIODevice_ITF) *QMimeType {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForData2(ptr.Pointer(), PointerFromQIODevice(device)))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypeForData(data QByteArray_ITF) *QMimeType {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForData(ptr.Pointer(), PointerFromQByteArray(data)))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypeForFile(fileInfo QFileInfo_ITF, mode QMimeDatabase__MatchMode) *QMimeType {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForFile(ptr.Pointer(), PointerFromQFileInfo(fileInfo), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypeForFile2(fileName string, mode QMimeDatabase__MatchMode) *QMimeType {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForFile2(ptr.Pointer(), fileNameC, C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypeForFileNameAndData(fileName string, device QIODevice_ITF) *QMimeType {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForFileNameAndData(ptr.Pointer(), fileNameC, PointerFromQIODevice(device)))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypeForFileNameAndData2(fileName string, data QByteArray_ITF) *QMimeType {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForFileNameAndData2(ptr.Pointer(), fileNameC, PointerFromQByteArray(data)))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypeForUrl(url QUrl_ITF) *QMimeType {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_MimeTypeForUrl(ptr.Pointer(), PointerFromQUrl(url)))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) MimeTypesForFileName(fileName string) []*QMimeType {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		return func(l C.struct_QtCore_PackedList) []*QMimeType {
			var out = make([]*QMimeType, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQMimeDatabaseFromPointer(l.data).mimeTypesForFileName_atList(i)
			}
			return out
		}(C.QMimeDatabase_MimeTypesForFileName(ptr.Pointer(), fileNameC))
	}
	return nil
}

func (ptr *QMimeDatabase) SuffixForFileName(fileName string) string {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		return cGoUnpackString(C.QMimeDatabase_SuffixForFileName(ptr.Pointer(), fileNameC))
	}
	return ""
}

func (ptr *QMimeDatabase) allMimeTypes_atList(i int) *QMimeType {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_allMimeTypes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

func (ptr *QMimeDatabase) mimeTypesForFileName_atList(i int) *QMimeType {
	if ptr.Pointer() != nil {
		var tmpValue = NewQMimeTypeFromPointer(C.QMimeDatabase_mimeTypesForFileName_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
		return tmpValue
	}
	return nil
}

type QMimeType struct {
	ptr unsafe.Pointer
}

type QMimeType_ITF interface {
	QMimeType_PTR() *QMimeType
}

func (p *QMimeType) QMimeType_PTR() *QMimeType {
	return p
}

func (p *QMimeType) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMimeType) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMimeType(ptr QMimeType_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMimeType_PTR().Pointer()
	}
	return nil
}

func NewQMimeTypeFromPointer(ptr unsafe.Pointer) *QMimeType {
	var n = new(QMimeType)
	n.SetPointer(ptr)
	return n
}
func NewQMimeType() *QMimeType {
	var tmpValue = NewQMimeTypeFromPointer(C.QMimeType_NewQMimeType())
	runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
	return tmpValue
}

func NewQMimeType2(other QMimeType_ITF) *QMimeType {
	var tmpValue = NewQMimeTypeFromPointer(C.QMimeType_NewQMimeType2(PointerFromQMimeType(other)))
	runtime.SetFinalizer(tmpValue, (*QMimeType).DestroyQMimeType)
	return tmpValue
}

func (ptr *QMimeType) FilterString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeType_FilterString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeType) GenericIconName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeType_GenericIconName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeType) GlobPatterns() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QMimeType_GlobPatterns(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMimeType) IconName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeType_IconName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeType) Inherits(mimeTypeName string) bool {
	if ptr.Pointer() != nil {
		var mimeTypeNameC = C.CString(mimeTypeName)
		defer C.free(unsafe.Pointer(mimeTypeNameC))
		return C.QMimeType_Inherits(ptr.Pointer(), mimeTypeNameC) != 0
	}
	return false
}

func (ptr *QMimeType) IsDefault() bool {
	if ptr.Pointer() != nil {
		return C.QMimeType_IsDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMimeType) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QMimeType_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QMimeType) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeType_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeType) DestroyQMimeType() {
	if ptr.Pointer() != nil {
		C.QMimeType_DestroyQMimeType(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QMimeType) Aliases() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QMimeType_Aliases(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMimeType) AllAncestors() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QMimeType_AllAncestors(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMimeType) Comment() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeType_Comment(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeType) ParentMimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QMimeType_ParentMimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMimeType) PreferredSuffix() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QMimeType_PreferredSuffix(ptr.Pointer()))
	}
	return ""
}

func (ptr *QMimeType) Suffixes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QMimeType_Suffixes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QMimeType) Swap(other QMimeType_ITF) {
	if ptr.Pointer() != nil {
		C.QMimeType_Swap(ptr.Pointer(), PointerFromQMimeType(other))
	}
}

type QModelIndex struct {
	ptr unsafe.Pointer
}

type QModelIndex_ITF interface {
	QModelIndex_PTR() *QModelIndex
}

func (p *QModelIndex) QModelIndex_PTR() *QModelIndex {
	return p
}

func (p *QModelIndex) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QModelIndex) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQModelIndex(ptr QModelIndex_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QModelIndex_PTR().Pointer()
	}
	return nil
}

func NewQModelIndexFromPointer(ptr unsafe.Pointer) *QModelIndex {
	var n = new(QModelIndex)
	n.SetPointer(ptr)
	return n
}

func (ptr *QModelIndex) DestroyQModelIndex() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQModelIndex() *QModelIndex {
	var tmpValue = NewQModelIndexFromPointer(C.QModelIndex_NewQModelIndex())
	runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
	return tmpValue
}

func (ptr *QModelIndex) Child(row int, column int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QModelIndex_Child(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QModelIndex) Column() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QModelIndex_Column(ptr.Pointer())))
	}
	return 0
}

func (ptr *QModelIndex) Data(role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QModelIndex_Data(ptr.Pointer(), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QModelIndex) Flags() Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QModelIndex_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QModelIndex) InternalId() uintptr {
	if ptr.Pointer() != nil {
		return uintptr(C.QModelIndex_InternalId(ptr.Pointer()))
	}
	return 0
}

func (ptr *QModelIndex) InternalPointer() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QModelIndex_InternalPointer(ptr.Pointer()))
	}
	return nil
}

func (ptr *QModelIndex) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QModelIndex_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QModelIndex) Model() *QAbstractItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractItemModelFromPointer(C.QModelIndex_Model(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QModelIndex) Parent() *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QModelIndex_Parent(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QModelIndex) Row() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QModelIndex_Row(ptr.Pointer())))
	}
	return 0
}

func (ptr *QModelIndex) Sibling(row int, column int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QModelIndex_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//QModulesPrivate::Names
type QModulesPrivate__Names int64

const (
	QModulesPrivate__Core         = QModulesPrivate__Names(0)
	QModulesPrivate__Gui          = QModulesPrivate__Names(1)
	QModulesPrivate__Widgets      = QModulesPrivate__Names(2)
	QModulesPrivate__Unknown      = QModulesPrivate__Names(3)
	QModulesPrivate__ModulesCount = QModulesPrivate__Names(4)
)

type QModulesPrivate struct {
	ptr unsafe.Pointer
}

type QModulesPrivate_ITF interface {
	QModulesPrivate_PTR() *QModulesPrivate
}

func (p *QModulesPrivate) QModulesPrivate_PTR() *QModulesPrivate {
	return p
}

func (p *QModulesPrivate) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QModulesPrivate) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQModulesPrivate(ptr QModulesPrivate_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QModulesPrivate_PTR().Pointer()
	}
	return nil
}

func NewQModulesPrivateFromPointer(ptr unsafe.Pointer) *QModulesPrivate {
	var n = new(QModulesPrivate)
	n.SetPointer(ptr)
	return n
}

func (ptr *QModulesPrivate) DestroyQModulesPrivate() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMultiHash struct {
	QHash
}

type QMultiHash_ITF interface {
	QHash_ITF
	QMultiHash_PTR() *QMultiHash
}

func (p *QMultiHash) QMultiHash_PTR() *QMultiHash {
	return p
}

func (p *QMultiHash) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QHash_PTR().Pointer()
	}
	return nil
}

func (p *QMultiHash) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QHash_PTR().SetPointer(ptr)
	}
}

func PointerFromQMultiHash(ptr QMultiHash_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMultiHash_PTR().Pointer()
	}
	return nil
}

func NewQMultiHashFromPointer(ptr unsafe.Pointer) *QMultiHash {
	var n = new(QMultiHash)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMultiHash) DestroyQMultiHash() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMultiMap struct {
	QMap
}

type QMultiMap_ITF interface {
	QMap_ITF
	QMultiMap_PTR() *QMultiMap
}

func (p *QMultiMap) QMultiMap_PTR() *QMultiMap {
	return p
}

func (p *QMultiMap) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QMap_PTR().Pointer()
	}
	return nil
}

func (p *QMultiMap) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QMap_PTR().SetPointer(ptr)
	}
}

func PointerFromQMultiMap(ptr QMultiMap_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMultiMap_PTR().Pointer()
	}
	return nil
}

func NewQMultiMapFromPointer(ptr unsafe.Pointer) *QMultiMap {
	var n = new(QMultiMap)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMultiMap) DestroyQMultiMap() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMutableHashIterator struct {
	ptr unsafe.Pointer
}

type QMutableHashIterator_ITF interface {
	QMutableHashIterator_PTR() *QMutableHashIterator
}

func (p *QMutableHashIterator) QMutableHashIterator_PTR() *QMutableHashIterator {
	return p
}

func (p *QMutableHashIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutableHashIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutableHashIterator(ptr QMutableHashIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutableHashIterator_PTR().Pointer()
	}
	return nil
}

func NewQMutableHashIteratorFromPointer(ptr unsafe.Pointer) *QMutableHashIterator {
	var n = new(QMutableHashIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMutableHashIterator) DestroyQMutableHashIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMutableLinkedListIterator struct {
	ptr unsafe.Pointer
}

type QMutableLinkedListIterator_ITF interface {
	QMutableLinkedListIterator_PTR() *QMutableLinkedListIterator
}

func (p *QMutableLinkedListIterator) QMutableLinkedListIterator_PTR() *QMutableLinkedListIterator {
	return p
}

func (p *QMutableLinkedListIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutableLinkedListIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutableLinkedListIterator(ptr QMutableLinkedListIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutableLinkedListIterator_PTR().Pointer()
	}
	return nil
}

func NewQMutableLinkedListIteratorFromPointer(ptr unsafe.Pointer) *QMutableLinkedListIterator {
	var n = new(QMutableLinkedListIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMutableLinkedListIterator) DestroyQMutableLinkedListIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMutableListIterator struct {
	ptr unsafe.Pointer
}

type QMutableListIterator_ITF interface {
	QMutableListIterator_PTR() *QMutableListIterator
}

func (p *QMutableListIterator) QMutableListIterator_PTR() *QMutableListIterator {
	return p
}

func (p *QMutableListIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutableListIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutableListIterator(ptr QMutableListIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutableListIterator_PTR().Pointer()
	}
	return nil
}

func NewQMutableListIteratorFromPointer(ptr unsafe.Pointer) *QMutableListIterator {
	var n = new(QMutableListIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMutableListIterator) DestroyQMutableListIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMutableMapIterator struct {
	ptr unsafe.Pointer
}

type QMutableMapIterator_ITF interface {
	QMutableMapIterator_PTR() *QMutableMapIterator
}

func (p *QMutableMapIterator) QMutableMapIterator_PTR() *QMutableMapIterator {
	return p
}

func (p *QMutableMapIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutableMapIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutableMapIterator(ptr QMutableMapIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutableMapIterator_PTR().Pointer()
	}
	return nil
}

func NewQMutableMapIteratorFromPointer(ptr unsafe.Pointer) *QMutableMapIterator {
	var n = new(QMutableMapIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMutableMapIterator) DestroyQMutableMapIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMutableSetIterator struct {
	ptr unsafe.Pointer
}

type QMutableSetIterator_ITF interface {
	QMutableSetIterator_PTR() *QMutableSetIterator
}

func (p *QMutableSetIterator) QMutableSetIterator_PTR() *QMutableSetIterator {
	return p
}

func (p *QMutableSetIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutableSetIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutableSetIterator(ptr QMutableSetIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutableSetIterator_PTR().Pointer()
	}
	return nil
}

func NewQMutableSetIteratorFromPointer(ptr unsafe.Pointer) *QMutableSetIterator {
	var n = new(QMutableSetIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMutableSetIterator) DestroyQMutableSetIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QMutableVectorIterator struct {
	ptr unsafe.Pointer
}

type QMutableVectorIterator_ITF interface {
	QMutableVectorIterator_PTR() *QMutableVectorIterator
}

func (p *QMutableVectorIterator) QMutableVectorIterator_PTR() *QMutableVectorIterator {
	return p
}

func (p *QMutableVectorIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutableVectorIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutableVectorIterator(ptr QMutableVectorIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutableVectorIterator_PTR().Pointer()
	}
	return nil
}

func NewQMutableVectorIteratorFromPointer(ptr unsafe.Pointer) *QMutableVectorIterator {
	var n = new(QMutableVectorIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMutableVectorIterator) DestroyQMutableVectorIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QMutex::RecursionMode
type QMutex__RecursionMode int64

const (
	QMutex__NonRecursive = QMutex__RecursionMode(0)
	QMutex__Recursive    = QMutex__RecursionMode(1)
)

type QMutex struct {
	ptr unsafe.Pointer
}

type QMutex_ITF interface {
	QMutex_PTR() *QMutex
}

func (p *QMutex) QMutex_PTR() *QMutex {
	return p
}

func (p *QMutex) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutex) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutex(ptr QMutex_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutex_PTR().Pointer()
	}
	return nil
}

func NewQMutexFromPointer(ptr unsafe.Pointer) *QMutex {
	var n = new(QMutex)
	n.SetPointer(ptr)
	return n
}

func (ptr *QMutex) DestroyQMutex() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QMutex) Lock() {
	if ptr.Pointer() != nil {
		C.QMutex_Lock(ptr.Pointer())
	}
}

func (ptr *QMutex) TryLock(timeout int) bool {
	if ptr.Pointer() != nil {
		return C.QMutex_TryLock(ptr.Pointer(), C.int(int32(timeout))) != 0
	}
	return false
}

func (ptr *QMutex) Unlock() {
	if ptr.Pointer() != nil {
		C.QMutex_Unlock(ptr.Pointer())
	}
}

func NewQMutex(mode QMutex__RecursionMode) *QMutex {
	var tmpValue = NewQMutexFromPointer(C.QMutex_NewQMutex(C.longlong(mode)))
	runtime.SetFinalizer(tmpValue, (*QMutex).DestroyQMutex)
	return tmpValue
}

func (ptr *QMutex) IsRecursive() bool {
	if ptr.Pointer() != nil {
		return C.QMutex_IsRecursive(ptr.Pointer()) != 0
	}
	return false
}

type QMutexLocker struct {
	ptr unsafe.Pointer
}

type QMutexLocker_ITF interface {
	QMutexLocker_PTR() *QMutexLocker
}

func (p *QMutexLocker) QMutexLocker_PTR() *QMutexLocker {
	return p
}

func (p *QMutexLocker) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QMutexLocker) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQMutexLocker(ptr QMutexLocker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QMutexLocker_PTR().Pointer()
	}
	return nil
}

func NewQMutexLockerFromPointer(ptr unsafe.Pointer) *QMutexLocker {
	var n = new(QMutexLocker)
	n.SetPointer(ptr)
	return n
}
func NewQMutexLocker(mutex QMutex_ITF) *QMutexLocker {
	var tmpValue = NewQMutexLockerFromPointer(C.QMutexLocker_NewQMutexLocker(PointerFromQMutex(mutex)))
	runtime.SetFinalizer(tmpValue, (*QMutexLocker).DestroyQMutexLocker)
	return tmpValue
}

func (ptr *QMutexLocker) Mutex() *QMutex {
	if ptr.Pointer() != nil {
		return NewQMutexFromPointer(C.QMutexLocker_Mutex(ptr.Pointer()))
	}
	return nil
}

func (ptr *QMutexLocker) Relock() {
	if ptr.Pointer() != nil {
		C.QMutexLocker_Relock(ptr.Pointer())
	}
}

func (ptr *QMutexLocker) Unlock() {
	if ptr.Pointer() != nil {
		C.QMutexLocker_Unlock(ptr.Pointer())
	}
}

func (ptr *QMutexLocker) DestroyQMutexLocker() {
	if ptr.Pointer() != nil {
		C.QMutexLocker_DestroyQMutexLocker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QObject struct {
	ptr unsafe.Pointer
}

type QObject_ITF interface {
	QObject_PTR() *QObject
}

func (p *QObject) QObject_PTR() *QObject {
	return p
}

func (p *QObject) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QObject) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQObject(ptr QObject_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QObject_PTR().Pointer()
	}
	return nil
}

func NewQObjectFromPointer(ptr unsafe.Pointer) *QObject {
	var n = new(QObject)
	n.SetPointer(ptr)
	return n
}
func (ptr *QObject) InstallEventFilter(filterObj QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_InstallEventFilter(ptr.Pointer(), PointerFromQObject(filterObj))
	}
}

func (ptr *QObject) ObjectName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QObject_ObjectName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QObject) SetObjectName(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QObject_SetObjectName(ptr.Pointer(), nameC)
	}
}

//export callbackQObject_TimerEvent
func callbackQObject_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQObjectFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QObject) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::timerEvent", f)
	}
}

func (ptr *QObject) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::timerEvent")
	}
}

func (ptr *QObject) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QObject) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func NewQObject(parent QObject_ITF) *QObject {
	var tmpValue = NewQObjectFromPointer(C.QObject_NewQObject(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QObject) BlockSignals(block bool) bool {
	if ptr.Pointer() != nil {
		return C.QObject_BlockSignals(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(block)))) != 0
	}
	return false
}

//export callbackQObject_ChildEvent
func callbackQObject_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQObjectFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QObject) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::childEvent", f)
	}
}

func (ptr *QObject) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::childEvent")
	}
}

func (ptr *QObject) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QObject) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQObject_ConnectNotify
func callbackQObject_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQObjectFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QObject) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::connectNotify", f)
	}
}

func (ptr *QObject) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::connectNotify")
	}
}

func (ptr *QObject) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QObject) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQObject_CustomEvent
func callbackQObject_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQObjectFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QObject) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::customEvent", f)
	}
}

func (ptr *QObject) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::customEvent")
	}
}

func (ptr *QObject) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QObject) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQObject_DeleteLater
func callbackQObject_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::deleteLater"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QObject) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::deleteLater", f)
	}
}

func (ptr *QObject) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::deleteLater")
	}
}

func (ptr *QObject) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QObject_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQObject_Destroyed
func callbackQObject_Destroyed(ptr unsafe.Pointer, obj unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::destroyed"); signal != nil {
		signal.(func(*QObject))(NewQObjectFromPointer(obj))
	}

}

func (ptr *QObject) ConnectDestroyed(f func(obj *QObject)) {
	if ptr.Pointer() != nil {
		C.QObject_ConnectDestroyed(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::destroyed", f)
	}
}

func (ptr *QObject) DisconnectDestroyed() {
	if ptr.Pointer() != nil {
		C.QObject_DisconnectDestroyed(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::destroyed")
	}
}

func (ptr *QObject) Destroyed(obj QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_Destroyed(ptr.Pointer(), PointerFromQObject(obj))
	}
}

func QObject_Disconnect2(sender QObject_ITF, sign QMetaMethod_ITF, receiver QObject_ITF, method QMetaMethod_ITF) bool {
	return C.QObject_QObject_Disconnect2(PointerFromQObject(sender), PointerFromQMetaMethod(sign), PointerFromQObject(receiver), PointerFromQMetaMethod(method)) != 0
}

func (ptr *QObject) Disconnect2(sender QObject_ITF, sign QMetaMethod_ITF, receiver QObject_ITF, method QMetaMethod_ITF) bool {
	return C.QObject_QObject_Disconnect2(PointerFromQObject(sender), PointerFromQMetaMethod(sign), PointerFromQObject(receiver), PointerFromQMetaMethod(method)) != 0
}

func QObject_Disconnect(sender QObject_ITF, sign string, receiver QObject_ITF, method string) bool {
	var signC = C.CString(sign)
	defer C.free(unsafe.Pointer(signC))
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	return C.QObject_QObject_Disconnect(PointerFromQObject(sender), signC, PointerFromQObject(receiver), methodC) != 0
}

func (ptr *QObject) Disconnect(sender QObject_ITF, sign string, receiver QObject_ITF, method string) bool {
	var signC = C.CString(sign)
	defer C.free(unsafe.Pointer(signC))
	var methodC = C.CString(method)
	defer C.free(unsafe.Pointer(methodC))
	return C.QObject_QObject_Disconnect(PointerFromQObject(sender), signC, PointerFromQObject(receiver), methodC) != 0
}

func (ptr *QObject) Disconnect4(receiver QObject_ITF, method string) bool {
	if ptr.Pointer() != nil {
		var methodC = C.CString(method)
		defer C.free(unsafe.Pointer(methodC))
		return C.QObject_Disconnect4(ptr.Pointer(), PointerFromQObject(receiver), methodC) != 0
	}
	return false
}

func (ptr *QObject) Disconnect3(sign string, receiver QObject_ITF, method string) bool {
	if ptr.Pointer() != nil {
		var signC = C.CString(sign)
		defer C.free(unsafe.Pointer(signC))
		var methodC = C.CString(method)
		defer C.free(unsafe.Pointer(methodC))
		return C.QObject_Disconnect3(ptr.Pointer(), signC, PointerFromQObject(receiver), methodC) != 0
	}
	return false
}

//export callbackQObject_DisconnectNotify
func callbackQObject_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQObjectFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QObject) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::disconnectNotify", f)
	}
}

func (ptr *QObject) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::disconnectNotify")
	}
}

func (ptr *QObject) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QObject) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QObject) DumpObjectInfo() {
	if ptr.Pointer() != nil {
		C.QObject_DumpObjectInfo(ptr.Pointer())
	}
}

func (ptr *QObject) DumpObjectTree() {
	if ptr.Pointer() != nil {
		C.QObject_DumpObjectTree(ptr.Pointer())
	}
}

func (ptr *QObject) DynamicPropertyNames() []*QByteArray {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QByteArray {
			var out = make([]*QByteArray, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQObjectFromPointer(l.data).dynamicPropertyNames_atList(i)
			}
			return out
		}(C.QObject_DynamicPropertyNames(ptr.Pointer()))
	}
	return nil
}

//export callbackQObject_Event
func callbackQObject_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQObjectFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QObject) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::event", f)
	}
}

func (ptr *QObject) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::event")
	}
}

func (ptr *QObject) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObject_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QObject) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObject_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQObject_EventFilter
func callbackQObject_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQObjectFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QObject) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::eventFilter", f)
	}
}

func (ptr *QObject) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::eventFilter")
	}
}

func (ptr *QObject) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObject_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QObject) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObject_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QObject) FindChild(name string, options Qt__FindChildOption) *QObject {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var tmpValue = NewQObjectFromPointer(C.QObject_FindChild(ptr.Pointer(), nameC, C.longlong(options)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QObject) FindChildren2(regExp QRegExp_ITF, options Qt__FindChildOption) []*QObject {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QObject {
			var out = make([]*QObject, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQObjectFromPointer(l.data).findChildren_atList(i)
			}
			return out
		}(C.QObject_FindChildren2(ptr.Pointer(), PointerFromQRegExp(regExp), C.longlong(options)))
	}
	return nil
}

func (ptr *QObject) FindChildren3(re QRegularExpression_ITF, options Qt__FindChildOption) []*QObject {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QObject {
			var out = make([]*QObject, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQObjectFromPointer(l.data).findChildren_atList(i)
			}
			return out
		}(C.QObject_FindChildren3(ptr.Pointer(), PointerFromQRegularExpression(re), C.longlong(options)))
	}
	return nil
}

func (ptr *QObject) FindChildren(name string, options Qt__FindChildOption) []*QObject {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return func(l C.struct_QtCore_PackedList) []*QObject {
			var out = make([]*QObject, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQObjectFromPointer(l.data).findChildren_atList(i)
			}
			return out
		}(C.QObject_FindChildren(ptr.Pointer(), nameC, C.longlong(options)))
	}
	return nil
}

func (ptr *QObject) Inherits(className string) bool {
	if ptr.Pointer() != nil {
		var classNameC = C.CString(className)
		defer C.free(unsafe.Pointer(classNameC))
		return C.QObject_Inherits(ptr.Pointer(), classNameC) != 0
	}
	return false
}

func (ptr *QObject) IsSignalConnected(sign QMetaMethod_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObject_IsSignalConnected(ptr.Pointer(), PointerFromQMetaMethod(sign)) != 0
	}
	return false
}

func (ptr *QObject) IsWidgetType() bool {
	if ptr.Pointer() != nil {
		return C.QObject_IsWidgetType(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QObject) IsWindowType() bool {
	if ptr.Pointer() != nil {
		return C.QObject_IsWindowType(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QObject) KillTimer(id int) {
	if ptr.Pointer() != nil {
		C.QObject_KillTimer(ptr.Pointer(), C.int(int32(id)))
	}
}

//export callbackQObject_MetaObject
func callbackQObject_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQObjectFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QObject) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::metaObject", f)
	}
}

func (ptr *QObject) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::metaObject")
	}
}

func (ptr *QObject) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QObject_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QObject) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QObject_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

func (ptr *QObject) MoveToThread(targetThread QThread_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_MoveToThread(ptr.Pointer(), PointerFromQThread(targetThread))
	}
}

//export callbackQObject_ObjectNameChanged
func callbackQObject_ObjectNameChanged(ptr unsafe.Pointer, objectName C.struct_QtCore_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::objectNameChanged"); signal != nil {
		signal.(func(string))(cGoUnpackString(objectName))
	}

}

func (ptr *QObject) ConnectObjectNameChanged(f func(objectName string)) {
	if ptr.Pointer() != nil {
		C.QObject_ConnectObjectNameChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::objectNameChanged", f)
	}
}

func (ptr *QObject) DisconnectObjectNameChanged() {
	if ptr.Pointer() != nil {
		C.QObject_DisconnectObjectNameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::objectNameChanged")
	}
}

func (ptr *QObject) Parent() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QObject_Parent(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QObject) Property(name string) *QVariant {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var tmpValue = NewQVariantFromPointer(C.QObject_Property(ptr.Pointer(), nameC))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QObject) Receivers(sign string) int {
	if ptr.Pointer() != nil {
		var signC = C.CString(sign)
		defer C.free(unsafe.Pointer(signC))
		return int(int32(C.QObject_Receivers(ptr.Pointer(), signC)))
	}
	return 0
}

func (ptr *QObject) RemoveEventFilter(obj QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_RemoveEventFilter(ptr.Pointer(), PointerFromQObject(obj))
	}
}

func (ptr *QObject) Sender() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QObject_Sender(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QObject) SenderSignalIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QObject_SenderSignalIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QObject) SetParent(parent QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QObject_SetParent(ptr.Pointer(), PointerFromQObject(parent))
	}
}

func (ptr *QObject) SetProperty(name string, value QVariant_ITF) bool {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return C.QObject_SetProperty(ptr.Pointer(), nameC, PointerFromQVariant(value)) != 0
	}
	return false
}

func (ptr *QObject) SignalsBlocked() bool {
	if ptr.Pointer() != nil {
		return C.QObject_SignalsBlocked(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QObject) StartTimer(interval int, timerType Qt__TimerType) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QObject_StartTimer(ptr.Pointer(), C.int(int32(interval)), C.longlong(timerType))))
	}
	return 0
}

func (ptr *QObject) Thread() *QThread {
	if ptr.Pointer() != nil {
		var tmpValue = NewQThreadFromPointer(C.QObject_Thread(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func QObject_Tr(sourceText string, disambiguation string, n int) string {
	var sourceTextC = C.CString(sourceText)
	defer C.free(unsafe.Pointer(sourceTextC))
	var disambiguationC = C.CString(disambiguation)
	defer C.free(unsafe.Pointer(disambiguationC))
	return cGoUnpackString(C.QObject_QObject_Tr(sourceTextC, disambiguationC, C.int(int32(n))))
}

func (ptr *QObject) Tr(sourceText string, disambiguation string, n int) string {
	var sourceTextC = C.CString(sourceText)
	defer C.free(unsafe.Pointer(sourceTextC))
	var disambiguationC = C.CString(disambiguation)
	defer C.free(unsafe.Pointer(disambiguationC))
	return cGoUnpackString(C.QObject_QObject_Tr(sourceTextC, disambiguationC, C.int(int32(n))))
}

//export callbackQObject_DestroyQObject
func callbackQObject_DestroyQObject(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObject::~QObject"); signal != nil {
		signal.(func())()
	} else {
		NewQObjectFromPointer(ptr).DestroyQObjectDefault()
	}
}

func (ptr *QObject) ConnectDestroyQObject(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::~QObject", f)
	}
}

func (ptr *QObject) DisconnectDestroyQObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObject::~QObject")
	}
}

func (ptr *QObject) DestroyQObject() {
	if ptr.Pointer() != nil {
		C.QObject_DestroyQObject(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QObject) DestroyQObjectDefault() {
	if ptr.Pointer() != nil {
		C.QObject_DestroyQObjectDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QObject) dynamicPropertyNames_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QObject_dynamicPropertyNames_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QObject) findChildren_atList(i int) *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QObject_findChildren_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

type QObjectCleanupHandler struct {
	QObject
}

type QObjectCleanupHandler_ITF interface {
	QObject_ITF
	QObjectCleanupHandler_PTR() *QObjectCleanupHandler
}

func (p *QObjectCleanupHandler) QObjectCleanupHandler_PTR() *QObjectCleanupHandler {
	return p
}

func (p *QObjectCleanupHandler) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QObjectCleanupHandler) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQObjectCleanupHandler(ptr QObjectCleanupHandler_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QObjectCleanupHandler_PTR().Pointer()
	}
	return nil
}

func NewQObjectCleanupHandlerFromPointer(ptr unsafe.Pointer) *QObjectCleanupHandler {
	var n = new(QObjectCleanupHandler)
	n.SetPointer(ptr)
	return n
}
func NewQObjectCleanupHandler() *QObjectCleanupHandler {
	var tmpValue = NewQObjectCleanupHandlerFromPointer(C.QObjectCleanupHandler_NewQObjectCleanupHandler())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QObjectCleanupHandler) Add(object QObject_ITF) *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QObjectCleanupHandler_Add(ptr.Pointer(), PointerFromQObject(object)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QObjectCleanupHandler) Clear() {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_Clear(ptr.Pointer())
	}
}

func (ptr *QObjectCleanupHandler) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QObjectCleanupHandler_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QObjectCleanupHandler) Remove(object QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_Remove(ptr.Pointer(), PointerFromQObject(object))
	}
}

func (ptr *QObjectCleanupHandler) DestroyQObjectCleanupHandler() {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_DestroyQObjectCleanupHandler(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQObjectCleanupHandler_TimerEvent
func callbackQObjectCleanupHandler_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQObjectCleanupHandlerFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QObjectCleanupHandler) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::timerEvent", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::timerEvent")
	}
}

func (ptr *QObjectCleanupHandler) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QObjectCleanupHandler) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQObjectCleanupHandler_ChildEvent
func callbackQObjectCleanupHandler_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQObjectCleanupHandlerFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QObjectCleanupHandler) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::childEvent", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::childEvent")
	}
}

func (ptr *QObjectCleanupHandler) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QObjectCleanupHandler) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQObjectCleanupHandler_ConnectNotify
func callbackQObjectCleanupHandler_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQObjectCleanupHandlerFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QObjectCleanupHandler) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::connectNotify", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::connectNotify")
	}
}

func (ptr *QObjectCleanupHandler) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QObjectCleanupHandler) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQObjectCleanupHandler_CustomEvent
func callbackQObjectCleanupHandler_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQObjectCleanupHandlerFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QObjectCleanupHandler) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::customEvent", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::customEvent")
	}
}

func (ptr *QObjectCleanupHandler) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QObjectCleanupHandler) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQObjectCleanupHandler_DeleteLater
func callbackQObjectCleanupHandler_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQObjectCleanupHandlerFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QObjectCleanupHandler) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::deleteLater", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::deleteLater")
	}
}

func (ptr *QObjectCleanupHandler) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QObjectCleanupHandler) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQObjectCleanupHandler_DisconnectNotify
func callbackQObjectCleanupHandler_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQObjectCleanupHandlerFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QObjectCleanupHandler) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::disconnectNotify", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::disconnectNotify")
	}
}

func (ptr *QObjectCleanupHandler) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QObjectCleanupHandler) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QObjectCleanupHandler_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQObjectCleanupHandler_Event
func callbackQObjectCleanupHandler_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQObjectCleanupHandlerFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QObjectCleanupHandler) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::event", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::event")
	}
}

func (ptr *QObjectCleanupHandler) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObjectCleanupHandler_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QObjectCleanupHandler) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObjectCleanupHandler_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQObjectCleanupHandler_EventFilter
func callbackQObjectCleanupHandler_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQObjectCleanupHandlerFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QObjectCleanupHandler) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::eventFilter", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::eventFilter")
	}
}

func (ptr *QObjectCleanupHandler) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObjectCleanupHandler_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QObjectCleanupHandler) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QObjectCleanupHandler_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQObjectCleanupHandler_MetaObject
func callbackQObjectCleanupHandler_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QObjectCleanupHandler::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQObjectCleanupHandlerFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QObjectCleanupHandler) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::metaObject", f)
	}
}

func (ptr *QObjectCleanupHandler) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QObjectCleanupHandler::metaObject")
	}
}

func (ptr *QObjectCleanupHandler) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QObjectCleanupHandler_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QObjectCleanupHandler) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QObjectCleanupHandler_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QPair struct {
	ptr unsafe.Pointer
}

type QPair_ITF interface {
	QPair_PTR() *QPair
}

func (p *QPair) QPair_PTR() *QPair {
	return p
}

func (p *QPair) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPair) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPair(ptr QPair_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPair_PTR().Pointer()
	}
	return nil
}

func NewQPairFromPointer(ptr unsafe.Pointer) *QPair {
	var n = new(QPair)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPair) DestroyQPair() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QParallelAnimationGroup struct {
	QAnimationGroup
}

type QParallelAnimationGroup_ITF interface {
	QAnimationGroup_ITF
	QParallelAnimationGroup_PTR() *QParallelAnimationGroup
}

func (p *QParallelAnimationGroup) QParallelAnimationGroup_PTR() *QParallelAnimationGroup {
	return p
}

func (p *QParallelAnimationGroup) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAnimationGroup_PTR().Pointer()
	}
	return nil
}

func (p *QParallelAnimationGroup) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAnimationGroup_PTR().SetPointer(ptr)
	}
}

func PointerFromQParallelAnimationGroup(ptr QParallelAnimationGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QParallelAnimationGroup_PTR().Pointer()
	}
	return nil
}

func NewQParallelAnimationGroupFromPointer(ptr unsafe.Pointer) *QParallelAnimationGroup {
	var n = new(QParallelAnimationGroup)
	n.SetPointer(ptr)
	return n
}
func NewQParallelAnimationGroup(parent QObject_ITF) *QParallelAnimationGroup {
	var tmpValue = NewQParallelAnimationGroupFromPointer(C.QParallelAnimationGroup_NewQParallelAnimationGroup(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQParallelAnimationGroup_Duration
func callbackQParallelAnimationGroup_Duration(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::duration"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQParallelAnimationGroupFromPointer(ptr).DurationDefault()))
}

func (ptr *QParallelAnimationGroup) ConnectDuration(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::duration", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectDuration() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::duration")
	}
}

func (ptr *QParallelAnimationGroup) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QParallelAnimationGroup_Duration(ptr.Pointer())))
	}
	return 0
}

func (ptr *QParallelAnimationGroup) DurationDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QParallelAnimationGroup_DurationDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQParallelAnimationGroup_Event
func callbackQParallelAnimationGroup_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQParallelAnimationGroupFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QParallelAnimationGroup) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::event", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::event")
	}
}

func (ptr *QParallelAnimationGroup) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QParallelAnimationGroup_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QParallelAnimationGroup) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QParallelAnimationGroup_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQParallelAnimationGroup_UpdateCurrentTime
func callbackQParallelAnimationGroup_UpdateCurrentTime(ptr unsafe.Pointer, currentTime C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::updateCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(currentTime)))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).UpdateCurrentTimeDefault(int(int32(currentTime)))
	}
}

func (ptr *QParallelAnimationGroup) ConnectUpdateCurrentTime(f func(currentTime int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::updateCurrentTime", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectUpdateCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::updateCurrentTime")
	}
}

func (ptr *QParallelAnimationGroup) UpdateCurrentTime(currentTime int) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_UpdateCurrentTime(ptr.Pointer(), C.int(int32(currentTime)))
	}
}

func (ptr *QParallelAnimationGroup) UpdateCurrentTimeDefault(currentTime int) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_UpdateCurrentTimeDefault(ptr.Pointer(), C.int(int32(currentTime)))
	}
}

//export callbackQParallelAnimationGroup_UpdateDirection
func callbackQParallelAnimationGroup_UpdateDirection(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::updateDirection"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(direction))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).UpdateDirectionDefault(QAbstractAnimation__Direction(direction))
	}
}

func (ptr *QParallelAnimationGroup) ConnectUpdateDirection(f func(direction QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::updateDirection", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectUpdateDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::updateDirection")
	}
}

func (ptr *QParallelAnimationGroup) UpdateDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_UpdateDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QParallelAnimationGroup) UpdateDirectionDefault(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_UpdateDirectionDefault(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQParallelAnimationGroup_UpdateState
func callbackQParallelAnimationGroup_UpdateState(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::updateState"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).UpdateStateDefault(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}
}

func (ptr *QParallelAnimationGroup) ConnectUpdateState(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::updateState", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::updateState")
	}
}

func (ptr *QParallelAnimationGroup) UpdateState(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_UpdateState(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QParallelAnimationGroup) UpdateStateDefault(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_UpdateStateDefault(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QParallelAnimationGroup) DestroyQParallelAnimationGroup() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_DestroyQParallelAnimationGroup(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQParallelAnimationGroup_SetCurrentTime
func callbackQParallelAnimationGroup_SetCurrentTime(ptr unsafe.Pointer, msecs C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msecs)))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).SetCurrentTimeDefault(int(int32(msecs)))
	}
}

func (ptr *QParallelAnimationGroup) ConnectSetCurrentTime(f func(msecs int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::setCurrentTime", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectSetCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::setCurrentTime")
	}
}

func (ptr *QParallelAnimationGroup) SetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_SetCurrentTime(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QParallelAnimationGroup) SetCurrentTimeDefault(msecs int) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_SetCurrentTimeDefault(ptr.Pointer(), C.int(int32(msecs)))
	}
}

//export callbackQParallelAnimationGroup_Pause
func callbackQParallelAnimationGroup_Pause(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::pause"); signal != nil {
		signal.(func())()
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).PauseDefault()
	}
}

func (ptr *QParallelAnimationGroup) ConnectPause(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::pause", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectPause() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::pause")
	}
}

func (ptr *QParallelAnimationGroup) Pause() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_Pause(ptr.Pointer())
	}
}

func (ptr *QParallelAnimationGroup) PauseDefault() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_PauseDefault(ptr.Pointer())
	}
}

//export callbackQParallelAnimationGroup_Resume
func callbackQParallelAnimationGroup_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::resume"); signal != nil {
		signal.(func())()
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).ResumeDefault()
	}
}

func (ptr *QParallelAnimationGroup) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::resume", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::resume")
	}
}

func (ptr *QParallelAnimationGroup) Resume() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_Resume(ptr.Pointer())
	}
}

func (ptr *QParallelAnimationGroup) ResumeDefault() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_ResumeDefault(ptr.Pointer())
	}
}

//export callbackQParallelAnimationGroup_SetPaused
func callbackQParallelAnimationGroup_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).SetPausedDefault(int8(paused) != 0)
	}
}

func (ptr *QParallelAnimationGroup) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::setPaused", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectSetPaused() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::setPaused")
	}
}

func (ptr *QParallelAnimationGroup) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QParallelAnimationGroup) SetPausedDefault(paused bool) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_SetPausedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

//export callbackQParallelAnimationGroup_Start
func callbackQParallelAnimationGroup_Start(ptr unsafe.Pointer, policy C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::start"); signal != nil {
		signal.(func(QAbstractAnimation__DeletionPolicy))(QAbstractAnimation__DeletionPolicy(policy))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).StartDefault(QAbstractAnimation__DeletionPolicy(policy))
	}
}

func (ptr *QParallelAnimationGroup) ConnectStart(f func(policy QAbstractAnimation__DeletionPolicy)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::start", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::start")
	}
}

func (ptr *QParallelAnimationGroup) Start(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_Start(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QParallelAnimationGroup) StartDefault(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_StartDefault(ptr.Pointer(), C.longlong(policy))
	}
}

//export callbackQParallelAnimationGroup_Stop
func callbackQParallelAnimationGroup_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).StopDefault()
	}
}

func (ptr *QParallelAnimationGroup) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::stop", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::stop")
	}
}

func (ptr *QParallelAnimationGroup) Stop() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_Stop(ptr.Pointer())
	}
}

func (ptr *QParallelAnimationGroup) StopDefault() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_StopDefault(ptr.Pointer())
	}
}

//export callbackQParallelAnimationGroup_TimerEvent
func callbackQParallelAnimationGroup_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QParallelAnimationGroup) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::timerEvent", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::timerEvent")
	}
}

func (ptr *QParallelAnimationGroup) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QParallelAnimationGroup) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQParallelAnimationGroup_ChildEvent
func callbackQParallelAnimationGroup_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QParallelAnimationGroup) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::childEvent", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::childEvent")
	}
}

func (ptr *QParallelAnimationGroup) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QParallelAnimationGroup) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQParallelAnimationGroup_ConnectNotify
func callbackQParallelAnimationGroup_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QParallelAnimationGroup) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::connectNotify", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::connectNotify")
	}
}

func (ptr *QParallelAnimationGroup) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QParallelAnimationGroup) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQParallelAnimationGroup_CustomEvent
func callbackQParallelAnimationGroup_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QParallelAnimationGroup) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::customEvent", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::customEvent")
	}
}

func (ptr *QParallelAnimationGroup) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QParallelAnimationGroup) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQParallelAnimationGroup_DeleteLater
func callbackQParallelAnimationGroup_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QParallelAnimationGroup) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::deleteLater", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::deleteLater")
	}
}

func (ptr *QParallelAnimationGroup) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QParallelAnimationGroup) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQParallelAnimationGroup_DisconnectNotify
func callbackQParallelAnimationGroup_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQParallelAnimationGroupFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QParallelAnimationGroup) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::disconnectNotify", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::disconnectNotify")
	}
}

func (ptr *QParallelAnimationGroup) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QParallelAnimationGroup) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QParallelAnimationGroup_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQParallelAnimationGroup_EventFilter
func callbackQParallelAnimationGroup_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQParallelAnimationGroupFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QParallelAnimationGroup) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::eventFilter", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::eventFilter")
	}
}

func (ptr *QParallelAnimationGroup) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QParallelAnimationGroup_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QParallelAnimationGroup) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QParallelAnimationGroup_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQParallelAnimationGroup_MetaObject
func callbackQParallelAnimationGroup_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QParallelAnimationGroup::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQParallelAnimationGroupFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QParallelAnimationGroup) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::metaObject", f)
	}
}

func (ptr *QParallelAnimationGroup) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QParallelAnimationGroup::metaObject")
	}
}

func (ptr *QParallelAnimationGroup) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QParallelAnimationGroup_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QParallelAnimationGroup) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QParallelAnimationGroup_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QPauseAnimation struct {
	QAbstractAnimation
}

type QPauseAnimation_ITF interface {
	QAbstractAnimation_ITF
	QPauseAnimation_PTR() *QPauseAnimation
}

func (p *QPauseAnimation) QPauseAnimation_PTR() *QPauseAnimation {
	return p
}

func (p *QPauseAnimation) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractAnimation_PTR().Pointer()
	}
	return nil
}

func (p *QPauseAnimation) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractAnimation_PTR().SetPointer(ptr)
	}
}

func PointerFromQPauseAnimation(ptr QPauseAnimation_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPauseAnimation_PTR().Pointer()
	}
	return nil
}

func NewQPauseAnimationFromPointer(ptr unsafe.Pointer) *QPauseAnimation {
	var n = new(QPauseAnimation)
	n.SetPointer(ptr)
	return n
}

//export callbackQPauseAnimation_Duration
func callbackQPauseAnimation_Duration(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::duration"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQPauseAnimationFromPointer(ptr).DurationDefault()))
}

func (ptr *QPauseAnimation) ConnectDuration(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::duration", f)
	}
}

func (ptr *QPauseAnimation) DisconnectDuration() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::duration")
	}
}

func (ptr *QPauseAnimation) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPauseAnimation_Duration(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPauseAnimation) DurationDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPauseAnimation_DurationDefault(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPauseAnimation) SetDuration(msecs int) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_SetDuration(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func NewQPauseAnimation(parent QObject_ITF) *QPauseAnimation {
	var tmpValue = NewQPauseAnimationFromPointer(C.QPauseAnimation_NewQPauseAnimation(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQPauseAnimation2(msecs int, parent QObject_ITF) *QPauseAnimation {
	var tmpValue = NewQPauseAnimationFromPointer(C.QPauseAnimation_NewQPauseAnimation2(C.int(int32(msecs)), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQPauseAnimation_Event
func callbackQPauseAnimation_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPauseAnimationFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QPauseAnimation) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::event", f)
	}
}

func (ptr *QPauseAnimation) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::event")
	}
}

func (ptr *QPauseAnimation) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPauseAnimation_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QPauseAnimation) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPauseAnimation_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQPauseAnimation_UpdateCurrentTime
func callbackQPauseAnimation_UpdateCurrentTime(ptr unsafe.Pointer, vin C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::updateCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(vin)))
	} else {
		NewQPauseAnimationFromPointer(ptr).UpdateCurrentTimeDefault(int(int32(vin)))
	}
}

func (ptr *QPauseAnimation) ConnectUpdateCurrentTime(f func(vin int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::updateCurrentTime", f)
	}
}

func (ptr *QPauseAnimation) DisconnectUpdateCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::updateCurrentTime")
	}
}

func (ptr *QPauseAnimation) UpdateCurrentTime(vin int) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_UpdateCurrentTime(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QPauseAnimation) UpdateCurrentTimeDefault(vin int) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_UpdateCurrentTimeDefault(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QPauseAnimation) DestroyQPauseAnimation() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_DestroyQPauseAnimation(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPauseAnimation_SetCurrentTime
func callbackQPauseAnimation_SetCurrentTime(ptr unsafe.Pointer, msecs C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msecs)))
	} else {
		NewQPauseAnimationFromPointer(ptr).SetCurrentTimeDefault(int(int32(msecs)))
	}
}

func (ptr *QPauseAnimation) ConnectSetCurrentTime(f func(msecs int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::setCurrentTime", f)
	}
}

func (ptr *QPauseAnimation) DisconnectSetCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::setCurrentTime")
	}
}

func (ptr *QPauseAnimation) SetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_SetCurrentTime(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QPauseAnimation) SetCurrentTimeDefault(msecs int) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_SetCurrentTimeDefault(ptr.Pointer(), C.int(int32(msecs)))
	}
}

//export callbackQPauseAnimation_Pause
func callbackQPauseAnimation_Pause(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::pause"); signal != nil {
		signal.(func())()
	} else {
		NewQPauseAnimationFromPointer(ptr).PauseDefault()
	}
}

func (ptr *QPauseAnimation) ConnectPause(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::pause", f)
	}
}

func (ptr *QPauseAnimation) DisconnectPause() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::pause")
	}
}

func (ptr *QPauseAnimation) Pause() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_Pause(ptr.Pointer())
	}
}

func (ptr *QPauseAnimation) PauseDefault() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_PauseDefault(ptr.Pointer())
	}
}

//export callbackQPauseAnimation_Resume
func callbackQPauseAnimation_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::resume"); signal != nil {
		signal.(func())()
	} else {
		NewQPauseAnimationFromPointer(ptr).ResumeDefault()
	}
}

func (ptr *QPauseAnimation) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::resume", f)
	}
}

func (ptr *QPauseAnimation) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::resume")
	}
}

func (ptr *QPauseAnimation) Resume() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_Resume(ptr.Pointer())
	}
}

func (ptr *QPauseAnimation) ResumeDefault() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_ResumeDefault(ptr.Pointer())
	}
}

//export callbackQPauseAnimation_SetPaused
func callbackQPauseAnimation_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	} else {
		NewQPauseAnimationFromPointer(ptr).SetPausedDefault(int8(paused) != 0)
	}
}

func (ptr *QPauseAnimation) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::setPaused", f)
	}
}

func (ptr *QPauseAnimation) DisconnectSetPaused() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::setPaused")
	}
}

func (ptr *QPauseAnimation) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QPauseAnimation) SetPausedDefault(paused bool) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_SetPausedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

//export callbackQPauseAnimation_Start
func callbackQPauseAnimation_Start(ptr unsafe.Pointer, policy C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::start"); signal != nil {
		signal.(func(QAbstractAnimation__DeletionPolicy))(QAbstractAnimation__DeletionPolicy(policy))
	} else {
		NewQPauseAnimationFromPointer(ptr).StartDefault(QAbstractAnimation__DeletionPolicy(policy))
	}
}

func (ptr *QPauseAnimation) ConnectStart(f func(policy QAbstractAnimation__DeletionPolicy)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::start", f)
	}
}

func (ptr *QPauseAnimation) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::start")
	}
}

func (ptr *QPauseAnimation) Start(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_Start(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QPauseAnimation) StartDefault(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_StartDefault(ptr.Pointer(), C.longlong(policy))
	}
}

//export callbackQPauseAnimation_Stop
func callbackQPauseAnimation_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQPauseAnimationFromPointer(ptr).StopDefault()
	}
}

func (ptr *QPauseAnimation) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::stop", f)
	}
}

func (ptr *QPauseAnimation) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::stop")
	}
}

func (ptr *QPauseAnimation) Stop() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_Stop(ptr.Pointer())
	}
}

func (ptr *QPauseAnimation) StopDefault() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_StopDefault(ptr.Pointer())
	}
}

//export callbackQPauseAnimation_UpdateDirection
func callbackQPauseAnimation_UpdateDirection(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::updateDirection"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(direction))
	} else {
		NewQPauseAnimationFromPointer(ptr).UpdateDirectionDefault(QAbstractAnimation__Direction(direction))
	}
}

func (ptr *QPauseAnimation) ConnectUpdateDirection(f func(direction QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::updateDirection", f)
	}
}

func (ptr *QPauseAnimation) DisconnectUpdateDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::updateDirection")
	}
}

func (ptr *QPauseAnimation) UpdateDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_UpdateDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QPauseAnimation) UpdateDirectionDefault(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_UpdateDirectionDefault(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQPauseAnimation_UpdateState
func callbackQPauseAnimation_UpdateState(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::updateState"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	} else {
		NewQPauseAnimationFromPointer(ptr).UpdateStateDefault(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}
}

func (ptr *QPauseAnimation) ConnectUpdateState(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::updateState", f)
	}
}

func (ptr *QPauseAnimation) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::updateState")
	}
}

func (ptr *QPauseAnimation) UpdateState(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_UpdateState(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QPauseAnimation) UpdateStateDefault(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_UpdateStateDefault(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

//export callbackQPauseAnimation_TimerEvent
func callbackQPauseAnimation_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQPauseAnimationFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPauseAnimation) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::timerEvent", f)
	}
}

func (ptr *QPauseAnimation) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::timerEvent")
	}
}

func (ptr *QPauseAnimation) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QPauseAnimation) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQPauseAnimation_ChildEvent
func callbackQPauseAnimation_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQPauseAnimationFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QPauseAnimation) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::childEvent", f)
	}
}

func (ptr *QPauseAnimation) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::childEvent")
	}
}

func (ptr *QPauseAnimation) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QPauseAnimation) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQPauseAnimation_ConnectNotify
func callbackQPauseAnimation_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQPauseAnimationFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPauseAnimation) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::connectNotify", f)
	}
}

func (ptr *QPauseAnimation) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::connectNotify")
	}
}

func (ptr *QPauseAnimation) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPauseAnimation) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQPauseAnimation_CustomEvent
func callbackQPauseAnimation_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQPauseAnimationFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QPauseAnimation) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::customEvent", f)
	}
}

func (ptr *QPauseAnimation) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::customEvent")
	}
}

func (ptr *QPauseAnimation) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QPauseAnimation) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQPauseAnimation_DeleteLater
func callbackQPauseAnimation_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQPauseAnimationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QPauseAnimation) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::deleteLater", f)
	}
}

func (ptr *QPauseAnimation) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::deleteLater")
	}
}

func (ptr *QPauseAnimation) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPauseAnimation) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPauseAnimation_DisconnectNotify
func callbackQPauseAnimation_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQPauseAnimationFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPauseAnimation) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::disconnectNotify", f)
	}
}

func (ptr *QPauseAnimation) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::disconnectNotify")
	}
}

func (ptr *QPauseAnimation) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPauseAnimation) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPauseAnimation_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQPauseAnimation_EventFilter
func callbackQPauseAnimation_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPauseAnimationFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QPauseAnimation) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::eventFilter", f)
	}
}

func (ptr *QPauseAnimation) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::eventFilter")
	}
}

func (ptr *QPauseAnimation) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPauseAnimation_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPauseAnimation) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPauseAnimation_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPauseAnimation_MetaObject
func callbackQPauseAnimation_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPauseAnimation::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQPauseAnimationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPauseAnimation) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::metaObject", f)
	}
}

func (ptr *QPauseAnimation) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPauseAnimation::metaObject")
	}
}

func (ptr *QPauseAnimation) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QPauseAnimation_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPauseAnimation) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QPauseAnimation_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QPersistentModelIndex struct {
	ptr unsafe.Pointer
}

type QPersistentModelIndex_ITF interface {
	QPersistentModelIndex_PTR() *QPersistentModelIndex
}

func (p *QPersistentModelIndex) QPersistentModelIndex_PTR() *QPersistentModelIndex {
	return p
}

func (p *QPersistentModelIndex) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPersistentModelIndex) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPersistentModelIndex(ptr QPersistentModelIndex_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPersistentModelIndex_PTR().Pointer()
	}
	return nil
}

func NewQPersistentModelIndexFromPointer(ptr unsafe.Pointer) *QPersistentModelIndex {
	var n = new(QPersistentModelIndex)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPersistentModelIndex) DestroyQPersistentModelIndex() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQPersistentModelIndex3(other QPersistentModelIndex_ITF) *QPersistentModelIndex {
	var tmpValue = NewQPersistentModelIndexFromPointer(C.QPersistentModelIndex_NewQPersistentModelIndex3(PointerFromQPersistentModelIndex(other)))
	runtime.SetFinalizer(tmpValue, (*QPersistentModelIndex).DestroyQPersistentModelIndex)
	return tmpValue
}

func (ptr *QPersistentModelIndex) Column() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPersistentModelIndex_Column(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPersistentModelIndex) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QPersistentModelIndex_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPersistentModelIndex) Row() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPersistentModelIndex_Row(ptr.Pointer())))
	}
	return 0
}

func NewQPersistentModelIndex4(other QPersistentModelIndex_ITF) *QPersistentModelIndex {
	var tmpValue = NewQPersistentModelIndexFromPointer(C.QPersistentModelIndex_NewQPersistentModelIndex4(PointerFromQPersistentModelIndex(other)))
	runtime.SetFinalizer(tmpValue, (*QPersistentModelIndex).DestroyQPersistentModelIndex)
	return tmpValue
}

func NewQPersistentModelIndex(index QModelIndex_ITF) *QPersistentModelIndex {
	var tmpValue = NewQPersistentModelIndexFromPointer(C.QPersistentModelIndex_NewQPersistentModelIndex(PointerFromQModelIndex(index)))
	runtime.SetFinalizer(tmpValue, (*QPersistentModelIndex).DestroyQPersistentModelIndex)
	return tmpValue
}

func (ptr *QPersistentModelIndex) Child(row int, column int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QPersistentModelIndex_Child(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QPersistentModelIndex) Data(role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QPersistentModelIndex_Data(ptr.Pointer(), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QPersistentModelIndex) Flags() Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QPersistentModelIndex_Flags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPersistentModelIndex) Model() *QAbstractItemModel {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractItemModelFromPointer(C.QPersistentModelIndex_Model(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPersistentModelIndex) Parent() *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QPersistentModelIndex_Parent(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QPersistentModelIndex) Sibling(row int, column int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QPersistentModelIndex_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QPersistentModelIndex) Swap(other QPersistentModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QPersistentModelIndex_Swap(ptr.Pointer(), PointerFromQPersistentModelIndex(other))
	}
}

type QPluginLoader struct {
	QObject
}

type QPluginLoader_ITF interface {
	QObject_ITF
	QPluginLoader_PTR() *QPluginLoader
}

func (p *QPluginLoader) QPluginLoader_PTR() *QPluginLoader {
	return p
}

func (p *QPluginLoader) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QPluginLoader) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQPluginLoader(ptr QPluginLoader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPluginLoader_PTR().Pointer()
	}
	return nil
}

func NewQPluginLoaderFromPointer(ptr unsafe.Pointer) *QPluginLoader {
	var n = new(QPluginLoader)
	n.SetPointer(ptr)
	return n
}
func (ptr *QPluginLoader) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPluginLoader_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPluginLoader) LoadHints() QLibrary__LoadHint {
	if ptr.Pointer() != nil {
		return QLibrary__LoadHint(C.QPluginLoader_LoadHints(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPluginLoader) SetFileName(fileName string) {
	if ptr.Pointer() != nil {
		var fileNameC = C.CString(fileName)
		defer C.free(unsafe.Pointer(fileNameC))
		C.QPluginLoader_SetFileName(ptr.Pointer(), fileNameC)
	}
}

func (ptr *QPluginLoader) SetLoadHints(loadHints QLibrary__LoadHint) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_SetLoadHints(ptr.Pointer(), C.longlong(loadHints))
	}
}

func NewQPluginLoader(parent QObject_ITF) *QPluginLoader {
	var tmpValue = NewQPluginLoaderFromPointer(C.QPluginLoader_NewQPluginLoader(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQPluginLoader2(fileName string, parent QObject_ITF) *QPluginLoader {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQPluginLoaderFromPointer(C.QPluginLoader_NewQPluginLoader2(fileNameC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QPluginLoader) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QPluginLoader_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QPluginLoader) Instance() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QPluginLoader_Instance(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QPluginLoader) IsLoaded() bool {
	if ptr.Pointer() != nil {
		return C.QPluginLoader_IsLoaded(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPluginLoader) Load() bool {
	if ptr.Pointer() != nil {
		return C.QPluginLoader_Load(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPluginLoader) MetaData() *QJsonObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonObjectFromPointer(C.QPluginLoader_MetaData(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
		return tmpValue
	}
	return nil
}

func QPluginLoader_StaticInstances() []*QObject {
	return func(l C.struct_QtCore_PackedList) []*QObject {
		var out = make([]*QObject, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQPluginLoaderFromPointer(l.data).staticInstances_atList(i)
		}
		return out
	}(C.QPluginLoader_QPluginLoader_StaticInstances())
}

func (ptr *QPluginLoader) StaticInstances() []*QObject {
	return func(l C.struct_QtCore_PackedList) []*QObject {
		var out = make([]*QObject, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQPluginLoaderFromPointer(l.data).staticInstances_atList(i)
		}
		return out
	}(C.QPluginLoader_QPluginLoader_StaticInstances())
}

func (ptr *QPluginLoader) Unload() bool {
	if ptr.Pointer() != nil {
		return C.QPluginLoader_Unload(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPluginLoader) DestroyQPluginLoader() {
	if ptr.Pointer() != nil {
		C.QPluginLoader_DestroyQPluginLoader(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPluginLoader) staticInstances_atList(i int) *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QPluginLoader_staticInstances_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQPluginLoader_TimerEvent
func callbackQPluginLoader_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQPluginLoaderFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPluginLoader) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::timerEvent", f)
	}
}

func (ptr *QPluginLoader) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::timerEvent")
	}
}

func (ptr *QPluginLoader) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QPluginLoader) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQPluginLoader_ChildEvent
func callbackQPluginLoader_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQPluginLoaderFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QPluginLoader) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::childEvent", f)
	}
}

func (ptr *QPluginLoader) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::childEvent")
	}
}

func (ptr *QPluginLoader) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QPluginLoader) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQPluginLoader_ConnectNotify
func callbackQPluginLoader_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQPluginLoaderFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPluginLoader) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::connectNotify", f)
	}
}

func (ptr *QPluginLoader) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::connectNotify")
	}
}

func (ptr *QPluginLoader) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPluginLoader) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQPluginLoader_CustomEvent
func callbackQPluginLoader_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQPluginLoaderFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QPluginLoader) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::customEvent", f)
	}
}

func (ptr *QPluginLoader) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::customEvent")
	}
}

func (ptr *QPluginLoader) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QPluginLoader) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQPluginLoader_DeleteLater
func callbackQPluginLoader_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQPluginLoaderFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QPluginLoader) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::deleteLater", f)
	}
}

func (ptr *QPluginLoader) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::deleteLater")
	}
}

func (ptr *QPluginLoader) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QPluginLoader_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPluginLoader) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QPluginLoader_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPluginLoader_DisconnectNotify
func callbackQPluginLoader_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQPluginLoaderFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPluginLoader) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::disconnectNotify", f)
	}
}

func (ptr *QPluginLoader) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::disconnectNotify")
	}
}

func (ptr *QPluginLoader) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPluginLoader) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPluginLoader_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQPluginLoader_Event
func callbackQPluginLoader_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPluginLoaderFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QPluginLoader) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::event", f)
	}
}

func (ptr *QPluginLoader) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::event")
	}
}

func (ptr *QPluginLoader) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPluginLoader_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QPluginLoader) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPluginLoader_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQPluginLoader_EventFilter
func callbackQPluginLoader_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPluginLoaderFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QPluginLoader) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::eventFilter", f)
	}
}

func (ptr *QPluginLoader) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::eventFilter")
	}
}

func (ptr *QPluginLoader) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPluginLoader_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPluginLoader) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPluginLoader_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPluginLoader_MetaObject
func callbackQPluginLoader_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPluginLoader::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQPluginLoaderFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPluginLoader) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::metaObject", f)
	}
}

func (ptr *QPluginLoader) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPluginLoader::metaObject")
	}
}

func (ptr *QPluginLoader) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QPluginLoader_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPluginLoader) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QPluginLoader_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QPoint struct {
	ptr unsafe.Pointer
}

type QPoint_ITF interface {
	QPoint_PTR() *QPoint
}

func (p *QPoint) QPoint_PTR() *QPoint {
	return p
}

func (p *QPoint) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPoint) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPoint(ptr QPoint_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPoint_PTR().Pointer()
	}
	return nil
}

func NewQPointFromPointer(ptr unsafe.Pointer) *QPoint {
	var n = new(QPoint)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPoint) DestroyQPoint() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQPoint() *QPoint {
	var tmpValue = NewQPointFromPointer(C.QPoint_NewQPoint())
	runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
	return tmpValue
}

func NewQPoint2(xpos int, ypos int) *QPoint {
	var tmpValue = NewQPointFromPointer(C.QPoint_NewQPoint2(C.int(int32(xpos)), C.int(int32(ypos))))
	runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
	return tmpValue
}

func QPoint_DotProduct(p1 QPoint_ITF, p2 QPoint_ITF) int {
	return int(int32(C.QPoint_QPoint_DotProduct(PointerFromQPoint(p1), PointerFromQPoint(p2))))
}

func (ptr *QPoint) DotProduct(p1 QPoint_ITF, p2 QPoint_ITF) int {
	return int(int32(C.QPoint_QPoint_DotProduct(PointerFromQPoint(p1), PointerFromQPoint(p2))))
}

func (ptr *QPoint) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QPoint_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPoint) ManhattanLength() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPoint_ManhattanLength(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPoint) Rx() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPoint_Rx(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPoint) Ry() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPoint_Ry(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPoint) SetX(x int) {
	if ptr.Pointer() != nil {
		C.QPoint_SetX(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QPoint) SetY(y int) {
	if ptr.Pointer() != nil {
		C.QPoint_SetY(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QPoint) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPoint_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPoint) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPoint_Y(ptr.Pointer())))
	}
	return 0
}

type QPointF struct {
	ptr unsafe.Pointer
}

type QPointF_ITF interface {
	QPointF_PTR() *QPointF
}

func (p *QPointF) QPointF_PTR() *QPointF {
	return p
}

func (p *QPointF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPointF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPointF(ptr QPointF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPointF_PTR().Pointer()
	}
	return nil
}

func NewQPointFFromPointer(ptr unsafe.Pointer) *QPointF {
	var n = new(QPointF)
	n.SetPointer(ptr)
	return n
}

func (ptr *QPointF) DestroyQPointF() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQPointF() *QPointF {
	var tmpValue = NewQPointFFromPointer(C.QPointF_NewQPointF())
	runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
	return tmpValue
}

func NewQPointF2(point QPoint_ITF) *QPointF {
	var tmpValue = NewQPointFFromPointer(C.QPointF_NewQPointF2(PointerFromQPoint(point)))
	runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
	return tmpValue
}

func NewQPointF3(xpos float64, ypos float64) *QPointF {
	var tmpValue = NewQPointFFromPointer(C.QPointF_NewQPointF3(C.double(xpos), C.double(ypos)))
	runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
	return tmpValue
}

func QPointF_DotProduct(p1 QPointF_ITF, p2 QPointF_ITF) float64 {
	return float64(C.QPointF_QPointF_DotProduct(PointerFromQPointF(p1), PointerFromQPointF(p2)))
}

func (ptr *QPointF) DotProduct(p1 QPointF_ITF, p2 QPointF_ITF) float64 {
	return float64(C.QPointF_QPointF_DotProduct(PointerFromQPointF(p1), PointerFromQPointF(p2)))
}

func (ptr *QPointF) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QPointF_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QPointF) ManhattanLength() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPointF_ManhattanLength(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPointF) Rx() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPointF_Rx(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPointF) Ry() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPointF_Ry(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPointF) SetX(x float64) {
	if ptr.Pointer() != nil {
		C.QPointF_SetX(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QPointF) SetY(y float64) {
	if ptr.Pointer() != nil {
		C.QPointF_SetY(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QPointF) ToPoint() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QPointF_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QPointF) X() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPointF_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QPointF) Y() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QPointF_Y(ptr.Pointer()))
	}
	return 0
}

type QPointer struct {
	ptr unsafe.Pointer
}

type QPointer_ITF interface {
	QPointer_PTR() *QPointer
}

func (p *QPointer) QPointer_PTR() *QPointer {
	return p
}

func (p *QPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQPointer(ptr QPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPointer_PTR().Pointer()
	}
	return nil
}

func NewQPointerFromPointer(ptr unsafe.Pointer) *QPointer {
	var n = new(QPointer)
	n.SetPointer(ptr)
	return n
}

//QProcess::ExitStatus
type QProcess__ExitStatus int64

const (
	QProcess__NormalExit = QProcess__ExitStatus(0)
	QProcess__CrashExit  = QProcess__ExitStatus(1)
)

//QProcess::InputChannelMode
type QProcess__InputChannelMode int64

const (
	QProcess__ManagedInputChannel   = QProcess__InputChannelMode(0)
	QProcess__ForwardedInputChannel = QProcess__InputChannelMode(1)
)

//QProcess::ProcessChannel
type QProcess__ProcessChannel int64

const (
	QProcess__StandardOutput = QProcess__ProcessChannel(0)
	QProcess__StandardError  = QProcess__ProcessChannel(1)
)

//QProcess::ProcessChannelMode
type QProcess__ProcessChannelMode int64

const (
	QProcess__SeparateChannels       = QProcess__ProcessChannelMode(0)
	QProcess__MergedChannels         = QProcess__ProcessChannelMode(1)
	QProcess__ForwardedChannels      = QProcess__ProcessChannelMode(2)
	QProcess__ForwardedOutputChannel = QProcess__ProcessChannelMode(3)
	QProcess__ForwardedErrorChannel  = QProcess__ProcessChannelMode(4)
)

//QProcess::ProcessError
type QProcess__ProcessError int64

const (
	QProcess__FailedToStart = QProcess__ProcessError(0)
	QProcess__Crashed       = QProcess__ProcessError(1)
	QProcess__Timedout      = QProcess__ProcessError(2)
	QProcess__ReadError     = QProcess__ProcessError(3)
	QProcess__WriteError    = QProcess__ProcessError(4)
	QProcess__UnknownError  = QProcess__ProcessError(5)
)

//QProcess::ProcessState
type QProcess__ProcessState int64

const (
	QProcess__NotRunning = QProcess__ProcessState(0)
	QProcess__Starting   = QProcess__ProcessState(1)
	QProcess__Running    = QProcess__ProcessState(2)
)

type QProcess struct {
	QIODevice
}

type QProcess_ITF interface {
	QIODevice_ITF
	QProcess_PTR() *QProcess
}

func (p *QProcess) QProcess_PTR() *QProcess {
	return p
}

func (p *QProcess) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QIODevice_PTR().Pointer()
	}
	return nil
}

func (p *QProcess) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QIODevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQProcess(ptr QProcess_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QProcess_PTR().Pointer()
	}
	return nil
}

func NewQProcessFromPointer(ptr unsafe.Pointer) *QProcess {
	var n = new(QProcess)
	n.SetPointer(ptr)
	return n
}

type QProcessEnvironment struct {
	ptr unsafe.Pointer
}

type QProcessEnvironment_ITF interface {
	QProcessEnvironment_PTR() *QProcessEnvironment
}

func (p *QProcessEnvironment) QProcessEnvironment_PTR() *QProcessEnvironment {
	return p
}

func (p *QProcessEnvironment) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QProcessEnvironment) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQProcessEnvironment(ptr QProcessEnvironment_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QProcessEnvironment_PTR().Pointer()
	}
	return nil
}

func NewQProcessEnvironmentFromPointer(ptr unsafe.Pointer) *QProcessEnvironment {
	var n = new(QProcessEnvironment)
	n.SetPointer(ptr)
	return n
}

type QPropertyAnimation struct {
	QVariantAnimation
}

type QPropertyAnimation_ITF interface {
	QVariantAnimation_ITF
	QPropertyAnimation_PTR() *QPropertyAnimation
}

func (p *QPropertyAnimation) QPropertyAnimation_PTR() *QPropertyAnimation {
	return p
}

func (p *QPropertyAnimation) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVariantAnimation_PTR().Pointer()
	}
	return nil
}

func (p *QPropertyAnimation) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVariantAnimation_PTR().SetPointer(ptr)
	}
}

func PointerFromQPropertyAnimation(ptr QPropertyAnimation_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QPropertyAnimation_PTR().Pointer()
	}
	return nil
}

func NewQPropertyAnimationFromPointer(ptr unsafe.Pointer) *QPropertyAnimation {
	var n = new(QPropertyAnimation)
	n.SetPointer(ptr)
	return n
}
func (ptr *QPropertyAnimation) PropertyName() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QPropertyAnimation_PropertyName(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QPropertyAnimation) SetPropertyName(propertyName QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_SetPropertyName(ptr.Pointer(), PointerFromQByteArray(propertyName))
	}
}

func (ptr *QPropertyAnimation) SetTargetObject(target QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_SetTargetObject(ptr.Pointer(), PointerFromQObject(target))
	}
}

func (ptr *QPropertyAnimation) TargetObject() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QPropertyAnimation_TargetObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func NewQPropertyAnimation(parent QObject_ITF) *QPropertyAnimation {
	var tmpValue = NewQPropertyAnimationFromPointer(C.QPropertyAnimation_NewQPropertyAnimation(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQPropertyAnimation2(target QObject_ITF, propertyName QByteArray_ITF, parent QObject_ITF) *QPropertyAnimation {
	var tmpValue = NewQPropertyAnimationFromPointer(C.QPropertyAnimation_NewQPropertyAnimation2(PointerFromQObject(target), PointerFromQByteArray(propertyName), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQPropertyAnimation_Event
func callbackQPropertyAnimation_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPropertyAnimationFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QPropertyAnimation) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::event", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::event")
	}
}

func (ptr *QPropertyAnimation) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPropertyAnimation_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPropertyAnimation) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPropertyAnimation_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPropertyAnimation_UpdateCurrentValue
func callbackQPropertyAnimation_UpdateCurrentValue(ptr unsafe.Pointer, value unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::updateCurrentValue"); signal != nil {
		signal.(func(*QVariant))(NewQVariantFromPointer(value))
	} else {
		NewQPropertyAnimationFromPointer(ptr).UpdateCurrentValueDefault(NewQVariantFromPointer(value))
	}
}

func (ptr *QPropertyAnimation) ConnectUpdateCurrentValue(f func(value *QVariant)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateCurrentValue", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectUpdateCurrentValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateCurrentValue")
	}
}

func (ptr *QPropertyAnimation) UpdateCurrentValue(value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateCurrentValue(ptr.Pointer(), PointerFromQVariant(value))
	}
}

func (ptr *QPropertyAnimation) UpdateCurrentValueDefault(value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateCurrentValueDefault(ptr.Pointer(), PointerFromQVariant(value))
	}
}

//export callbackQPropertyAnimation_UpdateState
func callbackQPropertyAnimation_UpdateState(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::updateState"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	} else {
		NewQPropertyAnimationFromPointer(ptr).UpdateStateDefault(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}
}

func (ptr *QPropertyAnimation) ConnectUpdateState(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateState", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateState")
	}
}

func (ptr *QPropertyAnimation) UpdateState(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateState(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QPropertyAnimation) UpdateStateDefault(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateStateDefault(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QPropertyAnimation) DestroyQPropertyAnimation() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_DestroyQPropertyAnimation(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPropertyAnimation_Duration
func callbackQPropertyAnimation_Duration(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::duration"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQPropertyAnimationFromPointer(ptr).DurationDefault()))
}

func (ptr *QPropertyAnimation) ConnectDuration(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::duration", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectDuration() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::duration")
	}
}

func (ptr *QPropertyAnimation) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPropertyAnimation_Duration(ptr.Pointer())))
	}
	return 0
}

func (ptr *QPropertyAnimation) DurationDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QPropertyAnimation_DurationDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQPropertyAnimation_Interpolated
func callbackQPropertyAnimation_Interpolated(ptr unsafe.Pointer, from unsafe.Pointer, to unsafe.Pointer, progress C.double) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::interpolated"); signal != nil {
		return PointerFromQVariant(signal.(func(*QVariant, *QVariant, float64) *QVariant)(NewQVariantFromPointer(from), NewQVariantFromPointer(to), float64(progress)))
	}

	return PointerFromQVariant(NewQPropertyAnimationFromPointer(ptr).InterpolatedDefault(NewQVariantFromPointer(from), NewQVariantFromPointer(to), float64(progress)))
}

func (ptr *QPropertyAnimation) ConnectInterpolated(f func(from *QVariant, to *QVariant, progress float64) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::interpolated", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectInterpolated() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::interpolated")
	}
}

func (ptr *QPropertyAnimation) Interpolated(from QVariant_ITF, to QVariant_ITF, progress float64) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QPropertyAnimation_Interpolated(ptr.Pointer(), PointerFromQVariant(from), PointerFromQVariant(to), C.double(progress)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QPropertyAnimation) InterpolatedDefault(from QVariant_ITF, to QVariant_ITF, progress float64) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QPropertyAnimation_InterpolatedDefault(ptr.Pointer(), PointerFromQVariant(from), PointerFromQVariant(to), C.double(progress)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQPropertyAnimation_UpdateCurrentTime
func callbackQPropertyAnimation_UpdateCurrentTime(ptr unsafe.Pointer, vin C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::updateCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(vin)))
	} else {
		NewQPropertyAnimationFromPointer(ptr).UpdateCurrentTimeDefault(int(int32(vin)))
	}
}

func (ptr *QPropertyAnimation) ConnectUpdateCurrentTime(f func(vin int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateCurrentTime", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectUpdateCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateCurrentTime")
	}
}

func (ptr *QPropertyAnimation) UpdateCurrentTime(vin int) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateCurrentTime(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QPropertyAnimation) UpdateCurrentTimeDefault(vin int) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateCurrentTimeDefault(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQPropertyAnimation_SetCurrentTime
func callbackQPropertyAnimation_SetCurrentTime(ptr unsafe.Pointer, msecs C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msecs)))
	} else {
		NewQPropertyAnimationFromPointer(ptr).SetCurrentTimeDefault(int(int32(msecs)))
	}
}

func (ptr *QPropertyAnimation) ConnectSetCurrentTime(f func(msecs int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::setCurrentTime", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectSetCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::setCurrentTime")
	}
}

func (ptr *QPropertyAnimation) SetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_SetCurrentTime(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QPropertyAnimation) SetCurrentTimeDefault(msecs int) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_SetCurrentTimeDefault(ptr.Pointer(), C.int(int32(msecs)))
	}
}

//export callbackQPropertyAnimation_Pause
func callbackQPropertyAnimation_Pause(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::pause"); signal != nil {
		signal.(func())()
	} else {
		NewQPropertyAnimationFromPointer(ptr).PauseDefault()
	}
}

func (ptr *QPropertyAnimation) ConnectPause(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::pause", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectPause() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::pause")
	}
}

func (ptr *QPropertyAnimation) Pause() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_Pause(ptr.Pointer())
	}
}

func (ptr *QPropertyAnimation) PauseDefault() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_PauseDefault(ptr.Pointer())
	}
}

//export callbackQPropertyAnimation_Resume
func callbackQPropertyAnimation_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::resume"); signal != nil {
		signal.(func())()
	} else {
		NewQPropertyAnimationFromPointer(ptr).ResumeDefault()
	}
}

func (ptr *QPropertyAnimation) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::resume", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::resume")
	}
}

func (ptr *QPropertyAnimation) Resume() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_Resume(ptr.Pointer())
	}
}

func (ptr *QPropertyAnimation) ResumeDefault() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_ResumeDefault(ptr.Pointer())
	}
}

//export callbackQPropertyAnimation_SetPaused
func callbackQPropertyAnimation_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	} else {
		NewQPropertyAnimationFromPointer(ptr).SetPausedDefault(int8(paused) != 0)
	}
}

func (ptr *QPropertyAnimation) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::setPaused", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectSetPaused() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::setPaused")
	}
}

func (ptr *QPropertyAnimation) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QPropertyAnimation) SetPausedDefault(paused bool) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_SetPausedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

//export callbackQPropertyAnimation_Start
func callbackQPropertyAnimation_Start(ptr unsafe.Pointer, policy C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::start"); signal != nil {
		signal.(func(QAbstractAnimation__DeletionPolicy))(QAbstractAnimation__DeletionPolicy(policy))
	} else {
		NewQPropertyAnimationFromPointer(ptr).StartDefault(QAbstractAnimation__DeletionPolicy(policy))
	}
}

func (ptr *QPropertyAnimation) ConnectStart(f func(policy QAbstractAnimation__DeletionPolicy)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::start", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::start")
	}
}

func (ptr *QPropertyAnimation) Start(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_Start(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QPropertyAnimation) StartDefault(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_StartDefault(ptr.Pointer(), C.longlong(policy))
	}
}

//export callbackQPropertyAnimation_Stop
func callbackQPropertyAnimation_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQPropertyAnimationFromPointer(ptr).StopDefault()
	}
}

func (ptr *QPropertyAnimation) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::stop", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::stop")
	}
}

func (ptr *QPropertyAnimation) Stop() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_Stop(ptr.Pointer())
	}
}

func (ptr *QPropertyAnimation) StopDefault() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_StopDefault(ptr.Pointer())
	}
}

//export callbackQPropertyAnimation_UpdateDirection
func callbackQPropertyAnimation_UpdateDirection(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::updateDirection"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(direction))
	} else {
		NewQPropertyAnimationFromPointer(ptr).UpdateDirectionDefault(QAbstractAnimation__Direction(direction))
	}
}

func (ptr *QPropertyAnimation) ConnectUpdateDirection(f func(direction QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateDirection", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectUpdateDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::updateDirection")
	}
}

func (ptr *QPropertyAnimation) UpdateDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QPropertyAnimation) UpdateDirectionDefault(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_UpdateDirectionDefault(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQPropertyAnimation_TimerEvent
func callbackQPropertyAnimation_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQPropertyAnimationFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QPropertyAnimation) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::timerEvent", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::timerEvent")
	}
}

func (ptr *QPropertyAnimation) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QPropertyAnimation) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQPropertyAnimation_ChildEvent
func callbackQPropertyAnimation_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQPropertyAnimationFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QPropertyAnimation) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::childEvent", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::childEvent")
	}
}

func (ptr *QPropertyAnimation) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QPropertyAnimation) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQPropertyAnimation_ConnectNotify
func callbackQPropertyAnimation_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQPropertyAnimationFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPropertyAnimation) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::connectNotify", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::connectNotify")
	}
}

func (ptr *QPropertyAnimation) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPropertyAnimation) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQPropertyAnimation_CustomEvent
func callbackQPropertyAnimation_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQPropertyAnimationFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QPropertyAnimation) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::customEvent", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::customEvent")
	}
}

func (ptr *QPropertyAnimation) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QPropertyAnimation) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQPropertyAnimation_DeleteLater
func callbackQPropertyAnimation_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQPropertyAnimationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QPropertyAnimation) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::deleteLater", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::deleteLater")
	}
}

func (ptr *QPropertyAnimation) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QPropertyAnimation) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQPropertyAnimation_DisconnectNotify
func callbackQPropertyAnimation_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQPropertyAnimationFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QPropertyAnimation) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::disconnectNotify", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::disconnectNotify")
	}
}

func (ptr *QPropertyAnimation) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QPropertyAnimation) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QPropertyAnimation_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQPropertyAnimation_EventFilter
func callbackQPropertyAnimation_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQPropertyAnimationFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QPropertyAnimation) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::eventFilter", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::eventFilter")
	}
}

func (ptr *QPropertyAnimation) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPropertyAnimation_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QPropertyAnimation) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QPropertyAnimation_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQPropertyAnimation_MetaObject
func callbackQPropertyAnimation_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QPropertyAnimation::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQPropertyAnimationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QPropertyAnimation) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::metaObject", f)
	}
}

func (ptr *QPropertyAnimation) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QPropertyAnimation::metaObject")
	}
}

func (ptr *QPropertyAnimation) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QPropertyAnimation_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QPropertyAnimation) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QPropertyAnimation_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QQueue struct {
	QList
}

type QQueue_ITF interface {
	QList_ITF
	QQueue_PTR() *QQueue
}

func (p *QQueue) QQueue_PTR() *QQueue {
	return p
}

func (p *QQueue) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QList_PTR().Pointer()
	}
	return nil
}

func (p *QQueue) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QList_PTR().SetPointer(ptr)
	}
}

func PointerFromQQueue(ptr QQueue_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QQueue_PTR().Pointer()
	}
	return nil
}

func NewQQueueFromPointer(ptr unsafe.Pointer) *QQueue {
	var n = new(QQueue)
	n.SetPointer(ptr)
	return n
}

func (ptr *QQueue) DestroyQQueue() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QReadLocker struct {
	ptr unsafe.Pointer
}

type QReadLocker_ITF interface {
	QReadLocker_PTR() *QReadLocker
}

func (p *QReadLocker) QReadLocker_PTR() *QReadLocker {
	return p
}

func (p *QReadLocker) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QReadLocker) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQReadLocker(ptr QReadLocker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QReadLocker_PTR().Pointer()
	}
	return nil
}

func NewQReadLockerFromPointer(ptr unsafe.Pointer) *QReadLocker {
	var n = new(QReadLocker)
	n.SetPointer(ptr)
	return n
}
func NewQReadLocker(lock QReadWriteLock_ITF) *QReadLocker {
	var tmpValue = NewQReadLockerFromPointer(C.QReadLocker_NewQReadLocker(PointerFromQReadWriteLock(lock)))
	runtime.SetFinalizer(tmpValue, (*QReadLocker).DestroyQReadLocker)
	return tmpValue
}

func (ptr *QReadLocker) ReadWriteLock() *QReadWriteLock {
	if ptr.Pointer() != nil {
		return NewQReadWriteLockFromPointer(C.QReadLocker_ReadWriteLock(ptr.Pointer()))
	}
	return nil
}

func (ptr *QReadLocker) Relock() {
	if ptr.Pointer() != nil {
		C.QReadLocker_Relock(ptr.Pointer())
	}
}

func (ptr *QReadLocker) Unlock() {
	if ptr.Pointer() != nil {
		C.QReadLocker_Unlock(ptr.Pointer())
	}
}

func (ptr *QReadLocker) DestroyQReadLocker() {
	if ptr.Pointer() != nil {
		C.QReadLocker_DestroyQReadLocker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QReadWriteLock::RecursionMode
type QReadWriteLock__RecursionMode int64

const (
	QReadWriteLock__NonRecursive = QReadWriteLock__RecursionMode(0)
	QReadWriteLock__Recursive    = QReadWriteLock__RecursionMode(1)
)

type QReadWriteLock struct {
	ptr unsafe.Pointer
}

type QReadWriteLock_ITF interface {
	QReadWriteLock_PTR() *QReadWriteLock
}

func (p *QReadWriteLock) QReadWriteLock_PTR() *QReadWriteLock {
	return p
}

func (p *QReadWriteLock) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QReadWriteLock) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQReadWriteLock(ptr QReadWriteLock_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QReadWriteLock_PTR().Pointer()
	}
	return nil
}

func NewQReadWriteLockFromPointer(ptr unsafe.Pointer) *QReadWriteLock {
	var n = new(QReadWriteLock)
	n.SetPointer(ptr)
	return n
}
func NewQReadWriteLock(recursionMode QReadWriteLock__RecursionMode) *QReadWriteLock {
	var tmpValue = NewQReadWriteLockFromPointer(C.QReadWriteLock_NewQReadWriteLock(C.longlong(recursionMode)))
	runtime.SetFinalizer(tmpValue, (*QReadWriteLock).DestroyQReadWriteLock)
	return tmpValue
}

func (ptr *QReadWriteLock) LockForRead() {
	if ptr.Pointer() != nil {
		C.QReadWriteLock_LockForRead(ptr.Pointer())
	}
}

func (ptr *QReadWriteLock) LockForWrite() {
	if ptr.Pointer() != nil {
		C.QReadWriteLock_LockForWrite(ptr.Pointer())
	}
}

func (ptr *QReadWriteLock) TryLockForRead() bool {
	if ptr.Pointer() != nil {
		return C.QReadWriteLock_TryLockForRead(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QReadWriteLock) TryLockForRead2(timeout int) bool {
	if ptr.Pointer() != nil {
		return C.QReadWriteLock_TryLockForRead2(ptr.Pointer(), C.int(int32(timeout))) != 0
	}
	return false
}

func (ptr *QReadWriteLock) TryLockForWrite() bool {
	if ptr.Pointer() != nil {
		return C.QReadWriteLock_TryLockForWrite(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QReadWriteLock) TryLockForWrite2(timeout int) bool {
	if ptr.Pointer() != nil {
		return C.QReadWriteLock_TryLockForWrite2(ptr.Pointer(), C.int(int32(timeout))) != 0
	}
	return false
}

func (ptr *QReadWriteLock) Unlock() {
	if ptr.Pointer() != nil {
		C.QReadWriteLock_Unlock(ptr.Pointer())
	}
}

func (ptr *QReadWriteLock) DestroyQReadWriteLock() {
	if ptr.Pointer() != nil {
		C.QReadWriteLock_DestroyQReadWriteLock(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QRect struct {
	ptr unsafe.Pointer
}

type QRect_ITF interface {
	QRect_PTR() *QRect
}

func (p *QRect) QRect_PTR() *QRect {
	return p
}

func (p *QRect) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRect) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRect(ptr QRect_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRect_PTR().Pointer()
	}
	return nil
}

func NewQRectFromPointer(ptr unsafe.Pointer) *QRect {
	var n = new(QRect)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRect) DestroyQRect() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QRect) Contains(point QPoint_ITF, proper bool) bool {
	if ptr.Pointer() != nil {
		return C.QRect_Contains(ptr.Pointer(), PointerFromQPoint(point), C.char(int8(qt.GoBoolToInt(proper)))) != 0
	}
	return false
}

func (ptr *QRect) Contains2(rectangle QRect_ITF, proper bool) bool {
	if ptr.Pointer() != nil {
		return C.QRect_Contains2(ptr.Pointer(), PointerFromQRect(rectangle), C.char(int8(qt.GoBoolToInt(proper)))) != 0
	}
	return false
}

func (ptr *QRect) Intersects(rectangle QRect_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRect_Intersects(ptr.Pointer(), PointerFromQRect(rectangle)) != 0
	}
	return false
}

func NewQRect() *QRect {
	var tmpValue = NewQRectFromPointer(C.QRect_NewQRect())
	runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
	return tmpValue
}

func NewQRect2(topLeft QPoint_ITF, bottomRight QPoint_ITF) *QRect {
	var tmpValue = NewQRectFromPointer(C.QRect_NewQRect2(PointerFromQPoint(topLeft), PointerFromQPoint(bottomRight)))
	runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
	return tmpValue
}

func NewQRect3(topLeft QPoint_ITF, size QSize_ITF) *QRect {
	var tmpValue = NewQRectFromPointer(C.QRect_NewQRect3(PointerFromQPoint(topLeft), PointerFromQSize(size)))
	runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
	return tmpValue
}

func NewQRect4(x int, y int, width int, height int) *QRect {
	var tmpValue = NewQRectFromPointer(C.QRect_NewQRect4(C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
	return tmpValue
}

func (ptr *QRect) Adjust(dx1 int, dy1 int, dx2 int, dy2 int) {
	if ptr.Pointer() != nil {
		C.QRect_Adjust(ptr.Pointer(), C.int(int32(dx1)), C.int(int32(dy1)), C.int(int32(dx2)), C.int(int32(dy2)))
	}
}

func (ptr *QRect) Adjusted(dx1 int, dy1 int, dx2 int, dy2 int) *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_Adjusted(ptr.Pointer(), C.int(int32(dx1)), C.int(int32(dy1)), C.int(int32(dx2)), C.int(int32(dy2))))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Bottom() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_Bottom(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRect) BottomLeft() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QRect_BottomLeft(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) BottomRight() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QRect_BottomRight(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Center() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QRect_Center(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Contains3(x int, y int) bool {
	if ptr.Pointer() != nil {
		return C.QRect_Contains3(ptr.Pointer(), C.int(int32(x)), C.int(int32(y))) != 0
	}
	return false
}

func (ptr *QRect) Contains4(x int, y int, proper bool) bool {
	if ptr.Pointer() != nil {
		return C.QRect_Contains4(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.char(int8(qt.GoBoolToInt(proper)))) != 0
	}
	return false
}

func (ptr *QRect) GetCoords(x1 int, y1 int, x2 int, y2 int) {
	if ptr.Pointer() != nil {
		C.QRect_GetCoords(ptr.Pointer(), C.int(int32(x1)), C.int(int32(y1)), C.int(int32(x2)), C.int(int32(y2)))
	}
}

func (ptr *QRect) GetRect(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QRect_GetRect(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QRect) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRect) Intersected(rectangle QRect_ITF) *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_Intersected(ptr.Pointer(), PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QRect_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRect) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QRect_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRect) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QRect_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRect) Left() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_Left(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRect) MarginsAdded(margins QMargins_ITF) *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_MarginsAdded(ptr.Pointer(), PointerFromQMargins(margins)))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) MarginsRemoved(margins QMargins_ITF) *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_MarginsRemoved(ptr.Pointer(), PointerFromQMargins(margins)))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) MoveBottom(y int) {
	if ptr.Pointer() != nil {
		C.QRect_MoveBottom(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QRect) MoveBottomLeft(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_MoveBottomLeft(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) MoveBottomRight(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_MoveBottomRight(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) MoveCenter(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_MoveCenter(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) MoveLeft(x int) {
	if ptr.Pointer() != nil {
		C.QRect_MoveLeft(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QRect) MoveRight(x int) {
	if ptr.Pointer() != nil {
		C.QRect_MoveRight(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QRect) MoveTo2(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_MoveTo2(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) MoveTo(x int, y int) {
	if ptr.Pointer() != nil {
		C.QRect_MoveTo(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)))
	}
}

func (ptr *QRect) MoveTop(y int) {
	if ptr.Pointer() != nil {
		C.QRect_MoveTop(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QRect) MoveTopLeft(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_MoveTopLeft(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) MoveTopRight(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_MoveTopRight(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) Normalized() *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Right() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_Right(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRect) SetBottom(y int) {
	if ptr.Pointer() != nil {
		C.QRect_SetBottom(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QRect) SetBottomLeft(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_SetBottomLeft(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) SetBottomRight(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_SetBottomRight(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) SetCoords(x1 int, y1 int, x2 int, y2 int) {
	if ptr.Pointer() != nil {
		C.QRect_SetCoords(ptr.Pointer(), C.int(int32(x1)), C.int(int32(y1)), C.int(int32(x2)), C.int(int32(y2)))
	}
}

func (ptr *QRect) SetHeight(height int) {
	if ptr.Pointer() != nil {
		C.QRect_SetHeight(ptr.Pointer(), C.int(int32(height)))
	}
}

func (ptr *QRect) SetLeft(x int) {
	if ptr.Pointer() != nil {
		C.QRect_SetLeft(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QRect) SetRect(x int, y int, width int, height int) {
	if ptr.Pointer() != nil {
		C.QRect_SetRect(ptr.Pointer(), C.int(int32(x)), C.int(int32(y)), C.int(int32(width)), C.int(int32(height)))
	}
}

func (ptr *QRect) SetRight(x int) {
	if ptr.Pointer() != nil {
		C.QRect_SetRight(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QRect) SetSize(size QSize_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_SetSize(ptr.Pointer(), PointerFromQSize(size))
	}
}

func (ptr *QRect) SetTop(y int) {
	if ptr.Pointer() != nil {
		C.QRect_SetTop(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QRect) SetTopLeft(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_SetTopLeft(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) SetTopRight(position QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_SetTopRight(ptr.Pointer(), PointerFromQPoint(position))
	}
}

func (ptr *QRect) SetWidth(width int) {
	if ptr.Pointer() != nil {
		C.QRect_SetWidth(ptr.Pointer(), C.int(int32(width)))
	}
}

func (ptr *QRect) SetX(x int) {
	if ptr.Pointer() != nil {
		C.QRect_SetX(ptr.Pointer(), C.int(int32(x)))
	}
}

func (ptr *QRect) SetY(y int) {
	if ptr.Pointer() != nil {
		C.QRect_SetY(ptr.Pointer(), C.int(int32(y)))
	}
}

func (ptr *QRect) Size() *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QRect_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Top() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_Top(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRect) TopLeft() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QRect_TopLeft(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) TopRight() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QRect_TopRight(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Translate2(offset QPoint_ITF) {
	if ptr.Pointer() != nil {
		C.QRect_Translate2(ptr.Pointer(), PointerFromQPoint(offset))
	}
}

func (ptr *QRect) Translate(dx int, dy int) {
	if ptr.Pointer() != nil {
		C.QRect_Translate(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy)))
	}
}

func (ptr *QRect) Translated2(offset QPoint_ITF) *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_Translated2(ptr.Pointer(), PointerFromQPoint(offset)))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Translated(dx int, dy int) *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_Translated(ptr.Pointer(), C.int(int32(dx)), C.int(int32(dy))))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Transposed() *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) United(rectangle QRect_ITF) *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRect_United(ptr.Pointer(), PointerFromQRect(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRect) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_Width(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRect) X() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_X(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRect) Y() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRect_Y(ptr.Pointer())))
	}
	return 0
}

type QRectF struct {
	ptr unsafe.Pointer
}

type QRectF_ITF interface {
	QRectF_PTR() *QRectF
}

func (p *QRectF) QRectF_PTR() *QRectF {
	return p
}

func (p *QRectF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRectF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRectF(ptr QRectF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRectF_PTR().Pointer()
	}
	return nil
}

func NewQRectFFromPointer(ptr unsafe.Pointer) *QRectF {
	var n = new(QRectF)
	n.SetPointer(ptr)
	return n
}

func (ptr *QRectF) DestroyQRectF() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QRectF) Contains(point QPointF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRectF_Contains(ptr.Pointer(), PointerFromQPointF(point)) != 0
	}
	return false
}

func (ptr *QRectF) Contains2(rectangle QRectF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRectF_Contains2(ptr.Pointer(), PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QRectF) Intersects(rectangle QRectF_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QRectF_Intersects(ptr.Pointer(), PointerFromQRectF(rectangle)) != 0
	}
	return false
}

func (ptr *QRectF) ToAlignedRect() *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRectF_ToAlignedRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func NewQRectF() *QRectF {
	var tmpValue = NewQRectFFromPointer(C.QRectF_NewQRectF())
	runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
	return tmpValue
}

func NewQRectF3(topLeft QPointF_ITF, bottomRight QPointF_ITF) *QRectF {
	var tmpValue = NewQRectFFromPointer(C.QRectF_NewQRectF3(PointerFromQPointF(topLeft), PointerFromQPointF(bottomRight)))
	runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
	return tmpValue
}

func NewQRectF2(topLeft QPointF_ITF, size QSizeF_ITF) *QRectF {
	var tmpValue = NewQRectFFromPointer(C.QRectF_NewQRectF2(PointerFromQPointF(topLeft), PointerFromQSizeF(size)))
	runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
	return tmpValue
}

func NewQRectF5(rectangle QRect_ITF) *QRectF {
	var tmpValue = NewQRectFFromPointer(C.QRectF_NewQRectF5(PointerFromQRect(rectangle)))
	runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
	return tmpValue
}

func NewQRectF4(x float64, y float64, width float64, height float64) *QRectF {
	var tmpValue = NewQRectFFromPointer(C.QRectF_NewQRectF4(C.double(x), C.double(y), C.double(width), C.double(height)))
	runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
	return tmpValue
}

func (ptr *QRectF) Adjust(dx1 float64, dy1 float64, dx2 float64, dy2 float64) {
	if ptr.Pointer() != nil {
		C.QRectF_Adjust(ptr.Pointer(), C.double(dx1), C.double(dy1), C.double(dx2), C.double(dy2))
	}
}

func (ptr *QRectF) Adjusted(dx1 float64, dy1 float64, dx2 float64, dy2 float64) *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_Adjusted(ptr.Pointer(), C.double(dx1), C.double(dy1), C.double(dx2), C.double(dy2)))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Bottom() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_Bottom(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRectF) BottomLeft() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QRectF_BottomLeft(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) BottomRight() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QRectF_BottomRight(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Center() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QRectF_Center(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Contains3(x float64, y float64) bool {
	if ptr.Pointer() != nil {
		return C.QRectF_Contains3(ptr.Pointer(), C.double(x), C.double(y)) != 0
	}
	return false
}

func (ptr *QRectF) GetCoords(x1 float64, y1 float64, x2 float64, y2 float64) {
	if ptr.Pointer() != nil {
		C.QRectF_GetCoords(ptr.Pointer(), C.double(x1), C.double(y1), C.double(x2), C.double(y2))
	}
}

func (ptr *QRectF) GetRect(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QRectF_GetRect(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QRectF) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRectF) Intersected(rectangle QRectF_ITF) *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_Intersected(ptr.Pointer(), PointerFromQRectF(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QRectF_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRectF) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QRectF_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRectF) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QRectF_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRectF) Left() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_Left(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRectF) MarginsAdded(margins QMarginsF_ITF) *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_MarginsAdded(ptr.Pointer(), PointerFromQMarginsF(margins)))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) MarginsRemoved(margins QMarginsF_ITF) *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_MarginsRemoved(ptr.Pointer(), PointerFromQMarginsF(margins)))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) MoveBottom(y float64) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveBottom(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QRectF) MoveBottomLeft(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveBottomLeft(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) MoveBottomRight(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveBottomRight(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) MoveCenter(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveCenter(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) MoveLeft(x float64) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveLeft(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QRectF) MoveRight(x float64) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveRight(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QRectF) MoveTo2(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveTo2(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) MoveTo(x float64, y float64) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveTo(ptr.Pointer(), C.double(x), C.double(y))
	}
}

func (ptr *QRectF) MoveTop(y float64) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveTop(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QRectF) MoveTopLeft(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveTopLeft(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) MoveTopRight(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_MoveTopRight(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) Normalized() *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Right() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_Right(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRectF) SetBottom(y float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetBottom(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QRectF) SetBottomLeft(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_SetBottomLeft(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) SetBottomRight(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_SetBottomRight(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) SetCoords(x1 float64, y1 float64, x2 float64, y2 float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetCoords(ptr.Pointer(), C.double(x1), C.double(y1), C.double(x2), C.double(y2))
	}
}

func (ptr *QRectF) SetHeight(height float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QRectF) SetLeft(x float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetLeft(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QRectF) SetRect(x float64, y float64, width float64, height float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetRect(ptr.Pointer(), C.double(x), C.double(y), C.double(width), C.double(height))
	}
}

func (ptr *QRectF) SetRight(x float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetRight(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QRectF) SetSize(size QSizeF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_SetSize(ptr.Pointer(), PointerFromQSizeF(size))
	}
}

func (ptr *QRectF) SetTop(y float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetTop(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QRectF) SetTopLeft(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_SetTopLeft(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) SetTopRight(position QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_SetTopRight(ptr.Pointer(), PointerFromQPointF(position))
	}
}

func (ptr *QRectF) SetWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QRectF) SetX(x float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetX(ptr.Pointer(), C.double(x))
	}
}

func (ptr *QRectF) SetY(y float64) {
	if ptr.Pointer() != nil {
		C.QRectF_SetY(ptr.Pointer(), C.double(y))
	}
}

func (ptr *QRectF) Size() *QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFFromPointer(C.QRectF_Size(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) ToRect() *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QRectF_ToRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Top() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_Top(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRectF) TopLeft() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QRectF_TopLeft(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) TopRight() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QRectF_TopRight(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Translate2(offset QPointF_ITF) {
	if ptr.Pointer() != nil {
		C.QRectF_Translate2(ptr.Pointer(), PointerFromQPointF(offset))
	}
}

func (ptr *QRectF) Translate(dx float64, dy float64) {
	if ptr.Pointer() != nil {
		C.QRectF_Translate(ptr.Pointer(), C.double(dx), C.double(dy))
	}
}

func (ptr *QRectF) Translated2(offset QPointF_ITF) *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_Translated2(ptr.Pointer(), PointerFromQPointF(offset)))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Translated(dx float64, dy float64) *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_Translated(ptr.Pointer(), C.double(dx), C.double(dy)))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Transposed() *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) United(rectangle QRectF_ITF) *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QRectF_United(ptr.Pointer(), PointerFromQRectF(rectangle)))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QRectF) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_Width(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRectF) X() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_X(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRectF) Y() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QRectF_Y(ptr.Pointer()))
	}
	return 0
}

//QRegExp::CaretMode
type QRegExp__CaretMode int64

const (
	QRegExp__CaretAtZero    = QRegExp__CaretMode(0)
	QRegExp__CaretAtOffset  = QRegExp__CaretMode(1)
	QRegExp__CaretWontMatch = QRegExp__CaretMode(2)
)

//QRegExp::PatternSyntax
type QRegExp__PatternSyntax int64

const (
	QRegExp__RegExp         = QRegExp__PatternSyntax(0)
	QRegExp__Wildcard       = QRegExp__PatternSyntax(1)
	QRegExp__FixedString    = QRegExp__PatternSyntax(2)
	QRegExp__RegExp2        = QRegExp__PatternSyntax(3)
	QRegExp__WildcardUnix   = QRegExp__PatternSyntax(4)
	QRegExp__W3CXmlSchema11 = QRegExp__PatternSyntax(5)
)

type QRegExp struct {
	ptr unsafe.Pointer
}

type QRegExp_ITF interface {
	QRegExp_PTR() *QRegExp
}

func (p *QRegExp) QRegExp_PTR() *QRegExp {
	return p
}

func (p *QRegExp) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRegExp) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRegExp(ptr QRegExp_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegExp_PTR().Pointer()
	}
	return nil
}

func NewQRegExpFromPointer(ptr unsafe.Pointer) *QRegExp {
	var n = new(QRegExp)
	n.SetPointer(ptr)
	return n
}
func NewQRegExp() *QRegExp {
	var tmpValue = NewQRegExpFromPointer(C.QRegExp_NewQRegExp())
	runtime.SetFinalizer(tmpValue, (*QRegExp).DestroyQRegExp)
	return tmpValue
}

func NewQRegExp3(rx QRegExp_ITF) *QRegExp {
	var tmpValue = NewQRegExpFromPointer(C.QRegExp_NewQRegExp3(PointerFromQRegExp(rx)))
	runtime.SetFinalizer(tmpValue, (*QRegExp).DestroyQRegExp)
	return tmpValue
}

func NewQRegExp2(pattern string, cs Qt__CaseSensitivity, syntax QRegExp__PatternSyntax) *QRegExp {
	var patternC = C.CString(pattern)
	defer C.free(unsafe.Pointer(patternC))
	var tmpValue = NewQRegExpFromPointer(C.QRegExp_NewQRegExp2(patternC, C.longlong(cs), C.longlong(syntax)))
	runtime.SetFinalizer(tmpValue, (*QRegExp).DestroyQRegExp)
	return tmpValue
}

func (ptr *QRegExp) Cap(nth int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRegExp_Cap(ptr.Pointer(), C.int(int32(nth))))
	}
	return ""
}

func (ptr *QRegExp) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRegExp_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRegExp) CaptureCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegExp_CaptureCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRegExp) CapturedTexts() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QRegExp_CapturedTexts(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QRegExp) CaseSensitivity() Qt__CaseSensitivity {
	if ptr.Pointer() != nil {
		return Qt__CaseSensitivity(C.QRegExp_CaseSensitivity(ptr.Pointer()))
	}
	return 0
}

func QRegExp_Escape(str string) string {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	return cGoUnpackString(C.QRegExp_QRegExp_Escape(strC))
}

func (ptr *QRegExp) Escape(str string) string {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	return cGoUnpackString(C.QRegExp_QRegExp_Escape(strC))
}

func (ptr *QRegExp) ExactMatch(str string) bool {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return C.QRegExp_ExactMatch(ptr.Pointer(), strC) != 0
	}
	return false
}

func (ptr *QRegExp) IndexIn(str string, offset int, caretMode QRegExp__CaretMode) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QRegExp_IndexIn(ptr.Pointer(), strC, C.int(int32(offset)), C.longlong(caretMode))))
	}
	return 0
}

func (ptr *QRegExp) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QRegExp_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegExp) IsMinimal() bool {
	if ptr.Pointer() != nil {
		return C.QRegExp_IsMinimal(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegExp) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QRegExp_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegExp) LastIndexIn(str string, offset int, caretMode QRegExp__CaretMode) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QRegExp_LastIndexIn(ptr.Pointer(), strC, C.int(int32(offset)), C.longlong(caretMode))))
	}
	return 0
}

func (ptr *QRegExp) MatchedLength() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegExp_MatchedLength(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRegExp) Pattern() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRegExp_Pattern(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRegExp) PatternSyntax() QRegExp__PatternSyntax {
	if ptr.Pointer() != nil {
		return QRegExp__PatternSyntax(C.QRegExp_PatternSyntax(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRegExp) Pos(nth int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegExp_Pos(ptr.Pointer(), C.int(int32(nth)))))
	}
	return 0
}

func (ptr *QRegExp) SetCaseSensitivity(cs Qt__CaseSensitivity) {
	if ptr.Pointer() != nil {
		C.QRegExp_SetCaseSensitivity(ptr.Pointer(), C.longlong(cs))
	}
}

func (ptr *QRegExp) SetMinimal(minimal bool) {
	if ptr.Pointer() != nil {
		C.QRegExp_SetMinimal(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(minimal))))
	}
}

func (ptr *QRegExp) SetPattern(pattern string) {
	if ptr.Pointer() != nil {
		var patternC = C.CString(pattern)
		defer C.free(unsafe.Pointer(patternC))
		C.QRegExp_SetPattern(ptr.Pointer(), patternC)
	}
}

func (ptr *QRegExp) SetPatternSyntax(syntax QRegExp__PatternSyntax) {
	if ptr.Pointer() != nil {
		C.QRegExp_SetPatternSyntax(ptr.Pointer(), C.longlong(syntax))
	}
}

func (ptr *QRegExp) Swap(other QRegExp_ITF) {
	if ptr.Pointer() != nil {
		C.QRegExp_Swap(ptr.Pointer(), PointerFromQRegExp(other))
	}
}

func (ptr *QRegExp) DestroyQRegExp() {
	if ptr.Pointer() != nil {
		C.QRegExp_DestroyQRegExp(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QRegularExpression::MatchOption
type QRegularExpression__MatchOption int64

const (
	QRegularExpression__NoMatchOption                     = QRegularExpression__MatchOption(0x0000)
	QRegularExpression__AnchoredMatchOption               = QRegularExpression__MatchOption(0x0001)
	QRegularExpression__DontCheckSubjectStringMatchOption = QRegularExpression__MatchOption(0x0002)
)

//QRegularExpression::MatchType
type QRegularExpression__MatchType int64

const (
	QRegularExpression__NormalMatch                = QRegularExpression__MatchType(0)
	QRegularExpression__PartialPreferCompleteMatch = QRegularExpression__MatchType(1)
	QRegularExpression__PartialPreferFirstMatch    = QRegularExpression__MatchType(2)
	QRegularExpression__NoMatch                    = QRegularExpression__MatchType(3)
)

//QRegularExpression::PatternOption
type QRegularExpression__PatternOption int64

const (
	QRegularExpression__NoPatternOption                 = QRegularExpression__PatternOption(0x0000)
	QRegularExpression__CaseInsensitiveOption           = QRegularExpression__PatternOption(0x0001)
	QRegularExpression__DotMatchesEverythingOption      = QRegularExpression__PatternOption(0x0002)
	QRegularExpression__MultilineOption                 = QRegularExpression__PatternOption(0x0004)
	QRegularExpression__ExtendedPatternSyntaxOption     = QRegularExpression__PatternOption(0x0008)
	QRegularExpression__InvertedGreedinessOption        = QRegularExpression__PatternOption(0x0010)
	QRegularExpression__DontCaptureOption               = QRegularExpression__PatternOption(0x0020)
	QRegularExpression__UseUnicodePropertiesOption      = QRegularExpression__PatternOption(0x0040)
	QRegularExpression__OptimizeOnFirstUsageOption      = QRegularExpression__PatternOption(0x0080)
	QRegularExpression__DontAutomaticallyOptimizeOption = QRegularExpression__PatternOption(0x0100)
)

type QRegularExpression struct {
	ptr unsafe.Pointer
}

type QRegularExpression_ITF interface {
	QRegularExpression_PTR() *QRegularExpression
}

func (p *QRegularExpression) QRegularExpression_PTR() *QRegularExpression {
	return p
}

func (p *QRegularExpression) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRegularExpression) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRegularExpression(ptr QRegularExpression_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegularExpression_PTR().Pointer()
	}
	return nil
}

func NewQRegularExpressionFromPointer(ptr unsafe.Pointer) *QRegularExpression {
	var n = new(QRegularExpression)
	n.SetPointer(ptr)
	return n
}
func NewQRegularExpression() *QRegularExpression {
	var tmpValue = NewQRegularExpressionFromPointer(C.QRegularExpression_NewQRegularExpression())
	runtime.SetFinalizer(tmpValue, (*QRegularExpression).DestroyQRegularExpression)
	return tmpValue
}

func NewQRegularExpression3(re QRegularExpression_ITF) *QRegularExpression {
	var tmpValue = NewQRegularExpressionFromPointer(C.QRegularExpression_NewQRegularExpression3(PointerFromQRegularExpression(re)))
	runtime.SetFinalizer(tmpValue, (*QRegularExpression).DestroyQRegularExpression)
	return tmpValue
}

func NewQRegularExpression2(pattern string, options QRegularExpression__PatternOption) *QRegularExpression {
	var patternC = C.CString(pattern)
	defer C.free(unsafe.Pointer(patternC))
	var tmpValue = NewQRegularExpressionFromPointer(C.QRegularExpression_NewQRegularExpression2(patternC, C.longlong(options)))
	runtime.SetFinalizer(tmpValue, (*QRegularExpression).DestroyQRegularExpression)
	return tmpValue
}

func (ptr *QRegularExpression) CaptureCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegularExpression_CaptureCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRegularExpression) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRegularExpression_ErrorString(ptr.Pointer()))
	}
	return ""
}

func QRegularExpression_Escape(str string) string {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	return cGoUnpackString(C.QRegularExpression_QRegularExpression_Escape(strC))
}

func (ptr *QRegularExpression) Escape(str string) string {
	var strC = C.CString(str)
	defer C.free(unsafe.Pointer(strC))
	return cGoUnpackString(C.QRegularExpression_QRegularExpression_Escape(strC))
}

func (ptr *QRegularExpression) GlobalMatch(subject string, offset int, matchType QRegularExpression__MatchType, matchOptions QRegularExpression__MatchOption) *QRegularExpressionMatchIterator {
	if ptr.Pointer() != nil {
		var subjectC = C.CString(subject)
		defer C.free(unsafe.Pointer(subjectC))
		return NewQRegularExpressionMatchIteratorFromPointer(C.QRegularExpression_GlobalMatch(ptr.Pointer(), subjectC, C.int(int32(offset)), C.longlong(matchType), C.longlong(matchOptions)))
	}
	return nil
}

func (ptr *QRegularExpression) GlobalMatch2(subjectRef QStringRef_ITF, offset int, matchType QRegularExpression__MatchType, matchOptions QRegularExpression__MatchOption) *QRegularExpressionMatchIterator {
	if ptr.Pointer() != nil {
		return NewQRegularExpressionMatchIteratorFromPointer(C.QRegularExpression_GlobalMatch2(ptr.Pointer(), PointerFromQStringRef(subjectRef), C.int(int32(offset)), C.longlong(matchType), C.longlong(matchOptions)))
	}
	return nil
}

func (ptr *QRegularExpression) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpression_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegularExpression) Match(subject string, offset int, matchType QRegularExpression__MatchType, matchOptions QRegularExpression__MatchOption) *QRegularExpressionMatch {
	if ptr.Pointer() != nil {
		var subjectC = C.CString(subject)
		defer C.free(unsafe.Pointer(subjectC))
		var tmpValue = NewQRegularExpressionMatchFromPointer(C.QRegularExpression_Match(ptr.Pointer(), subjectC, C.int(int32(offset)), C.longlong(matchType), C.longlong(matchOptions)))
		runtime.SetFinalizer(tmpValue, (*QRegularExpressionMatch).DestroyQRegularExpressionMatch)
		return tmpValue
	}
	return nil
}

func (ptr *QRegularExpression) Match2(subjectRef QStringRef_ITF, offset int, matchType QRegularExpression__MatchType, matchOptions QRegularExpression__MatchOption) *QRegularExpressionMatch {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegularExpressionMatchFromPointer(C.QRegularExpression_Match2(ptr.Pointer(), PointerFromQStringRef(subjectRef), C.int(int32(offset)), C.longlong(matchType), C.longlong(matchOptions)))
		runtime.SetFinalizer(tmpValue, (*QRegularExpressionMatch).DestroyQRegularExpressionMatch)
		return tmpValue
	}
	return nil
}

func (ptr *QRegularExpression) NamedCaptureGroups() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QRegularExpression_NamedCaptureGroups(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QRegularExpression) Optimize() {
	if ptr.Pointer() != nil {
		C.QRegularExpression_Optimize(ptr.Pointer())
	}
}

func (ptr *QRegularExpression) Pattern() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRegularExpression_Pattern(ptr.Pointer()))
	}
	return ""
}

func (ptr *QRegularExpression) PatternErrorOffset() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegularExpression_PatternErrorOffset(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRegularExpression) PatternOptions() QRegularExpression__PatternOption {
	if ptr.Pointer() != nil {
		return QRegularExpression__PatternOption(C.QRegularExpression_PatternOptions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRegularExpression) SetPattern(pattern string) {
	if ptr.Pointer() != nil {
		var patternC = C.CString(pattern)
		defer C.free(unsafe.Pointer(patternC))
		C.QRegularExpression_SetPattern(ptr.Pointer(), patternC)
	}
}

func (ptr *QRegularExpression) SetPatternOptions(options QRegularExpression__PatternOption) {
	if ptr.Pointer() != nil {
		C.QRegularExpression_SetPatternOptions(ptr.Pointer(), C.longlong(options))
	}
}

func (ptr *QRegularExpression) Swap(other QRegularExpression_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpression_Swap(ptr.Pointer(), PointerFromQRegularExpression(other))
	}
}

func (ptr *QRegularExpression) DestroyQRegularExpression() {
	if ptr.Pointer() != nil {
		C.QRegularExpression_DestroyQRegularExpression(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QRegularExpressionMatch struct {
	ptr unsafe.Pointer
}

type QRegularExpressionMatch_ITF interface {
	QRegularExpressionMatch_PTR() *QRegularExpressionMatch
}

func (p *QRegularExpressionMatch) QRegularExpressionMatch_PTR() *QRegularExpressionMatch {
	return p
}

func (p *QRegularExpressionMatch) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRegularExpressionMatch) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRegularExpressionMatch(ptr QRegularExpressionMatch_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegularExpressionMatch_PTR().Pointer()
	}
	return nil
}

func NewQRegularExpressionMatchFromPointer(ptr unsafe.Pointer) *QRegularExpressionMatch {
	var n = new(QRegularExpressionMatch)
	n.SetPointer(ptr)
	return n
}
func NewQRegularExpressionMatch() *QRegularExpressionMatch {
	var tmpValue = NewQRegularExpressionMatchFromPointer(C.QRegularExpressionMatch_NewQRegularExpressionMatch())
	runtime.SetFinalizer(tmpValue, (*QRegularExpressionMatch).DestroyQRegularExpressionMatch)
	return tmpValue
}

func NewQRegularExpressionMatch2(match QRegularExpressionMatch_ITF) *QRegularExpressionMatch {
	var tmpValue = NewQRegularExpressionMatchFromPointer(C.QRegularExpressionMatch_NewQRegularExpressionMatch2(PointerFromQRegularExpressionMatch(match)))
	runtime.SetFinalizer(tmpValue, (*QRegularExpressionMatch).DestroyQRegularExpressionMatch)
	return tmpValue
}

func (ptr *QRegularExpressionMatch) Captured2(name string) string {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return cGoUnpackString(C.QRegularExpressionMatch_Captured2(ptr.Pointer(), nameC))
	}
	return ""
}

func (ptr *QRegularExpressionMatch) Captured(nth int) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QRegularExpressionMatch_Captured(ptr.Pointer(), C.int(int32(nth))))
	}
	return ""
}

func (ptr *QRegularExpressionMatch) CapturedEnd2(name string) int {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return int(int32(C.QRegularExpressionMatch_CapturedEnd2(ptr.Pointer(), nameC)))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) CapturedEnd(nth int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegularExpressionMatch_CapturedEnd(ptr.Pointer(), C.int(int32(nth)))))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) CapturedLength2(name string) int {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return int(int32(C.QRegularExpressionMatch_CapturedLength2(ptr.Pointer(), nameC)))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) CapturedLength(nth int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegularExpressionMatch_CapturedLength(ptr.Pointer(), C.int(int32(nth)))))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) CapturedRef2(name string) *QStringRef {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var tmpValue = NewQStringRefFromPointer(C.QRegularExpressionMatch_CapturedRef2(ptr.Pointer(), nameC))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QRegularExpressionMatch) CapturedRef(nth int) *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QRegularExpressionMatch_CapturedRef(ptr.Pointer(), C.int(int32(nth))))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QRegularExpressionMatch) CapturedStart2(name string) int {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return int(int32(C.QRegularExpressionMatch_CapturedStart2(ptr.Pointer(), nameC)))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) CapturedStart(nth int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegularExpressionMatch_CapturedStart(ptr.Pointer(), C.int(int32(nth)))))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) CapturedTexts() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QRegularExpressionMatch_CapturedTexts(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QRegularExpressionMatch) HasMatch() bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpressionMatch_HasMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegularExpressionMatch) HasPartialMatch() bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpressionMatch_HasPartialMatch(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegularExpressionMatch) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QRegularExpressionMatch_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QRegularExpressionMatch) LastCapturedIndex() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QRegularExpressionMatch_LastCapturedIndex(ptr.Pointer())))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) MatchOptions() QRegularExpression__MatchOption {
	if ptr.Pointer() != nil {
		return QRegularExpression__MatchOption(C.QRegularExpressionMatch_MatchOptions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) MatchType() QRegularExpression__MatchType {
	if ptr.Pointer() != nil {
		return QRegularExpression__MatchType(C.QRegularExpressionMatch_MatchType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QRegularExpressionMatch) RegularExpression() *QRegularExpression {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegularExpressionFromPointer(C.QRegularExpressionMatch_RegularExpression(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegularExpression).DestroyQRegularExpression)
		return tmpValue
	}
	return nil
}

func (ptr *QRegularExpressionMatch) Swap(other QRegularExpressionMatch_ITF) {
	if ptr.Pointer() != nil {
		C.QRegularExpressionMatch_Swap(ptr.Pointer(), PointerFromQRegularExpressionMatch(other))
	}
}

func (ptr *QRegularExpressionMatch) DestroyQRegularExpressionMatch() {
	if ptr.Pointer() != nil {
		C.QRegularExpressionMatch_DestroyQRegularExpressionMatch(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QRegularExpressionMatchIterator struct {
	ptr unsafe.Pointer
}

type QRegularExpressionMatchIterator_ITF interface {
	QRegularExpressionMatchIterator_PTR() *QRegularExpressionMatchIterator
}

func (p *QRegularExpressionMatchIterator) QRegularExpressionMatchIterator_PTR() *QRegularExpressionMatchIterator {
	return p
}

func (p *QRegularExpressionMatchIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRegularExpressionMatchIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRegularExpressionMatchIterator(ptr QRegularExpressionMatchIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRegularExpressionMatchIterator_PTR().Pointer()
	}
	return nil
}

func NewQRegularExpressionMatchIteratorFromPointer(ptr unsafe.Pointer) *QRegularExpressionMatchIterator {
	var n = new(QRegularExpressionMatchIterator)
	n.SetPointer(ptr)
	return n
}

type QResource struct {
	ptr unsafe.Pointer
}

type QResource_ITF interface {
	QResource_PTR() *QResource
}

func (p *QResource) QResource_PTR() *QResource {
	return p
}

func (p *QResource) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QResource) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQResource(ptr QResource_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QResource_PTR().Pointer()
	}
	return nil
}

func NewQResourceFromPointer(ptr unsafe.Pointer) *QResource {
	var n = new(QResource)
	n.SetPointer(ptr)
	return n
}
func QResource_RegisterResource(rccFileName string, mapRoot string) bool {
	var rccFileNameC = C.CString(rccFileName)
	defer C.free(unsafe.Pointer(rccFileNameC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_RegisterResource(rccFileNameC, mapRootC) != 0
}

func (ptr *QResource) RegisterResource(rccFileName string, mapRoot string) bool {
	var rccFileNameC = C.CString(rccFileName)
	defer C.free(unsafe.Pointer(rccFileNameC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_RegisterResource(rccFileNameC, mapRootC) != 0
}

func QResource_RegisterResource2(rccData string, mapRoot string) bool {
	var rccDataC = C.CString(rccData)
	defer C.free(unsafe.Pointer(rccDataC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_RegisterResource2(rccDataC, mapRootC) != 0
}

func (ptr *QResource) RegisterResource2(rccData string, mapRoot string) bool {
	var rccDataC = C.CString(rccData)
	defer C.free(unsafe.Pointer(rccDataC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_RegisterResource2(rccDataC, mapRootC) != 0
}

func QResource_UnregisterResource(rccFileName string, mapRoot string) bool {
	var rccFileNameC = C.CString(rccFileName)
	defer C.free(unsafe.Pointer(rccFileNameC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_UnregisterResource(rccFileNameC, mapRootC) != 0
}

func (ptr *QResource) UnregisterResource(rccFileName string, mapRoot string) bool {
	var rccFileNameC = C.CString(rccFileName)
	defer C.free(unsafe.Pointer(rccFileNameC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_UnregisterResource(rccFileNameC, mapRootC) != 0
}

func QResource_UnregisterResource2(rccData string, mapRoot string) bool {
	var rccDataC = C.CString(rccData)
	defer C.free(unsafe.Pointer(rccDataC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_UnregisterResource2(rccDataC, mapRootC) != 0
}

func (ptr *QResource) UnregisterResource2(rccData string, mapRoot string) bool {
	var rccDataC = C.CString(rccData)
	defer C.free(unsafe.Pointer(rccDataC))
	var mapRootC = C.CString(mapRoot)
	defer C.free(unsafe.Pointer(mapRootC))
	return C.QResource_QResource_UnregisterResource2(rccDataC, mapRootC) != 0
}

func NewQResource(file string, locale QLocale_ITF) *QResource {
	var fileC = C.CString(file)
	defer C.free(unsafe.Pointer(fileC))
	var tmpValue = NewQResourceFromPointer(C.QResource_NewQResource(fileC, PointerFromQLocale(locale)))
	runtime.SetFinalizer(tmpValue, (*QResource).DestroyQResource)
	return tmpValue
}

func (ptr *QResource) AbsoluteFilePath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QResource_AbsoluteFilePath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QResource) Children() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QResource_Children(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QResource) Data() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QResource_Data(ptr.Pointer()))
	}
	return ""
}

func (ptr *QResource) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QResource_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QResource) IsCompressed() bool {
	if ptr.Pointer() != nil {
		return C.QResource_IsCompressed(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QResource) IsDir() bool {
	if ptr.Pointer() != nil {
		return C.QResource_IsDir(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QResource) IsFile() bool {
	if ptr.Pointer() != nil {
		return C.QResource_IsFile(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QResource) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QResource_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QResource) Locale() *QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLocaleFromPointer(C.QResource_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

func (ptr *QResource) SetFileName(file string) {
	if ptr.Pointer() != nil {
		var fileC = C.CString(file)
		defer C.free(unsafe.Pointer(fileC))
		C.QResource_SetFileName(ptr.Pointer(), fileC)
	}
}

func (ptr *QResource) SetLocale(locale QLocale_ITF) {
	if ptr.Pointer() != nil {
		C.QResource_SetLocale(ptr.Pointer(), PointerFromQLocale(locale))
	}
}

func (ptr *QResource) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QResource_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QResource) DestroyQResource() {
	if ptr.Pointer() != nil {
		C.QResource_DestroyQResource(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QRunnable struct {
	ptr unsafe.Pointer
}

type QRunnable_ITF interface {
	QRunnable_PTR() *QRunnable
}

func (p *QRunnable) QRunnable_PTR() *QRunnable {
	return p
}

func (p *QRunnable) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QRunnable) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQRunnable(ptr QRunnable_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QRunnable_PTR().Pointer()
	}
	return nil
}

func NewQRunnableFromPointer(ptr unsafe.Pointer) *QRunnable {
	var n = new(QRunnable)
	n.SetPointer(ptr)
	return n
}

//export callbackQRunnable_DestroyQRunnable
func callbackQRunnable_DestroyQRunnable(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRunnable::~QRunnable"); signal != nil {
		signal.(func())()
	} else {
		NewQRunnableFromPointer(ptr).DestroyQRunnableDefault()
	}
}

func (ptr *QRunnable) ConnectDestroyQRunnable(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRunnable::~QRunnable", f)
	}
}

func (ptr *QRunnable) DisconnectDestroyQRunnable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRunnable::~QRunnable")
	}
}

func (ptr *QRunnable) DestroyQRunnable() {
	if ptr.Pointer() != nil {
		C.QRunnable_DestroyQRunnable(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QRunnable) DestroyQRunnableDefault() {
	if ptr.Pointer() != nil {
		C.QRunnable_DestroyQRunnableDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func NewQRunnable() *QRunnable {
	return NewQRunnableFromPointer(C.QRunnable_NewQRunnable())
}

func (ptr *QRunnable) AutoDelete() bool {
	if ptr.Pointer() != nil {
		return C.QRunnable_AutoDelete(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQRunnable_Run
func callbackQRunnable_Run(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QRunnable::run"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QRunnable) ConnectRun(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QRunnable::run", f)
	}
}

func (ptr *QRunnable) DisconnectRun() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QRunnable::run")
	}
}

func (ptr *QRunnable) Run() {
	if ptr.Pointer() != nil {
		C.QRunnable_Run(ptr.Pointer())
	}
}

func (ptr *QRunnable) SetAutoDelete(autoDelete bool) {
	if ptr.Pointer() != nil {
		C.QRunnable_SetAutoDelete(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(autoDelete))))
	}
}

type QSaveFile struct {
	QFileDevice
}

type QSaveFile_ITF interface {
	QFileDevice_ITF
	QSaveFile_PTR() *QSaveFile
}

func (p *QSaveFile) QSaveFile_PTR() *QSaveFile {
	return p
}

func (p *QSaveFile) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QFileDevice_PTR().Pointer()
	}
	return nil
}

func (p *QSaveFile) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QFileDevice_PTR().SetPointer(ptr)
	}
}

func PointerFromQSaveFile(ptr QSaveFile_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSaveFile_PTR().Pointer()
	}
	return nil
}

func NewQSaveFileFromPointer(ptr unsafe.Pointer) *QSaveFile {
	var n = new(QSaveFile)
	n.SetPointer(ptr)
	return n
}
func NewQSaveFile2(parent QObject_ITF) *QSaveFile {
	var tmpValue = NewQSaveFileFromPointer(C.QSaveFile_NewQSaveFile2(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSaveFile(name string) *QSaveFile {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQSaveFileFromPointer(C.QSaveFile_NewQSaveFile(nameC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSaveFile3(name string, parent QObject_ITF) *QSaveFile {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var tmpValue = NewQSaveFileFromPointer(C.QSaveFile_NewQSaveFile3(nameC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QSaveFile) CancelWriting() {
	if ptr.Pointer() != nil {
		C.QSaveFile_CancelWriting(ptr.Pointer())
	}
}

func (ptr *QSaveFile) Commit() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_Commit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSaveFile) DirectWriteFallback() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_DirectWriteFallback(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSaveFile_FileName
func callbackQSaveFile_FileName(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::fileName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQSaveFileFromPointer(ptr).FileNameDefault())
}

func (ptr *QSaveFile) ConnectFileName(f func() string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::fileName", f)
	}
}

func (ptr *QSaveFile) DisconnectFileName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::fileName")
	}
}

func (ptr *QSaveFile) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSaveFile_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSaveFile) FileNameDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSaveFile_FileNameDefault(ptr.Pointer()))
	}
	return ""
}

//export callbackQSaveFile_Open
func callbackQSaveFile_Open(ptr unsafe.Pointer, mode C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::open"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QIODevice__OpenModeFlag) bool)(QIODevice__OpenModeFlag(mode)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).OpenDefault(QIODevice__OpenModeFlag(mode)))))
}

func (ptr *QSaveFile) ConnectOpen(f func(mode QIODevice__OpenModeFlag) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::open", f)
	}
}

func (ptr *QSaveFile) DisconnectOpen() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::open")
	}
}

func (ptr *QSaveFile) Open(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_Open(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QSaveFile) OpenDefault(mode QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_OpenDefault(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QSaveFile) SetDirectWriteFallback(enabled bool) {
	if ptr.Pointer() != nil {
		C.QSaveFile_SetDirectWriteFallback(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QSaveFile) SetFileName(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QSaveFile_SetFileName(ptr.Pointer(), nameC)
	}
}

//export callbackQSaveFile_WriteData
func callbackQSaveFile_WriteData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, len C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::writeData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(len)))
	}

	return C.longlong(NewQSaveFileFromPointer(ptr).WriteDataDefault(cGoUnpackString(data), int64(len)))
}

func (ptr *QSaveFile) ConnectWriteData(f func(data string, len int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::writeData", f)
	}
}

func (ptr *QSaveFile) DisconnectWriteData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::writeData")
	}
}

func (ptr *QSaveFile) WriteData(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QSaveFile_WriteData(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QSaveFile) WriteDataDefault(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QSaveFile_WriteDataDefault(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QSaveFile) DestroyQSaveFile() {
	if ptr.Pointer() != nil {
		C.QSaveFile_DestroyQSaveFile(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSaveFile_Seek
func callbackQSaveFile_Seek(ptr unsafe.Pointer, pos C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::seek"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(pos)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).SeekDefault(int64(pos)))))
}

func (ptr *QSaveFile) ConnectSeek(f func(pos int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::seek", f)
	}
}

func (ptr *QSaveFile) DisconnectSeek() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::seek")
	}
}

func (ptr *QSaveFile) Seek(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_Seek(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QSaveFile) SeekDefault(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_SeekDefault(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

//export callbackQSaveFile_AtEnd
func callbackQSaveFile_AtEnd(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::atEnd"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).AtEndDefault())))
}

func (ptr *QSaveFile) ConnectAtEnd(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::atEnd", f)
	}
}

func (ptr *QSaveFile) DisconnectAtEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::atEnd")
	}
}

func (ptr *QSaveFile) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSaveFile) AtEndDefault() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_AtEndDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSaveFile_Close
func callbackQSaveFile_Close(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::close"); signal != nil {
		signal.(func())()
	} else {
		NewQSaveFileFromPointer(ptr).CloseDefault()
	}
}

func (ptr *QSaveFile) ConnectClose(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::close", f)
	}
}

func (ptr *QSaveFile) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::close")
	}
}

func (ptr *QSaveFile) Close() {
	if ptr.Pointer() != nil {
		C.QSaveFile_Close(ptr.Pointer())
	}
}

func (ptr *QSaveFile) CloseDefault() {
	if ptr.Pointer() != nil {
		C.QSaveFile_CloseDefault(ptr.Pointer())
	}
}

//export callbackQSaveFile_IsSequential
func callbackQSaveFile_IsSequential(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::isSequential"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).IsSequentialDefault())))
}

func (ptr *QSaveFile) ConnectIsSequential(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::isSequential", f)
	}
}

func (ptr *QSaveFile) DisconnectIsSequential() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::isSequential")
	}
}

func (ptr *QSaveFile) IsSequential() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_IsSequential(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSaveFile) IsSequentialDefault() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_IsSequentialDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSaveFile_Permissions
func callbackQSaveFile_Permissions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::permissions"); signal != nil {
		return C.longlong(signal.(func() QFileDevice__Permission)())
	}

	return C.longlong(NewQSaveFileFromPointer(ptr).PermissionsDefault())
}

func (ptr *QSaveFile) ConnectPermissions(f func() QFileDevice__Permission) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::permissions", f)
	}
}

func (ptr *QSaveFile) DisconnectPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::permissions")
	}
}

func (ptr *QSaveFile) Permissions() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QSaveFile_Permissions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSaveFile) PermissionsDefault() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QSaveFile_PermissionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQSaveFile_Pos
func callbackQSaveFile_Pos(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::pos"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQSaveFileFromPointer(ptr).PosDefault())
}

func (ptr *QSaveFile) ConnectPos(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::pos", f)
	}
}

func (ptr *QSaveFile) DisconnectPos() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::pos")
	}
}

func (ptr *QSaveFile) Pos() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_Pos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSaveFile) PosDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_PosDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQSaveFile_ReadLineData
func callbackQSaveFile_ReadLineData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, maxlen C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::readLineData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(maxlen)))
	}

	return C.longlong(NewQSaveFileFromPointer(ptr).ReadLineDataDefault(cGoUnpackString(data), int64(maxlen)))
}

func (ptr *QSaveFile) ConnectReadLineData(f func(data string, maxlen int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::readLineData", f)
	}
}

func (ptr *QSaveFile) DisconnectReadLineData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::readLineData")
	}
}

func (ptr *QSaveFile) ReadLineData(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QSaveFile_ReadLineData(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

func (ptr *QSaveFile) ReadLineDataDefault(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QSaveFile_ReadLineDataDefault(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

//export callbackQSaveFile_Resize
func callbackQSaveFile_Resize(ptr unsafe.Pointer, sz C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::resize"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(sz)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).ResizeDefault(int64(sz)))))
}

func (ptr *QSaveFile) ConnectResize(f func(sz int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::resize", f)
	}
}

func (ptr *QSaveFile) DisconnectResize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::resize")
	}
}

func (ptr *QSaveFile) Resize(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_Resize(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

func (ptr *QSaveFile) ResizeDefault(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_ResizeDefault(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

//export callbackQSaveFile_SetPermissions
func callbackQSaveFile_SetPermissions(ptr unsafe.Pointer, permissions C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::setPermissions"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QFileDevice__Permission) bool)(QFileDevice__Permission(permissions)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).SetPermissionsDefault(QFileDevice__Permission(permissions)))))
}

func (ptr *QSaveFile) ConnectSetPermissions(f func(permissions QFileDevice__Permission) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::setPermissions", f)
	}
}

func (ptr *QSaveFile) DisconnectSetPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::setPermissions")
	}
}

func (ptr *QSaveFile) SetPermissions(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_SetPermissions(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

func (ptr *QSaveFile) SetPermissionsDefault(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_SetPermissionsDefault(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

//export callbackQSaveFile_Size
func callbackQSaveFile_Size(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::size"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQSaveFileFromPointer(ptr).SizeDefault())
}

func (ptr *QSaveFile) ConnectSize(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::size", f)
	}
}

func (ptr *QSaveFile) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::size")
	}
}

func (ptr *QSaveFile) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSaveFile) SizeDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_SizeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQSaveFile_BytesAvailable
func callbackQSaveFile_BytesAvailable(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::bytesAvailable"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQSaveFileFromPointer(ptr).BytesAvailableDefault())
}

func (ptr *QSaveFile) ConnectBytesAvailable(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::bytesAvailable", f)
	}
}

func (ptr *QSaveFile) DisconnectBytesAvailable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::bytesAvailable")
	}
}

func (ptr *QSaveFile) BytesAvailable() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_BytesAvailable(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSaveFile) BytesAvailableDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_BytesAvailableDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQSaveFile_BytesToWrite
func callbackQSaveFile_BytesToWrite(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::bytesToWrite"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQSaveFileFromPointer(ptr).BytesToWriteDefault())
}

func (ptr *QSaveFile) ConnectBytesToWrite(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::bytesToWrite", f)
	}
}

func (ptr *QSaveFile) DisconnectBytesToWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::bytesToWrite")
	}
}

func (ptr *QSaveFile) BytesToWrite() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_BytesToWrite(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSaveFile) BytesToWriteDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QSaveFile_BytesToWriteDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQSaveFile_CanReadLine
func callbackQSaveFile_CanReadLine(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::canReadLine"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).CanReadLineDefault())))
}

func (ptr *QSaveFile) ConnectCanReadLine(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::canReadLine", f)
	}
}

func (ptr *QSaveFile) DisconnectCanReadLine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::canReadLine")
	}
}

func (ptr *QSaveFile) CanReadLine() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_CanReadLine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSaveFile) CanReadLineDefault() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_CanReadLineDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSaveFile_Reset
func callbackQSaveFile_Reset(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::reset"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).ResetDefault())))
}

func (ptr *QSaveFile) ConnectReset(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::reset", f)
	}
}

func (ptr *QSaveFile) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::reset")
	}
}

func (ptr *QSaveFile) Reset() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_Reset(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSaveFile) ResetDefault() bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_ResetDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSaveFile_WaitForBytesWritten
func callbackQSaveFile_WaitForBytesWritten(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::waitForBytesWritten"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).WaitForBytesWrittenDefault(int(int32(msecs))))))
}

func (ptr *QSaveFile) ConnectWaitForBytesWritten(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::waitForBytesWritten", f)
	}
}

func (ptr *QSaveFile) DisconnectWaitForBytesWritten() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::waitForBytesWritten")
	}
}

func (ptr *QSaveFile) WaitForBytesWritten(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_WaitForBytesWritten(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QSaveFile) WaitForBytesWrittenDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_WaitForBytesWrittenDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQSaveFile_WaitForReadyRead
func callbackQSaveFile_WaitForReadyRead(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::waitForReadyRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).WaitForReadyReadDefault(int(int32(msecs))))))
}

func (ptr *QSaveFile) ConnectWaitForReadyRead(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::waitForReadyRead", f)
	}
}

func (ptr *QSaveFile) DisconnectWaitForReadyRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::waitForReadyRead")
	}
}

func (ptr *QSaveFile) WaitForReadyRead(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_WaitForReadyRead(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QSaveFile) WaitForReadyReadDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_WaitForReadyReadDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQSaveFile_TimerEvent
func callbackQSaveFile_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSaveFileFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSaveFile) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::timerEvent", f)
	}
}

func (ptr *QSaveFile) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::timerEvent")
	}
}

func (ptr *QSaveFile) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSaveFile) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSaveFile_ChildEvent
func callbackQSaveFile_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSaveFileFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSaveFile) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::childEvent", f)
	}
}

func (ptr *QSaveFile) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::childEvent")
	}
}

func (ptr *QSaveFile) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSaveFile) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSaveFile_ConnectNotify
func callbackQSaveFile_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSaveFileFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSaveFile) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::connectNotify", f)
	}
}

func (ptr *QSaveFile) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::connectNotify")
	}
}

func (ptr *QSaveFile) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSaveFile) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSaveFile_CustomEvent
func callbackQSaveFile_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSaveFileFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSaveFile) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::customEvent", f)
	}
}

func (ptr *QSaveFile) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::customEvent")
	}
}

func (ptr *QSaveFile) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSaveFile) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSaveFile_DeleteLater
func callbackQSaveFile_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSaveFileFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSaveFile) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::deleteLater", f)
	}
}

func (ptr *QSaveFile) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::deleteLater")
	}
}

func (ptr *QSaveFile) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSaveFile_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSaveFile) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSaveFile_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSaveFile_DisconnectNotify
func callbackQSaveFile_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSaveFileFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSaveFile) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::disconnectNotify", f)
	}
}

func (ptr *QSaveFile) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::disconnectNotify")
	}
}

func (ptr *QSaveFile) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSaveFile) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSaveFile_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSaveFile_Event
func callbackQSaveFile_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QSaveFile) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::event", f)
	}
}

func (ptr *QSaveFile) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::event")
	}
}

func (ptr *QSaveFile) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSaveFile) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSaveFile_EventFilter
func callbackQSaveFile_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSaveFileFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSaveFile) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::eventFilter", f)
	}
}

func (ptr *QSaveFile) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::eventFilter")
	}
}

func (ptr *QSaveFile) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSaveFile) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSaveFile_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSaveFile_MetaObject
func callbackQSaveFile_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSaveFile::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSaveFileFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSaveFile) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::metaObject", f)
	}
}

func (ptr *QSaveFile) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSaveFile::metaObject")
	}
}

func (ptr *QSaveFile) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSaveFile_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSaveFile) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSaveFile_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QScopedArrayPointer struct {
	QScopedPointer
}

type QScopedArrayPointer_ITF interface {
	QScopedPointer_ITF
	QScopedArrayPointer_PTR() *QScopedArrayPointer
}

func (p *QScopedArrayPointer) QScopedArrayPointer_PTR() *QScopedArrayPointer {
	return p
}

func (p *QScopedArrayPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QScopedPointer_PTR().Pointer()
	}
	return nil
}

func (p *QScopedArrayPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QScopedPointer_PTR().SetPointer(ptr)
	}
}

func PointerFromQScopedArrayPointer(ptr QScopedArrayPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScopedArrayPointer_PTR().Pointer()
	}
	return nil
}

func NewQScopedArrayPointerFromPointer(ptr unsafe.Pointer) *QScopedArrayPointer {
	var n = new(QScopedArrayPointer)
	n.SetPointer(ptr)
	return n
}

func (ptr *QScopedArrayPointer) DestroyQScopedArrayPointer() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QScopedPointer struct {
	ptr unsafe.Pointer
}

type QScopedPointer_ITF interface {
	QScopedPointer_PTR() *QScopedPointer
}

func (p *QScopedPointer) QScopedPointer_PTR() *QScopedPointer {
	return p
}

func (p *QScopedPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QScopedPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQScopedPointer(ptr QScopedPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScopedPointer_PTR().Pointer()
	}
	return nil
}

func NewQScopedPointerFromPointer(ptr unsafe.Pointer) *QScopedPointer {
	var n = new(QScopedPointer)
	n.SetPointer(ptr)
	return n
}

type QScopedValueRollback struct {
	ptr unsafe.Pointer
}

type QScopedValueRollback_ITF interface {
	QScopedValueRollback_PTR() *QScopedValueRollback
}

func (p *QScopedValueRollback) QScopedValueRollback_PTR() *QScopedValueRollback {
	return p
}

func (p *QScopedValueRollback) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QScopedValueRollback) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQScopedValueRollback(ptr QScopedValueRollback_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QScopedValueRollback_PTR().Pointer()
	}
	return nil
}

func NewQScopedValueRollbackFromPointer(ptr unsafe.Pointer) *QScopedValueRollback {
	var n = new(QScopedValueRollback)
	n.SetPointer(ptr)
	return n
}

type QSemaphore struct {
	ptr unsafe.Pointer
}

type QSemaphore_ITF interface {
	QSemaphore_PTR() *QSemaphore
}

func (p *QSemaphore) QSemaphore_PTR() *QSemaphore {
	return p
}

func (p *QSemaphore) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSemaphore) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSemaphore(ptr QSemaphore_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSemaphore_PTR().Pointer()
	}
	return nil
}

func NewQSemaphoreFromPointer(ptr unsafe.Pointer) *QSemaphore {
	var n = new(QSemaphore)
	n.SetPointer(ptr)
	return n
}
func NewQSemaphore(n int) *QSemaphore {
	var tmpValue = NewQSemaphoreFromPointer(C.QSemaphore_NewQSemaphore(C.int(int32(n))))
	runtime.SetFinalizer(tmpValue, (*QSemaphore).DestroyQSemaphore)
	return tmpValue
}

func (ptr *QSemaphore) Acquire(n int) {
	if ptr.Pointer() != nil {
		C.QSemaphore_Acquire(ptr.Pointer(), C.int(int32(n)))
	}
}

func (ptr *QSemaphore) Available() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSemaphore_Available(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSemaphore) Release(n int) {
	if ptr.Pointer() != nil {
		C.QSemaphore_Release(ptr.Pointer(), C.int(int32(n)))
	}
}

func (ptr *QSemaphore) TryAcquire(n int) bool {
	if ptr.Pointer() != nil {
		return C.QSemaphore_TryAcquire(ptr.Pointer(), C.int(int32(n))) != 0
	}
	return false
}

func (ptr *QSemaphore) TryAcquire2(n int, timeout int) bool {
	if ptr.Pointer() != nil {
		return C.QSemaphore_TryAcquire2(ptr.Pointer(), C.int(int32(n)), C.int(int32(timeout))) != 0
	}
	return false
}

func (ptr *QSemaphore) DestroyQSemaphore() {
	if ptr.Pointer() != nil {
		C.QSemaphore_DestroyQSemaphore(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QSequentialAnimationGroup struct {
	QAnimationGroup
}

type QSequentialAnimationGroup_ITF interface {
	QAnimationGroup_ITF
	QSequentialAnimationGroup_PTR() *QSequentialAnimationGroup
}

func (p *QSequentialAnimationGroup) QSequentialAnimationGroup_PTR() *QSequentialAnimationGroup {
	return p
}

func (p *QSequentialAnimationGroup) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAnimationGroup_PTR().Pointer()
	}
	return nil
}

func (p *QSequentialAnimationGroup) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAnimationGroup_PTR().SetPointer(ptr)
	}
}

func PointerFromQSequentialAnimationGroup(ptr QSequentialAnimationGroup_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSequentialAnimationGroup_PTR().Pointer()
	}
	return nil
}

func NewQSequentialAnimationGroupFromPointer(ptr unsafe.Pointer) *QSequentialAnimationGroup {
	var n = new(QSequentialAnimationGroup)
	n.SetPointer(ptr)
	return n
}
func (ptr *QSequentialAnimationGroup) CurrentAnimation() *QAbstractAnimation {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractAnimationFromPointer(C.QSequentialAnimationGroup_CurrentAnimation(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func NewQSequentialAnimationGroup(parent QObject_ITF) *QSequentialAnimationGroup {
	var tmpValue = NewQSequentialAnimationGroupFromPointer(C.QSequentialAnimationGroup_NewQSequentialAnimationGroup(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QSequentialAnimationGroup) AddPause(msecs int) *QPauseAnimation {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPauseAnimationFromPointer(C.QSequentialAnimationGroup_AddPause(ptr.Pointer(), C.int(int32(msecs))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQSequentialAnimationGroup_CurrentAnimationChanged
func callbackQSequentialAnimationGroup_CurrentAnimationChanged(ptr unsafe.Pointer, current unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::currentAnimationChanged"); signal != nil {
		signal.(func(*QAbstractAnimation))(NewQAbstractAnimationFromPointer(current))
	}

}

func (ptr *QSequentialAnimationGroup) ConnectCurrentAnimationChanged(f func(current *QAbstractAnimation)) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_ConnectCurrentAnimationChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::currentAnimationChanged", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectCurrentAnimationChanged() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_DisconnectCurrentAnimationChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::currentAnimationChanged")
	}
}

func (ptr *QSequentialAnimationGroup) CurrentAnimationChanged(current QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_CurrentAnimationChanged(ptr.Pointer(), PointerFromQAbstractAnimation(current))
	}
}

//export callbackQSequentialAnimationGroup_Duration
func callbackQSequentialAnimationGroup_Duration(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::duration"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQSequentialAnimationGroupFromPointer(ptr).DurationDefault()))
}

func (ptr *QSequentialAnimationGroup) ConnectDuration(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::duration", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectDuration() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::duration")
	}
}

func (ptr *QSequentialAnimationGroup) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSequentialAnimationGroup_Duration(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSequentialAnimationGroup) DurationDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSequentialAnimationGroup_DurationDefault(ptr.Pointer())))
	}
	return 0
}

//export callbackQSequentialAnimationGroup_Event
func callbackQSequentialAnimationGroup_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSequentialAnimationGroupFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QSequentialAnimationGroup) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::event", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::event")
	}
}

func (ptr *QSequentialAnimationGroup) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSequentialAnimationGroup_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSequentialAnimationGroup) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSequentialAnimationGroup_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSequentialAnimationGroup) InsertPause(index int, msecs int) *QPauseAnimation {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPauseAnimationFromPointer(C.QSequentialAnimationGroup_InsertPause(ptr.Pointer(), C.int(int32(index)), C.int(int32(msecs))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQSequentialAnimationGroup_UpdateCurrentTime
func callbackQSequentialAnimationGroup_UpdateCurrentTime(ptr unsafe.Pointer, currentTime C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::updateCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(currentTime)))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).UpdateCurrentTimeDefault(int(int32(currentTime)))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectUpdateCurrentTime(f func(currentTime int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::updateCurrentTime", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectUpdateCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::updateCurrentTime")
	}
}

func (ptr *QSequentialAnimationGroup) UpdateCurrentTime(currentTime int) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_UpdateCurrentTime(ptr.Pointer(), C.int(int32(currentTime)))
	}
}

func (ptr *QSequentialAnimationGroup) UpdateCurrentTimeDefault(currentTime int) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_UpdateCurrentTimeDefault(ptr.Pointer(), C.int(int32(currentTime)))
	}
}

//export callbackQSequentialAnimationGroup_UpdateDirection
func callbackQSequentialAnimationGroup_UpdateDirection(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::updateDirection"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(direction))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).UpdateDirectionDefault(QAbstractAnimation__Direction(direction))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectUpdateDirection(f func(direction QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::updateDirection", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectUpdateDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::updateDirection")
	}
}

func (ptr *QSequentialAnimationGroup) UpdateDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_UpdateDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QSequentialAnimationGroup) UpdateDirectionDefault(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_UpdateDirectionDefault(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQSequentialAnimationGroup_UpdateState
func callbackQSequentialAnimationGroup_UpdateState(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::updateState"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).UpdateStateDefault(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectUpdateState(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::updateState", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::updateState")
	}
}

func (ptr *QSequentialAnimationGroup) UpdateState(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_UpdateState(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QSequentialAnimationGroup) UpdateStateDefault(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_UpdateStateDefault(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QSequentialAnimationGroup) DestroyQSequentialAnimationGroup() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_DestroyQSequentialAnimationGroup(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSequentialAnimationGroup_SetCurrentTime
func callbackQSequentialAnimationGroup_SetCurrentTime(ptr unsafe.Pointer, msecs C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msecs)))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).SetCurrentTimeDefault(int(int32(msecs)))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectSetCurrentTime(f func(msecs int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::setCurrentTime", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectSetCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::setCurrentTime")
	}
}

func (ptr *QSequentialAnimationGroup) SetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_SetCurrentTime(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QSequentialAnimationGroup) SetCurrentTimeDefault(msecs int) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_SetCurrentTimeDefault(ptr.Pointer(), C.int(int32(msecs)))
	}
}

//export callbackQSequentialAnimationGroup_Pause
func callbackQSequentialAnimationGroup_Pause(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::pause"); signal != nil {
		signal.(func())()
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).PauseDefault()
	}
}

func (ptr *QSequentialAnimationGroup) ConnectPause(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::pause", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectPause() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::pause")
	}
}

func (ptr *QSequentialAnimationGroup) Pause() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_Pause(ptr.Pointer())
	}
}

func (ptr *QSequentialAnimationGroup) PauseDefault() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_PauseDefault(ptr.Pointer())
	}
}

//export callbackQSequentialAnimationGroup_Resume
func callbackQSequentialAnimationGroup_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::resume"); signal != nil {
		signal.(func())()
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).ResumeDefault()
	}
}

func (ptr *QSequentialAnimationGroup) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::resume", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::resume")
	}
}

func (ptr *QSequentialAnimationGroup) Resume() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_Resume(ptr.Pointer())
	}
}

func (ptr *QSequentialAnimationGroup) ResumeDefault() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_ResumeDefault(ptr.Pointer())
	}
}

//export callbackQSequentialAnimationGroup_SetPaused
func callbackQSequentialAnimationGroup_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).SetPausedDefault(int8(paused) != 0)
	}
}

func (ptr *QSequentialAnimationGroup) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::setPaused", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectSetPaused() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::setPaused")
	}
}

func (ptr *QSequentialAnimationGroup) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QSequentialAnimationGroup) SetPausedDefault(paused bool) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_SetPausedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

//export callbackQSequentialAnimationGroup_Start
func callbackQSequentialAnimationGroup_Start(ptr unsafe.Pointer, policy C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::start"); signal != nil {
		signal.(func(QAbstractAnimation__DeletionPolicy))(QAbstractAnimation__DeletionPolicy(policy))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).StartDefault(QAbstractAnimation__DeletionPolicy(policy))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectStart(f func(policy QAbstractAnimation__DeletionPolicy)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::start", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::start")
	}
}

func (ptr *QSequentialAnimationGroup) Start(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_Start(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QSequentialAnimationGroup) StartDefault(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_StartDefault(ptr.Pointer(), C.longlong(policy))
	}
}

//export callbackQSequentialAnimationGroup_Stop
func callbackQSequentialAnimationGroup_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).StopDefault()
	}
}

func (ptr *QSequentialAnimationGroup) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::stop", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::stop")
	}
}

func (ptr *QSequentialAnimationGroup) Stop() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_Stop(ptr.Pointer())
	}
}

func (ptr *QSequentialAnimationGroup) StopDefault() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_StopDefault(ptr.Pointer())
	}
}

//export callbackQSequentialAnimationGroup_TimerEvent
func callbackQSequentialAnimationGroup_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::timerEvent", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::timerEvent")
	}
}

func (ptr *QSequentialAnimationGroup) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSequentialAnimationGroup) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSequentialAnimationGroup_ChildEvent
func callbackQSequentialAnimationGroup_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::childEvent", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::childEvent")
	}
}

func (ptr *QSequentialAnimationGroup) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSequentialAnimationGroup) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSequentialAnimationGroup_ConnectNotify
func callbackQSequentialAnimationGroup_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::connectNotify", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::connectNotify")
	}
}

func (ptr *QSequentialAnimationGroup) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSequentialAnimationGroup_CustomEvent
func callbackQSequentialAnimationGroup_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::customEvent", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::customEvent")
	}
}

func (ptr *QSequentialAnimationGroup) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSequentialAnimationGroup) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSequentialAnimationGroup_DeleteLater
func callbackQSequentialAnimationGroup_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSequentialAnimationGroup) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::deleteLater", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::deleteLater")
	}
}

func (ptr *QSequentialAnimationGroup) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSequentialAnimationGroup) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSequentialAnimationGroup_DisconnectNotify
func callbackQSequentialAnimationGroup_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSequentialAnimationGroupFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSequentialAnimationGroup) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::disconnectNotify", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::disconnectNotify")
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSequentialAnimationGroup_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSequentialAnimationGroup_EventFilter
func callbackQSequentialAnimationGroup_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSequentialAnimationGroupFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSequentialAnimationGroup) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::eventFilter", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::eventFilter")
	}
}

func (ptr *QSequentialAnimationGroup) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSequentialAnimationGroup_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSequentialAnimationGroup) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSequentialAnimationGroup_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSequentialAnimationGroup_MetaObject
func callbackQSequentialAnimationGroup_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSequentialAnimationGroup::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSequentialAnimationGroupFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSequentialAnimationGroup) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::metaObject", f)
	}
}

func (ptr *QSequentialAnimationGroup) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSequentialAnimationGroup::metaObject")
	}
}

func (ptr *QSequentialAnimationGroup) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSequentialAnimationGroup_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSequentialAnimationGroup) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSequentialAnimationGroup_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSequentialIterable struct {
	ptr unsafe.Pointer
}

type QSequentialIterable_ITF interface {
	QSequentialIterable_PTR() *QSequentialIterable
}

func (p *QSequentialIterable) QSequentialIterable_PTR() *QSequentialIterable {
	return p
}

func (p *QSequentialIterable) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSequentialIterable) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSequentialIterable(ptr QSequentialIterable_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSequentialIterable_PTR().Pointer()
	}
	return nil
}

func NewQSequentialIterableFromPointer(ptr unsafe.Pointer) *QSequentialIterable {
	var n = new(QSequentialIterable)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSequentialIterable) DestroyQSequentialIterable() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QSequentialIterable) At(idx int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QSequentialIterable_At(ptr.Pointer(), C.int(int32(idx))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QSequentialIterable) CanReverseIterate() bool {
	if ptr.Pointer() != nil {
		return C.QSequentialIterable_CanReverseIterate(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSequentialIterable) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSequentialIterable_Size(ptr.Pointer())))
	}
	return 0
}

type QSet struct {
	ptr unsafe.Pointer
}

type QSet_ITF interface {
	QSet_PTR() *QSet
}

func (p *QSet) QSet_PTR() *QSet {
	return p
}

func (p *QSet) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSet) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSet(ptr QSet_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSet_PTR().Pointer()
	}
	return nil
}

func NewQSetFromPointer(ptr unsafe.Pointer) *QSet {
	var n = new(QSet)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSet) DestroyQSet() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QSetIterator struct {
	ptr unsafe.Pointer
}

type QSetIterator_ITF interface {
	QSetIterator_PTR() *QSetIterator
}

func (p *QSetIterator) QSetIterator_PTR() *QSetIterator {
	return p
}

func (p *QSetIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSetIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSetIterator(ptr QSetIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSetIterator_PTR().Pointer()
	}
	return nil
}

func NewQSetIteratorFromPointer(ptr unsafe.Pointer) *QSetIterator {
	var n = new(QSetIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSetIterator) DestroyQSetIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QSettings::Format
type QSettings__Format int64

const (
	QSettings__NativeFormat     = QSettings__Format(0)
	QSettings__IniFormat        = QSettings__Format(1)
	QSettings__Registry32Format = QSettings__Format(2)
	QSettings__Registry64Format = QSettings__Format(3)
	QSettings__InvalidFormat    = QSettings__Format(16)
	QSettings__CustomFormat1    = QSettings__Format(17)
	QSettings__CustomFormat2    = QSettings__Format(18)
	QSettings__CustomFormat3    = QSettings__Format(19)
	QSettings__CustomFormat4    = QSettings__Format(20)
	QSettings__CustomFormat5    = QSettings__Format(21)
	QSettings__CustomFormat6    = QSettings__Format(22)
	QSettings__CustomFormat7    = QSettings__Format(23)
	QSettings__CustomFormat8    = QSettings__Format(24)
	QSettings__CustomFormat9    = QSettings__Format(25)
	QSettings__CustomFormat10   = QSettings__Format(26)
	QSettings__CustomFormat11   = QSettings__Format(27)
	QSettings__CustomFormat12   = QSettings__Format(28)
	QSettings__CustomFormat13   = QSettings__Format(29)
	QSettings__CustomFormat14   = QSettings__Format(30)
	QSettings__CustomFormat15   = QSettings__Format(31)
	QSettings__CustomFormat16   = QSettings__Format(32)
)

//QSettings::Scope
type QSettings__Scope int64

const (
	QSettings__UserScope   = QSettings__Scope(0)
	QSettings__SystemScope = QSettings__Scope(1)
)

//QSettings::Status
type QSettings__Status int64

const (
	QSettings__NoError     = QSettings__Status(0)
	QSettings__AccessError = QSettings__Status(1)
	QSettings__FormatError = QSettings__Status(2)
)

type QSettings struct {
	QObject
}

type QSettings_ITF interface {
	QObject_ITF
	QSettings_PTR() *QSettings
}

func (p *QSettings) QSettings_PTR() *QSettings {
	return p
}

func (p *QSettings) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSettings) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSettings(ptr QSettings_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSettings_PTR().Pointer()
	}
	return nil
}

func NewQSettingsFromPointer(ptr unsafe.Pointer) *QSettings {
	var n = new(QSettings)
	n.SetPointer(ptr)
	return n
}
func NewQSettings3(format QSettings__Format, scope QSettings__Scope, organization string, application string, parent QObject_ITF) *QSettings {
	var organizationC = C.CString(organization)
	defer C.free(unsafe.Pointer(organizationC))
	var applicationC = C.CString(application)
	defer C.free(unsafe.Pointer(applicationC))
	var tmpValue = NewQSettingsFromPointer(C.QSettings_NewQSettings3(C.longlong(format), C.longlong(scope), organizationC, applicationC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSettings5(parent QObject_ITF) *QSettings {
	var tmpValue = NewQSettingsFromPointer(C.QSettings_NewQSettings5(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSettings2(scope QSettings__Scope, organization string, application string, parent QObject_ITF) *QSettings {
	var organizationC = C.CString(organization)
	defer C.free(unsafe.Pointer(organizationC))
	var applicationC = C.CString(application)
	defer C.free(unsafe.Pointer(applicationC))
	var tmpValue = NewQSettingsFromPointer(C.QSettings_NewQSettings2(C.longlong(scope), organizationC, applicationC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSettings4(fileName string, format QSettings__Format, parent QObject_ITF) *QSettings {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQSettingsFromPointer(C.QSettings_NewQSettings4(fileNameC, C.longlong(format), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSettings(organization string, application string, parent QObject_ITF) *QSettings {
	var organizationC = C.CString(organization)
	defer C.free(unsafe.Pointer(organizationC))
	var applicationC = C.CString(application)
	defer C.free(unsafe.Pointer(applicationC))
	var tmpValue = NewQSettingsFromPointer(C.QSettings_NewQSettings(organizationC, applicationC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QSettings) AllKeys() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSettings_AllKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSettings) ApplicationName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSettings_ApplicationName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSettings) BeginGroup(prefix string) {
	if ptr.Pointer() != nil {
		var prefixC = C.CString(prefix)
		defer C.free(unsafe.Pointer(prefixC))
		C.QSettings_BeginGroup(ptr.Pointer(), prefixC)
	}
}

func (ptr *QSettings) BeginReadArray(prefix string) int {
	if ptr.Pointer() != nil {
		var prefixC = C.CString(prefix)
		defer C.free(unsafe.Pointer(prefixC))
		return int(int32(C.QSettings_BeginReadArray(ptr.Pointer(), prefixC)))
	}
	return 0
}

func (ptr *QSettings) BeginWriteArray(prefix string, size int) {
	if ptr.Pointer() != nil {
		var prefixC = C.CString(prefix)
		defer C.free(unsafe.Pointer(prefixC))
		C.QSettings_BeginWriteArray(ptr.Pointer(), prefixC, C.int(int32(size)))
	}
}

func (ptr *QSettings) ChildGroups() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSettings_ChildGroups(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSettings) ChildKeys() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSettings_ChildKeys(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSettings) Clear() {
	if ptr.Pointer() != nil {
		C.QSettings_Clear(ptr.Pointer())
	}
}

func (ptr *QSettings) Contains(key string) bool {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return C.QSettings_Contains(ptr.Pointer(), keyC) != 0
	}
	return false
}

func QSettings_DefaultFormat() QSettings__Format {
	return QSettings__Format(C.QSettings_QSettings_DefaultFormat())
}

func (ptr *QSettings) DefaultFormat() QSettings__Format {
	return QSettings__Format(C.QSettings_QSettings_DefaultFormat())
}

func (ptr *QSettings) EndArray() {
	if ptr.Pointer() != nil {
		C.QSettings_EndArray(ptr.Pointer())
	}
}

func (ptr *QSettings) EndGroup() {
	if ptr.Pointer() != nil {
		C.QSettings_EndGroup(ptr.Pointer())
	}
}

//export callbackQSettings_Event
func callbackQSettings_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSettingsFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QSettings) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::event", f)
	}
}

func (ptr *QSettings) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::event")
	}
}

func (ptr *QSettings) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSettings_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSettings) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSettings_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSettings) FallbacksEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QSettings_FallbacksEnabled(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSettings) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSettings_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSettings) Format() QSettings__Format {
	if ptr.Pointer() != nil {
		return QSettings__Format(C.QSettings_Format(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSettings) Group() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSettings_Group(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSettings) IniCodec() *QTextCodec {
	if ptr.Pointer() != nil {
		return NewQTextCodecFromPointer(C.QSettings_IniCodec(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSettings) IsWritable() bool {
	if ptr.Pointer() != nil {
		return C.QSettings_IsWritable(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSettings) OrganizationName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSettings_OrganizationName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSettings) Remove(key string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QSettings_Remove(ptr.Pointer(), keyC)
	}
}

func (ptr *QSettings) Scope() QSettings__Scope {
	if ptr.Pointer() != nil {
		return QSettings__Scope(C.QSettings_Scope(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSettings) SetArrayIndex(i int) {
	if ptr.Pointer() != nil {
		C.QSettings_SetArrayIndex(ptr.Pointer(), C.int(int32(i)))
	}
}

func QSettings_SetDefaultFormat(format QSettings__Format) {
	C.QSettings_QSettings_SetDefaultFormat(C.longlong(format))
}

func (ptr *QSettings) SetDefaultFormat(format QSettings__Format) {
	C.QSettings_QSettings_SetDefaultFormat(C.longlong(format))
}

func (ptr *QSettings) SetFallbacksEnabled(b bool) {
	if ptr.Pointer() != nil {
		C.QSettings_SetFallbacksEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QSettings) SetIniCodec(codec QTextCodec_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_SetIniCodec(ptr.Pointer(), PointerFromQTextCodec(codec))
	}
}

func (ptr *QSettings) SetIniCodec2(codecName string) {
	if ptr.Pointer() != nil {
		var codecNameC = C.CString(codecName)
		defer C.free(unsafe.Pointer(codecNameC))
		C.QSettings_SetIniCodec2(ptr.Pointer(), codecNameC)
	}
}

func QSettings_SetPath(format QSettings__Format, scope QSettings__Scope, path string) {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QSettings_QSettings_SetPath(C.longlong(format), C.longlong(scope), pathC)
}

func (ptr *QSettings) SetPath(format QSettings__Format, scope QSettings__Scope, path string) {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	C.QSettings_QSettings_SetPath(C.longlong(format), C.longlong(scope), pathC)
}

func (ptr *QSettings) SetValue(key string, value QVariant_ITF) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QSettings_SetValue(ptr.Pointer(), keyC, PointerFromQVariant(value))
	}
}

func (ptr *QSettings) Status() QSettings__Status {
	if ptr.Pointer() != nil {
		return QSettings__Status(C.QSettings_Status(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSettings) Sync() {
	if ptr.Pointer() != nil {
		C.QSettings_Sync(ptr.Pointer())
	}
}

func (ptr *QSettings) Value(key string, defaultValue QVariant_ITF) *QVariant {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var tmpValue = NewQVariantFromPointer(C.QSettings_Value(ptr.Pointer(), keyC, PointerFromQVariant(defaultValue)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QSettings) DestroyQSettings() {
	if ptr.Pointer() != nil {
		C.QSettings_DestroyQSettings(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSettings_TimerEvent
func callbackQSettings_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSettingsFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSettings) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::timerEvent", f)
	}
}

func (ptr *QSettings) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::timerEvent")
	}
}

func (ptr *QSettings) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSettings) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSettings_ChildEvent
func callbackQSettings_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSettingsFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSettings) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::childEvent", f)
	}
}

func (ptr *QSettings) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::childEvent")
	}
}

func (ptr *QSettings) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSettings) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSettings_ConnectNotify
func callbackQSettings_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSettingsFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSettings) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::connectNotify", f)
	}
}

func (ptr *QSettings) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::connectNotify")
	}
}

func (ptr *QSettings) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSettings) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSettings_CustomEvent
func callbackQSettings_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSettingsFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSettings) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::customEvent", f)
	}
}

func (ptr *QSettings) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::customEvent")
	}
}

func (ptr *QSettings) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSettings) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSettings_DeleteLater
func callbackQSettings_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSettingsFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSettings) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::deleteLater", f)
	}
}

func (ptr *QSettings) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::deleteLater")
	}
}

func (ptr *QSettings) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSettings_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSettings) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSettings_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSettings_DisconnectNotify
func callbackQSettings_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSettingsFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSettings) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::disconnectNotify", f)
	}
}

func (ptr *QSettings) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::disconnectNotify")
	}
}

func (ptr *QSettings) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSettings) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSettings_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSettings_EventFilter
func callbackQSettings_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSettingsFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSettings) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::eventFilter", f)
	}
}

func (ptr *QSettings) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::eventFilter")
	}
}

func (ptr *QSettings) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSettings_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSettings) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSettings_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSettings_MetaObject
func callbackQSettings_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSettings::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSettingsFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSettings) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::metaObject", f)
	}
}

func (ptr *QSettings) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSettings::metaObject")
	}
}

func (ptr *QSettings) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSettings_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSettings) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSettings_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSharedData struct {
	ptr unsafe.Pointer
}

type QSharedData_ITF interface {
	QSharedData_PTR() *QSharedData
}

func (p *QSharedData) QSharedData_PTR() *QSharedData {
	return p
}

func (p *QSharedData) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSharedData) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSharedData(ptr QSharedData_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSharedData_PTR().Pointer()
	}
	return nil
}

func NewQSharedDataFromPointer(ptr unsafe.Pointer) *QSharedData {
	var n = new(QSharedData)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSharedData) DestroyQSharedData() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQSharedData() *QSharedData {
	var tmpValue = NewQSharedDataFromPointer(C.QSharedData_NewQSharedData())
	runtime.SetFinalizer(tmpValue, (*QSharedData).DestroyQSharedData)
	return tmpValue
}

func NewQSharedData2(other QSharedData_ITF) *QSharedData {
	var tmpValue = NewQSharedDataFromPointer(C.QSharedData_NewQSharedData2(PointerFromQSharedData(other)))
	runtime.SetFinalizer(tmpValue, (*QSharedData).DestroyQSharedData)
	return tmpValue
}

type QSharedDataPointer struct {
	ptr unsafe.Pointer
}

type QSharedDataPointer_ITF interface {
	QSharedDataPointer_PTR() *QSharedDataPointer
}

func (p *QSharedDataPointer) QSharedDataPointer_PTR() *QSharedDataPointer {
	return p
}

func (p *QSharedDataPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSharedDataPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSharedDataPointer(ptr QSharedDataPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSharedDataPointer_PTR().Pointer()
	}
	return nil
}

func NewQSharedDataPointerFromPointer(ptr unsafe.Pointer) *QSharedDataPointer {
	var n = new(QSharedDataPointer)
	n.SetPointer(ptr)
	return n
}

//QSharedMemory::AccessMode
type QSharedMemory__AccessMode int64

const (
	QSharedMemory__ReadOnly  = QSharedMemory__AccessMode(0)
	QSharedMemory__ReadWrite = QSharedMemory__AccessMode(1)
)

//QSharedMemory::SharedMemoryError
type QSharedMemory__SharedMemoryError int64

const (
	QSharedMemory__NoError          = QSharedMemory__SharedMemoryError(0)
	QSharedMemory__PermissionDenied = QSharedMemory__SharedMemoryError(1)
	QSharedMemory__InvalidSize      = QSharedMemory__SharedMemoryError(2)
	QSharedMemory__KeyError         = QSharedMemory__SharedMemoryError(3)
	QSharedMemory__AlreadyExists    = QSharedMemory__SharedMemoryError(4)
	QSharedMemory__NotFound         = QSharedMemory__SharedMemoryError(5)
	QSharedMemory__LockError        = QSharedMemory__SharedMemoryError(6)
	QSharedMemory__OutOfResources   = QSharedMemory__SharedMemoryError(7)
	QSharedMemory__UnknownError     = QSharedMemory__SharedMemoryError(8)
)

type QSharedMemory struct {
	QObject
}

type QSharedMemory_ITF interface {
	QObject_ITF
	QSharedMemory_PTR() *QSharedMemory
}

func (p *QSharedMemory) QSharedMemory_PTR() *QSharedMemory {
	return p
}

func (p *QSharedMemory) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSharedMemory) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSharedMemory(ptr QSharedMemory_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSharedMemory_PTR().Pointer()
	}
	return nil
}

func NewQSharedMemoryFromPointer(ptr unsafe.Pointer) *QSharedMemory {
	var n = new(QSharedMemory)
	n.SetPointer(ptr)
	return n
}
func NewQSharedMemory2(parent QObject_ITF) *QSharedMemory {
	var tmpValue = NewQSharedMemoryFromPointer(C.QSharedMemory_NewQSharedMemory2(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSharedMemory(key string, parent QObject_ITF) *QSharedMemory {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	var tmpValue = NewQSharedMemoryFromPointer(C.QSharedMemory_NewQSharedMemory(keyC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QSharedMemory) Attach(mode QSharedMemory__AccessMode) bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_Attach(ptr.Pointer(), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QSharedMemory) ConstData() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QSharedMemory_ConstData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSharedMemory) Create(size int, mode QSharedMemory__AccessMode) bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_Create(ptr.Pointer(), C.int(int32(size)), C.longlong(mode)) != 0
	}
	return false
}

func (ptr *QSharedMemory) Data() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QSharedMemory_Data(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSharedMemory) Data2() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QSharedMemory_Data2(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSharedMemory) Detach() bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_Detach(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSharedMemory) Error() QSharedMemory__SharedMemoryError {
	if ptr.Pointer() != nil {
		return QSharedMemory__SharedMemoryError(C.QSharedMemory_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSharedMemory) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSharedMemory_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSharedMemory) IsAttached() bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_IsAttached(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSharedMemory) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSharedMemory_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSharedMemory) Lock() bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_Lock(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSharedMemory) NativeKey() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSharedMemory_NativeKey(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSharedMemory) SetKey(key string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QSharedMemory_SetKey(ptr.Pointer(), keyC)
	}
}

func (ptr *QSharedMemory) SetNativeKey(key string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QSharedMemory_SetNativeKey(ptr.Pointer(), keyC)
	}
}

func (ptr *QSharedMemory) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSharedMemory_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSharedMemory) Unlock() bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_Unlock(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSharedMemory) DestroyQSharedMemory() {
	if ptr.Pointer() != nil {
		C.QSharedMemory_DestroyQSharedMemory(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSharedMemory_TimerEvent
func callbackQSharedMemory_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSharedMemoryFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSharedMemory) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::timerEvent", f)
	}
}

func (ptr *QSharedMemory) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::timerEvent")
	}
}

func (ptr *QSharedMemory) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSharedMemory) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSharedMemory_ChildEvent
func callbackQSharedMemory_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSharedMemoryFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSharedMemory) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::childEvent", f)
	}
}

func (ptr *QSharedMemory) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::childEvent")
	}
}

func (ptr *QSharedMemory) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSharedMemory) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSharedMemory_ConnectNotify
func callbackQSharedMemory_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSharedMemoryFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSharedMemory) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::connectNotify", f)
	}
}

func (ptr *QSharedMemory) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::connectNotify")
	}
}

func (ptr *QSharedMemory) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSharedMemory) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSharedMemory_CustomEvent
func callbackQSharedMemory_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSharedMemoryFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSharedMemory) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::customEvent", f)
	}
}

func (ptr *QSharedMemory) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::customEvent")
	}
}

func (ptr *QSharedMemory) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSharedMemory) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSharedMemory_DeleteLater
func callbackQSharedMemory_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSharedMemoryFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSharedMemory) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::deleteLater", f)
	}
}

func (ptr *QSharedMemory) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::deleteLater")
	}
}

func (ptr *QSharedMemory) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSharedMemory_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSharedMemory) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSharedMemory_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSharedMemory_DisconnectNotify
func callbackQSharedMemory_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSharedMemoryFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSharedMemory) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::disconnectNotify", f)
	}
}

func (ptr *QSharedMemory) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::disconnectNotify")
	}
}

func (ptr *QSharedMemory) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSharedMemory) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSharedMemory_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSharedMemory_Event
func callbackQSharedMemory_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSharedMemoryFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QSharedMemory) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::event", f)
	}
}

func (ptr *QSharedMemory) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::event")
	}
}

func (ptr *QSharedMemory) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSharedMemory) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSharedMemory_EventFilter
func callbackQSharedMemory_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSharedMemoryFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSharedMemory) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::eventFilter", f)
	}
}

func (ptr *QSharedMemory) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::eventFilter")
	}
}

func (ptr *QSharedMemory) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSharedMemory) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSharedMemory_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSharedMemory_MetaObject
func callbackQSharedMemory_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSharedMemory::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSharedMemoryFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSharedMemory) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::metaObject", f)
	}
}

func (ptr *QSharedMemory) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSharedMemory::metaObject")
	}
}

func (ptr *QSharedMemory) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSharedMemory_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSharedMemory) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSharedMemory_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSharedPointer struct {
	ptr unsafe.Pointer
}

type QSharedPointer_ITF interface {
	QSharedPointer_PTR() *QSharedPointer
}

func (p *QSharedPointer) QSharedPointer_PTR() *QSharedPointer {
	return p
}

func (p *QSharedPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSharedPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSharedPointer(ptr QSharedPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSharedPointer_PTR().Pointer()
	}
	return nil
}

func NewQSharedPointerFromPointer(ptr unsafe.Pointer) *QSharedPointer {
	var n = new(QSharedPointer)
	n.SetPointer(ptr)
	return n
}

type QSignalBlocker struct {
	ptr unsafe.Pointer
}

type QSignalBlocker_ITF interface {
	QSignalBlocker_PTR() *QSignalBlocker
}

func (p *QSignalBlocker) QSignalBlocker_PTR() *QSignalBlocker {
	return p
}

func (p *QSignalBlocker) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSignalBlocker) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSignalBlocker(ptr QSignalBlocker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSignalBlocker_PTR().Pointer()
	}
	return nil
}

func NewQSignalBlockerFromPointer(ptr unsafe.Pointer) *QSignalBlocker {
	var n = new(QSignalBlocker)
	n.SetPointer(ptr)
	return n
}
func NewQSignalBlocker2(object QObject_ITF) *QSignalBlocker {
	var tmpValue = NewQSignalBlockerFromPointer(C.QSignalBlocker_NewQSignalBlocker2(PointerFromQObject(object)))
	runtime.SetFinalizer(tmpValue, (*QSignalBlocker).DestroyQSignalBlocker)
	return tmpValue
}

func NewQSignalBlocker(object QObject_ITF) *QSignalBlocker {
	var tmpValue = NewQSignalBlockerFromPointer(C.QSignalBlocker_NewQSignalBlocker(PointerFromQObject(object)))
	runtime.SetFinalizer(tmpValue, (*QSignalBlocker).DestroyQSignalBlocker)
	return tmpValue
}

func (ptr *QSignalBlocker) Reblock() {
	if ptr.Pointer() != nil {
		C.QSignalBlocker_Reblock(ptr.Pointer())
	}
}

func (ptr *QSignalBlocker) Unblock() {
	if ptr.Pointer() != nil {
		C.QSignalBlocker_Unblock(ptr.Pointer())
	}
}

func (ptr *QSignalBlocker) DestroyQSignalBlocker() {
	if ptr.Pointer() != nil {
		C.QSignalBlocker_DestroyQSignalBlocker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QSignalMapper struct {
	QObject
}

type QSignalMapper_ITF interface {
	QObject_ITF
	QSignalMapper_PTR() *QSignalMapper
}

func (p *QSignalMapper) QSignalMapper_PTR() *QSignalMapper {
	return p
}

func (p *QSignalMapper) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSignalMapper) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSignalMapper(ptr QSignalMapper_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSignalMapper_PTR().Pointer()
	}
	return nil
}

func NewQSignalMapperFromPointer(ptr unsafe.Pointer) *QSignalMapper {
	var n = new(QSignalMapper)
	n.SetPointer(ptr)
	return n
}
func NewQSignalMapper(parent QObject_ITF) *QSignalMapper {
	var tmpValue = NewQSignalMapperFromPointer(C.QSignalMapper_NewQSignalMapper(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQSignalMapper_Map
func callbackQSignalMapper_Map(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::map"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSignalMapper) ConnectMap(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::map", f)
	}
}

func (ptr *QSignalMapper) DisconnectMap() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::map")
	}
}

func (ptr *QSignalMapper) Map() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_Map(ptr.Pointer())
	}
}

//export callbackQSignalMapper_Map2
func callbackQSignalMapper_Map2(ptr unsafe.Pointer, sender unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::map2"); signal != nil {
		signal.(func(*QObject))(NewQObjectFromPointer(sender))
	}

}

func (ptr *QSignalMapper) ConnectMap2(f func(sender *QObject)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::map2", f)
	}
}

func (ptr *QSignalMapper) DisconnectMap2(sender QObject_ITF) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::map2")
	}
}

func (ptr *QSignalMapper) Map2(sender QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_Map2(ptr.Pointer(), PointerFromQObject(sender))
	}
}

//export callbackQSignalMapper_Mapped4
func callbackQSignalMapper_Mapped4(ptr unsafe.Pointer, object unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::mapped4"); signal != nil {
		signal.(func(*QObject))(NewQObjectFromPointer(object))
	}

}

func (ptr *QSignalMapper) ConnectMapped4(f func(object *QObject)) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ConnectMapped4(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped4", f)
	}
}

func (ptr *QSignalMapper) DisconnectMapped4() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DisconnectMapped4(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped4")
	}
}

func (ptr *QSignalMapper) Mapped4(object QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_Mapped4(ptr.Pointer(), PointerFromQObject(object))
	}
}

//export callbackQSignalMapper_Mapped3
func callbackQSignalMapper_Mapped3(ptr unsafe.Pointer, widget unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::mapped3"); signal != nil {
		signal.(func(unsafe.Pointer))(unsafe.Pointer(widget))
	}

}

func (ptr *QSignalMapper) ConnectMapped3(f func(widget unsafe.Pointer)) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ConnectMapped3(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped3", f)
	}
}

func (ptr *QSignalMapper) DisconnectMapped3() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DisconnectMapped3(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped3")
	}
}

func (ptr *QSignalMapper) Mapped3(widget unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_Mapped3(ptr.Pointer(), widget)
	}
}

//export callbackQSignalMapper_Mapped2
func callbackQSignalMapper_Mapped2(ptr unsafe.Pointer, text C.struct_QtCore_PackedString) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::mapped2"); signal != nil {
		signal.(func(string))(cGoUnpackString(text))
	}

}

func (ptr *QSignalMapper) ConnectMapped2(f func(text string)) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ConnectMapped2(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped2", f)
	}
}

func (ptr *QSignalMapper) DisconnectMapped2() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DisconnectMapped2(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped2")
	}
}

func (ptr *QSignalMapper) Mapped2(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QSignalMapper_Mapped2(ptr.Pointer(), textC)
	}
}

//export callbackQSignalMapper_Mapped
func callbackQSignalMapper_Mapped(ptr unsafe.Pointer, i C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::mapped"); signal != nil {
		signal.(func(int))(int(int32(i)))
	}

}

func (ptr *QSignalMapper) ConnectMapped(f func(i int)) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ConnectMapped(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped", f)
	}
}

func (ptr *QSignalMapper) DisconnectMapped() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DisconnectMapped(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::mapped")
	}
}

func (ptr *QSignalMapper) Mapped(i int) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_Mapped(ptr.Pointer(), C.int(int32(i)))
	}
}

func (ptr *QSignalMapper) Mapping4(object QObject_ITF) *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QSignalMapper_Mapping4(ptr.Pointer(), PointerFromQObject(object)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSignalMapper) Mapping3(widget unsafe.Pointer) *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QSignalMapper_Mapping3(ptr.Pointer(), widget))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSignalMapper) Mapping2(id string) *QObject {
	if ptr.Pointer() != nil {
		var idC = C.CString(id)
		defer C.free(unsafe.Pointer(idC))
		var tmpValue = NewQObjectFromPointer(C.QSignalMapper_Mapping2(ptr.Pointer(), idC))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSignalMapper) Mapping(id int) *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QSignalMapper_Mapping(ptr.Pointer(), C.int(int32(id))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QSignalMapper) RemoveMappings(sender QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_RemoveMappings(ptr.Pointer(), PointerFromQObject(sender))
	}
}

func (ptr *QSignalMapper) SetMapping4(sender QObject_ITF, object QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_SetMapping4(ptr.Pointer(), PointerFromQObject(sender), PointerFromQObject(object))
	}
}

func (ptr *QSignalMapper) SetMapping3(sender QObject_ITF, widget unsafe.Pointer) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_SetMapping3(ptr.Pointer(), PointerFromQObject(sender), widget)
	}
}

func (ptr *QSignalMapper) SetMapping2(sender QObject_ITF, text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QSignalMapper_SetMapping2(ptr.Pointer(), PointerFromQObject(sender), textC)
	}
}

func (ptr *QSignalMapper) SetMapping(sender QObject_ITF, id int) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_SetMapping(ptr.Pointer(), PointerFromQObject(sender), C.int(int32(id)))
	}
}

func (ptr *QSignalMapper) DestroyQSignalMapper() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DestroyQSignalMapper(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSignalMapper_TimerEvent
func callbackQSignalMapper_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSignalMapperFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSignalMapper) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::timerEvent", f)
	}
}

func (ptr *QSignalMapper) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::timerEvent")
	}
}

func (ptr *QSignalMapper) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSignalMapper) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSignalMapper_ChildEvent
func callbackQSignalMapper_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSignalMapperFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSignalMapper) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::childEvent", f)
	}
}

func (ptr *QSignalMapper) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::childEvent")
	}
}

func (ptr *QSignalMapper) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSignalMapper) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSignalMapper_ConnectNotify
func callbackQSignalMapper_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSignalMapperFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSignalMapper) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::connectNotify", f)
	}
}

func (ptr *QSignalMapper) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::connectNotify")
	}
}

func (ptr *QSignalMapper) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSignalMapper) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSignalMapper_CustomEvent
func callbackQSignalMapper_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSignalMapperFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSignalMapper) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::customEvent", f)
	}
}

func (ptr *QSignalMapper) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::customEvent")
	}
}

func (ptr *QSignalMapper) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSignalMapper) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSignalMapper_DeleteLater
func callbackQSignalMapper_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSignalMapperFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSignalMapper) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::deleteLater", f)
	}
}

func (ptr *QSignalMapper) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::deleteLater")
	}
}

func (ptr *QSignalMapper) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSignalMapper) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSignalMapper_DisconnectNotify
func callbackQSignalMapper_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSignalMapperFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSignalMapper) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::disconnectNotify", f)
	}
}

func (ptr *QSignalMapper) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::disconnectNotify")
	}
}

func (ptr *QSignalMapper) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSignalMapper) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalMapper_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSignalMapper_Event
func callbackQSignalMapper_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSignalMapperFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QSignalMapper) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::event", f)
	}
}

func (ptr *QSignalMapper) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::event")
	}
}

func (ptr *QSignalMapper) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalMapper_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSignalMapper) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalMapper_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSignalMapper_EventFilter
func callbackQSignalMapper_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSignalMapperFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSignalMapper) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::eventFilter", f)
	}
}

func (ptr *QSignalMapper) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::eventFilter")
	}
}

func (ptr *QSignalMapper) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalMapper_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSignalMapper) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalMapper_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSignalMapper_MetaObject
func callbackQSignalMapper_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalMapper::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSignalMapperFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSignalMapper) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::metaObject", f)
	}
}

func (ptr *QSignalMapper) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalMapper::metaObject")
	}
}

func (ptr *QSignalMapper) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSignalMapper_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSignalMapper) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSignalMapper_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSignalTransition struct {
	QAbstractTransition
}

type QSignalTransition_ITF interface {
	QAbstractTransition_ITF
	QSignalTransition_PTR() *QSignalTransition
}

func (p *QSignalTransition) QSignalTransition_PTR() *QSignalTransition {
	return p
}

func (p *QSignalTransition) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractTransition_PTR().Pointer()
	}
	return nil
}

func (p *QSignalTransition) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractTransition_PTR().SetPointer(ptr)
	}
}

func PointerFromQSignalTransition(ptr QSignalTransition_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSignalTransition_PTR().Pointer()
	}
	return nil
}

func NewQSignalTransitionFromPointer(ptr unsafe.Pointer) *QSignalTransition {
	var n = new(QSignalTransition)
	n.SetPointer(ptr)
	return n
}
func NewQSignalTransition(sourceState QState_ITF) *QSignalTransition {
	var tmpValue = NewQSignalTransitionFromPointer(C.QSignalTransition_NewQSignalTransition(PointerFromQState(sourceState)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQSignalTransition2(sender QObject_ITF, sign string, sourceState QState_ITF) *QSignalTransition {
	var signC = C.CString(sign)
	defer C.free(unsafe.Pointer(signC))
	var tmpValue = NewQSignalTransitionFromPointer(C.QSignalTransition_NewQSignalTransition2(PointerFromQObject(sender), signC, PointerFromQState(sourceState)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQSignalTransition_Event
func callbackQSignalTransition_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSignalTransitionFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QSignalTransition) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::event", f)
	}
}

func (ptr *QSignalTransition) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::event")
	}
}

func (ptr *QSignalTransition) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalTransition_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSignalTransition) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalTransition_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSignalTransition_EventTest
func callbackQSignalTransition_EventTest(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::eventTest"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSignalTransitionFromPointer(ptr).EventTestDefault(NewQEventFromPointer(event)))))
}

func (ptr *QSignalTransition) ConnectEventTest(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::eventTest", f)
	}
}

func (ptr *QSignalTransition) DisconnectEventTest() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::eventTest")
	}
}

func (ptr *QSignalTransition) EventTest(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalTransition_EventTest(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSignalTransition) EventTestDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalTransition_EventTestDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSignalTransition_OnTransition
func callbackQSignalTransition_OnTransition(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::onTransition"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSignalTransitionFromPointer(ptr).OnTransitionDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSignalTransition) ConnectOnTransition(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::onTransition", f)
	}
}

func (ptr *QSignalTransition) DisconnectOnTransition() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::onTransition")
	}
}

func (ptr *QSignalTransition) OnTransition(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_OnTransition(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSignalTransition) OnTransitionDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_OnTransitionDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSignalTransition) SenderObject() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QSignalTransition_SenderObject(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQSignalTransition_SenderObjectChanged
func callbackQSignalTransition_SenderObjectChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::senderObjectChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSignalTransition) ConnectSenderObjectChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_ConnectSenderObjectChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::senderObjectChanged", f)
	}
}

func (ptr *QSignalTransition) DisconnectSenderObjectChanged() {
	if ptr.Pointer() != nil {
		C.QSignalTransition_DisconnectSenderObjectChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::senderObjectChanged")
	}
}

func (ptr *QSignalTransition) SetSenderObject(sender QObject_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_SetSenderObject(ptr.Pointer(), PointerFromQObject(sender))
	}
}

func (ptr *QSignalTransition) SetSignal(sign QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_SetSignal(ptr.Pointer(), PointerFromQByteArray(sign))
	}
}

func (ptr *QSignalTransition) Signal() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QSignalTransition_Signal(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

//export callbackQSignalTransition_SignalChanged
func callbackQSignalTransition_SignalChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::signalChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSignalTransition) ConnectSignalChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_ConnectSignalChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::signalChanged", f)
	}
}

func (ptr *QSignalTransition) DisconnectSignalChanged() {
	if ptr.Pointer() != nil {
		C.QSignalTransition_DisconnectSignalChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::signalChanged")
	}
}

func (ptr *QSignalTransition) DestroyQSignalTransition() {
	if ptr.Pointer() != nil {
		C.QSignalTransition_DestroyQSignalTransition(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSignalTransition_TimerEvent
func callbackQSignalTransition_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSignalTransitionFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSignalTransition) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::timerEvent", f)
	}
}

func (ptr *QSignalTransition) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::timerEvent")
	}
}

func (ptr *QSignalTransition) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSignalTransition) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSignalTransition_ChildEvent
func callbackQSignalTransition_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSignalTransitionFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSignalTransition) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::childEvent", f)
	}
}

func (ptr *QSignalTransition) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::childEvent")
	}
}

func (ptr *QSignalTransition) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSignalTransition) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSignalTransition_ConnectNotify
func callbackQSignalTransition_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSignalTransitionFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSignalTransition) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::connectNotify", f)
	}
}

func (ptr *QSignalTransition) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::connectNotify")
	}
}

func (ptr *QSignalTransition) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSignalTransition) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSignalTransition_CustomEvent
func callbackQSignalTransition_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSignalTransitionFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSignalTransition) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::customEvent", f)
	}
}

func (ptr *QSignalTransition) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::customEvent")
	}
}

func (ptr *QSignalTransition) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSignalTransition) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSignalTransition_DeleteLater
func callbackQSignalTransition_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSignalTransitionFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSignalTransition) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::deleteLater", f)
	}
}

func (ptr *QSignalTransition) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::deleteLater")
	}
}

func (ptr *QSignalTransition) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSignalTransition_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSignalTransition) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSignalTransition_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSignalTransition_DisconnectNotify
func callbackQSignalTransition_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSignalTransitionFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSignalTransition) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::disconnectNotify", f)
	}
}

func (ptr *QSignalTransition) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::disconnectNotify")
	}
}

func (ptr *QSignalTransition) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSignalTransition) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSignalTransition_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSignalTransition_EventFilter
func callbackQSignalTransition_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSignalTransitionFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSignalTransition) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::eventFilter", f)
	}
}

func (ptr *QSignalTransition) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::eventFilter")
	}
}

func (ptr *QSignalTransition) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalTransition_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSignalTransition) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSignalTransition_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSignalTransition_MetaObject
func callbackQSignalTransition_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSignalTransition::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSignalTransitionFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSignalTransition) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::metaObject", f)
	}
}

func (ptr *QSignalTransition) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSignalTransition::metaObject")
	}
}

func (ptr *QSignalTransition) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSignalTransition_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSignalTransition) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSignalTransition_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSize struct {
	ptr unsafe.Pointer
}

type QSize_ITF interface {
	QSize_PTR() *QSize
}

func (p *QSize) QSize_PTR() *QSize {
	return p
}

func (p *QSize) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSize) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSize(ptr QSize_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSize_PTR().Pointer()
	}
	return nil
}

func NewQSizeFromPointer(ptr unsafe.Pointer) *QSize {
	var n = new(QSize)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSize) DestroyQSize() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQSize() *QSize {
	var tmpValue = NewQSizeFromPointer(C.QSize_NewQSize())
	runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
	return tmpValue
}

func NewQSize2(width int, height int) *QSize {
	var tmpValue = NewQSizeFromPointer(C.QSize_NewQSize2(C.int(int32(width)), C.int(int32(height))))
	runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
	return tmpValue
}

func (ptr *QSize) BoundedTo(otherSize QSize_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSize_BoundedTo(ptr.Pointer(), PointerFromQSize(otherSize)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSize) ExpandedTo(otherSize QSize_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSize_ExpandedTo(ptr.Pointer(), PointerFromQSize(otherSize)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSize) Height() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSize_Height(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSize) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QSize_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSize) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QSize_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSize) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QSize_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSize) Rheight() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSize_Rheight(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSize) Rwidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSize_Rwidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSize) Scale2(size QSize_ITF, mode Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QSize_Scale2(ptr.Pointer(), PointerFromQSize(size), C.longlong(mode))
	}
}

func (ptr *QSize) Scale(width int, height int, mode Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QSize_Scale(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)), C.longlong(mode))
	}
}

func (ptr *QSize) Scaled2(s QSize_ITF, mode Qt__AspectRatioMode) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSize_Scaled2(ptr.Pointer(), PointerFromQSize(s), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSize) Scaled(width int, height int, mode Qt__AspectRatioMode) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSize_Scaled(ptr.Pointer(), C.int(int32(width)), C.int(int32(height)), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSize) SetHeight(height int) {
	if ptr.Pointer() != nil {
		C.QSize_SetHeight(ptr.Pointer(), C.int(int32(height)))
	}
}

func (ptr *QSize) SetWidth(width int) {
	if ptr.Pointer() != nil {
		C.QSize_SetWidth(ptr.Pointer(), C.int(int32(width)))
	}
}

func (ptr *QSize) Transpose() {
	if ptr.Pointer() != nil {
		C.QSize_Transpose(ptr.Pointer())
	}
}

func (ptr *QSize) Transposed() *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSize_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSize) Width() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSize_Width(ptr.Pointer())))
	}
	return 0
}

type QSizeF struct {
	ptr unsafe.Pointer
}

type QSizeF_ITF interface {
	QSizeF_PTR() *QSizeF
}

func (p *QSizeF) QSizeF_PTR() *QSizeF {
	return p
}

func (p *QSizeF) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSizeF) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSizeF(ptr QSizeF_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSizeF_PTR().Pointer()
	}
	return nil
}

func NewQSizeFFromPointer(ptr unsafe.Pointer) *QSizeF {
	var n = new(QSizeF)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSizeF) DestroyQSizeF() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQSizeF() *QSizeF {
	var tmpValue = NewQSizeFFromPointer(C.QSizeF_NewQSizeF())
	runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
	return tmpValue
}

func NewQSizeF2(size QSize_ITF) *QSizeF {
	var tmpValue = NewQSizeFFromPointer(C.QSizeF_NewQSizeF2(PointerFromQSize(size)))
	runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
	return tmpValue
}

func NewQSizeF3(width float64, height float64) *QSizeF {
	var tmpValue = NewQSizeFFromPointer(C.QSizeF_NewQSizeF3(C.double(width), C.double(height)))
	runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
	return tmpValue
}

func (ptr *QSizeF) BoundedTo(otherSize QSizeF_ITF) *QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFFromPointer(C.QSizeF_BoundedTo(ptr.Pointer(), PointerFromQSizeF(otherSize)))
		runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QSizeF) ExpandedTo(otherSize QSizeF_ITF) *QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFFromPointer(C.QSizeF_ExpandedTo(ptr.Pointer(), PointerFromQSizeF(otherSize)))
		runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QSizeF) Height() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QSizeF_Height(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSizeF) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QSizeF_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSizeF) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QSizeF_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSizeF) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QSizeF_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSizeF) Rheight() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QSizeF_Rheight(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSizeF) Rwidth() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QSizeF_Rwidth(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSizeF) Scale2(size QSizeF_ITF, mode Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QSizeF_Scale2(ptr.Pointer(), PointerFromQSizeF(size), C.longlong(mode))
	}
}

func (ptr *QSizeF) Scale(width float64, height float64, mode Qt__AspectRatioMode) {
	if ptr.Pointer() != nil {
		C.QSizeF_Scale(ptr.Pointer(), C.double(width), C.double(height), C.longlong(mode))
	}
}

func (ptr *QSizeF) Scaled2(s QSizeF_ITF, mode Qt__AspectRatioMode) *QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFFromPointer(C.QSizeF_Scaled2(ptr.Pointer(), PointerFromQSizeF(s), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QSizeF) Scaled(width float64, height float64, mode Qt__AspectRatioMode) *QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFFromPointer(C.QSizeF_Scaled(ptr.Pointer(), C.double(width), C.double(height), C.longlong(mode)))
		runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QSizeF) SetHeight(height float64) {
	if ptr.Pointer() != nil {
		C.QSizeF_SetHeight(ptr.Pointer(), C.double(height))
	}
}

func (ptr *QSizeF) SetWidth(width float64) {
	if ptr.Pointer() != nil {
		C.QSizeF_SetWidth(ptr.Pointer(), C.double(width))
	}
}

func (ptr *QSizeF) ToSize() *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSizeF_ToSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSizeF) Transpose() {
	if ptr.Pointer() != nil {
		C.QSizeF_Transpose(ptr.Pointer())
	}
}

func (ptr *QSizeF) Transposed() *QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFFromPointer(C.QSizeF_Transposed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QSizeF) Width() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QSizeF_Width(ptr.Pointer()))
	}
	return 0
}

//QSocketNotifier::Type
type QSocketNotifier__Type int64

const (
	QSocketNotifier__Read      = QSocketNotifier__Type(0)
	QSocketNotifier__Write     = QSocketNotifier__Type(1)
	QSocketNotifier__Exception = QSocketNotifier__Type(2)
)

type QSocketNotifier struct {
	QObject
}

type QSocketNotifier_ITF interface {
	QObject_ITF
	QSocketNotifier_PTR() *QSocketNotifier
}

func (p *QSocketNotifier) QSocketNotifier_PTR() *QSocketNotifier {
	return p
}

func (p *QSocketNotifier) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QSocketNotifier) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQSocketNotifier(ptr QSocketNotifier_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSocketNotifier_PTR().Pointer()
	}
	return nil
}

func NewQSocketNotifierFromPointer(ptr unsafe.Pointer) *QSocketNotifier {
	var n = new(QSocketNotifier)
	n.SetPointer(ptr)
	return n
}

//export callbackQSocketNotifier_Activated
func callbackQSocketNotifier_Activated(ptr unsafe.Pointer, socket C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::activated"); signal != nil {
		signal.(func(int))(int(int32(socket)))
	}

}

func (ptr *QSocketNotifier) ConnectActivated(f func(socket int)) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_ConnectActivated(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::activated", f)
	}
}

func (ptr *QSocketNotifier) DisconnectActivated() {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_DisconnectActivated(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::activated")
	}
}

//export callbackQSocketNotifier_Event
func callbackQSocketNotifier_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSocketNotifierFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QSocketNotifier) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::event", f)
	}
}

func (ptr *QSocketNotifier) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::event")
	}
}

func (ptr *QSocketNotifier) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSocketNotifier_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSocketNotifier) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSocketNotifier_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSocketNotifier) IsEnabled() bool {
	if ptr.Pointer() != nil {
		return C.QSocketNotifier_IsEnabled(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSocketNotifier_SetEnabled
func callbackQSocketNotifier_SetEnabled(ptr unsafe.Pointer, enable C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::setEnabled"); signal != nil {
		signal.(func(bool))(int8(enable) != 0)
	}

}

func (ptr *QSocketNotifier) ConnectSetEnabled(f func(enable bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::setEnabled", f)
	}
}

func (ptr *QSocketNotifier) DisconnectSetEnabled(enable bool) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::setEnabled")
	}
}

func (ptr *QSocketNotifier) SetEnabled(enable bool) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_SetEnabled(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QSocketNotifier) Type() QSocketNotifier__Type {
	if ptr.Pointer() != nil {
		return QSocketNotifier__Type(C.QSocketNotifier_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSocketNotifier) DestroyQSocketNotifier() {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_DestroyQSocketNotifier(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSocketNotifier_TimerEvent
func callbackQSocketNotifier_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSocketNotifierFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSocketNotifier) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::timerEvent", f)
	}
}

func (ptr *QSocketNotifier) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::timerEvent")
	}
}

func (ptr *QSocketNotifier) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSocketNotifier) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSocketNotifier_ChildEvent
func callbackQSocketNotifier_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSocketNotifierFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSocketNotifier) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::childEvent", f)
	}
}

func (ptr *QSocketNotifier) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::childEvent")
	}
}

func (ptr *QSocketNotifier) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSocketNotifier) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSocketNotifier_ConnectNotify
func callbackQSocketNotifier_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSocketNotifierFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSocketNotifier) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::connectNotify", f)
	}
}

func (ptr *QSocketNotifier) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::connectNotify")
	}
}

func (ptr *QSocketNotifier) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSocketNotifier) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSocketNotifier_CustomEvent
func callbackQSocketNotifier_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSocketNotifierFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSocketNotifier) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::customEvent", f)
	}
}

func (ptr *QSocketNotifier) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::customEvent")
	}
}

func (ptr *QSocketNotifier) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSocketNotifier) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSocketNotifier_DeleteLater
func callbackQSocketNotifier_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSocketNotifierFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSocketNotifier) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::deleteLater", f)
	}
}

func (ptr *QSocketNotifier) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::deleteLater")
	}
}

func (ptr *QSocketNotifier) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSocketNotifier) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSocketNotifier_DisconnectNotify
func callbackQSocketNotifier_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSocketNotifierFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSocketNotifier) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::disconnectNotify", f)
	}
}

func (ptr *QSocketNotifier) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::disconnectNotify")
	}
}

func (ptr *QSocketNotifier) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSocketNotifier) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSocketNotifier_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSocketNotifier_EventFilter
func callbackQSocketNotifier_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSocketNotifierFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSocketNotifier) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::eventFilter", f)
	}
}

func (ptr *QSocketNotifier) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::eventFilter")
	}
}

func (ptr *QSocketNotifier) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSocketNotifier_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSocketNotifier) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSocketNotifier_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSocketNotifier_MetaObject
func callbackQSocketNotifier_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSocketNotifier::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSocketNotifierFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSocketNotifier) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::metaObject", f)
	}
}

func (ptr *QSocketNotifier) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSocketNotifier::metaObject")
	}
}

func (ptr *QSocketNotifier) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSocketNotifier_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSocketNotifier) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSocketNotifier_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QSortFilterProxyModel struct {
	QAbstractProxyModel
}

type QSortFilterProxyModel_ITF interface {
	QAbstractProxyModel_ITF
	QSortFilterProxyModel_PTR() *QSortFilterProxyModel
}

func (p *QSortFilterProxyModel) QSortFilterProxyModel_PTR() *QSortFilterProxyModel {
	return p
}

func (p *QSortFilterProxyModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractProxyModel_PTR().Pointer()
	}
	return nil
}

func (p *QSortFilterProxyModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractProxyModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQSortFilterProxyModel(ptr QSortFilterProxyModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSortFilterProxyModel_PTR().Pointer()
	}
	return nil
}

func NewQSortFilterProxyModelFromPointer(ptr unsafe.Pointer) *QSortFilterProxyModel {
	var n = new(QSortFilterProxyModel)
	n.SetPointer(ptr)
	return n
}
func (ptr *QSortFilterProxyModel) DynamicSortFilter() bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_DynamicSortFilter(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) FilterCaseSensitivity() Qt__CaseSensitivity {
	if ptr.Pointer() != nil {
		return Qt__CaseSensitivity(C.QSortFilterProxyModel_FilterCaseSensitivity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) FilterKeyColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_FilterKeyColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) FilterRegExp() *QRegExp {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegExpFromPointer(C.QSortFilterProxyModel_FilterRegExp(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegExp).DestroyQRegExp)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) FilterRole() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_FilterRole(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) IsSortLocaleAware() bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_IsSortLocaleAware(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) SetDynamicSortFilter(enable bool) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetDynamicSortFilter(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QSortFilterProxyModel) SetFilterCaseSensitivity(cs Qt__CaseSensitivity) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetFilterCaseSensitivity(ptr.Pointer(), C.longlong(cs))
	}
}

func (ptr *QSortFilterProxyModel) SetFilterKeyColumn(column int) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetFilterKeyColumn(ptr.Pointer(), C.int(int32(column)))
	}
}

func (ptr *QSortFilterProxyModel) SetFilterRegExp(regExp QRegExp_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetFilterRegExp(ptr.Pointer(), PointerFromQRegExp(regExp))
	}
}

func (ptr *QSortFilterProxyModel) SetFilterRole(role int) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetFilterRole(ptr.Pointer(), C.int(int32(role)))
	}
}

func (ptr *QSortFilterProxyModel) SetSortCaseSensitivity(cs Qt__CaseSensitivity) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetSortCaseSensitivity(ptr.Pointer(), C.longlong(cs))
	}
}

func (ptr *QSortFilterProxyModel) SetSortLocaleAware(on bool) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetSortLocaleAware(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(on))))
	}
}

func (ptr *QSortFilterProxyModel) SetSortRole(role int) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetSortRole(ptr.Pointer(), C.int(int32(role)))
	}
}

func (ptr *QSortFilterProxyModel) SortCaseSensitivity() Qt__CaseSensitivity {
	if ptr.Pointer() != nil {
		return Qt__CaseSensitivity(C.QSortFilterProxyModel_SortCaseSensitivity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) SortRole() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_SortRole(ptr.Pointer())))
	}
	return 0
}

func NewQSortFilterProxyModel(parent QObject_ITF) *QSortFilterProxyModel {
	var tmpValue = NewQSortFilterProxyModelFromPointer(C.QSortFilterProxyModel_NewQSortFilterProxyModel(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQSortFilterProxyModel_Buddy
func callbackQSortFilterProxyModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::buddy"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQSortFilterProxyModelFromPointer(ptr).BuddyDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QSortFilterProxyModel) ConnectBuddy(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::buddy", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::buddy")
	}
}

func (ptr *QSortFilterProxyModel) Buddy(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_Buddy(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) BuddyDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_BuddyDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_CanFetchMore
func callbackQSortFilterProxyModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).CanFetchMoreDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectCanFetchMore(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::canFetchMore", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::canFetchMore")
	}
}

func (ptr *QSortFilterProxyModel) CanFetchMore(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_CanFetchMore(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) CanFetchMoreDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_CanFetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_ColumnCount
func callbackQSortFilterProxyModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::columnCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQSortFilterProxyModelFromPointer(ptr).ColumnCountDefault(NewQModelIndexFromPointer(parent))))
}

func (ptr *QSortFilterProxyModel) ConnectColumnCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::columnCount", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::columnCount")
	}
}

func (ptr *QSortFilterProxyModel) ColumnCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_ColumnCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) ColumnCountDefault(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_ColumnCountDefault(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQSortFilterProxyModel_Data
func callbackQSortFilterProxyModel_Data(ptr unsafe.Pointer, index unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::data"); signal != nil {
		return PointerFromQVariant(signal.(func(*QModelIndex, int) *QVariant)(NewQModelIndexFromPointer(index), int(int32(role))))
	}

	return PointerFromQVariant(NewQSortFilterProxyModelFromPointer(ptr).DataDefault(NewQModelIndexFromPointer(index), int(int32(role))))
}

func (ptr *QSortFilterProxyModel) ConnectData(f func(index *QModelIndex, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::data", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::data")
	}
}

func (ptr *QSortFilterProxyModel) Data(index QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QSortFilterProxyModel_Data(ptr.Pointer(), PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) DataDefault(index QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QSortFilterProxyModel_DataDefault(ptr.Pointer(), PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_DropMimeData
func callbackQSortFilterProxyModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).DropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::dropMimeData", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::dropMimeData")
	}
}

func (ptr *QSortFilterProxyModel) DropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_DropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) DropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_DropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_FetchMore
func callbackQSortFilterProxyModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::fetchMore"); signal != nil {
		signal.(func(*QModelIndex))(NewQModelIndexFromPointer(parent))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).FetchMoreDefault(NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QSortFilterProxyModel) ConnectFetchMore(f func(parent *QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::fetchMore", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::fetchMore")
	}
}

func (ptr *QSortFilterProxyModel) FetchMore(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_FetchMore(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

func (ptr *QSortFilterProxyModel) FetchMoreDefault(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_FetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

//export callbackQSortFilterProxyModel_FilterAcceptsColumn
func callbackQSortFilterProxyModel_FilterAcceptsColumn(ptr unsafe.Pointer, source_column C.int, source_parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::filterAcceptsColumn"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, *QModelIndex) bool)(int(int32(source_column)), NewQModelIndexFromPointer(source_parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).FilterAcceptsColumnDefault(int(int32(source_column)), NewQModelIndexFromPointer(source_parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectFilterAcceptsColumn(f func(source_column int, source_parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::filterAcceptsColumn", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectFilterAcceptsColumn() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::filterAcceptsColumn")
	}
}

func (ptr *QSortFilterProxyModel) FilterAcceptsColumn(source_column int, source_parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_FilterAcceptsColumn(ptr.Pointer(), C.int(int32(source_column)), PointerFromQModelIndex(source_parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) FilterAcceptsColumnDefault(source_column int, source_parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_FilterAcceptsColumnDefault(ptr.Pointer(), C.int(int32(source_column)), PointerFromQModelIndex(source_parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_FilterAcceptsRow
func callbackQSortFilterProxyModel_FilterAcceptsRow(ptr unsafe.Pointer, source_row C.int, source_parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::filterAcceptsRow"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, *QModelIndex) bool)(int(int32(source_row)), NewQModelIndexFromPointer(source_parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).FilterAcceptsRowDefault(int(int32(source_row)), NewQModelIndexFromPointer(source_parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectFilterAcceptsRow(f func(source_row int, source_parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::filterAcceptsRow", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectFilterAcceptsRow() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::filterAcceptsRow")
	}
}

func (ptr *QSortFilterProxyModel) FilterAcceptsRow(source_row int, source_parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_FilterAcceptsRow(ptr.Pointer(), C.int(int32(source_row)), PointerFromQModelIndex(source_parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) FilterAcceptsRowDefault(source_row int, source_parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_FilterAcceptsRowDefault(ptr.Pointer(), C.int(int32(source_row)), PointerFromQModelIndex(source_parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_Flags
func callbackQSortFilterProxyModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::flags"); signal != nil {
		return C.longlong(signal.(func(*QModelIndex) Qt__ItemFlag)(NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQSortFilterProxyModelFromPointer(ptr).FlagsDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QSortFilterProxyModel) ConnectFlags(f func(index *QModelIndex) Qt__ItemFlag) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::flags", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectFlags() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::flags")
	}
}

func (ptr *QSortFilterProxyModel) Flags(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QSortFilterProxyModel_Flags(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) FlagsDefault(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QSortFilterProxyModel_FlagsDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQSortFilterProxyModel_HasChildren
func callbackQSortFilterProxyModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).HasChildrenDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectHasChildren(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::hasChildren", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectHasChildren() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::hasChildren")
	}
}

func (ptr *QSortFilterProxyModel) HasChildren(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_HasChildren(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) HasChildrenDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_HasChildrenDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_HeaderData
func callbackQSortFilterProxyModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::headerData"); signal != nil {
		return PointerFromQVariant(signal.(func(int, Qt__Orientation, int) *QVariant)(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
	}

	return PointerFromQVariant(NewQSortFilterProxyModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QSortFilterProxyModel) ConnectHeaderData(f func(section int, orientation Qt__Orientation, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::headerData", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::headerData")
	}
}

func (ptr *QSortFilterProxyModel) HeaderData(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QSortFilterProxyModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) HeaderDataDefault(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QSortFilterProxyModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_Index
func callbackQSortFilterProxyModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::index"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
	}

	return PointerFromQModelIndex(NewQSortFilterProxyModelFromPointer(ptr).IndexDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
}

func (ptr *QSortFilterProxyModel) ConnectIndex(f func(row int, column int, parent *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::index", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::index")
	}
}

func (ptr *QSortFilterProxyModel) Index(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) IndexDefault(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_IndexDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_InsertColumns
func callbackQSortFilterProxyModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectInsertColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::insertColumns", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectInsertColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::insertColumns")
	}
}

func (ptr *QSortFilterProxyModel) InsertColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) InsertColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_InsertRows
func callbackQSortFilterProxyModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectInsertRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::insertRows", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectInsertRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::insertRows")
	}
}

func (ptr *QSortFilterProxyModel) InsertRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) InsertRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_Invalidate
func callbackQSortFilterProxyModel_Invalidate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::invalidate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QSortFilterProxyModel) ConnectInvalidate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::invalidate", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectInvalidate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::invalidate")
	}
}

func (ptr *QSortFilterProxyModel) Invalidate() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_Invalidate(ptr.Pointer())
	}
}

func (ptr *QSortFilterProxyModel) InvalidateFilter() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_InvalidateFilter(ptr.Pointer())
	}
}

//export callbackQSortFilterProxyModel_LessThan
func callbackQSortFilterProxyModel_LessThan(ptr unsafe.Pointer, source_left unsafe.Pointer, source_right unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::lessThan"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QModelIndex) bool)(NewQModelIndexFromPointer(source_left), NewQModelIndexFromPointer(source_right)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).LessThanDefault(NewQModelIndexFromPointer(source_left), NewQModelIndexFromPointer(source_right)))))
}

func (ptr *QSortFilterProxyModel) ConnectLessThan(f func(source_left *QModelIndex, source_right *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::lessThan", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectLessThan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::lessThan")
	}
}

func (ptr *QSortFilterProxyModel) LessThan(source_left QModelIndex_ITF, source_right QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_LessThan(ptr.Pointer(), PointerFromQModelIndex(source_left), PointerFromQModelIndex(source_right)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) LessThanDefault(source_left QModelIndex_ITF, source_right QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_LessThanDefault(ptr.Pointer(), PointerFromQModelIndex(source_left), PointerFromQModelIndex(source_right)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_MapFromSource
func callbackQSortFilterProxyModel_MapFromSource(ptr unsafe.Pointer, sourceIndex unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::mapFromSource"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(sourceIndex)))
	}

	return PointerFromQModelIndex(NewQSortFilterProxyModelFromPointer(ptr).MapFromSourceDefault(NewQModelIndexFromPointer(sourceIndex)))
}

func (ptr *QSortFilterProxyModel) ConnectMapFromSource(f func(sourceIndex *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapFromSource", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMapFromSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapFromSource")
	}
}

func (ptr *QSortFilterProxyModel) MapFromSource(sourceIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_MapFromSource(ptr.Pointer(), PointerFromQModelIndex(sourceIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) MapFromSourceDefault(sourceIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_MapFromSourceDefault(ptr.Pointer(), PointerFromQModelIndex(sourceIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_MapSelectionFromSource
func callbackQSortFilterProxyModel_MapSelectionFromSource(ptr unsafe.Pointer, sourceSelection unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::mapSelectionFromSource"); signal != nil {
		return PointerFromQItemSelection(signal.(func(*QItemSelection) *QItemSelection)(NewQItemSelectionFromPointer(sourceSelection)))
	}

	return PointerFromQItemSelection(NewQSortFilterProxyModelFromPointer(ptr).MapSelectionFromSourceDefault(NewQItemSelectionFromPointer(sourceSelection)))
}

func (ptr *QSortFilterProxyModel) ConnectMapSelectionFromSource(f func(sourceSelection *QItemSelection) *QItemSelection) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapSelectionFromSource", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMapSelectionFromSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapSelectionFromSource")
	}
}

func (ptr *QSortFilterProxyModel) MapSelectionFromSource(sourceSelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QSortFilterProxyModel_MapSelectionFromSource(ptr.Pointer(), PointerFromQItemSelection(sourceSelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) MapSelectionFromSourceDefault(sourceSelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QSortFilterProxyModel_MapSelectionFromSourceDefault(ptr.Pointer(), PointerFromQItemSelection(sourceSelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_MapSelectionToSource
func callbackQSortFilterProxyModel_MapSelectionToSource(ptr unsafe.Pointer, proxySelection unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::mapSelectionToSource"); signal != nil {
		return PointerFromQItemSelection(signal.(func(*QItemSelection) *QItemSelection)(NewQItemSelectionFromPointer(proxySelection)))
	}

	return PointerFromQItemSelection(NewQSortFilterProxyModelFromPointer(ptr).MapSelectionToSourceDefault(NewQItemSelectionFromPointer(proxySelection)))
}

func (ptr *QSortFilterProxyModel) ConnectMapSelectionToSource(f func(proxySelection *QItemSelection) *QItemSelection) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapSelectionToSource", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMapSelectionToSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapSelectionToSource")
	}
}

func (ptr *QSortFilterProxyModel) MapSelectionToSource(proxySelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QSortFilterProxyModel_MapSelectionToSource(ptr.Pointer(), PointerFromQItemSelection(proxySelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) MapSelectionToSourceDefault(proxySelection QItemSelection_ITF) *QItemSelection {
	if ptr.Pointer() != nil {
		var tmpValue = NewQItemSelectionFromPointer(C.QSortFilterProxyModel_MapSelectionToSourceDefault(ptr.Pointer(), PointerFromQItemSelection(proxySelection)))
		runtime.SetFinalizer(tmpValue, (*QItemSelection).DestroyQItemSelection)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_MapToSource
func callbackQSortFilterProxyModel_MapToSource(ptr unsafe.Pointer, proxyIndex unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::mapToSource"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(proxyIndex)))
	}

	return PointerFromQModelIndex(NewQSortFilterProxyModelFromPointer(ptr).MapToSourceDefault(NewQModelIndexFromPointer(proxyIndex)))
}

func (ptr *QSortFilterProxyModel) ConnectMapToSource(f func(proxyIndex *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapToSource", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMapToSource() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mapToSource")
	}
}

func (ptr *QSortFilterProxyModel) MapToSource(proxyIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_MapToSource(ptr.Pointer(), PointerFromQModelIndex(proxyIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) MapToSourceDefault(proxyIndex QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_MapToSourceDefault(ptr.Pointer(), PointerFromQModelIndex(proxyIndex)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_MimeTypes
func callbackQSortFilterProxyModel_MimeTypes(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQSortFilterProxyModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QSortFilterProxyModel) ConnectMimeTypes(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mimeTypes", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMimeTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::mimeTypes")
	}
}

func (ptr *QSortFilterProxyModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSortFilterProxyModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QSortFilterProxyModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QSortFilterProxyModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQSortFilterProxyModel_Parent
func callbackQSortFilterProxyModel_Parent(ptr unsafe.Pointer, child unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::parent"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(child)))
	}

	return PointerFromQModelIndex(NewQSortFilterProxyModelFromPointer(ptr).ParentDefault(NewQModelIndexFromPointer(child)))
}

func (ptr *QSortFilterProxyModel) ConnectParent(f func(child *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::parent", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::parent")
	}
}

func (ptr *QSortFilterProxyModel) Parent(child QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_Parent(ptr.Pointer(), PointerFromQModelIndex(child)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) ParentDefault(child QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_ParentDefault(ptr.Pointer(), PointerFromQModelIndex(child)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_RemoveColumns
func callbackQSortFilterProxyModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectRemoveColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::removeColumns", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectRemoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::removeColumns")
	}
}

func (ptr *QSortFilterProxyModel) RemoveColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) RemoveColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_RemoveRows
func callbackQSortFilterProxyModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectRemoveRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::removeRows", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectRemoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::removeRows")
	}
}

func (ptr *QSortFilterProxyModel) RemoveRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) RemoveRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_RowCount
func callbackQSortFilterProxyModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::rowCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQSortFilterProxyModelFromPointer(ptr).RowCountDefault(NewQModelIndexFromPointer(parent))))
}

func (ptr *QSortFilterProxyModel) ConnectRowCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::rowCount", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::rowCount")
	}
}

func (ptr *QSortFilterProxyModel) RowCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_RowCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) RowCountDefault(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_RowCountDefault(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQSortFilterProxyModel_SetData
func callbackQSortFilterProxyModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QVariant, int) bool)(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).SetDataDefault(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QSortFilterProxyModel) ConnectSetData(f func(index *QModelIndex, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setData", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setData")
	}
}

func (ptr *QSortFilterProxyModel) SetData(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_SetData(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) SetDataDefault(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_SetDataDefault(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_SetFilterFixedString
func callbackQSortFilterProxyModel_SetFilterFixedString(ptr unsafe.Pointer, pattern C.struct_QtCore_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::setFilterFixedString"); signal != nil {
		signal.(func(string))(cGoUnpackString(pattern))
	}

}

func (ptr *QSortFilterProxyModel) ConnectSetFilterFixedString(f func(pattern string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setFilterFixedString", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSetFilterFixedString(pattern string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setFilterFixedString")
	}
}

func (ptr *QSortFilterProxyModel) SetFilterFixedString(pattern string) {
	if ptr.Pointer() != nil {
		var patternC = C.CString(pattern)
		defer C.free(unsafe.Pointer(patternC))
		C.QSortFilterProxyModel_SetFilterFixedString(ptr.Pointer(), patternC)
	}
}

//export callbackQSortFilterProxyModel_SetFilterRegExp2
func callbackQSortFilterProxyModel_SetFilterRegExp2(ptr unsafe.Pointer, pattern C.struct_QtCore_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::setFilterRegExp2"); signal != nil {
		signal.(func(string))(cGoUnpackString(pattern))
	}

}

func (ptr *QSortFilterProxyModel) ConnectSetFilterRegExp2(f func(pattern string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setFilterRegExp2", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSetFilterRegExp2(pattern string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setFilterRegExp2")
	}
}

func (ptr *QSortFilterProxyModel) SetFilterRegExp2(pattern string) {
	if ptr.Pointer() != nil {
		var patternC = C.CString(pattern)
		defer C.free(unsafe.Pointer(patternC))
		C.QSortFilterProxyModel_SetFilterRegExp2(ptr.Pointer(), patternC)
	}
}

//export callbackQSortFilterProxyModel_SetFilterWildcard
func callbackQSortFilterProxyModel_SetFilterWildcard(ptr unsafe.Pointer, pattern C.struct_QtCore_PackedString) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::setFilterWildcard"); signal != nil {
		signal.(func(string))(cGoUnpackString(pattern))
	}

}

func (ptr *QSortFilterProxyModel) ConnectSetFilterWildcard(f func(pattern string)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setFilterWildcard", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSetFilterWildcard(pattern string) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setFilterWildcard")
	}
}

func (ptr *QSortFilterProxyModel) SetFilterWildcard(pattern string) {
	if ptr.Pointer() != nil {
		var patternC = C.CString(pattern)
		defer C.free(unsafe.Pointer(patternC))
		C.QSortFilterProxyModel_SetFilterWildcard(ptr.Pointer(), patternC)
	}
}

//export callbackQSortFilterProxyModel_SetHeaderData
func callbackQSortFilterProxyModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, Qt__Orientation, *QVariant, int) bool)(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QSortFilterProxyModel) ConnectSetHeaderData(f func(section int, orientation Qt__Orientation, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setHeaderData", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSetHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setHeaderData")
	}
}

func (ptr *QSortFilterProxyModel) SetHeaderData(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) SetHeaderDataDefault(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_SetSourceModel
func callbackQSortFilterProxyModel_SetSourceModel(ptr unsafe.Pointer, sourceModel unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::setSourceModel"); signal != nil {
		signal.(func(*QAbstractItemModel))(NewQAbstractItemModelFromPointer(sourceModel))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).SetSourceModelDefault(NewQAbstractItemModelFromPointer(sourceModel))
	}
}

func (ptr *QSortFilterProxyModel) ConnectSetSourceModel(f func(sourceModel *QAbstractItemModel)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setSourceModel", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSetSourceModel() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::setSourceModel")
	}
}

func (ptr *QSortFilterProxyModel) SetSourceModel(sourceModel QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetSourceModel(ptr.Pointer(), PointerFromQAbstractItemModel(sourceModel))
	}
}

func (ptr *QSortFilterProxyModel) SetSourceModelDefault(sourceModel QAbstractItemModel_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SetSourceModelDefault(ptr.Pointer(), PointerFromQAbstractItemModel(sourceModel))
	}
}

//export callbackQSortFilterProxyModel_Sibling
func callbackQSortFilterProxyModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::sibling"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
	}

	return PointerFromQModelIndex(NewQSortFilterProxyModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
}

func (ptr *QSortFilterProxyModel) ConnectSibling(f func(row int, column int, idx *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::sibling", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSibling() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::sibling")
	}
}

func (ptr *QSortFilterProxyModel) Sibling(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) SiblingDefault(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_Sort
func callbackQSortFilterProxyModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::sort"); signal != nil {
		signal.(func(int, Qt__SortOrder))(int(int32(column)), Qt__SortOrder(order))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).SortDefault(int(int32(column)), Qt__SortOrder(order))
	}
}

func (ptr *QSortFilterProxyModel) ConnectSort(f func(column int, order Qt__SortOrder)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::sort", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSort() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::sort")
	}
}

func (ptr *QSortFilterProxyModel) Sort(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QSortFilterProxyModel) SortDefault(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QSortFilterProxyModel) SortColumn() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QSortFilterProxyModel_SortColumn(ptr.Pointer())))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) SortOrder() Qt__SortOrder {
	if ptr.Pointer() != nil {
		return Qt__SortOrder(C.QSortFilterProxyModel_SortOrder(ptr.Pointer()))
	}
	return 0
}

//export callbackQSortFilterProxyModel_Span
func callbackQSortFilterProxyModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::span"); signal != nil {
		return PointerFromQSize(signal.(func(*QModelIndex) *QSize)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQSize(NewQSortFilterProxyModelFromPointer(ptr).SpanDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QSortFilterProxyModel) ConnectSpan(f func(index *QModelIndex) *QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::span", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::span")
	}
}

func (ptr *QSortFilterProxyModel) Span(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSortFilterProxyModel_Span(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QSortFilterProxyModel) SpanDefault(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QSortFilterProxyModel_SpanDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_SupportedDropActions
func callbackQSortFilterProxyModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQSortFilterProxyModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QSortFilterProxyModel) ConnectSupportedDropActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::supportedDropActions", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSupportedDropActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::supportedDropActions")
	}
}

func (ptr *QSortFilterProxyModel) SupportedDropActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QSortFilterProxyModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) SupportedDropActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QSortFilterProxyModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) DestroyQSortFilterProxyModel() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_DestroyQSortFilterProxyModel(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSortFilterProxyModel) match_atList(i int) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QSortFilterProxyModel_match_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQSortFilterProxyModel_CanDropMimeData
func callbackQSortFilterProxyModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).CanDropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QSortFilterProxyModel) ConnectCanDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::canDropMimeData", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::canDropMimeData")
	}
}

func (ptr *QSortFilterProxyModel) CanDropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_CanDropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) CanDropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_CanDropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_ResetInternalData
func callbackQSortFilterProxyModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::resetInternalData"); signal != nil {
		signal.(func())()
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).ResetInternalDataDefault()
	}
}

func (ptr *QSortFilterProxyModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::resetInternalData", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::resetInternalData")
	}
}

func (ptr *QSortFilterProxyModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_ResetInternalData(ptr.Pointer())
	}
}

func (ptr *QSortFilterProxyModel) ResetInternalDataDefault() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_ResetInternalDataDefault(ptr.Pointer())
	}
}

//export callbackQSortFilterProxyModel_Revert
func callbackQSortFilterProxyModel_Revert(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QSortFilterProxyModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::revert", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::revert")
	}
}

func (ptr *QSortFilterProxyModel) Revert() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_Revert(ptr.Pointer())
	}
}

func (ptr *QSortFilterProxyModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQSortFilterProxyModel_Submit
func callbackQSortFilterProxyModel_Submit(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QSortFilterProxyModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::submit", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::submit")
	}
}

func (ptr *QSortFilterProxyModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_SupportedDragActions
func callbackQSortFilterProxyModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQSortFilterProxyModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QSortFilterProxyModel) ConnectSupportedDragActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::supportedDragActions", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::supportedDragActions")
	}
}

func (ptr *QSortFilterProxyModel) SupportedDragActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QSortFilterProxyModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSortFilterProxyModel) SupportedDragActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QSortFilterProxyModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQSortFilterProxyModel_MoveColumns
func callbackQSortFilterProxyModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).MoveColumnsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QSortFilterProxyModel) ConnectMoveColumns(f func(sourceParent *QModelIndex, sourceColumn int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::moveColumns", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::moveColumns")
	}
}

func (ptr *QSortFilterProxyModel) MoveColumns(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_MoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) MoveColumnsDefault(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_MoveColumnsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_MoveRows
func callbackQSortFilterProxyModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).MoveRowsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QSortFilterProxyModel) ConnectMoveRows(f func(sourceParent *QModelIndex, sourceRow int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::moveRows", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::moveRows")
	}
}

func (ptr *QSortFilterProxyModel) MoveRows(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_MoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) MoveRowsDefault(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_MoveRowsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_TimerEvent
func callbackQSortFilterProxyModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QSortFilterProxyModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::timerEvent", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::timerEvent")
	}
}

func (ptr *QSortFilterProxyModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QSortFilterProxyModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQSortFilterProxyModel_ChildEvent
func callbackQSortFilterProxyModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QSortFilterProxyModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::childEvent", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::childEvent")
	}
}

func (ptr *QSortFilterProxyModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QSortFilterProxyModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQSortFilterProxyModel_ConnectNotify
func callbackQSortFilterProxyModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSortFilterProxyModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::connectNotify", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::connectNotify")
	}
}

func (ptr *QSortFilterProxyModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSortFilterProxyModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSortFilterProxyModel_CustomEvent
func callbackQSortFilterProxyModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QSortFilterProxyModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::customEvent", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::customEvent")
	}
}

func (ptr *QSortFilterProxyModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QSortFilterProxyModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQSortFilterProxyModel_DeleteLater
func callbackQSortFilterProxyModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QSortFilterProxyModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::deleteLater", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::deleteLater")
	}
}

func (ptr *QSortFilterProxyModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QSortFilterProxyModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQSortFilterProxyModel_DisconnectNotify
func callbackQSortFilterProxyModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQSortFilterProxyModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QSortFilterProxyModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::disconnectNotify", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::disconnectNotify")
	}
}

func (ptr *QSortFilterProxyModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QSortFilterProxyModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QSortFilterProxyModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQSortFilterProxyModel_Event
func callbackQSortFilterProxyModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QSortFilterProxyModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::event", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::event")
	}
}

func (ptr *QSortFilterProxyModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_EventFilter
func callbackQSortFilterProxyModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQSortFilterProxyModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QSortFilterProxyModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::eventFilter", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::eventFilter")
	}
}

func (ptr *QSortFilterProxyModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QSortFilterProxyModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QSortFilterProxyModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQSortFilterProxyModel_MetaObject
func callbackQSortFilterProxyModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QSortFilterProxyModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQSortFilterProxyModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QSortFilterProxyModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::metaObject", f)
	}
}

func (ptr *QSortFilterProxyModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QSortFilterProxyModel::metaObject")
	}
}

func (ptr *QSortFilterProxyModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSortFilterProxyModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QSortFilterProxyModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QSortFilterProxyModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QStack struct {
	QVector
}

type QStack_ITF interface {
	QVector_ITF
	QStack_PTR() *QStack
}

func (p *QStack) QStack_PTR() *QStack {
	return p
}

func (p *QStack) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVector_PTR().Pointer()
	}
	return nil
}

func (p *QStack) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVector_PTR().SetPointer(ptr)
	}
}

func PointerFromQStack(ptr QStack_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStack_PTR().Pointer()
	}
	return nil
}

func NewQStackFromPointer(ptr unsafe.Pointer) *QStack {
	var n = new(QStack)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStack) DestroyQStack() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QStandardPaths::LocateOption
type QStandardPaths__LocateOption int64

const (
	QStandardPaths__LocateFile      = QStandardPaths__LocateOption(0x0)
	QStandardPaths__LocateDirectory = QStandardPaths__LocateOption(0x1)
)

//QStandardPaths::StandardLocation
type QStandardPaths__StandardLocation int64

const (
	QStandardPaths__DesktopLocation       = QStandardPaths__StandardLocation(0)
	QStandardPaths__DocumentsLocation     = QStandardPaths__StandardLocation(1)
	QStandardPaths__FontsLocation         = QStandardPaths__StandardLocation(2)
	QStandardPaths__ApplicationsLocation  = QStandardPaths__StandardLocation(3)
	QStandardPaths__MusicLocation         = QStandardPaths__StandardLocation(4)
	QStandardPaths__MoviesLocation        = QStandardPaths__StandardLocation(5)
	QStandardPaths__PicturesLocation      = QStandardPaths__StandardLocation(6)
	QStandardPaths__TempLocation          = QStandardPaths__StandardLocation(7)
	QStandardPaths__HomeLocation          = QStandardPaths__StandardLocation(8)
	QStandardPaths__DataLocation          = QStandardPaths__StandardLocation(9)
	QStandardPaths__CacheLocation         = QStandardPaths__StandardLocation(10)
	QStandardPaths__GenericDataLocation   = QStandardPaths__StandardLocation(11)
	QStandardPaths__RuntimeLocation       = QStandardPaths__StandardLocation(12)
	QStandardPaths__ConfigLocation        = QStandardPaths__StandardLocation(13)
	QStandardPaths__DownloadLocation      = QStandardPaths__StandardLocation(14)
	QStandardPaths__GenericCacheLocation  = QStandardPaths__StandardLocation(15)
	QStandardPaths__GenericConfigLocation = QStandardPaths__StandardLocation(16)
	QStandardPaths__AppDataLocation       = QStandardPaths__StandardLocation(17)
	QStandardPaths__AppConfigLocation     = QStandardPaths__StandardLocation(18)
	QStandardPaths__AppLocalDataLocation  = QStandardPaths__StandardLocation(QStandardPaths__DataLocation)
)

type QStandardPaths struct {
	ptr unsafe.Pointer
}

type QStandardPaths_ITF interface {
	QStandardPaths_PTR() *QStandardPaths
}

func (p *QStandardPaths) QStandardPaths_PTR() *QStandardPaths {
	return p
}

func (p *QStandardPaths) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStandardPaths) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStandardPaths(ptr QStandardPaths_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStandardPaths_PTR().Pointer()
	}
	return nil
}

func NewQStandardPathsFromPointer(ptr unsafe.Pointer) *QStandardPaths {
	var n = new(QStandardPaths)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStandardPaths) DestroyQStandardPaths() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QStandardPaths_SetTestModeEnabled(testMode bool) {
	C.QStandardPaths_QStandardPaths_SetTestModeEnabled(C.char(int8(qt.GoBoolToInt(testMode))))
}

func (ptr *QStandardPaths) SetTestModeEnabled(testMode bool) {
	C.QStandardPaths_QStandardPaths_SetTestModeEnabled(C.char(int8(qt.GoBoolToInt(testMode))))
}

func QStandardPaths_FindExecutable(executableName string, paths []string) string {
	var executableNameC = C.CString(executableName)
	defer C.free(unsafe.Pointer(executableNameC))
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_FindExecutable(executableNameC, pathsC))
}

func (ptr *QStandardPaths) FindExecutable(executableName string, paths []string) string {
	var executableNameC = C.CString(executableName)
	defer C.free(unsafe.Pointer(executableNameC))
	var pathsC = C.CString(strings.Join(paths, "|"))
	defer C.free(unsafe.Pointer(pathsC))
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_FindExecutable(executableNameC, pathsC))
}

func QStandardPaths_Locate(ty QStandardPaths__StandardLocation, fileName string, options QStandardPaths__LocateOption) string {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_Locate(C.longlong(ty), fileNameC, C.longlong(options)))
}

func (ptr *QStandardPaths) Locate(ty QStandardPaths__StandardLocation, fileName string, options QStandardPaths__LocateOption) string {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_Locate(C.longlong(ty), fileNameC, C.longlong(options)))
}

func QStandardPaths_LocateAll(ty QStandardPaths__StandardLocation, fileName string, options QStandardPaths__LocateOption) []string {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return strings.Split(cGoUnpackString(C.QStandardPaths_QStandardPaths_LocateAll(C.longlong(ty), fileNameC, C.longlong(options))), "|")
}

func (ptr *QStandardPaths) LocateAll(ty QStandardPaths__StandardLocation, fileName string, options QStandardPaths__LocateOption) []string {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	return strings.Split(cGoUnpackString(C.QStandardPaths_QStandardPaths_LocateAll(C.longlong(ty), fileNameC, C.longlong(options))), "|")
}

func QStandardPaths_DisplayName(ty QStandardPaths__StandardLocation) string {
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_DisplayName(C.longlong(ty)))
}

func (ptr *QStandardPaths) DisplayName(ty QStandardPaths__StandardLocation) string {
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_DisplayName(C.longlong(ty)))
}

func QStandardPaths_StandardLocations(ty QStandardPaths__StandardLocation) []string {
	return strings.Split(cGoUnpackString(C.QStandardPaths_QStandardPaths_StandardLocations(C.longlong(ty))), "|")
}

func (ptr *QStandardPaths) StandardLocations(ty QStandardPaths__StandardLocation) []string {
	return strings.Split(cGoUnpackString(C.QStandardPaths_QStandardPaths_StandardLocations(C.longlong(ty))), "|")
}

func QStandardPaths_WritableLocation(ty QStandardPaths__StandardLocation) string {
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_WritableLocation(C.longlong(ty)))
}

func (ptr *QStandardPaths) WritableLocation(ty QStandardPaths__StandardLocation) string {
	return cGoUnpackString(C.QStandardPaths_QStandardPaths_WritableLocation(C.longlong(ty)))
}

//QState::ChildMode
type QState__ChildMode int64

const (
	QState__ExclusiveStates = QState__ChildMode(0)
	QState__ParallelStates  = QState__ChildMode(1)
)

//QState::RestorePolicy
type QState__RestorePolicy int64

const (
	QState__DontRestoreProperties = QState__RestorePolicy(0)
	QState__RestoreProperties     = QState__RestorePolicy(1)
)

type QState struct {
	QAbstractState
}

type QState_ITF interface {
	QAbstractState_ITF
	QState_PTR() *QState
}

func (p *QState) QState_PTR() *QState {
	return p
}

func (p *QState) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractState_PTR().Pointer()
	}
	return nil
}

func (p *QState) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractState_PTR().SetPointer(ptr)
	}
}

func PointerFromQState(ptr QState_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QState_PTR().Pointer()
	}
	return nil
}

func NewQStateFromPointer(ptr unsafe.Pointer) *QState {
	var n = new(QState)
	n.SetPointer(ptr)
	return n
}
func NewQState2(childMode QState__ChildMode, parent QState_ITF) *QState {
	var tmpValue = NewQStateFromPointer(C.QState_NewQState2(C.longlong(childMode), PointerFromQState(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQState(parent QState_ITF) *QState {
	var tmpValue = NewQStateFromPointer(C.QState_NewQState(PointerFromQState(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QState) AddTransition4(target QAbstractState_ITF) *QAbstractTransition {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractTransitionFromPointer(C.QState_AddTransition4(ptr.Pointer(), PointerFromQAbstractState(target)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QState) AddTransition2(sender QObject_ITF, sign string, target QAbstractState_ITF) *QSignalTransition {
	if ptr.Pointer() != nil {
		var signC = C.CString(sign)
		defer C.free(unsafe.Pointer(signC))
		var tmpValue = NewQSignalTransitionFromPointer(C.QState_AddTransition2(ptr.Pointer(), PointerFromQObject(sender), signC, PointerFromQAbstractState(target)))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QState) AddTransition(transition QAbstractTransition_ITF) {
	if ptr.Pointer() != nil {
		C.QState_AddTransition(ptr.Pointer(), PointerFromQAbstractTransition(transition))
	}
}

func (ptr *QState) AssignProperty(object QObject_ITF, name string, value QVariant_ITF) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QState_AssignProperty(ptr.Pointer(), PointerFromQObject(object), nameC, PointerFromQVariant(value))
	}
}

func (ptr *QState) ChildMode() QState__ChildMode {
	if ptr.Pointer() != nil {
		return QState__ChildMode(C.QState_ChildMode(ptr.Pointer()))
	}
	return 0
}

//export callbackQState_ChildModeChanged
func callbackQState_ChildModeChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::childModeChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QState) ConnectChildModeChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QState_ConnectChildModeChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::childModeChanged", f)
	}
}

func (ptr *QState) DisconnectChildModeChanged() {
	if ptr.Pointer() != nil {
		C.QState_DisconnectChildModeChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::childModeChanged")
	}
}

func (ptr *QState) ErrorState() *QAbstractState {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractStateFromPointer(C.QState_ErrorState(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQState_ErrorStateChanged
func callbackQState_ErrorStateChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::errorStateChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QState) ConnectErrorStateChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QState_ConnectErrorStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::errorStateChanged", f)
	}
}

func (ptr *QState) DisconnectErrorStateChanged() {
	if ptr.Pointer() != nil {
		C.QState_DisconnectErrorStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::errorStateChanged")
	}
}

//export callbackQState_Event
func callbackQState_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStateFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QState) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::event", f)
	}
}

func (ptr *QState) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::event")
	}
}

func (ptr *QState) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QState_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QState) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QState_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQState_Finished
func callbackQState_Finished(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QState) ConnectFinished(f func()) {
	if ptr.Pointer() != nil {
		C.QState_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::finished", f)
	}
}

func (ptr *QState) DisconnectFinished() {
	if ptr.Pointer() != nil {
		C.QState_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::finished")
	}
}

func (ptr *QState) InitialState() *QAbstractState {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractStateFromPointer(C.QState_InitialState(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQState_InitialStateChanged
func callbackQState_InitialStateChanged(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::initialStateChanged"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QState) ConnectInitialStateChanged(f func()) {
	if ptr.Pointer() != nil {
		C.QState_ConnectInitialStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::initialStateChanged", f)
	}
}

func (ptr *QState) DisconnectInitialStateChanged() {
	if ptr.Pointer() != nil {
		C.QState_DisconnectInitialStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::initialStateChanged")
	}
}

//export callbackQState_OnEntry
func callbackQState_OnEntry(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::onEntry"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQStateFromPointer(ptr).OnEntryDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QState) ConnectOnEntry(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::onEntry", f)
	}
}

func (ptr *QState) DisconnectOnEntry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::onEntry")
	}
}

func (ptr *QState) OnEntry(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_OnEntry(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QState) OnEntryDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_OnEntryDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQState_OnExit
func callbackQState_OnExit(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::onExit"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQStateFromPointer(ptr).OnExitDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QState) ConnectOnExit(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::onExit", f)
	}
}

func (ptr *QState) DisconnectOnExit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::onExit")
	}
}

func (ptr *QState) OnExit(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_OnExit(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QState) OnExitDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_OnExitDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQState_PropertiesAssigned
func callbackQState_PropertiesAssigned(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::propertiesAssigned"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QState) ConnectPropertiesAssigned(f func()) {
	if ptr.Pointer() != nil {
		C.QState_ConnectPropertiesAssigned(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::propertiesAssigned", f)
	}
}

func (ptr *QState) DisconnectPropertiesAssigned() {
	if ptr.Pointer() != nil {
		C.QState_DisconnectPropertiesAssigned(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::propertiesAssigned")
	}
}

func (ptr *QState) RemoveTransition(transition QAbstractTransition_ITF) {
	if ptr.Pointer() != nil {
		C.QState_RemoveTransition(ptr.Pointer(), PointerFromQAbstractTransition(transition))
	}
}

func (ptr *QState) SetChildMode(mode QState__ChildMode) {
	if ptr.Pointer() != nil {
		C.QState_SetChildMode(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QState) SetErrorState(state QAbstractState_ITF) {
	if ptr.Pointer() != nil {
		C.QState_SetErrorState(ptr.Pointer(), PointerFromQAbstractState(state))
	}
}

func (ptr *QState) SetInitialState(state QAbstractState_ITF) {
	if ptr.Pointer() != nil {
		C.QState_SetInitialState(ptr.Pointer(), PointerFromQAbstractState(state))
	}
}

func (ptr *QState) Transitions() []*QAbstractTransition {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QAbstractTransition {
			var out = make([]*QAbstractTransition, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStateFromPointer(l.data).transitions_atList(i)
			}
			return out
		}(C.QState_Transitions(ptr.Pointer()))
	}
	return nil
}

func (ptr *QState) DestroyQState() {
	if ptr.Pointer() != nil {
		C.QState_DestroyQState(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QState) transitions_atList(i int) *QAbstractTransition {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractTransitionFromPointer(C.QState_transitions_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQState_TimerEvent
func callbackQState_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQStateFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QState) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::timerEvent", f)
	}
}

func (ptr *QState) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::timerEvent")
	}
}

func (ptr *QState) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QState) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQState_ChildEvent
func callbackQState_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQStateFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QState) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::childEvent", f)
	}
}

func (ptr *QState) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::childEvent")
	}
}

func (ptr *QState) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QState) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQState_ConnectNotify
func callbackQState_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQStateFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QState) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::connectNotify", f)
	}
}

func (ptr *QState) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::connectNotify")
	}
}

func (ptr *QState) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QState_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QState) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QState_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQState_CustomEvent
func callbackQState_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQStateFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QState) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::customEvent", f)
	}
}

func (ptr *QState) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::customEvent")
	}
}

func (ptr *QState) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QState) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QState_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQState_DeleteLater
func callbackQState_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQStateFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QState) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::deleteLater", f)
	}
}

func (ptr *QState) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::deleteLater")
	}
}

func (ptr *QState) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QState_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QState) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QState_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQState_DisconnectNotify
func callbackQState_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQStateFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QState) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::disconnectNotify", f)
	}
}

func (ptr *QState) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::disconnectNotify")
	}
}

func (ptr *QState) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QState_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QState) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QState_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQState_EventFilter
func callbackQState_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStateFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QState) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::eventFilter", f)
	}
}

func (ptr *QState) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::eventFilter")
	}
}

func (ptr *QState) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QState_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QState) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QState_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQState_MetaObject
func callbackQState_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QState::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQStateFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QState) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QState::metaObject", f)
	}
}

func (ptr *QState) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QState::metaObject")
	}
}

func (ptr *QState) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QState_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QState) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QState_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QStateMachine::Error
type QStateMachine__Error int64

const (
	QStateMachine__NoError                            = QStateMachine__Error(0)
	QStateMachine__NoInitialStateError                = QStateMachine__Error(1)
	QStateMachine__NoDefaultStateInHistoryStateError  = QStateMachine__Error(2)
	QStateMachine__NoCommonAncestorForTransitionError = QStateMachine__Error(3)
)

//QStateMachine::EventPriority
type QStateMachine__EventPriority int64

const (
	QStateMachine__NormalPriority = QStateMachine__EventPriority(0)
	QStateMachine__HighPriority   = QStateMachine__EventPriority(1)
)

type QStateMachine struct {
	QState
}

type QStateMachine_ITF interface {
	QState_ITF
	QStateMachine_PTR() *QStateMachine
}

func (p *QStateMachine) QStateMachine_PTR() *QStateMachine {
	return p
}

func (p *QStateMachine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QState_PTR().Pointer()
	}
	return nil
}

func (p *QStateMachine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QState_PTR().SetPointer(ptr)
	}
}

func PointerFromQStateMachine(ptr QStateMachine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStateMachine_PTR().Pointer()
	}
	return nil
}

func NewQStateMachineFromPointer(ptr unsafe.Pointer) *QStateMachine {
	var n = new(QStateMachine)
	n.SetPointer(ptr)
	return n
}
func (ptr *QStateMachine) IsRunning() bool {
	if ptr.Pointer() != nil {
		return C.QStateMachine_IsRunning(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStateMachine_SetRunning
func callbackQStateMachine_SetRunning(ptr unsafe.Pointer, running C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::setRunning"); signal != nil {
		signal.(func(bool))(int8(running) != 0)
	}

}

func (ptr *QStateMachine) ConnectSetRunning(f func(running bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::setRunning", f)
	}
}

func (ptr *QStateMachine) DisconnectSetRunning(running bool) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::setRunning")
	}
}

func (ptr *QStateMachine) SetRunning(running bool) {
	if ptr.Pointer() != nil {
		C.QStateMachine_SetRunning(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(running))))
	}
}

func NewQStateMachine(parent QObject_ITF) *QStateMachine {
	var tmpValue = NewQStateMachineFromPointer(C.QStateMachine_NewQStateMachine(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQStateMachine2(childMode QState__ChildMode, parent QObject_ITF) *QStateMachine {
	var tmpValue = NewQStateMachineFromPointer(C.QStateMachine_NewQStateMachine2(C.longlong(childMode), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QStateMachine) AddDefaultAnimation(animation QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_AddDefaultAnimation(ptr.Pointer(), PointerFromQAbstractAnimation(animation))
	}
}

func (ptr *QStateMachine) AddState(state QAbstractState_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_AddState(ptr.Pointer(), PointerFromQAbstractState(state))
	}
}

func (ptr *QStateMachine) DefaultAnimations() []*QAbstractAnimation {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QAbstractAnimation {
			var out = make([]*QAbstractAnimation, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStateMachineFromPointer(l.data).defaultAnimations_atList(i)
			}
			return out
		}(C.QStateMachine_DefaultAnimations(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStateMachine) CancelDelayedEvent(id int) bool {
	if ptr.Pointer() != nil {
		return C.QStateMachine_CancelDelayedEvent(ptr.Pointer(), C.int(int32(id))) != 0
	}
	return false
}

func (ptr *QStateMachine) ClearError() {
	if ptr.Pointer() != nil {
		C.QStateMachine_ClearError(ptr.Pointer())
	}
}

func (ptr *QStateMachine) Error() QStateMachine__Error {
	if ptr.Pointer() != nil {
		return QStateMachine__Error(C.QStateMachine_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStateMachine) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStateMachine_ErrorString(ptr.Pointer()))
	}
	return ""
}

//export callbackQStateMachine_Event
func callbackQStateMachine_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStateMachineFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QStateMachine) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::event", f)
	}
}

func (ptr *QStateMachine) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::event")
	}
}

func (ptr *QStateMachine) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStateMachine_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QStateMachine) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStateMachine_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStateMachine_EventFilter
func callbackQStateMachine_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStateMachineFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QStateMachine) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::eventFilter", f)
	}
}

func (ptr *QStateMachine) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::eventFilter")
	}
}

func (ptr *QStateMachine) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStateMachine_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QStateMachine) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStateMachine_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QStateMachine) GlobalRestorePolicy() QState__RestorePolicy {
	if ptr.Pointer() != nil {
		return QState__RestorePolicy(C.QStateMachine_GlobalRestorePolicy(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStateMachine) IsAnimated() bool {
	if ptr.Pointer() != nil {
		return C.QStateMachine_IsAnimated(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStateMachine_OnEntry
func callbackQStateMachine_OnEntry(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::onEntry"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQStateMachineFromPointer(ptr).OnEntryDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QStateMachine) ConnectOnEntry(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::onEntry", f)
	}
}

func (ptr *QStateMachine) DisconnectOnEntry() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::onEntry")
	}
}

func (ptr *QStateMachine) OnEntry(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_OnEntry(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QStateMachine) OnEntryDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_OnEntryDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQStateMachine_OnExit
func callbackQStateMachine_OnExit(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::onExit"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQStateMachineFromPointer(ptr).OnExitDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QStateMachine) ConnectOnExit(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::onExit", f)
	}
}

func (ptr *QStateMachine) DisconnectOnExit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::onExit")
	}
}

func (ptr *QStateMachine) OnExit(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_OnExit(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QStateMachine) OnExitDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_OnExitDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QStateMachine) PostDelayedEvent(event QEvent_ITF, delay int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStateMachine_PostDelayedEvent(ptr.Pointer(), PointerFromQEvent(event), C.int(int32(delay)))))
	}
	return 0
}

func (ptr *QStateMachine) PostEvent(event QEvent_ITF, priority QStateMachine__EventPriority) {
	if ptr.Pointer() != nil {
		C.QStateMachine_PostEvent(ptr.Pointer(), PointerFromQEvent(event), C.longlong(priority))
	}
}

func (ptr *QStateMachine) RemoveDefaultAnimation(animation QAbstractAnimation_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_RemoveDefaultAnimation(ptr.Pointer(), PointerFromQAbstractAnimation(animation))
	}
}

func (ptr *QStateMachine) RemoveState(state QAbstractState_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_RemoveState(ptr.Pointer(), PointerFromQAbstractState(state))
	}
}

//export callbackQStateMachine_RunningChanged
func callbackQStateMachine_RunningChanged(ptr unsafe.Pointer, running C.char) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::runningChanged"); signal != nil {
		signal.(func(bool))(int8(running) != 0)
	}

}

func (ptr *QStateMachine) ConnectRunningChanged(f func(running bool)) {
	if ptr.Pointer() != nil {
		C.QStateMachine_ConnectRunningChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::runningChanged", f)
	}
}

func (ptr *QStateMachine) DisconnectRunningChanged() {
	if ptr.Pointer() != nil {
		C.QStateMachine_DisconnectRunningChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::runningChanged")
	}
}

func (ptr *QStateMachine) RunningChanged(running bool) {
	if ptr.Pointer() != nil {
		C.QStateMachine_RunningChanged(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(running))))
	}
}

func (ptr *QStateMachine) SetAnimated(enabled bool) {
	if ptr.Pointer() != nil {
		C.QStateMachine_SetAnimated(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QStateMachine) SetGlobalRestorePolicy(restorePolicy QState__RestorePolicy) {
	if ptr.Pointer() != nil {
		C.QStateMachine_SetGlobalRestorePolicy(ptr.Pointer(), C.longlong(restorePolicy))
	}
}

//export callbackQStateMachine_Start
func callbackQStateMachine_Start(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QStateMachine) ConnectStart(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::start", f)
	}
}

func (ptr *QStateMachine) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::start")
	}
}

func (ptr *QStateMachine) Start() {
	if ptr.Pointer() != nil {
		C.QStateMachine_Start(ptr.Pointer())
	}
}

//export callbackQStateMachine_Started
func callbackQStateMachine_Started(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::started"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QStateMachine) ConnectStarted(f func()) {
	if ptr.Pointer() != nil {
		C.QStateMachine_ConnectStarted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::started", f)
	}
}

func (ptr *QStateMachine) DisconnectStarted() {
	if ptr.Pointer() != nil {
		C.QStateMachine_DisconnectStarted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::started")
	}
}

//export callbackQStateMachine_Stop
func callbackQStateMachine_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QStateMachine) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::stop", f)
	}
}

func (ptr *QStateMachine) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::stop")
	}
}

func (ptr *QStateMachine) Stop() {
	if ptr.Pointer() != nil {
		C.QStateMachine_Stop(ptr.Pointer())
	}
}

//export callbackQStateMachine_Stopped
func callbackQStateMachine_Stopped(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::stopped"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QStateMachine) ConnectStopped(f func()) {
	if ptr.Pointer() != nil {
		C.QStateMachine_ConnectStopped(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::stopped", f)
	}
}

func (ptr *QStateMachine) DisconnectStopped() {
	if ptr.Pointer() != nil {
		C.QStateMachine_DisconnectStopped(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::stopped")
	}
}

func (ptr *QStateMachine) DestroyQStateMachine() {
	if ptr.Pointer() != nil {
		C.QStateMachine_DestroyQStateMachine(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStateMachine) defaultAnimations_atList(i int) *QAbstractAnimation {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractAnimationFromPointer(C.QStateMachine_defaultAnimations_atList(ptr.Pointer(), C.int(int32(i))))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

//export callbackQStateMachine_TimerEvent
func callbackQStateMachine_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQStateMachineFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStateMachine) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::timerEvent", f)
	}
}

func (ptr *QStateMachine) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::timerEvent")
	}
}

func (ptr *QStateMachine) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QStateMachine) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQStateMachine_ChildEvent
func callbackQStateMachine_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQStateMachineFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QStateMachine) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::childEvent", f)
	}
}

func (ptr *QStateMachine) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::childEvent")
	}
}

func (ptr *QStateMachine) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QStateMachine) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQStateMachine_ConnectNotify
func callbackQStateMachine_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQStateMachineFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStateMachine) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::connectNotify", f)
	}
}

func (ptr *QStateMachine) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::connectNotify")
	}
}

func (ptr *QStateMachine) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStateMachine) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQStateMachine_CustomEvent
func callbackQStateMachine_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQStateMachineFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QStateMachine) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::customEvent", f)
	}
}

func (ptr *QStateMachine) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::customEvent")
	}
}

func (ptr *QStateMachine) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QStateMachine) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQStateMachine_DeleteLater
func callbackQStateMachine_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQStateMachineFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QStateMachine) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::deleteLater", f)
	}
}

func (ptr *QStateMachine) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::deleteLater")
	}
}

func (ptr *QStateMachine) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QStateMachine_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStateMachine) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QStateMachine_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQStateMachine_DisconnectNotify
func callbackQStateMachine_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQStateMachineFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStateMachine) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::disconnectNotify", f)
	}
}

func (ptr *QStateMachine) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::disconnectNotify")
	}
}

func (ptr *QStateMachine) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStateMachine) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStateMachine_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQStateMachine_MetaObject
func callbackQStateMachine_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStateMachine::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQStateMachineFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStateMachine) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::metaObject", f)
	}
}

func (ptr *QStateMachine) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStateMachine::metaObject")
	}
}

func (ptr *QStateMachine) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QStateMachine_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStateMachine) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QStateMachine_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QStaticPlugin struct {
	ptr unsafe.Pointer
}

type QStaticPlugin_ITF interface {
	QStaticPlugin_PTR() *QStaticPlugin
}

func (p *QStaticPlugin) QStaticPlugin_PTR() *QStaticPlugin {
	return p
}

func (p *QStaticPlugin) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStaticPlugin) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStaticPlugin(ptr QStaticPlugin_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStaticPlugin_PTR().Pointer()
	}
	return nil
}

func NewQStaticPluginFromPointer(ptr unsafe.Pointer) *QStaticPlugin {
	var n = new(QStaticPlugin)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStaticPlugin) DestroyQStaticPlugin() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func (ptr *QStaticPlugin) Instance() *QObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQObjectFromPointer(C.QStaticPlugin_Instance(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QStaticPlugin) MetaData() *QJsonObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonObjectFromPointer(C.QStaticPlugin_MetaData(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
		return tmpValue
	}
	return nil
}

func (ptr *QStaticPlugin) RawMetaData() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStaticPlugin_RawMetaData(ptr.Pointer()))
	}
	return ""
}

type QStorageInfo struct {
	ptr unsafe.Pointer
}

type QStorageInfo_ITF interface {
	QStorageInfo_PTR() *QStorageInfo
}

func (p *QStorageInfo) QStorageInfo_PTR() *QStorageInfo {
	return p
}

func (p *QStorageInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStorageInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStorageInfo(ptr QStorageInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStorageInfo_PTR().Pointer()
	}
	return nil
}

func NewQStorageInfoFromPointer(ptr unsafe.Pointer) *QStorageInfo {
	var n = new(QStorageInfo)
	n.SetPointer(ptr)
	return n
}
func NewQStorageInfo() *QStorageInfo {
	var tmpValue = NewQStorageInfoFromPointer(C.QStorageInfo_NewQStorageInfo())
	runtime.SetFinalizer(tmpValue, (*QStorageInfo).DestroyQStorageInfo)
	return tmpValue
}

func NewQStorageInfo3(dir QDir_ITF) *QStorageInfo {
	var tmpValue = NewQStorageInfoFromPointer(C.QStorageInfo_NewQStorageInfo3(PointerFromQDir(dir)))
	runtime.SetFinalizer(tmpValue, (*QStorageInfo).DestroyQStorageInfo)
	return tmpValue
}

func NewQStorageInfo4(other QStorageInfo_ITF) *QStorageInfo {
	var tmpValue = NewQStorageInfoFromPointer(C.QStorageInfo_NewQStorageInfo4(PointerFromQStorageInfo(other)))
	runtime.SetFinalizer(tmpValue, (*QStorageInfo).DestroyQStorageInfo)
	return tmpValue
}

func NewQStorageInfo2(path string) *QStorageInfo {
	var pathC = C.CString(path)
	defer C.free(unsafe.Pointer(pathC))
	var tmpValue = NewQStorageInfoFromPointer(C.QStorageInfo_NewQStorageInfo2(pathC))
	runtime.SetFinalizer(tmpValue, (*QStorageInfo).DestroyQStorageInfo)
	return tmpValue
}

func (ptr *QStorageInfo) BlockSize() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStorageInfo_BlockSize(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStorageInfo) BytesAvailable() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QStorageInfo_BytesAvailable(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStorageInfo) BytesFree() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QStorageInfo_BytesFree(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStorageInfo) BytesTotal() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QStorageInfo_BytesTotal(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStorageInfo) Device() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QStorageInfo_Device(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStorageInfo) DisplayName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStorageInfo_DisplayName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStorageInfo) FileSystemType() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QStorageInfo_FileSystemType(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStorageInfo) IsReadOnly() bool {
	if ptr.Pointer() != nil {
		return C.QStorageInfo_IsReadOnly(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStorageInfo) IsReady() bool {
	if ptr.Pointer() != nil {
		return C.QStorageInfo_IsReady(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStorageInfo) IsRoot() bool {
	if ptr.Pointer() != nil {
		return C.QStorageInfo_IsRoot(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStorageInfo) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QStorageInfo_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func QStorageInfo_MountedVolumes() []*QStorageInfo {
	return func(l C.struct_QtCore_PackedList) []*QStorageInfo {
		var out = make([]*QStorageInfo, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQStorageInfoFromPointer(l.data).mountedVolumes_atList(i)
		}
		return out
	}(C.QStorageInfo_QStorageInfo_MountedVolumes())
}

func (ptr *QStorageInfo) MountedVolumes() []*QStorageInfo {
	return func(l C.struct_QtCore_PackedList) []*QStorageInfo {
		var out = make([]*QStorageInfo, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQStorageInfoFromPointer(l.data).mountedVolumes_atList(i)
		}
		return out
	}(C.QStorageInfo_QStorageInfo_MountedVolumes())
}

func (ptr *QStorageInfo) Name() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStorageInfo_Name(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStorageInfo) Refresh() {
	if ptr.Pointer() != nil {
		C.QStorageInfo_Refresh(ptr.Pointer())
	}
}

func QStorageInfo_Root() *QStorageInfo {
	var tmpValue = NewQStorageInfoFromPointer(C.QStorageInfo_QStorageInfo_Root())
	runtime.SetFinalizer(tmpValue, (*QStorageInfo).DestroyQStorageInfo)
	return tmpValue
}

func (ptr *QStorageInfo) Root() *QStorageInfo {
	var tmpValue = NewQStorageInfoFromPointer(C.QStorageInfo_QStorageInfo_Root())
	runtime.SetFinalizer(tmpValue, (*QStorageInfo).DestroyQStorageInfo)
	return tmpValue
}

func (ptr *QStorageInfo) RootPath() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStorageInfo_RootPath(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStorageInfo) SetPath(path string) {
	if ptr.Pointer() != nil {
		var pathC = C.CString(path)
		defer C.free(unsafe.Pointer(pathC))
		C.QStorageInfo_SetPath(ptr.Pointer(), pathC)
	}
}

func (ptr *QStorageInfo) Swap(other QStorageInfo_ITF) {
	if ptr.Pointer() != nil {
		C.QStorageInfo_Swap(ptr.Pointer(), PointerFromQStorageInfo(other))
	}
}

func (ptr *QStorageInfo) DestroyQStorageInfo() {
	if ptr.Pointer() != nil {
		C.QStorageInfo_DestroyQStorageInfo(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QStorageInfo) mountedVolumes_atList(i int) *QStorageInfo {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStorageInfoFromPointer(C.QStorageInfo_mountedVolumes_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QStorageInfo).DestroyQStorageInfo)
		return tmpValue
	}
	return nil
}

//QString::NormalizationForm
type QString__NormalizationForm int64

const (
	QString__NormalizationForm_D  = QString__NormalizationForm(0)
	QString__NormalizationForm_C  = QString__NormalizationForm(1)
	QString__NormalizationForm_KD = QString__NormalizationForm(2)
	QString__NormalizationForm_KC = QString__NormalizationForm(3)
)

//QString::SectionFlag
type QString__SectionFlag int64

const (
	QString__SectionDefault             = QString__SectionFlag(0x00)
	QString__SectionSkipEmpty           = QString__SectionFlag(0x01)
	QString__SectionIncludeLeadingSep   = QString__SectionFlag(0x02)
	QString__SectionIncludeTrailingSep  = QString__SectionFlag(0x04)
	QString__SectionCaseInsensitiveSeps = QString__SectionFlag(0x08)
)

//QString::SplitBehavior
type QString__SplitBehavior int64

const (
	QString__KeepEmptyParts = QString__SplitBehavior(0)
	QString__SkipEmptyParts = QString__SplitBehavior(1)
)

type QString struct {
	ptr unsafe.Pointer
}

type QString_ITF interface {
	QString_PTR() *QString
}

func (p *QString) QString_PTR() *QString {
	return p
}

func (p *QString) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QString) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQString(ptr QString_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QString_PTR().Pointer()
	}
	return nil
}

func NewQStringFromPointer(ptr unsafe.Pointer) *QString {
	var n = new(QString)
	n.SetPointer(ptr)
	return n
}

type QStringList struct {
	QList
}

type QStringList_ITF interface {
	QList_ITF
	QStringList_PTR() *QStringList
}

func (p *QStringList) QStringList_PTR() *QStringList {
	return p
}

func (p *QStringList) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QList_PTR().Pointer()
	}
	return nil
}

func (p *QStringList) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QList_PTR().SetPointer(ptr)
	}
}

func PointerFromQStringList(ptr QStringList_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStringList_PTR().Pointer()
	}
	return nil
}

func NewQStringListFromPointer(ptr unsafe.Pointer) *QStringList {
	var n = new(QStringList)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStringList) DestroyQStringList() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QStringListModel struct {
	QAbstractListModel
}

type QStringListModel_ITF interface {
	QAbstractListModel_ITF
	QStringListModel_PTR() *QStringListModel
}

func (p *QStringListModel) QStringListModel_PTR() *QStringListModel {
	return p
}

func (p *QStringListModel) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractListModel_PTR().Pointer()
	}
	return nil
}

func (p *QStringListModel) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractListModel_PTR().SetPointer(ptr)
	}
}

func PointerFromQStringListModel(ptr QStringListModel_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStringListModel_PTR().Pointer()
	}
	return nil
}

func NewQStringListModelFromPointer(ptr unsafe.Pointer) *QStringListModel {
	var n = new(QStringListModel)
	n.SetPointer(ptr)
	return n
}

func (ptr *QStringListModel) DestroyQStringListModel() {
	C.free(ptr.Pointer())
	qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
	ptr.SetPointer(nil)
}

func NewQStringListModel(parent QObject_ITF) *QStringListModel {
	var tmpValue = NewQStringListModelFromPointer(C.QStringListModel_NewQStringListModel(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQStringListModel2(strin []string, parent QObject_ITF) *QStringListModel {
	var strinC = C.CString(strings.Join(strin, "|"))
	defer C.free(unsafe.Pointer(strinC))
	var tmpValue = NewQStringListModelFromPointer(C.QStringListModel_NewQStringListModel2(strinC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQStringListModel_Data
func callbackQStringListModel_Data(ptr unsafe.Pointer, index unsafe.Pointer, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::data"); signal != nil {
		return PointerFromQVariant(signal.(func(*QModelIndex, int) *QVariant)(NewQModelIndexFromPointer(index), int(int32(role))))
	}

	return PointerFromQVariant(NewQStringListModelFromPointer(ptr).DataDefault(NewQModelIndexFromPointer(index), int(int32(role))))
}

func (ptr *QStringListModel) ConnectData(f func(index *QModelIndex, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::data", f)
	}
}

func (ptr *QStringListModel) DisconnectData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::data")
	}
}

func (ptr *QStringListModel) Data(index QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QStringListModel_Data(ptr.Pointer(), PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStringListModel) DataDefault(index QModelIndex_ITF, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QStringListModel_DataDefault(ptr.Pointer(), PointerFromQModelIndex(index), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQStringListModel_Flags
func callbackQStringListModel_Flags(ptr unsafe.Pointer, index unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::flags"); signal != nil {
		return C.longlong(signal.(func(*QModelIndex) Qt__ItemFlag)(NewQModelIndexFromPointer(index)))
	}

	return C.longlong(NewQStringListModelFromPointer(ptr).FlagsDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QStringListModel) ConnectFlags(f func(index *QModelIndex) Qt__ItemFlag) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::flags", f)
	}
}

func (ptr *QStringListModel) DisconnectFlags() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::flags")
	}
}

func (ptr *QStringListModel) Flags(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QStringListModel_Flags(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

func (ptr *QStringListModel) FlagsDefault(index QModelIndex_ITF) Qt__ItemFlag {
	if ptr.Pointer() != nil {
		return Qt__ItemFlag(C.QStringListModel_FlagsDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
	}
	return 0
}

//export callbackQStringListModel_InsertRows
func callbackQStringListModel_InsertRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::insertRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).InsertRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectInsertRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::insertRows", f)
	}
}

func (ptr *QStringListModel) DisconnectInsertRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::insertRows")
	}
}

func (ptr *QStringListModel) InsertRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_InsertRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) InsertRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_InsertRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_RemoveRows
func callbackQStringListModel_RemoveRows(ptr unsafe.Pointer, row C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::removeRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).RemoveRowsDefault(int(int32(row)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectRemoveRows(f func(row int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::removeRows", f)
	}
}

func (ptr *QStringListModel) DisconnectRemoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::removeRows")
	}
}

func (ptr *QStringListModel) RemoveRows(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_RemoveRows(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) RemoveRowsDefault(row int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_RemoveRowsDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_RowCount
func callbackQStringListModel_RowCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::rowCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQStringListModelFromPointer(ptr).RowCountDefault(NewQModelIndexFromPointer(parent))))
}

func (ptr *QStringListModel) ConnectRowCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::rowCount", f)
	}
}

func (ptr *QStringListModel) DisconnectRowCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::rowCount")
	}
}

func (ptr *QStringListModel) RowCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringListModel_RowCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QStringListModel) RowCountDefault(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringListModel_RowCountDefault(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQStringListModel_SetData
func callbackQStringListModel_SetData(ptr unsafe.Pointer, index unsafe.Pointer, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::setData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, *QVariant, int) bool)(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).SetDataDefault(NewQModelIndexFromPointer(index), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QStringListModel) ConnectSetData(f func(index *QModelIndex, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::setData", f)
	}
}

func (ptr *QStringListModel) DisconnectSetData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::setData")
	}
}

func (ptr *QStringListModel) SetData(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_SetData(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QStringListModel) SetDataDefault(index QModelIndex_ITF, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_SetDataDefault(ptr.Pointer(), PointerFromQModelIndex(index), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QStringListModel) SetStringList(strin []string) {
	if ptr.Pointer() != nil {
		var strinC = C.CString(strings.Join(strin, "|"))
		defer C.free(unsafe.Pointer(strinC))
		C.QStringListModel_SetStringList(ptr.Pointer(), strinC)
	}
}

//export callbackQStringListModel_Sibling
func callbackQStringListModel_Sibling(ptr unsafe.Pointer, row C.int, column C.int, idx unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::sibling"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
	}

	return PointerFromQModelIndex(NewQStringListModelFromPointer(ptr).SiblingDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(idx)))
}

func (ptr *QStringListModel) ConnectSibling(f func(row int, column int, idx *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::sibling", f)
	}
}

func (ptr *QStringListModel) DisconnectSibling() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::sibling")
	}
}

func (ptr *QStringListModel) Sibling(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_Sibling(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStringListModel) SiblingDefault(row int, column int, idx QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_SiblingDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(idx)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStringListModel_Sort
func callbackQStringListModel_Sort(ptr unsafe.Pointer, column C.int, order C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::sort"); signal != nil {
		signal.(func(int, Qt__SortOrder))(int(int32(column)), Qt__SortOrder(order))
	} else {
		NewQStringListModelFromPointer(ptr).SortDefault(int(int32(column)), Qt__SortOrder(order))
	}
}

func (ptr *QStringListModel) ConnectSort(f func(column int, order Qt__SortOrder)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::sort", f)
	}
}

func (ptr *QStringListModel) DisconnectSort() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::sort")
	}
}

func (ptr *QStringListModel) Sort(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QStringListModel_Sort(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QStringListModel) SortDefault(column int, order Qt__SortOrder) {
	if ptr.Pointer() != nil {
		C.QStringListModel_SortDefault(ptr.Pointer(), C.int(int32(column)), C.longlong(order))
	}
}

func (ptr *QStringListModel) StringList() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QStringListModel_StringList(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQStringListModel_SupportedDropActions
func callbackQStringListModel_SupportedDropActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::supportedDropActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQStringListModelFromPointer(ptr).SupportedDropActionsDefault())
}

func (ptr *QStringListModel) ConnectSupportedDropActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::supportedDropActions", f)
	}
}

func (ptr *QStringListModel) DisconnectSupportedDropActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::supportedDropActions")
	}
}

func (ptr *QStringListModel) SupportedDropActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QStringListModel_SupportedDropActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStringListModel) SupportedDropActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QStringListModel_SupportedDropActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQStringListModel_Index
func callbackQStringListModel_Index(ptr unsafe.Pointer, row C.int, column C.int, parent unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::index"); signal != nil {
		return PointerFromQModelIndex(signal.(func(int, int, *QModelIndex) *QModelIndex)(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
	}

	return PointerFromQModelIndex(NewQStringListModelFromPointer(ptr).IndexDefault(int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))
}

func (ptr *QStringListModel) ConnectIndex(f func(row int, column int, parent *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::index", f)
	}
}

func (ptr *QStringListModel) DisconnectIndex() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::index")
	}
}

func (ptr *QStringListModel) Index(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_Index(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStringListModel) IndexDefault(row int, column int, parent QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_IndexDefault(ptr.Pointer(), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStringListModel_DropMimeData
func callbackQStringListModel_DropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::dropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).DropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::dropMimeData", f)
	}
}

func (ptr *QStringListModel) DisconnectDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::dropMimeData")
	}
}

func (ptr *QStringListModel) DropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_DropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) DropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_DropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_Buddy
func callbackQStringListModel_Buddy(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::buddy"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQStringListModelFromPointer(ptr).BuddyDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QStringListModel) ConnectBuddy(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::buddy", f)
	}
}

func (ptr *QStringListModel) DisconnectBuddy() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::buddy")
	}
}

func (ptr *QStringListModel) Buddy(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_Buddy(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStringListModel) BuddyDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_BuddyDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStringListModel_CanDropMimeData
func callbackQStringListModel_CanDropMimeData(ptr unsafe.Pointer, data unsafe.Pointer, action C.longlong, row C.int, column C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::canDropMimeData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QMimeData, Qt__DropAction, int, int, *QModelIndex) bool)(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).CanDropMimeDataDefault(NewQMimeDataFromPointer(data), Qt__DropAction(action), int(int32(row)), int(int32(column)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectCanDropMimeData(f func(data *QMimeData, action Qt__DropAction, row int, column int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::canDropMimeData", f)
	}
}

func (ptr *QStringListModel) DisconnectCanDropMimeData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::canDropMimeData")
	}
}

func (ptr *QStringListModel) CanDropMimeData(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_CanDropMimeData(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) CanDropMimeDataDefault(data QMimeData_ITF, action Qt__DropAction, row int, column int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_CanDropMimeDataDefault(ptr.Pointer(), PointerFromQMimeData(data), C.longlong(action), C.int(int32(row)), C.int(int32(column)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_CanFetchMore
func callbackQStringListModel_CanFetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::canFetchMore"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).CanFetchMoreDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectCanFetchMore(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::canFetchMore", f)
	}
}

func (ptr *QStringListModel) DisconnectCanFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::canFetchMore")
	}
}

func (ptr *QStringListModel) CanFetchMore(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_CanFetchMore(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) CanFetchMoreDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_CanFetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_ColumnCount
func callbackQStringListModel_ColumnCount(ptr unsafe.Pointer, parent unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::columnCount"); signal != nil {
		return C.int(int32(signal.(func(*QModelIndex) int)(NewQModelIndexFromPointer(parent))))
	}

	return C.int(int32(NewQStringListModelFromPointer(ptr).ColumnCountDefault(NewQModelIndexFromPointer(parent))))
}

func (ptr *QStringListModel) ConnectColumnCount(f func(parent *QModelIndex) int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::columnCount", f)
	}
}

func (ptr *QStringListModel) DisconnectColumnCount() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::columnCount")
	}
}

func (ptr *QStringListModel) ColumnCount(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringListModel_ColumnCount(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

func (ptr *QStringListModel) ColumnCountDefault(parent QModelIndex_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringListModel_ColumnCountDefault(ptr.Pointer(), PointerFromQModelIndex(parent))))
	}
	return 0
}

//export callbackQStringListModel_FetchMore
func callbackQStringListModel_FetchMore(ptr unsafe.Pointer, parent unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::fetchMore"); signal != nil {
		signal.(func(*QModelIndex))(NewQModelIndexFromPointer(parent))
	} else {
		NewQStringListModelFromPointer(ptr).FetchMoreDefault(NewQModelIndexFromPointer(parent))
	}
}

func (ptr *QStringListModel) ConnectFetchMore(f func(parent *QModelIndex)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::fetchMore", f)
	}
}

func (ptr *QStringListModel) DisconnectFetchMore() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::fetchMore")
	}
}

func (ptr *QStringListModel) FetchMore(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_FetchMore(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

func (ptr *QStringListModel) FetchMoreDefault(parent QModelIndex_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_FetchMoreDefault(ptr.Pointer(), PointerFromQModelIndex(parent))
	}
}

//export callbackQStringListModel_HasChildren
func callbackQStringListModel_HasChildren(ptr unsafe.Pointer, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::hasChildren"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex) bool)(NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).HasChildrenDefault(NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectHasChildren(f func(parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::hasChildren", f)
	}
}

func (ptr *QStringListModel) DisconnectHasChildren() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::hasChildren")
	}
}

func (ptr *QStringListModel) HasChildren(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_HasChildren(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) HasChildrenDefault(parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_HasChildrenDefault(ptr.Pointer(), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_HeaderData
func callbackQStringListModel_HeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, role C.int) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::headerData"); signal != nil {
		return PointerFromQVariant(signal.(func(int, Qt__Orientation, int) *QVariant)(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
	}

	return PointerFromQVariant(NewQStringListModelFromPointer(ptr).HeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), int(int32(role))))
}

func (ptr *QStringListModel) ConnectHeaderData(f func(section int, orientation Qt__Orientation, role int) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::headerData", f)
	}
}

func (ptr *QStringListModel) DisconnectHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::headerData")
	}
}

func (ptr *QStringListModel) HeaderData(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QStringListModel_HeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QStringListModel) HeaderDataDefault(section int, orientation Qt__Orientation, role int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QStringListModel_HeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), C.int(int32(role))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQStringListModel_InsertColumns
func callbackQStringListModel_InsertColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::insertColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).InsertColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectInsertColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::insertColumns", f)
	}
}

func (ptr *QStringListModel) DisconnectInsertColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::insertColumns")
	}
}

func (ptr *QStringListModel) InsertColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_InsertColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) InsertColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_InsertColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_MimeTypes
func callbackQStringListModel_MimeTypes(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::mimeTypes"); signal != nil {
		return C.CString(strings.Join(signal.(func() []string)(), "|"))
	}

	return C.CString(strings.Join(NewQStringListModelFromPointer(ptr).MimeTypesDefault(), "|"))
}

func (ptr *QStringListModel) ConnectMimeTypes(f func() []string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::mimeTypes", f)
	}
}

func (ptr *QStringListModel) DisconnectMimeTypes() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::mimeTypes")
	}
}

func (ptr *QStringListModel) MimeTypes() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QStringListModel_MimeTypes(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QStringListModel) MimeTypesDefault() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QStringListModel_MimeTypesDefault(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

//export callbackQStringListModel_MoveColumns
func callbackQStringListModel_MoveColumns(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceColumn C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::moveColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).MoveColumnsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceColumn)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QStringListModel) ConnectMoveColumns(f func(sourceParent *QModelIndex, sourceColumn int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::moveColumns", f)
	}
}

func (ptr *QStringListModel) DisconnectMoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::moveColumns")
	}
}

func (ptr *QStringListModel) MoveColumns(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_MoveColumns(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QStringListModel) MoveColumnsDefault(sourceParent QModelIndex_ITF, sourceColumn int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_MoveColumnsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceColumn)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQStringListModel_MoveRows
func callbackQStringListModel_MoveRows(ptr unsafe.Pointer, sourceParent unsafe.Pointer, sourceRow C.int, count C.int, destinationParent unsafe.Pointer, destinationChild C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::moveRows"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QModelIndex, int, int, *QModelIndex, int) bool)(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).MoveRowsDefault(NewQModelIndexFromPointer(sourceParent), int(int32(sourceRow)), int(int32(count)), NewQModelIndexFromPointer(destinationParent), int(int32(destinationChild))))))
}

func (ptr *QStringListModel) ConnectMoveRows(f func(sourceParent *QModelIndex, sourceRow int, count int, destinationParent *QModelIndex, destinationChild int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::moveRows", f)
	}
}

func (ptr *QStringListModel) DisconnectMoveRows() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::moveRows")
	}
}

func (ptr *QStringListModel) MoveRows(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_MoveRows(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

func (ptr *QStringListModel) MoveRowsDefault(sourceParent QModelIndex_ITF, sourceRow int, count int, destinationParent QModelIndex_ITF, destinationChild int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_MoveRowsDefault(ptr.Pointer(), PointerFromQModelIndex(sourceParent), C.int(int32(sourceRow)), C.int(int32(count)), PointerFromQModelIndex(destinationParent), C.int(int32(destinationChild))) != 0
	}
	return false
}

//export callbackQStringListModel_Parent
func callbackQStringListModel_Parent(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::parent"); signal != nil {
		return PointerFromQModelIndex(signal.(func(*QModelIndex) *QModelIndex)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQModelIndex(NewQStringListModelFromPointer(ptr).ParentDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QStringListModel) ConnectParent(f func(index *QModelIndex) *QModelIndex) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::parent", f)
	}
}

func (ptr *QStringListModel) DisconnectParent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::parent")
	}
}

func (ptr *QStringListModel) Parent(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_Parent(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QStringListModel) ParentDefault(index QModelIndex_ITF) *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QStringListModel_ParentDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

//export callbackQStringListModel_RemoveColumns
func callbackQStringListModel_RemoveColumns(ptr unsafe.Pointer, column C.int, count C.int, parent unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::removeColumns"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, int, *QModelIndex) bool)(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).RemoveColumnsDefault(int(int32(column)), int(int32(count)), NewQModelIndexFromPointer(parent)))))
}

func (ptr *QStringListModel) ConnectRemoveColumns(f func(column int, count int, parent *QModelIndex) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::removeColumns", f)
	}
}

func (ptr *QStringListModel) DisconnectRemoveColumns() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::removeColumns")
	}
}

func (ptr *QStringListModel) RemoveColumns(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_RemoveColumns(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

func (ptr *QStringListModel) RemoveColumnsDefault(column int, count int, parent QModelIndex_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_RemoveColumnsDefault(ptr.Pointer(), C.int(int32(column)), C.int(int32(count)), PointerFromQModelIndex(parent)) != 0
	}
	return false
}

//export callbackQStringListModel_ResetInternalData
func callbackQStringListModel_ResetInternalData(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::resetInternalData"); signal != nil {
		signal.(func())()
	} else {
		NewQStringListModelFromPointer(ptr).ResetInternalDataDefault()
	}
}

func (ptr *QStringListModel) ConnectResetInternalData(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::resetInternalData", f)
	}
}

func (ptr *QStringListModel) DisconnectResetInternalData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::resetInternalData")
	}
}

func (ptr *QStringListModel) ResetInternalData() {
	if ptr.Pointer() != nil {
		C.QStringListModel_ResetInternalData(ptr.Pointer())
	}
}

func (ptr *QStringListModel) ResetInternalDataDefault() {
	if ptr.Pointer() != nil {
		C.QStringListModel_ResetInternalDataDefault(ptr.Pointer())
	}
}

//export callbackQStringListModel_Revert
func callbackQStringListModel_Revert(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::revert"); signal != nil {
		signal.(func())()
	} else {
		NewQStringListModelFromPointer(ptr).RevertDefault()
	}
}

func (ptr *QStringListModel) ConnectRevert(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::revert", f)
	}
}

func (ptr *QStringListModel) DisconnectRevert() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::revert")
	}
}

func (ptr *QStringListModel) Revert() {
	if ptr.Pointer() != nil {
		C.QStringListModel_Revert(ptr.Pointer())
	}
}

func (ptr *QStringListModel) RevertDefault() {
	if ptr.Pointer() != nil {
		C.QStringListModel_RevertDefault(ptr.Pointer())
	}
}

//export callbackQStringListModel_SetHeaderData
func callbackQStringListModel_SetHeaderData(ptr unsafe.Pointer, section C.int, orientation C.longlong, value unsafe.Pointer, role C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::setHeaderData"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int, Qt__Orientation, *QVariant, int) bool)(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).SetHeaderDataDefault(int(int32(section)), Qt__Orientation(orientation), NewQVariantFromPointer(value), int(int32(role))))))
}

func (ptr *QStringListModel) ConnectSetHeaderData(f func(section int, orientation Qt__Orientation, value *QVariant, role int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::setHeaderData", f)
	}
}

func (ptr *QStringListModel) DisconnectSetHeaderData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::setHeaderData")
	}
}

func (ptr *QStringListModel) SetHeaderData(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_SetHeaderData(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

func (ptr *QStringListModel) SetHeaderDataDefault(section int, orientation Qt__Orientation, value QVariant_ITF, role int) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_SetHeaderDataDefault(ptr.Pointer(), C.int(int32(section)), C.longlong(orientation), PointerFromQVariant(value), C.int(int32(role))) != 0
	}
	return false
}

//export callbackQStringListModel_Span
func callbackQStringListModel_Span(ptr unsafe.Pointer, index unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::span"); signal != nil {
		return PointerFromQSize(signal.(func(*QModelIndex) *QSize)(NewQModelIndexFromPointer(index)))
	}

	return PointerFromQSize(NewQStringListModelFromPointer(ptr).SpanDefault(NewQModelIndexFromPointer(index)))
}

func (ptr *QStringListModel) ConnectSpan(f func(index *QModelIndex) *QSize) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::span", f)
	}
}

func (ptr *QStringListModel) DisconnectSpan() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::span")
	}
}

func (ptr *QStringListModel) Span(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QStringListModel_Span(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QStringListModel) SpanDefault(index QModelIndex_ITF) *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QStringListModel_SpanDefault(ptr.Pointer(), PointerFromQModelIndex(index)))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

//export callbackQStringListModel_Submit
func callbackQStringListModel_Submit(ptr unsafe.Pointer) C.char {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::submit"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).SubmitDefault())))
}

func (ptr *QStringListModel) ConnectSubmit(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::submit", f)
	}
}

func (ptr *QStringListModel) DisconnectSubmit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::submit")
	}
}

func (ptr *QStringListModel) Submit() bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_Submit(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStringListModel) SubmitDefault() bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_SubmitDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQStringListModel_SupportedDragActions
func callbackQStringListModel_SupportedDragActions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::supportedDragActions"); signal != nil {
		return C.longlong(signal.(func() Qt__DropAction)())
	}

	return C.longlong(NewQStringListModelFromPointer(ptr).SupportedDragActionsDefault())
}

func (ptr *QStringListModel) ConnectSupportedDragActions(f func() Qt__DropAction) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::supportedDragActions", f)
	}
}

func (ptr *QStringListModel) DisconnectSupportedDragActions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::supportedDragActions")
	}
}

func (ptr *QStringListModel) SupportedDragActions() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QStringListModel_SupportedDragActions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStringListModel) SupportedDragActionsDefault() Qt__DropAction {
	if ptr.Pointer() != nil {
		return Qt__DropAction(C.QStringListModel_SupportedDragActionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQStringListModel_TimerEvent
func callbackQStringListModel_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQStringListModelFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QStringListModel) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::timerEvent", f)
	}
}

func (ptr *QStringListModel) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::timerEvent")
	}
}

func (ptr *QStringListModel) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QStringListModel) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQStringListModel_ChildEvent
func callbackQStringListModel_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQStringListModelFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QStringListModel) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::childEvent", f)
	}
}

func (ptr *QStringListModel) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::childEvent")
	}
}

func (ptr *QStringListModel) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QStringListModel) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQStringListModel_ConnectNotify
func callbackQStringListModel_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQStringListModelFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStringListModel) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::connectNotify", f)
	}
}

func (ptr *QStringListModel) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::connectNotify")
	}
}

func (ptr *QStringListModel) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStringListModel) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQStringListModel_CustomEvent
func callbackQStringListModel_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQStringListModelFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QStringListModel) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::customEvent", f)
	}
}

func (ptr *QStringListModel) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::customEvent")
	}
}

func (ptr *QStringListModel) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QStringListModel) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQStringListModel_DeleteLater
func callbackQStringListModel_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQStringListModelFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QStringListModel) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::deleteLater", f)
	}
}

func (ptr *QStringListModel) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::deleteLater")
	}
}

func (ptr *QStringListModel) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QStringListModel_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QStringListModel) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QStringListModel_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQStringListModel_DisconnectNotify
func callbackQStringListModel_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQStringListModelFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QStringListModel) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::disconnectNotify", f)
	}
}

func (ptr *QStringListModel) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::disconnectNotify")
	}
}

func (ptr *QStringListModel) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QStringListModel) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QStringListModel_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQStringListModel_Event
func callbackQStringListModel_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QStringListModel) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::event", f)
	}
}

func (ptr *QStringListModel) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::event")
	}
}

func (ptr *QStringListModel) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QStringListModel) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQStringListModel_EventFilter
func callbackQStringListModel_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQStringListModelFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QStringListModel) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::eventFilter", f)
	}
}

func (ptr *QStringListModel) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::eventFilter")
	}
}

func (ptr *QStringListModel) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QStringListModel) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QStringListModel_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQStringListModel_MetaObject
func callbackQStringListModel_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QStringListModel::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQStringListModelFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QStringListModel) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::metaObject", f)
	}
}

func (ptr *QStringListModel) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QStringListModel::metaObject")
	}
}

func (ptr *QStringListModel) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QStringListModel_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStringListModel) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QStringListModel_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QStringMatcher struct {
	ptr unsafe.Pointer
}

type QStringMatcher_ITF interface {
	QStringMatcher_PTR() *QStringMatcher
}

func (p *QStringMatcher) QStringMatcher_PTR() *QStringMatcher {
	return p
}

func (p *QStringMatcher) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStringMatcher) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStringMatcher(ptr QStringMatcher_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStringMatcher_PTR().Pointer()
	}
	return nil
}

func NewQStringMatcherFromPointer(ptr unsafe.Pointer) *QStringMatcher {
	var n = new(QStringMatcher)
	n.SetPointer(ptr)
	return n
}
func NewQStringMatcher3(uc QChar_ITF, length int, cs Qt__CaseSensitivity) *QStringMatcher {
	var tmpValue = NewQStringMatcherFromPointer(C.QStringMatcher_NewQStringMatcher3(PointerFromQChar(uc), C.int(int32(length)), C.longlong(cs)))
	runtime.SetFinalizer(tmpValue, (*QStringMatcher).DestroyQStringMatcher)
	return tmpValue
}

func (ptr *QStringMatcher) Pattern() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStringMatcher_Pattern(ptr.Pointer()))
	}
	return ""
}

func NewQStringMatcher() *QStringMatcher {
	var tmpValue = NewQStringMatcherFromPointer(C.QStringMatcher_NewQStringMatcher())
	runtime.SetFinalizer(tmpValue, (*QStringMatcher).DestroyQStringMatcher)
	return tmpValue
}

func NewQStringMatcher2(pattern string, cs Qt__CaseSensitivity) *QStringMatcher {
	var patternC = C.CString(pattern)
	defer C.free(unsafe.Pointer(patternC))
	var tmpValue = NewQStringMatcherFromPointer(C.QStringMatcher_NewQStringMatcher2(patternC, C.longlong(cs)))
	runtime.SetFinalizer(tmpValue, (*QStringMatcher).DestroyQStringMatcher)
	return tmpValue
}

func NewQStringMatcher4(other QStringMatcher_ITF) *QStringMatcher {
	var tmpValue = NewQStringMatcherFromPointer(C.QStringMatcher_NewQStringMatcher4(PointerFromQStringMatcher(other)))
	runtime.SetFinalizer(tmpValue, (*QStringMatcher).DestroyQStringMatcher)
	return tmpValue
}

func (ptr *QStringMatcher) CaseSensitivity() Qt__CaseSensitivity {
	if ptr.Pointer() != nil {
		return Qt__CaseSensitivity(C.QStringMatcher_CaseSensitivity(ptr.Pointer()))
	}
	return 0
}

func (ptr *QStringMatcher) IndexIn2(str QChar_ITF, length int, from int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringMatcher_IndexIn2(ptr.Pointer(), PointerFromQChar(str), C.int(int32(length)), C.int(int32(from)))))
	}
	return 0
}

func (ptr *QStringMatcher) IndexIn(str string, from int) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QStringMatcher_IndexIn(ptr.Pointer(), strC, C.int(int32(from)))))
	}
	return 0
}

func (ptr *QStringMatcher) SetCaseSensitivity(cs Qt__CaseSensitivity) {
	if ptr.Pointer() != nil {
		C.QStringMatcher_SetCaseSensitivity(ptr.Pointer(), C.longlong(cs))
	}
}

func (ptr *QStringMatcher) SetPattern(pattern string) {
	if ptr.Pointer() != nil {
		var patternC = C.CString(pattern)
		defer C.free(unsafe.Pointer(patternC))
		C.QStringMatcher_SetPattern(ptr.Pointer(), patternC)
	}
}

func (ptr *QStringMatcher) DestroyQStringMatcher() {
	if ptr.Pointer() != nil {
		C.QStringMatcher_DestroyQStringMatcher(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QStringRef struct {
	ptr unsafe.Pointer
}

type QStringRef_ITF interface {
	QStringRef_PTR() *QStringRef
}

func (p *QStringRef) QStringRef_PTR() *QStringRef {
	return p
}

func (p *QStringRef) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QStringRef) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQStringRef(ptr QStringRef_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QStringRef_PTR().Pointer()
	}
	return nil
}

func NewQStringRefFromPointer(ptr unsafe.Pointer) *QStringRef {
	var n = new(QStringRef)
	n.SetPointer(ptr)
	return n
}
func (ptr *QStringRef) Left(n int) *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QStringRef_Left(ptr.Pointer(), C.int(int32(n))))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) Mid(position int, n int) *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QStringRef_Mid(ptr.Pointer(), C.int(int32(position)), C.int(int32(n))))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) Right(n int) *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QStringRef_Right(ptr.Pointer(), C.int(int32(n))))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) ToLong(ok bool, base int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_ToLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func (ptr *QStringRef) ToULong(ok bool, base int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QStringRef_ToULong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func NewQStringRef() *QStringRef {
	var tmpValue = NewQStringRefFromPointer(C.QStringRef_NewQStringRef())
	runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
	return tmpValue
}

func NewQStringRef5(other QStringRef_ITF) *QStringRef {
	var tmpValue = NewQStringRefFromPointer(C.QStringRef_NewQStringRef5(PointerFromQStringRef(other)))
	runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
	return tmpValue
}

func NewQStringRef3(stri string) *QStringRef {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQStringRefFromPointer(C.QStringRef_NewQStringRef3(striC))
	runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
	return tmpValue
}

func NewQStringRef2(stri string, position int, length int) *QStringRef {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQStringRefFromPointer(C.QStringRef_NewQStringRef2(striC, C.int(int32(position)), C.int(int32(length))))
	runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
	return tmpValue
}

func NewQStringRef4(other QStringRef_ITF) *QStringRef {
	var tmpValue = NewQStringRefFromPointer(C.QStringRef_NewQStringRef4(PointerFromQStringRef(other)))
	runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
	return tmpValue
}

func (ptr *QStringRef) AppendTo(stri string) *QStringRef {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		var tmpValue = NewQStringRefFromPointer(C.QStringRef_AppendTo(ptr.Pointer(), striC))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) At(position int) *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QStringRef_At(ptr.Pointer(), C.int(int32(position))))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) Clear() {
	if ptr.Pointer() != nil {
		C.QStringRef_Clear(ptr.Pointer())
	}
}

func QStringRef_Compare6(s1 QStringRef_ITF, s2 QLatin1String_ITF, cs Qt__CaseSensitivity) int {
	return int(int32(C.QStringRef_QStringRef_Compare6(PointerFromQStringRef(s1), PointerFromQLatin1String(s2), C.longlong(cs))))
}

func (ptr *QStringRef) Compare6(s1 QStringRef_ITF, s2 QLatin1String_ITF, cs Qt__CaseSensitivity) int {
	return int(int32(C.QStringRef_QStringRef_Compare6(PointerFromQStringRef(s1), PointerFromQLatin1String(s2), C.longlong(cs))))
}

func QStringRef_Compare(s1 QStringRef_ITF, s2 string, cs Qt__CaseSensitivity) int {
	var s2C = C.CString(s2)
	defer C.free(unsafe.Pointer(s2C))
	return int(int32(C.QStringRef_QStringRef_Compare(PointerFromQStringRef(s1), s2C, C.longlong(cs))))
}

func (ptr *QStringRef) Compare(s1 QStringRef_ITF, s2 string, cs Qt__CaseSensitivity) int {
	var s2C = C.CString(s2)
	defer C.free(unsafe.Pointer(s2C))
	return int(int32(C.QStringRef_QStringRef_Compare(PointerFromQStringRef(s1), s2C, C.longlong(cs))))
}

func QStringRef_Compare5(s1 QStringRef_ITF, s2 QStringRef_ITF, cs Qt__CaseSensitivity) int {
	return int(int32(C.QStringRef_QStringRef_Compare5(PointerFromQStringRef(s1), PointerFromQStringRef(s2), C.longlong(cs))))
}

func (ptr *QStringRef) Compare5(s1 QStringRef_ITF, s2 QStringRef_ITF, cs Qt__CaseSensitivity) int {
	return int(int32(C.QStringRef_QStringRef_Compare5(PointerFromQStringRef(s1), PointerFromQStringRef(s2), C.longlong(cs))))
}

func (ptr *QStringRef) Compare3(other QLatin1String_ITF, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Compare3(ptr.Pointer(), PointerFromQLatin1String(other), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) Compare4(other string, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		var otherC = C.CString(other)
		defer C.free(unsafe.Pointer(otherC))
		return int(int32(C.QStringRef_Compare4(ptr.Pointer(), otherC, C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) Compare2(other QStringRef_ITF, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Compare2(ptr.Pointer(), PointerFromQStringRef(other), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) ConstData() *QChar {
	if ptr.Pointer() != nil {
		return NewQCharFromPointer(C.QStringRef_ConstData(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStringRef) Contains2(ch QChar_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_Contains2(ptr.Pointer(), PointerFromQChar(ch), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) Contains3(str QLatin1String_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_Contains3(ptr.Pointer(), PointerFromQLatin1String(str), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) Contains(str string, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return C.QStringRef_Contains(ptr.Pointer(), strC, C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) Contains4(str QStringRef_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_Contains4(ptr.Pointer(), PointerFromQStringRef(str), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) Count() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Count(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStringRef) Count3(ch QChar_ITF, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Count3(ptr.Pointer(), PointerFromQChar(ch), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) Count2(str string, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QStringRef_Count2(ptr.Pointer(), strC, C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) Count4(str QStringRef_ITF, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Count4(ptr.Pointer(), PointerFromQStringRef(str), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) Data() *QChar {
	if ptr.Pointer() != nil {
		return NewQCharFromPointer(C.QStringRef_Data(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStringRef) EndsWith3(ch QChar_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_EndsWith3(ptr.Pointer(), PointerFromQChar(ch), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) EndsWith2(str QLatin1String_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_EndsWith2(ptr.Pointer(), PointerFromQLatin1String(str), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) EndsWith(str string, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return C.QStringRef_EndsWith(ptr.Pointer(), strC, C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) EndsWith4(str QStringRef_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_EndsWith4(ptr.Pointer(), PointerFromQStringRef(str), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) IndexOf2(ch QChar_ITF, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_IndexOf2(ptr.Pointer(), PointerFromQChar(ch), C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) IndexOf3(str QLatin1String_ITF, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_IndexOf3(ptr.Pointer(), PointerFromQLatin1String(str), C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) IndexOf(str string, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QStringRef_IndexOf(ptr.Pointer(), strC, C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) IndexOf4(str QStringRef_ITF, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_IndexOf4(ptr.Pointer(), PointerFromQStringRef(str), C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStringRef) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QStringRef) LastIndexOf2(ch QChar_ITF, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_LastIndexOf2(ptr.Pointer(), PointerFromQChar(ch), C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) LastIndexOf3(str QLatin1String_ITF, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_LastIndexOf3(ptr.Pointer(), PointerFromQLatin1String(str), C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) LastIndexOf(str string, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return int(int32(C.QStringRef_LastIndexOf(ptr.Pointer(), strC, C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) LastIndexOf4(str QStringRef_ITF, from int, cs Qt__CaseSensitivity) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_LastIndexOf4(ptr.Pointer(), PointerFromQStringRef(str), C.int(int32(from)), C.longlong(cs))))
	}
	return 0
}

func (ptr *QStringRef) Length() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Length(ptr.Pointer())))
	}
	return 0
}

func QStringRef_LocaleAwareCompare(s1 QStringRef_ITF, s2 string) int {
	var s2C = C.CString(s2)
	defer C.free(unsafe.Pointer(s2C))
	return int(int32(C.QStringRef_QStringRef_LocaleAwareCompare(PointerFromQStringRef(s1), s2C)))
}

func (ptr *QStringRef) LocaleAwareCompare(s1 QStringRef_ITF, s2 string) int {
	var s2C = C.CString(s2)
	defer C.free(unsafe.Pointer(s2C))
	return int(int32(C.QStringRef_QStringRef_LocaleAwareCompare(PointerFromQStringRef(s1), s2C)))
}

func QStringRef_LocaleAwareCompare4(s1 QStringRef_ITF, s2 QStringRef_ITF) int {
	return int(int32(C.QStringRef_QStringRef_LocaleAwareCompare4(PointerFromQStringRef(s1), PointerFromQStringRef(s2))))
}

func (ptr *QStringRef) LocaleAwareCompare4(s1 QStringRef_ITF, s2 QStringRef_ITF) int {
	return int(int32(C.QStringRef_QStringRef_LocaleAwareCompare4(PointerFromQStringRef(s1), PointerFromQStringRef(s2))))
}

func (ptr *QStringRef) LocaleAwareCompare3(other string) int {
	if ptr.Pointer() != nil {
		var otherC = C.CString(other)
		defer C.free(unsafe.Pointer(otherC))
		return int(int32(C.QStringRef_LocaleAwareCompare3(ptr.Pointer(), otherC)))
	}
	return 0
}

func (ptr *QStringRef) LocaleAwareCompare2(other QStringRef_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_LocaleAwareCompare2(ptr.Pointer(), PointerFromQStringRef(other))))
	}
	return 0
}

func (ptr *QStringRef) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStringRef) Size() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_Size(ptr.Pointer())))
	}
	return 0
}

func (ptr *QStringRef) Split2(sep QChar_ITF, behavior QString__SplitBehavior, cs Qt__CaseSensitivity) []*QStringRef {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QStringRef {
			var out = make([]*QStringRef, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStringRefFromPointer(l.data).split_atList(i)
			}
			return out
		}(C.QStringRef_Split2(ptr.Pointer(), PointerFromQChar(sep), C.longlong(behavior), C.longlong(cs)))
	}
	return nil
}

func (ptr *QStringRef) Split(sep string, behavior QString__SplitBehavior, cs Qt__CaseSensitivity) []*QStringRef {
	if ptr.Pointer() != nil {
		var sepC = C.CString(sep)
		defer C.free(unsafe.Pointer(sepC))
		return func(l C.struct_QtCore_PackedList) []*QStringRef {
			var out = make([]*QStringRef, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQStringRefFromPointer(l.data).split_atList(i)
			}
			return out
		}(C.QStringRef_Split(ptr.Pointer(), sepC, C.longlong(behavior), C.longlong(cs)))
	}
	return nil
}

func (ptr *QStringRef) StartsWith3(ch QChar_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_StartsWith3(ptr.Pointer(), PointerFromQChar(ch), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) StartsWith2(str QLatin1String_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_StartsWith2(ptr.Pointer(), PointerFromQLatin1String(str), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) StartsWith(str string, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		return C.QStringRef_StartsWith(ptr.Pointer(), strC, C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) StartsWith4(str QStringRef_ITF, cs Qt__CaseSensitivity) bool {
	if ptr.Pointer() != nil {
		return C.QStringRef_StartsWith4(ptr.Pointer(), PointerFromQStringRef(str), C.longlong(cs)) != 0
	}
	return false
}

func (ptr *QStringRef) String() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStringRef_String(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStringRef) ToDouble(ok bool) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QStringRef_ToDouble(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QStringRef) ToFloat(ok bool) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QStringRef_ToFloat(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QStringRef) ToInt(ok bool, base int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QStringRef_ToInt(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func (ptr *QStringRef) ToLatin1() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QStringRef_ToLatin1(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) ToLocal8Bit() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QStringRef_ToLocal8Bit(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) ToLongLong(ok bool, base int) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QStringRef_ToLongLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QStringRef) ToShort(ok bool, base int) int16 {
	if ptr.Pointer() != nil {
		return int16(C.QStringRef_ToShort(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QStringRef) ToString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QStringRef_ToString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QStringRef) ToUInt(ok bool, base int) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QStringRef_ToUInt(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base)))))
	}
	return 0
}

func (ptr *QStringRef) ToULongLong(ok bool, base int) uint64 {
	if ptr.Pointer() != nil {
		return uint64(C.QStringRef_ToULongLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QStringRef) ToUShort(ok bool, base int) uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QStringRef_ToUShort(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))), C.int(int32(base))))
	}
	return 0
}

func (ptr *QStringRef) ToUtf8() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QStringRef_ToUtf8(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) Trimmed() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QStringRef_Trimmed(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QStringRef) Truncate(position int) {
	if ptr.Pointer() != nil {
		C.QStringRef_Truncate(ptr.Pointer(), C.int(int32(position)))
	}
}

func (ptr *QStringRef) Unicode() *QChar {
	if ptr.Pointer() != nil {
		return NewQCharFromPointer(C.QStringRef_Unicode(ptr.Pointer()))
	}
	return nil
}

func (ptr *QStringRef) DestroyQStringRef() {
	if ptr.Pointer() != nil {
		C.QStringRef_DestroyQStringRef(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QStringRef) split_atList(i int) *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QStringRef_split_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

//QSysInfo::Endian
type QSysInfo__Endian int64

const (
	QSysInfo__BigEndian    = QSysInfo__Endian(0)
	QSysInfo__LittleEndian = QSysInfo__Endian(1)
)

//QSysInfo::MacVersion
type QSysInfo__MacVersion int64

var (
	QSysInfo__MV_None         = QSysInfo__MacVersion(0xffff)
	QSysInfo__MV_Unknown      = QSysInfo__MacVersion(0x0000)
	QSysInfo__MV_9            = QSysInfo__MacVersion(C.QSysInfo_MV_9_Type())
	QSysInfo__MV_10_0         = QSysInfo__MacVersion(C.QSysInfo_MV_10_0_Type())
	QSysInfo__MV_10_1         = QSysInfo__MacVersion(C.QSysInfo_MV_10_1_Type())
	QSysInfo__MV_10_2         = QSysInfo__MacVersion(C.QSysInfo_MV_10_2_Type())
	QSysInfo__MV_10_3         = QSysInfo__MacVersion(C.QSysInfo_MV_10_3_Type())
	QSysInfo__MV_10_4         = QSysInfo__MacVersion(C.QSysInfo_MV_10_4_Type())
	QSysInfo__MV_10_5         = QSysInfo__MacVersion(C.QSysInfo_MV_10_5_Type())
	QSysInfo__MV_10_6         = QSysInfo__MacVersion(C.QSysInfo_MV_10_6_Type())
	QSysInfo__MV_10_7         = QSysInfo__MacVersion(C.QSysInfo_MV_10_7_Type())
	QSysInfo__MV_10_8         = QSysInfo__MacVersion(C.QSysInfo_MV_10_8_Type())
	QSysInfo__MV_10_9         = QSysInfo__MacVersion(C.QSysInfo_MV_10_9_Type())
	QSysInfo__MV_10_10        = QSysInfo__MacVersion(C.QSysInfo_MV_10_10_Type())
	QSysInfo__MV_10_11        = QSysInfo__MacVersion(C.QSysInfo_MV_10_11_Type())
	QSysInfo__MV_CHEETAH      = QSysInfo__MacVersion(QSysInfo__MV_10_0)
	QSysInfo__MV_PUMA         = QSysInfo__MacVersion(QSysInfo__MV_10_1)
	QSysInfo__MV_JAGUAR       = QSysInfo__MacVersion(QSysInfo__MV_10_2)
	QSysInfo__MV_PANTHER      = QSysInfo__MacVersion(QSysInfo__MV_10_3)
	QSysInfo__MV_TIGER        = QSysInfo__MacVersion(QSysInfo__MV_10_4)
	QSysInfo__MV_LEOPARD      = QSysInfo__MacVersion(QSysInfo__MV_10_5)
	QSysInfo__MV_SNOWLEOPARD  = QSysInfo__MacVersion(QSysInfo__MV_10_6)
	QSysInfo__MV_LION         = QSysInfo__MacVersion(QSysInfo__MV_10_7)
	QSysInfo__MV_MOUNTAINLION = QSysInfo__MacVersion(QSysInfo__MV_10_8)
	QSysInfo__MV_MAVERICKS    = QSysInfo__MacVersion(QSysInfo__MV_10_9)
	QSysInfo__MV_YOSEMITE     = QSysInfo__MacVersion(QSysInfo__MV_10_10)
	QSysInfo__MV_ELCAPITAN    = QSysInfo__MacVersion(QSysInfo__MV_10_11)
	QSysInfo__MV_IOS          = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_Type())
	QSysInfo__MV_IOS_4_3      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_4_3_Type())
	QSysInfo__MV_IOS_5_0      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_5_0_Type())
	QSysInfo__MV_IOS_5_1      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_5_1_Type())
	QSysInfo__MV_IOS_6_0      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_6_0_Type())
	QSysInfo__MV_IOS_6_1      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_6_1_Type())
	QSysInfo__MV_IOS_7_0      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_7_0_Type())
	QSysInfo__MV_IOS_7_1      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_7_1_Type())
	QSysInfo__MV_IOS_8_0      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_8_0_Type())
	QSysInfo__MV_IOS_8_1      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_8_1_Type())
	QSysInfo__MV_IOS_8_2      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_8_2_Type())
	QSysInfo__MV_IOS_8_3      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_8_3_Type())
	QSysInfo__MV_IOS_8_4      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_8_4_Type())
	QSysInfo__MV_IOS_9_0      = QSysInfo__MacVersion(C.QSysInfo_MV_IOS_9_0_Type())
)

//QSysInfo::Sizes
type QSysInfo__Sizes int64

var (
	QSysInfo__WordSize = QSysInfo__Sizes(C.QSysInfo_WordSize_Type())
)

//QSysInfo::WinVersion
type QSysInfo__WinVersion int64

const (
	QSysInfo__WV_None       = QSysInfo__WinVersion(0x0000)
	QSysInfo__WV_32s        = QSysInfo__WinVersion(0x0001)
	QSysInfo__WV_95         = QSysInfo__WinVersion(0x0002)
	QSysInfo__WV_98         = QSysInfo__WinVersion(0x0003)
	QSysInfo__WV_Me         = QSysInfo__WinVersion(0x0004)
	QSysInfo__WV_DOS_based  = QSysInfo__WinVersion(0x000f)
	QSysInfo__WV_NT         = QSysInfo__WinVersion(0x0010)
	QSysInfo__WV_2000       = QSysInfo__WinVersion(0x0020)
	QSysInfo__WV_XP         = QSysInfo__WinVersion(0x0030)
	QSysInfo__WV_2003       = QSysInfo__WinVersion(0x0040)
	QSysInfo__WV_VISTA      = QSysInfo__WinVersion(0x0080)
	QSysInfo__WV_WINDOWS7   = QSysInfo__WinVersion(0x0090)
	QSysInfo__WV_WINDOWS8   = QSysInfo__WinVersion(0x00a0)
	QSysInfo__WV_WINDOWS8_1 = QSysInfo__WinVersion(0x00b0)
	QSysInfo__WV_WINDOWS10  = QSysInfo__WinVersion(0x00c0)
	QSysInfo__WV_NT_based   = QSysInfo__WinVersion(0x00f0)
	QSysInfo__WV_4_0        = QSysInfo__WinVersion(QSysInfo__WV_NT)
	QSysInfo__WV_5_0        = QSysInfo__WinVersion(QSysInfo__WV_2000)
	QSysInfo__WV_5_1        = QSysInfo__WinVersion(QSysInfo__WV_XP)
	QSysInfo__WV_5_2        = QSysInfo__WinVersion(QSysInfo__WV_2003)
	QSysInfo__WV_6_0        = QSysInfo__WinVersion(QSysInfo__WV_VISTA)
	QSysInfo__WV_6_1        = QSysInfo__WinVersion(QSysInfo__WV_WINDOWS7)
	QSysInfo__WV_6_2        = QSysInfo__WinVersion(QSysInfo__WV_WINDOWS8)
	QSysInfo__WV_6_3        = QSysInfo__WinVersion(QSysInfo__WV_WINDOWS8_1)
	QSysInfo__WV_10_0       = QSysInfo__WinVersion(QSysInfo__WV_WINDOWS10)
	QSysInfo__WV_CE         = QSysInfo__WinVersion(0x0100)
	QSysInfo__WV_CENET      = QSysInfo__WinVersion(0x0200)
	QSysInfo__WV_CE_5       = QSysInfo__WinVersion(0x0300)
	QSysInfo__WV_CE_6       = QSysInfo__WinVersion(0x0400)
	QSysInfo__WV_CE_based   = QSysInfo__WinVersion(0x0f00)
)

type QSysInfo struct {
	ptr unsafe.Pointer
}

type QSysInfo_ITF interface {
	QSysInfo_PTR() *QSysInfo
}

func (p *QSysInfo) QSysInfo_PTR() *QSysInfo {
	return p
}

func (p *QSysInfo) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSysInfo) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSysInfo(ptr QSysInfo_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSysInfo_PTR().Pointer()
	}
	return nil
}

func NewQSysInfoFromPointer(ptr unsafe.Pointer) *QSysInfo {
	var n = new(QSysInfo)
	n.SetPointer(ptr)
	return n
}

func (ptr *QSysInfo) DestroyQSysInfo() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QSysInfo_MacVersion() QSysInfo__MacVersion {
	return QSysInfo__MacVersion(C.QSysInfo_QSysInfo_MacVersion())
}

func (ptr *QSysInfo) MacVersion() QSysInfo__MacVersion {
	return QSysInfo__MacVersion(C.QSysInfo_QSysInfo_MacVersion())
}

func QSysInfo_BuildAbi() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_BuildAbi())
}

func (ptr *QSysInfo) BuildAbi() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_BuildAbi())
}

func QSysInfo_BuildCpuArchitecture() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_BuildCpuArchitecture())
}

func (ptr *QSysInfo) BuildCpuArchitecture() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_BuildCpuArchitecture())
}

func QSysInfo_CurrentCpuArchitecture() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_CurrentCpuArchitecture())
}

func (ptr *QSysInfo) CurrentCpuArchitecture() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_CurrentCpuArchitecture())
}

func QSysInfo_KernelType() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_KernelType())
}

func (ptr *QSysInfo) KernelType() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_KernelType())
}

func QSysInfo_KernelVersion() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_KernelVersion())
}

func (ptr *QSysInfo) KernelVersion() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_KernelVersion())
}

func QSysInfo_MachineHostName() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_MachineHostName())
}

func (ptr *QSysInfo) MachineHostName() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_MachineHostName())
}

func QSysInfo_PrettyProductName() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_PrettyProductName())
}

func (ptr *QSysInfo) PrettyProductName() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_PrettyProductName())
}

func QSysInfo_ProductType() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_ProductType())
}

func (ptr *QSysInfo) ProductType() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_ProductType())
}

func QSysInfo_ProductVersion() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_ProductVersion())
}

func (ptr *QSysInfo) ProductVersion() string {
	return cGoUnpackString(C.QSysInfo_QSysInfo_ProductVersion())
}

func QSysInfo_WindowsVersion() QSysInfo__WinVersion {
	return QSysInfo__WinVersion(C.QSysInfo_QSysInfo_WindowsVersion())
}

func (ptr *QSysInfo) WindowsVersion() QSysInfo__WinVersion {
	return QSysInfo__WinVersion(C.QSysInfo_QSysInfo_WindowsVersion())
}

func QSysInfo_MacintoshVersion() QSysInfo__MacVersion {
	return QSysInfo__MacVersion(C.QSysInfo_QSysInfo_MacintoshVersion())
}

func (ptr *QSysInfo) MacintoshVersion() QSysInfo__MacVersion {
	return QSysInfo__MacVersion(C.QSysInfo_QSysInfo_MacintoshVersion())
}

//QSystemSemaphore::AccessMode
type QSystemSemaphore__AccessMode int64

const (
	QSystemSemaphore__Open   = QSystemSemaphore__AccessMode(0)
	QSystemSemaphore__Create = QSystemSemaphore__AccessMode(1)
)

//QSystemSemaphore::SystemSemaphoreError
type QSystemSemaphore__SystemSemaphoreError int64

const (
	QSystemSemaphore__NoError          = QSystemSemaphore__SystemSemaphoreError(0)
	QSystemSemaphore__PermissionDenied = QSystemSemaphore__SystemSemaphoreError(1)
	QSystemSemaphore__KeyError         = QSystemSemaphore__SystemSemaphoreError(2)
	QSystemSemaphore__AlreadyExists    = QSystemSemaphore__SystemSemaphoreError(3)
	QSystemSemaphore__NotFound         = QSystemSemaphore__SystemSemaphoreError(4)
	QSystemSemaphore__OutOfResources   = QSystemSemaphore__SystemSemaphoreError(5)
	QSystemSemaphore__UnknownError     = QSystemSemaphore__SystemSemaphoreError(6)
)

type QSystemSemaphore struct {
	ptr unsafe.Pointer
}

type QSystemSemaphore_ITF interface {
	QSystemSemaphore_PTR() *QSystemSemaphore
}

func (p *QSystemSemaphore) QSystemSemaphore_PTR() *QSystemSemaphore {
	return p
}

func (p *QSystemSemaphore) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QSystemSemaphore) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQSystemSemaphore(ptr QSystemSemaphore_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QSystemSemaphore_PTR().Pointer()
	}
	return nil
}

func NewQSystemSemaphoreFromPointer(ptr unsafe.Pointer) *QSystemSemaphore {
	var n = new(QSystemSemaphore)
	n.SetPointer(ptr)
	return n
}
func NewQSystemSemaphore(key string, initialValue int, mode QSystemSemaphore__AccessMode) *QSystemSemaphore {
	var keyC = C.CString(key)
	defer C.free(unsafe.Pointer(keyC))
	var tmpValue = NewQSystemSemaphoreFromPointer(C.QSystemSemaphore_NewQSystemSemaphore(keyC, C.int(int32(initialValue)), C.longlong(mode)))
	runtime.SetFinalizer(tmpValue, (*QSystemSemaphore).DestroyQSystemSemaphore)
	return tmpValue
}

func (ptr *QSystemSemaphore) Acquire() bool {
	if ptr.Pointer() != nil {
		return C.QSystemSemaphore_Acquire(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QSystemSemaphore) Error() QSystemSemaphore__SystemSemaphoreError {
	if ptr.Pointer() != nil {
		return QSystemSemaphore__SystemSemaphoreError(C.QSystemSemaphore_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QSystemSemaphore) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSystemSemaphore_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSystemSemaphore) Key() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QSystemSemaphore_Key(ptr.Pointer()))
	}
	return ""
}

func (ptr *QSystemSemaphore) Release(n int) bool {
	if ptr.Pointer() != nil {
		return C.QSystemSemaphore_Release(ptr.Pointer(), C.int(int32(n))) != 0
	}
	return false
}

func (ptr *QSystemSemaphore) SetKey(key string, initialValue int, mode QSystemSemaphore__AccessMode) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QSystemSemaphore_SetKey(ptr.Pointer(), keyC, C.int(int32(initialValue)), C.longlong(mode))
	}
}

func (ptr *QSystemSemaphore) DestroyQSystemSemaphore() {
	if ptr.Pointer() != nil {
		C.QSystemSemaphore_DestroyQSystemSemaphore(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTemporaryDir struct {
	ptr unsafe.Pointer
}

type QTemporaryDir_ITF interface {
	QTemporaryDir_PTR() *QTemporaryDir
}

func (p *QTemporaryDir) QTemporaryDir_PTR() *QTemporaryDir {
	return p
}

func (p *QTemporaryDir) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTemporaryDir) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTemporaryDir(ptr QTemporaryDir_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTemporaryDir_PTR().Pointer()
	}
	return nil
}

func NewQTemporaryDirFromPointer(ptr unsafe.Pointer) *QTemporaryDir {
	var n = new(QTemporaryDir)
	n.SetPointer(ptr)
	return n
}
func NewQTemporaryDir() *QTemporaryDir {
	var tmpValue = NewQTemporaryDirFromPointer(C.QTemporaryDir_NewQTemporaryDir())
	runtime.SetFinalizer(tmpValue, (*QTemporaryDir).DestroyQTemporaryDir)
	return tmpValue
}

func NewQTemporaryDir2(templatePath string) *QTemporaryDir {
	var templatePathC = C.CString(templatePath)
	defer C.free(unsafe.Pointer(templatePathC))
	var tmpValue = NewQTemporaryDirFromPointer(C.QTemporaryDir_NewQTemporaryDir2(templatePathC))
	runtime.SetFinalizer(tmpValue, (*QTemporaryDir).DestroyQTemporaryDir)
	return tmpValue
}

func (ptr *QTemporaryDir) AutoRemove() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryDir_AutoRemove(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTemporaryDir) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTemporaryDir_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTemporaryDir) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryDir_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTemporaryDir) Path() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTemporaryDir_Path(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTemporaryDir) Remove() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryDir_Remove(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTemporaryDir) SetAutoRemove(b bool) {
	if ptr.Pointer() != nil {
		C.QTemporaryDir_SetAutoRemove(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTemporaryDir) DestroyQTemporaryDir() {
	if ptr.Pointer() != nil {
		C.QTemporaryDir_DestroyQTemporaryDir(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTemporaryFile struct {
	QFile
}

type QTemporaryFile_ITF interface {
	QFile_ITF
	QTemporaryFile_PTR() *QTemporaryFile
}

func (p *QTemporaryFile) QTemporaryFile_PTR() *QTemporaryFile {
	return p
}

func (p *QTemporaryFile) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QFile_PTR().Pointer()
	}
	return nil
}

func (p *QTemporaryFile) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QFile_PTR().SetPointer(ptr)
	}
}

func PointerFromQTemporaryFile(ptr QTemporaryFile_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTemporaryFile_PTR().Pointer()
	}
	return nil
}

func NewQTemporaryFileFromPointer(ptr unsafe.Pointer) *QTemporaryFile {
	var n = new(QTemporaryFile)
	n.SetPointer(ptr)
	return n
}
func NewQTemporaryFile() *QTemporaryFile {
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_NewQTemporaryFile())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQTemporaryFile3(parent QObject_ITF) *QTemporaryFile {
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_NewQTemporaryFile3(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQTemporaryFile2(templateName string) *QTemporaryFile {
	var templateNameC = C.CString(templateName)
	defer C.free(unsafe.Pointer(templateNameC))
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_NewQTemporaryFile2(templateNameC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func NewQTemporaryFile4(templateName string, parent QObject_ITF) *QTemporaryFile {
	var templateNameC = C.CString(templateName)
	defer C.free(unsafe.Pointer(templateNameC))
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_NewQTemporaryFile4(templateNameC, PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTemporaryFile) AutoRemove() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_AutoRemove(ptr.Pointer()) != 0
	}
	return false
}

func QTemporaryFile_CreateNativeFile(file QFile_ITF) *QTemporaryFile {
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_QTemporaryFile_CreateNativeFile(PointerFromQFile(file)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTemporaryFile) CreateNativeFile(file QFile_ITF) *QTemporaryFile {
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_QTemporaryFile_CreateNativeFile(PointerFromQFile(file)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QTemporaryFile_CreateNativeFile2(fileName string) *QTemporaryFile {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_QTemporaryFile_CreateNativeFile2(fileNameC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTemporaryFile) CreateNativeFile2(fileName string) *QTemporaryFile {
	var fileNameC = C.CString(fileName)
	defer C.free(unsafe.Pointer(fileNameC))
	var tmpValue = NewQTemporaryFileFromPointer(C.QTemporaryFile_QTemporaryFile_CreateNativeFile2(fileNameC))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQTemporaryFile_FileName
func callbackQTemporaryFile_FileName(ptr unsafe.Pointer) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::fileName"); signal != nil {
		return C.CString(signal.(func() string)())
	}

	return C.CString(NewQTemporaryFileFromPointer(ptr).FileNameDefault())
}

func (ptr *QTemporaryFile) ConnectFileName(f func() string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::fileName", f)
	}
}

func (ptr *QTemporaryFile) DisconnectFileName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::fileName")
	}
}

func (ptr *QTemporaryFile) FileName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTemporaryFile_FileName(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTemporaryFile) FileNameDefault() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTemporaryFile_FileNameDefault(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTemporaryFile) FileTemplate() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTemporaryFile_FileTemplate(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTemporaryFile) Open() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_Open(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQTemporaryFile_Open2
func callbackQTemporaryFile_Open2(ptr unsafe.Pointer, flags C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::open2"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QIODevice__OpenModeFlag) bool)(QIODevice__OpenModeFlag(flags)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).Open2Default(QIODevice__OpenModeFlag(flags)))))
}

func (ptr *QTemporaryFile) ConnectOpen2(f func(flags QIODevice__OpenModeFlag) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::open2", f)
	}
}

func (ptr *QTemporaryFile) DisconnectOpen2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::open2")
	}
}

func (ptr *QTemporaryFile) Open2(flags QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_Open2(ptr.Pointer(), C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QTemporaryFile) Open2Default(flags QIODevice__OpenModeFlag) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_Open2Default(ptr.Pointer(), C.longlong(flags)) != 0
	}
	return false
}

func (ptr *QTemporaryFile) SetAutoRemove(b bool) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_SetAutoRemove(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(b))))
	}
}

func (ptr *QTemporaryFile) SetFileTemplate(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QTemporaryFile_SetFileTemplate(ptr.Pointer(), nameC)
	}
}

func (ptr *QTemporaryFile) DestroyQTemporaryFile() {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_DestroyQTemporaryFile(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTemporaryFile_Permissions
func callbackQTemporaryFile_Permissions(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::permissions"); signal != nil {
		return C.longlong(signal.(func() QFileDevice__Permission)())
	}

	return C.longlong(NewQTemporaryFileFromPointer(ptr).PermissionsDefault())
}

func (ptr *QTemporaryFile) ConnectPermissions(f func() QFileDevice__Permission) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::permissions", f)
	}
}

func (ptr *QTemporaryFile) DisconnectPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::permissions")
	}
}

func (ptr *QTemporaryFile) Permissions() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QTemporaryFile_Permissions(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTemporaryFile) PermissionsDefault() QFileDevice__Permission {
	if ptr.Pointer() != nil {
		return QFileDevice__Permission(C.QTemporaryFile_PermissionsDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQTemporaryFile_Resize
func callbackQTemporaryFile_Resize(ptr unsafe.Pointer, sz C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::resize"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(sz)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).ResizeDefault(int64(sz)))))
}

func (ptr *QTemporaryFile) ConnectResize(f func(sz int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::resize", f)
	}
}

func (ptr *QTemporaryFile) DisconnectResize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::resize")
	}
}

func (ptr *QTemporaryFile) Resize(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_Resize(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

func (ptr *QTemporaryFile) ResizeDefault(sz int64) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_ResizeDefault(ptr.Pointer(), C.longlong(sz)) != 0
	}
	return false
}

//export callbackQTemporaryFile_SetPermissions
func callbackQTemporaryFile_SetPermissions(ptr unsafe.Pointer, permissions C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::setPermissions"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(QFileDevice__Permission) bool)(QFileDevice__Permission(permissions)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).SetPermissionsDefault(QFileDevice__Permission(permissions)))))
}

func (ptr *QTemporaryFile) ConnectSetPermissions(f func(permissions QFileDevice__Permission) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::setPermissions", f)
	}
}

func (ptr *QTemporaryFile) DisconnectSetPermissions() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::setPermissions")
	}
}

func (ptr *QTemporaryFile) SetPermissions(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_SetPermissions(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

func (ptr *QTemporaryFile) SetPermissionsDefault(permissions QFileDevice__Permission) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_SetPermissionsDefault(ptr.Pointer(), C.longlong(permissions)) != 0
	}
	return false
}

//export callbackQTemporaryFile_Size
func callbackQTemporaryFile_Size(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::size"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQTemporaryFileFromPointer(ptr).SizeDefault())
}

func (ptr *QTemporaryFile) ConnectSize(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::size", f)
	}
}

func (ptr *QTemporaryFile) DisconnectSize() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::size")
	}
}

func (ptr *QTemporaryFile) Size() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_Size(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTemporaryFile) SizeDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_SizeDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQTemporaryFile_Seek
func callbackQTemporaryFile_Seek(ptr unsafe.Pointer, pos C.longlong) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::seek"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int64) bool)(int64(pos)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).SeekDefault(int64(pos)))))
}

func (ptr *QTemporaryFile) ConnectSeek(f func(pos int64) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::seek", f)
	}
}

func (ptr *QTemporaryFile) DisconnectSeek() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::seek")
	}
}

func (ptr *QTemporaryFile) Seek(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_Seek(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QTemporaryFile) SeekDefault(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_SeekDefault(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

//export callbackQTemporaryFile_AtEnd
func callbackQTemporaryFile_AtEnd(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::atEnd"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).AtEndDefault())))
}

func (ptr *QTemporaryFile) ConnectAtEnd(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::atEnd", f)
	}
}

func (ptr *QTemporaryFile) DisconnectAtEnd() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::atEnd")
	}
}

func (ptr *QTemporaryFile) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTemporaryFile) AtEndDefault() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_AtEndDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQTemporaryFile_Close
func callbackQTemporaryFile_Close(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::close"); signal != nil {
		signal.(func())()
	} else {
		NewQTemporaryFileFromPointer(ptr).CloseDefault()
	}
}

func (ptr *QTemporaryFile) ConnectClose(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::close", f)
	}
}

func (ptr *QTemporaryFile) DisconnectClose() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::close")
	}
}

func (ptr *QTemporaryFile) Close() {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_Close(ptr.Pointer())
	}
}

func (ptr *QTemporaryFile) CloseDefault() {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_CloseDefault(ptr.Pointer())
	}
}

//export callbackQTemporaryFile_IsSequential
func callbackQTemporaryFile_IsSequential(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::isSequential"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).IsSequentialDefault())))
}

func (ptr *QTemporaryFile) ConnectIsSequential(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::isSequential", f)
	}
}

func (ptr *QTemporaryFile) DisconnectIsSequential() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::isSequential")
	}
}

func (ptr *QTemporaryFile) IsSequential() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_IsSequential(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTemporaryFile) IsSequentialDefault() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_IsSequentialDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQTemporaryFile_Pos
func callbackQTemporaryFile_Pos(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::pos"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQTemporaryFileFromPointer(ptr).PosDefault())
}

func (ptr *QTemporaryFile) ConnectPos(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::pos", f)
	}
}

func (ptr *QTemporaryFile) DisconnectPos() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::pos")
	}
}

func (ptr *QTemporaryFile) Pos() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_Pos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTemporaryFile) PosDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_PosDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQTemporaryFile_ReadLineData
func callbackQTemporaryFile_ReadLineData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, maxlen C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::readLineData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(maxlen)))
	}

	return C.longlong(NewQTemporaryFileFromPointer(ptr).ReadLineDataDefault(cGoUnpackString(data), int64(maxlen)))
}

func (ptr *QTemporaryFile) ConnectReadLineData(f func(data string, maxlen int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::readLineData", f)
	}
}

func (ptr *QTemporaryFile) DisconnectReadLineData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::readLineData")
	}
}

func (ptr *QTemporaryFile) ReadLineData(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QTemporaryFile_ReadLineData(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

func (ptr *QTemporaryFile) ReadLineDataDefault(data string, maxlen int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QTemporaryFile_ReadLineDataDefault(ptr.Pointer(), dataC, C.longlong(maxlen)))
	}
	return 0
}

//export callbackQTemporaryFile_WriteData
func callbackQTemporaryFile_WriteData(ptr unsafe.Pointer, data C.struct_QtCore_PackedString, len C.longlong) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::writeData"); signal != nil {
		return C.longlong(signal.(func(string, int64) int64)(cGoUnpackString(data), int64(len)))
	}

	return C.longlong(NewQTemporaryFileFromPointer(ptr).WriteDataDefault(cGoUnpackString(data), int64(len)))
}

func (ptr *QTemporaryFile) ConnectWriteData(f func(data string, len int64) int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::writeData", f)
	}
}

func (ptr *QTemporaryFile) DisconnectWriteData() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::writeData")
	}
}

func (ptr *QTemporaryFile) WriteData(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QTemporaryFile_WriteData(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

func (ptr *QTemporaryFile) WriteDataDefault(data string, len int64) int64 {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		return int64(C.QTemporaryFile_WriteDataDefault(ptr.Pointer(), dataC, C.longlong(len)))
	}
	return 0
}

//export callbackQTemporaryFile_BytesAvailable
func callbackQTemporaryFile_BytesAvailable(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::bytesAvailable"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQTemporaryFileFromPointer(ptr).BytesAvailableDefault())
}

func (ptr *QTemporaryFile) ConnectBytesAvailable(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::bytesAvailable", f)
	}
}

func (ptr *QTemporaryFile) DisconnectBytesAvailable() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::bytesAvailable")
	}
}

func (ptr *QTemporaryFile) BytesAvailable() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_BytesAvailable(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTemporaryFile) BytesAvailableDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_BytesAvailableDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQTemporaryFile_BytesToWrite
func callbackQTemporaryFile_BytesToWrite(ptr unsafe.Pointer) C.longlong {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::bytesToWrite"); signal != nil {
		return C.longlong(signal.(func() int64)())
	}

	return C.longlong(NewQTemporaryFileFromPointer(ptr).BytesToWriteDefault())
}

func (ptr *QTemporaryFile) ConnectBytesToWrite(f func() int64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::bytesToWrite", f)
	}
}

func (ptr *QTemporaryFile) DisconnectBytesToWrite() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::bytesToWrite")
	}
}

func (ptr *QTemporaryFile) BytesToWrite() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_BytesToWrite(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTemporaryFile) BytesToWriteDefault() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTemporaryFile_BytesToWriteDefault(ptr.Pointer()))
	}
	return 0
}

//export callbackQTemporaryFile_CanReadLine
func callbackQTemporaryFile_CanReadLine(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::canReadLine"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).CanReadLineDefault())))
}

func (ptr *QTemporaryFile) ConnectCanReadLine(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::canReadLine", f)
	}
}

func (ptr *QTemporaryFile) DisconnectCanReadLine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::canReadLine")
	}
}

func (ptr *QTemporaryFile) CanReadLine() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_CanReadLine(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTemporaryFile) CanReadLineDefault() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_CanReadLineDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQTemporaryFile_Reset
func callbackQTemporaryFile_Reset(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::reset"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).ResetDefault())))
}

func (ptr *QTemporaryFile) ConnectReset(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::reset", f)
	}
}

func (ptr *QTemporaryFile) DisconnectReset() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::reset")
	}
}

func (ptr *QTemporaryFile) Reset() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_Reset(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTemporaryFile) ResetDefault() bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_ResetDefault(ptr.Pointer()) != 0
	}
	return false
}

//export callbackQTemporaryFile_WaitForBytesWritten
func callbackQTemporaryFile_WaitForBytesWritten(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::waitForBytesWritten"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).WaitForBytesWrittenDefault(int(int32(msecs))))))
}

func (ptr *QTemporaryFile) ConnectWaitForBytesWritten(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::waitForBytesWritten", f)
	}
}

func (ptr *QTemporaryFile) DisconnectWaitForBytesWritten() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::waitForBytesWritten")
	}
}

func (ptr *QTemporaryFile) WaitForBytesWritten(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_WaitForBytesWritten(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QTemporaryFile) WaitForBytesWrittenDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_WaitForBytesWrittenDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQTemporaryFile_WaitForReadyRead
func callbackQTemporaryFile_WaitForReadyRead(ptr unsafe.Pointer, msecs C.int) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::waitForReadyRead"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(int) bool)(int(int32(msecs))))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).WaitForReadyReadDefault(int(int32(msecs))))))
}

func (ptr *QTemporaryFile) ConnectWaitForReadyRead(f func(msecs int) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::waitForReadyRead", f)
	}
}

func (ptr *QTemporaryFile) DisconnectWaitForReadyRead() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::waitForReadyRead")
	}
}

func (ptr *QTemporaryFile) WaitForReadyRead(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_WaitForReadyRead(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QTemporaryFile) WaitForReadyReadDefault(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_WaitForReadyReadDefault(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

//export callbackQTemporaryFile_TimerEvent
func callbackQTemporaryFile_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQTemporaryFileFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTemporaryFile) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::timerEvent", f)
	}
}

func (ptr *QTemporaryFile) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::timerEvent")
	}
}

func (ptr *QTemporaryFile) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QTemporaryFile) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQTemporaryFile_ChildEvent
func callbackQTemporaryFile_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQTemporaryFileFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QTemporaryFile) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::childEvent", f)
	}
}

func (ptr *QTemporaryFile) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::childEvent")
	}
}

func (ptr *QTemporaryFile) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QTemporaryFile) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQTemporaryFile_ConnectNotify
func callbackQTemporaryFile_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTemporaryFileFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTemporaryFile) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::connectNotify", f)
	}
}

func (ptr *QTemporaryFile) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::connectNotify")
	}
}

func (ptr *QTemporaryFile) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTemporaryFile) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTemporaryFile_CustomEvent
func callbackQTemporaryFile_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQTemporaryFileFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QTemporaryFile) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::customEvent", f)
	}
}

func (ptr *QTemporaryFile) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::customEvent")
	}
}

func (ptr *QTemporaryFile) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QTemporaryFile) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQTemporaryFile_DeleteLater
func callbackQTemporaryFile_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTemporaryFileFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTemporaryFile) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::deleteLater", f)
	}
}

func (ptr *QTemporaryFile) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::deleteLater")
	}
}

func (ptr *QTemporaryFile) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTemporaryFile) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTemporaryFile_DisconnectNotify
func callbackQTemporaryFile_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTemporaryFileFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTemporaryFile) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::disconnectNotify", f)
	}
}

func (ptr *QTemporaryFile) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::disconnectNotify")
	}
}

func (ptr *QTemporaryFile) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTemporaryFile) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTemporaryFile_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTemporaryFile_Event
func callbackQTemporaryFile_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QTemporaryFile) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::event", f)
	}
}

func (ptr *QTemporaryFile) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::event")
	}
}

func (ptr *QTemporaryFile) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTemporaryFile) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTemporaryFile_EventFilter
func callbackQTemporaryFile_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTemporaryFileFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QTemporaryFile) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::eventFilter", f)
	}
}

func (ptr *QTemporaryFile) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::eventFilter")
	}
}

func (ptr *QTemporaryFile) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTemporaryFile) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTemporaryFile_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTemporaryFile_MetaObject
func callbackQTemporaryFile_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTemporaryFile::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQTemporaryFileFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTemporaryFile) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::metaObject", f)
	}
}

func (ptr *QTemporaryFile) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTemporaryFile::metaObject")
	}
}

func (ptr *QTemporaryFile) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTemporaryFile_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTemporaryFile) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTemporaryFile_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTextBoundaryFinder::BoundaryReason
type QTextBoundaryFinder__BoundaryReason int64

const (
	QTextBoundaryFinder__NotAtBoundary    = QTextBoundaryFinder__BoundaryReason(0)
	QTextBoundaryFinder__BreakOpportunity = QTextBoundaryFinder__BoundaryReason(0x1f)
	QTextBoundaryFinder__StartOfItem      = QTextBoundaryFinder__BoundaryReason(0x20)
	QTextBoundaryFinder__EndOfItem        = QTextBoundaryFinder__BoundaryReason(0x40)
	QTextBoundaryFinder__MandatoryBreak   = QTextBoundaryFinder__BoundaryReason(0x80)
	QTextBoundaryFinder__SoftHyphen       = QTextBoundaryFinder__BoundaryReason(0x100)
)

//QTextBoundaryFinder::BoundaryType
type QTextBoundaryFinder__BoundaryType int64

const (
	QTextBoundaryFinder__Grapheme = QTextBoundaryFinder__BoundaryType(0)
	QTextBoundaryFinder__Word     = QTextBoundaryFinder__BoundaryType(1)
	QTextBoundaryFinder__Sentence = QTextBoundaryFinder__BoundaryType(2)
	QTextBoundaryFinder__Line     = QTextBoundaryFinder__BoundaryType(3)
)

type QTextBoundaryFinder struct {
	ptr unsafe.Pointer
}

type QTextBoundaryFinder_ITF interface {
	QTextBoundaryFinder_PTR() *QTextBoundaryFinder
}

func (p *QTextBoundaryFinder) QTextBoundaryFinder_PTR() *QTextBoundaryFinder {
	return p
}

func (p *QTextBoundaryFinder) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextBoundaryFinder) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextBoundaryFinder(ptr QTextBoundaryFinder_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextBoundaryFinder_PTR().Pointer()
	}
	return nil
}

func NewQTextBoundaryFinderFromPointer(ptr unsafe.Pointer) *QTextBoundaryFinder {
	var n = new(QTextBoundaryFinder)
	n.SetPointer(ptr)
	return n
}
func NewQTextBoundaryFinder() *QTextBoundaryFinder {
	var tmpValue = NewQTextBoundaryFinderFromPointer(C.QTextBoundaryFinder_NewQTextBoundaryFinder())
	runtime.SetFinalizer(tmpValue, (*QTextBoundaryFinder).DestroyQTextBoundaryFinder)
	return tmpValue
}

func NewQTextBoundaryFinder3(ty QTextBoundaryFinder__BoundaryType, stri string) *QTextBoundaryFinder {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQTextBoundaryFinderFromPointer(C.QTextBoundaryFinder_NewQTextBoundaryFinder3(C.longlong(ty), striC))
	runtime.SetFinalizer(tmpValue, (*QTextBoundaryFinder).DestroyQTextBoundaryFinder)
	return tmpValue
}

func NewQTextBoundaryFinder2(other QTextBoundaryFinder_ITF) *QTextBoundaryFinder {
	var tmpValue = NewQTextBoundaryFinderFromPointer(C.QTextBoundaryFinder_NewQTextBoundaryFinder2(PointerFromQTextBoundaryFinder(other)))
	runtime.SetFinalizer(tmpValue, (*QTextBoundaryFinder).DestroyQTextBoundaryFinder)
	return tmpValue
}

func (ptr *QTextBoundaryFinder) BoundaryReasons() QTextBoundaryFinder__BoundaryReason {
	if ptr.Pointer() != nil {
		return QTextBoundaryFinder__BoundaryReason(C.QTextBoundaryFinder_BoundaryReasons(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBoundaryFinder) IsAtBoundary() bool {
	if ptr.Pointer() != nil {
		return C.QTextBoundaryFinder_IsAtBoundary(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBoundaryFinder) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTextBoundaryFinder_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextBoundaryFinder) Position() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBoundaryFinder_Position(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBoundaryFinder) SetPosition(position int) {
	if ptr.Pointer() != nil {
		C.QTextBoundaryFinder_SetPosition(ptr.Pointer(), C.int(int32(position)))
	}
}

func (ptr *QTextBoundaryFinder) String() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextBoundaryFinder_String(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextBoundaryFinder) ToEnd() {
	if ptr.Pointer() != nil {
		C.QTextBoundaryFinder_ToEnd(ptr.Pointer())
	}
}

func (ptr *QTextBoundaryFinder) ToNextBoundary() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBoundaryFinder_ToNextBoundary(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBoundaryFinder) ToPreviousBoundary() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextBoundaryFinder_ToPreviousBoundary(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextBoundaryFinder) ToStart() {
	if ptr.Pointer() != nil {
		C.QTextBoundaryFinder_ToStart(ptr.Pointer())
	}
}

func (ptr *QTextBoundaryFinder) Type() QTextBoundaryFinder__BoundaryType {
	if ptr.Pointer() != nil {
		return QTextBoundaryFinder__BoundaryType(C.QTextBoundaryFinder_Type(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextBoundaryFinder) DestroyQTextBoundaryFinder() {
	if ptr.Pointer() != nil {
		C.QTextBoundaryFinder_DestroyQTextBoundaryFinder(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QTextCodec::ConversionFlag
type QTextCodec__ConversionFlag int64

const (
	QTextCodec__DefaultConversion    = QTextCodec__ConversionFlag(0)
	QTextCodec__ConvertInvalidToNull = QTextCodec__ConversionFlag(0x80000000)
	QTextCodec__IgnoreHeader         = QTextCodec__ConversionFlag(0x1)
	QTextCodec__FreeFunction         = QTextCodec__ConversionFlag(0x2)
)

type QTextCodec struct {
	ptr unsafe.Pointer
}

type QTextCodec_ITF interface {
	QTextCodec_PTR() *QTextCodec
}

func (p *QTextCodec) QTextCodec_PTR() *QTextCodec {
	return p
}

func (p *QTextCodec) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextCodec) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextCodec(ptr QTextCodec_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextCodec_PTR().Pointer()
	}
	return nil
}

func NewQTextCodecFromPointer(ptr unsafe.Pointer) *QTextCodec {
	var n = new(QTextCodec)
	n.SetPointer(ptr)
	return n
}
func QTextCodec_AvailableCodecs() []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTextCodecFromPointer(l.data).availableCodecs_atList(i)
		}
		return out
	}(C.QTextCodec_QTextCodec_AvailableCodecs())
}

func (ptr *QTextCodec) AvailableCodecs() []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTextCodecFromPointer(l.data).availableCodecs_atList(i)
		}
		return out
	}(C.QTextCodec_QTextCodec_AvailableCodecs())
}

func (ptr *QTextCodec) CanEncode(ch QChar_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTextCodec_CanEncode(ptr.Pointer(), PointerFromQChar(ch)) != 0
	}
	return false
}

func (ptr *QTextCodec) CanEncode2(s string) bool {
	if ptr.Pointer() != nil {
		var sC = C.CString(s)
		defer C.free(unsafe.Pointer(sC))
		return C.QTextCodec_CanEncode2(ptr.Pointer(), sC) != 0
	}
	return false
}

func QTextCodec_CodecForHtml2(ba QByteArray_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForHtml2(PointerFromQByteArray(ba)))
}

func (ptr *QTextCodec) CodecForHtml2(ba QByteArray_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForHtml2(PointerFromQByteArray(ba)))
}

func QTextCodec_CodecForHtml(ba QByteArray_ITF, defaultCodec QTextCodec_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForHtml(PointerFromQByteArray(ba), PointerFromQTextCodec(defaultCodec)))
}

func (ptr *QTextCodec) CodecForHtml(ba QByteArray_ITF, defaultCodec QTextCodec_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForHtml(PointerFromQByteArray(ba), PointerFromQTextCodec(defaultCodec)))
}

func QTextCodec_CodecForLocale() *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForLocale())
}

func (ptr *QTextCodec) CodecForLocale() *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForLocale())
}

func QTextCodec_CodecForMib(mib int) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForMib(C.int(int32(mib))))
}

func (ptr *QTextCodec) CodecForMib(mib int) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForMib(C.int(int32(mib))))
}

func QTextCodec_CodecForName(name QByteArray_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForName(PointerFromQByteArray(name)))
}

func (ptr *QTextCodec) CodecForName(name QByteArray_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForName(PointerFromQByteArray(name)))
}

func QTextCodec_CodecForName2(name string) *QTextCodec {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForName2(nameC))
}

func (ptr *QTextCodec) CodecForName2(name string) *QTextCodec {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForName2(nameC))
}

func QTextCodec_CodecForUtfText2(ba QByteArray_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForUtfText2(PointerFromQByteArray(ba)))
}

func (ptr *QTextCodec) CodecForUtfText2(ba QByteArray_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForUtfText2(PointerFromQByteArray(ba)))
}

func QTextCodec_CodecForUtfText(ba QByteArray_ITF, defaultCodec QTextCodec_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForUtfText(PointerFromQByteArray(ba), PointerFromQTextCodec(defaultCodec)))
}

func (ptr *QTextCodec) CodecForUtfText(ba QByteArray_ITF, defaultCodec QTextCodec_ITF) *QTextCodec {
	return NewQTextCodecFromPointer(C.QTextCodec_QTextCodec_CodecForUtfText(PointerFromQByteArray(ba), PointerFromQTextCodec(defaultCodec)))
}

func (ptr *QTextCodec) FromUnicode(str string) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QTextCodec_FromUnicode(ptr.Pointer(), strC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCodec) MakeDecoder(flags QTextCodec__ConversionFlag) *QTextDecoder {
	if ptr.Pointer() != nil {
		return NewQTextDecoderFromPointer(C.QTextCodec_MakeDecoder(ptr.Pointer(), C.longlong(flags)))
	}
	return nil
}

func (ptr *QTextCodec) MakeEncoder(flags QTextCodec__ConversionFlag) *QTextEncoder {
	if ptr.Pointer() != nil {
		return NewQTextEncoderFromPointer(C.QTextCodec_MakeEncoder(ptr.Pointer(), C.longlong(flags)))
	}
	return nil
}

//export callbackQTextCodec_MibEnum
func callbackQTextCodec_MibEnum(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextCodec::mibEnum"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(0))
}

func (ptr *QTextCodec) ConnectMibEnum(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextCodec::mibEnum", f)
	}
}

func (ptr *QTextCodec) DisconnectMibEnum() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextCodec::mibEnum")
	}
}

func (ptr *QTextCodec) MibEnum() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextCodec_MibEnum(ptr.Pointer())))
	}
	return 0
}

//export callbackQTextCodec_Name
func callbackQTextCodec_Name(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextCodec::name"); signal != nil {
		return PointerFromQByteArray(signal.(func() *QByteArray)())
	}

	return PointerFromQByteArray(nil)
}

func (ptr *QTextCodec) ConnectName(f func() *QByteArray) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextCodec::name", f)
	}
}

func (ptr *QTextCodec) DisconnectName() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextCodec::name")
	}
}

func (ptr *QTextCodec) Name() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QTextCodec_Name(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func QTextCodec_SetCodecForLocale(c QTextCodec_ITF) {
	C.QTextCodec_QTextCodec_SetCodecForLocale(PointerFromQTextCodec(c))
}

func (ptr *QTextCodec) SetCodecForLocale(c QTextCodec_ITF) {
	C.QTextCodec_QTextCodec_SetCodecForLocale(PointerFromQTextCodec(c))
}

func (ptr *QTextCodec) ToUnicode(a QByteArray_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextCodec_ToUnicode(ptr.Pointer(), PointerFromQByteArray(a)))
	}
	return ""
}

func (ptr *QTextCodec) ToUnicode2(chars string) string {
	if ptr.Pointer() != nil {
		var charsC = C.CString(chars)
		defer C.free(unsafe.Pointer(charsC))
		return cGoUnpackString(C.QTextCodec_ToUnicode2(ptr.Pointer(), charsC))
	}
	return ""
}

//export callbackQTextCodec_DestroyQTextCodec
func callbackQTextCodec_DestroyQTextCodec(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextCodec::~QTextCodec"); signal != nil {
		signal.(func())()
	} else {
		NewQTextCodecFromPointer(ptr).DestroyQTextCodecDefault()
	}
}

func (ptr *QTextCodec) ConnectDestroyQTextCodec(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextCodec::~QTextCodec", f)
	}
}

func (ptr *QTextCodec) DisconnectDestroyQTextCodec() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextCodec::~QTextCodec")
	}
}

func (ptr *QTextCodec) DestroyQTextCodec() {
	if ptr.Pointer() != nil {
		C.QTextCodec_DestroyQTextCodec(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextCodec) DestroyQTextCodecDefault() {
	if ptr.Pointer() != nil {
		C.QTextCodec_DestroyQTextCodecDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextCodec) aliases_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QTextCodec_aliases_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextCodec) availableCodecs_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QTextCodec_availableCodecs_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

type QTextDecoder struct {
	ptr unsafe.Pointer
}

type QTextDecoder_ITF interface {
	QTextDecoder_PTR() *QTextDecoder
}

func (p *QTextDecoder) QTextDecoder_PTR() *QTextDecoder {
	return p
}

func (p *QTextDecoder) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextDecoder) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextDecoder(ptr QTextDecoder_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextDecoder_PTR().Pointer()
	}
	return nil
}

func NewQTextDecoderFromPointer(ptr unsafe.Pointer) *QTextDecoder {
	var n = new(QTextDecoder)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTextDecoder) ToUnicode(chars string, len int) string {
	if ptr.Pointer() != nil {
		var charsC = C.CString(chars)
		defer C.free(unsafe.Pointer(charsC))
		return cGoUnpackString(C.QTextDecoder_ToUnicode(ptr.Pointer(), charsC, C.int(int32(len))))
	}
	return ""
}

func NewQTextDecoder(codec QTextCodec_ITF) *QTextDecoder {
	var tmpValue = NewQTextDecoderFromPointer(C.QTextDecoder_NewQTextDecoder(PointerFromQTextCodec(codec)))
	runtime.SetFinalizer(tmpValue, (*QTextDecoder).DestroyQTextDecoder)
	return tmpValue
}

func NewQTextDecoder2(codec QTextCodec_ITF, flags QTextCodec__ConversionFlag) *QTextDecoder {
	var tmpValue = NewQTextDecoderFromPointer(C.QTextDecoder_NewQTextDecoder2(PointerFromQTextCodec(codec), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QTextDecoder).DestroyQTextDecoder)
	return tmpValue
}

func (ptr *QTextDecoder) ToUnicode2(ba QByteArray_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextDecoder_ToUnicode2(ptr.Pointer(), PointerFromQByteArray(ba)))
	}
	return ""
}

func (ptr *QTextDecoder) ToUnicode3(target string, chars string, len int) {
	if ptr.Pointer() != nil {
		var targetC = C.CString(target)
		defer C.free(unsafe.Pointer(targetC))
		var charsC = C.CString(chars)
		defer C.free(unsafe.Pointer(charsC))
		C.QTextDecoder_ToUnicode3(ptr.Pointer(), targetC, charsC, C.int(int32(len)))
	}
}

func (ptr *QTextDecoder) DestroyQTextDecoder() {
	if ptr.Pointer() != nil {
		C.QTextDecoder_DestroyQTextDecoder(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QTextEncoder struct {
	ptr unsafe.Pointer
}

type QTextEncoder_ITF interface {
	QTextEncoder_PTR() *QTextEncoder
}

func (p *QTextEncoder) QTextEncoder_PTR() *QTextEncoder {
	return p
}

func (p *QTextEncoder) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextEncoder) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextEncoder(ptr QTextEncoder_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextEncoder_PTR().Pointer()
	}
	return nil
}

func NewQTextEncoderFromPointer(ptr unsafe.Pointer) *QTextEncoder {
	var n = new(QTextEncoder)
	n.SetPointer(ptr)
	return n
}
func NewQTextEncoder(codec QTextCodec_ITF) *QTextEncoder {
	var tmpValue = NewQTextEncoderFromPointer(C.QTextEncoder_NewQTextEncoder(PointerFromQTextCodec(codec)))
	runtime.SetFinalizer(tmpValue, (*QTextEncoder).DestroyQTextEncoder)
	return tmpValue
}

func NewQTextEncoder2(codec QTextCodec_ITF, flags QTextCodec__ConversionFlag) *QTextEncoder {
	var tmpValue = NewQTextEncoderFromPointer(C.QTextEncoder_NewQTextEncoder2(PointerFromQTextCodec(codec), C.longlong(flags)))
	runtime.SetFinalizer(tmpValue, (*QTextEncoder).DestroyQTextEncoder)
	return tmpValue
}

func (ptr *QTextEncoder) FromUnicode2(uc QChar_ITF, len int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QTextEncoder_FromUnicode2(ptr.Pointer(), PointerFromQChar(uc), C.int(int32(len))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextEncoder) FromUnicode(str string) *QByteArray {
	if ptr.Pointer() != nil {
		var strC = C.CString(str)
		defer C.free(unsafe.Pointer(strC))
		var tmpValue = NewQByteArrayFromPointer(C.QTextEncoder_FromUnicode(ptr.Pointer(), strC))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTextEncoder) DestroyQTextEncoder() {
	if ptr.Pointer() != nil {
		C.QTextEncoder_DestroyQTextEncoder(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QTextStream::FieldAlignment
type QTextStream__FieldAlignment int64

const (
	QTextStream__AlignLeft            = QTextStream__FieldAlignment(0)
	QTextStream__AlignRight           = QTextStream__FieldAlignment(1)
	QTextStream__AlignCenter          = QTextStream__FieldAlignment(2)
	QTextStream__AlignAccountingStyle = QTextStream__FieldAlignment(3)
)

//QTextStream::NumberFlag
type QTextStream__NumberFlag int64

const (
	QTextStream__ShowBase        = QTextStream__NumberFlag(0x1)
	QTextStream__ForcePoint      = QTextStream__NumberFlag(0x2)
	QTextStream__ForceSign       = QTextStream__NumberFlag(0x4)
	QTextStream__UppercaseBase   = QTextStream__NumberFlag(0x8)
	QTextStream__UppercaseDigits = QTextStream__NumberFlag(0x10)
)

//QTextStream::RealNumberNotation
type QTextStream__RealNumberNotation int64

const (
	QTextStream__SmartNotation      = QTextStream__RealNumberNotation(0)
	QTextStream__FixedNotation      = QTextStream__RealNumberNotation(1)
	QTextStream__ScientificNotation = QTextStream__RealNumberNotation(2)
)

//QTextStream::Status
type QTextStream__Status int64

const (
	QTextStream__Ok              = QTextStream__Status(0)
	QTextStream__ReadPastEnd     = QTextStream__Status(1)
	QTextStream__ReadCorruptData = QTextStream__Status(2)
	QTextStream__WriteFailed     = QTextStream__Status(3)
)

type QTextStream struct {
	ptr unsafe.Pointer
}

type QTextStream_ITF interface {
	QTextStream_PTR() *QTextStream
}

func (p *QTextStream) QTextStream_PTR() *QTextStream {
	return p
}

func (p *QTextStream) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTextStream) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTextStream(ptr QTextStream_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTextStream_PTR().Pointer()
	}
	return nil
}

func NewQTextStreamFromPointer(ptr unsafe.Pointer) *QTextStream {
	var n = new(QTextStream)
	n.SetPointer(ptr)
	return n
}
func NewQTextStream() *QTextStream {
	return NewQTextStreamFromPointer(C.QTextStream_NewQTextStream())
}

func NewQTextStream5(array QByteArray_ITF, openMode QIODevice__OpenModeFlag) *QTextStream {
	return NewQTextStreamFromPointer(C.QTextStream_NewQTextStream5(PointerFromQByteArray(array), C.longlong(openMode)))
}

func NewQTextStream2(device QIODevice_ITF) *QTextStream {
	return NewQTextStreamFromPointer(C.QTextStream_NewQTextStream2(PointerFromQIODevice(device)))
}

func NewQTextStream4(stri string, openMode QIODevice__OpenModeFlag) *QTextStream {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	return NewQTextStreamFromPointer(C.QTextStream_NewQTextStream4(striC, C.longlong(openMode)))
}

func NewQTextStream6(array QByteArray_ITF, openMode QIODevice__OpenModeFlag) *QTextStream {
	return NewQTextStreamFromPointer(C.QTextStream_NewQTextStream6(PointerFromQByteArray(array), C.longlong(openMode)))
}

func (ptr *QTextStream) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QTextStream_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextStream) AutoDetectUnicode() bool {
	if ptr.Pointer() != nil {
		return C.QTextStream_AutoDetectUnicode(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextStream) Codec() *QTextCodec {
	if ptr.Pointer() != nil {
		return NewQTextCodecFromPointer(C.QTextStream_Codec(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTextStream) Device() *QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIODeviceFromPointer(C.QTextStream_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QTextStream) FieldAlignment() QTextStream__FieldAlignment {
	if ptr.Pointer() != nil {
		return QTextStream__FieldAlignment(C.QTextStream_FieldAlignment(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextStream) FieldWidth() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextStream_FieldWidth(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextStream) Flush() {
	if ptr.Pointer() != nil {
		C.QTextStream_Flush(ptr.Pointer())
	}
}

func (ptr *QTextStream) GenerateByteOrderMark() bool {
	if ptr.Pointer() != nil {
		return C.QTextStream_GenerateByteOrderMark(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTextStream) IntegerBase() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextStream_IntegerBase(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextStream) Locale() *QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLocaleFromPointer(C.QTextStream_Locale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

func (ptr *QTextStream) NumberFlags() QTextStream__NumberFlag {
	if ptr.Pointer() != nil {
		return QTextStream__NumberFlag(C.QTextStream_NumberFlags(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextStream) PadChar() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QTextStream_PadChar(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QTextStream) Pos() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QTextStream_Pos(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextStream) Read(maxlen int64) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextStream_Read(ptr.Pointer(), C.longlong(maxlen)))
	}
	return ""
}

func (ptr *QTextStream) ReadAll() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextStream_ReadAll(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTextStream) ReadLine(maxlen int64) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextStream_ReadLine(ptr.Pointer(), C.longlong(maxlen)))
	}
	return ""
}

func (ptr *QTextStream) ReadLineInto(line string, maxlen int64) bool {
	if ptr.Pointer() != nil {
		var lineC = C.CString(line)
		defer C.free(unsafe.Pointer(lineC))
		return C.QTextStream_ReadLineInto(ptr.Pointer(), lineC, C.longlong(maxlen)) != 0
	}
	return false
}

func (ptr *QTextStream) RealNumberNotation() QTextStream__RealNumberNotation {
	if ptr.Pointer() != nil {
		return QTextStream__RealNumberNotation(C.QTextStream_RealNumberNotation(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextStream) RealNumberPrecision() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTextStream_RealNumberPrecision(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTextStream) Reset() {
	if ptr.Pointer() != nil {
		C.QTextStream_Reset(ptr.Pointer())
	}
}

func (ptr *QTextStream) ResetStatus() {
	if ptr.Pointer() != nil {
		C.QTextStream_ResetStatus(ptr.Pointer())
	}
}

func (ptr *QTextStream) Seek(pos int64) bool {
	if ptr.Pointer() != nil {
		return C.QTextStream_Seek(ptr.Pointer(), C.longlong(pos)) != 0
	}
	return false
}

func (ptr *QTextStream) SetAutoDetectUnicode(enabled bool) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetAutoDetectUnicode(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enabled))))
	}
}

func (ptr *QTextStream) SetCodec(codec QTextCodec_ITF) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetCodec(ptr.Pointer(), PointerFromQTextCodec(codec))
	}
}

func (ptr *QTextStream) SetCodec2(codecName string) {
	if ptr.Pointer() != nil {
		var codecNameC = C.CString(codecName)
		defer C.free(unsafe.Pointer(codecNameC))
		C.QTextStream_SetCodec2(ptr.Pointer(), codecNameC)
	}
}

func (ptr *QTextStream) SetDevice(device QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetDevice(ptr.Pointer(), PointerFromQIODevice(device))
	}
}

func (ptr *QTextStream) SetFieldAlignment(mode QTextStream__FieldAlignment) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetFieldAlignment(ptr.Pointer(), C.longlong(mode))
	}
}

func (ptr *QTextStream) SetFieldWidth(width int) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetFieldWidth(ptr.Pointer(), C.int(int32(width)))
	}
}

func (ptr *QTextStream) SetGenerateByteOrderMark(generate bool) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetGenerateByteOrderMark(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(generate))))
	}
}

func (ptr *QTextStream) SetIntegerBase(base int) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetIntegerBase(ptr.Pointer(), C.int(int32(base)))
	}
}

func (ptr *QTextStream) SetLocale(locale QLocale_ITF) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetLocale(ptr.Pointer(), PointerFromQLocale(locale))
	}
}

func (ptr *QTextStream) SetNumberFlags(flags QTextStream__NumberFlag) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetNumberFlags(ptr.Pointer(), C.longlong(flags))
	}
}

func (ptr *QTextStream) SetPadChar(ch QChar_ITF) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetPadChar(ptr.Pointer(), PointerFromQChar(ch))
	}
}

func (ptr *QTextStream) SetRealNumberNotation(notation QTextStream__RealNumberNotation) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetRealNumberNotation(ptr.Pointer(), C.longlong(notation))
	}
}

func (ptr *QTextStream) SetRealNumberPrecision(precision int) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetRealNumberPrecision(ptr.Pointer(), C.int(int32(precision)))
	}
}

func (ptr *QTextStream) SetStatus(status QTextStream__Status) {
	if ptr.Pointer() != nil {
		C.QTextStream_SetStatus(ptr.Pointer(), C.longlong(status))
	}
}

func (ptr *QTextStream) SetString(stri string, openMode QIODevice__OpenModeFlag) {
	if ptr.Pointer() != nil {
		var striC = C.CString(stri)
		defer C.free(unsafe.Pointer(striC))
		C.QTextStream_SetString(ptr.Pointer(), striC, C.longlong(openMode))
	}
}

func (ptr *QTextStream) SkipWhiteSpace() {
	if ptr.Pointer() != nil {
		C.QTextStream_SkipWhiteSpace(ptr.Pointer())
	}
}

func (ptr *QTextStream) Status() QTextStream__Status {
	if ptr.Pointer() != nil {
		return QTextStream__Status(C.QTextStream_Status(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTextStream) String() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTextStream_String(ptr.Pointer()))
	}
	return ""
}

//export callbackQTextStream_DestroyQTextStream
func callbackQTextStream_DestroyQTextStream(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTextStream::~QTextStream"); signal != nil {
		signal.(func())()
	} else {
		NewQTextStreamFromPointer(ptr).DestroyQTextStreamDefault()
	}
}

func (ptr *QTextStream) ConnectDestroyQTextStream(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTextStream::~QTextStream", f)
	}
}

func (ptr *QTextStream) DisconnectDestroyQTextStream() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTextStream::~QTextStream")
	}
}

func (ptr *QTextStream) DestroyQTextStream() {
	if ptr.Pointer() != nil {
		C.QTextStream_DestroyQTextStream(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTextStream) DestroyQTextStreamDefault() {
	if ptr.Pointer() != nil {
		C.QTextStream_DestroyQTextStreamDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//QThread::Priority
type QThread__Priority int64

const (
	QThread__IdlePriority         = QThread__Priority(0)
	QThread__LowestPriority       = QThread__Priority(1)
	QThread__LowPriority          = QThread__Priority(2)
	QThread__NormalPriority       = QThread__Priority(3)
	QThread__HighPriority         = QThread__Priority(4)
	QThread__HighestPriority      = QThread__Priority(5)
	QThread__TimeCriticalPriority = QThread__Priority(6)
	QThread__InheritPriority      = QThread__Priority(7)
)

type QThread struct {
	QObject
}

type QThread_ITF interface {
	QObject_ITF
	QThread_PTR() *QThread
}

func (p *QThread) QThread_PTR() *QThread {
	return p
}

func (p *QThread) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QThread) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQThread(ptr QThread_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QThread_PTR().Pointer()
	}
	return nil
}

func NewQThreadFromPointer(ptr unsafe.Pointer) *QThread {
	var n = new(QThread)
	n.SetPointer(ptr)
	return n
}
func (ptr *QThread) SetPriority(priority QThread__Priority) {
	if ptr.Pointer() != nil {
		C.QThread_SetPriority(ptr.Pointer(), C.longlong(priority))
	}
}

func NewQThread(parent QObject_ITF) *QThread {
	var tmpValue = NewQThreadFromPointer(C.QThread_NewQThread(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func QThread_CurrentThread() *QThread {
	var tmpValue = NewQThreadFromPointer(C.QThread_QThread_CurrentThread())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QThread) CurrentThread() *QThread {
	var tmpValue = NewQThreadFromPointer(C.QThread_QThread_CurrentThread())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQThread_Event
func callbackQThread_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQThreadFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QThread) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::event", f)
	}
}

func (ptr *QThread) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::event")
	}
}

func (ptr *QThread) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThread_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QThread) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThread_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QThread) EventDispatcher() *QAbstractEventDispatcher {
	if ptr.Pointer() != nil {
		var tmpValue = NewQAbstractEventDispatcherFromPointer(C.QThread_EventDispatcher(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QThread) Exec() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QThread_Exec(ptr.Pointer())))
	}
	return 0
}

func (ptr *QThread) Exit(returnCode int) {
	if ptr.Pointer() != nil {
		C.QThread_Exit(ptr.Pointer(), C.int(int32(returnCode)))
	}
}

//export callbackQThread_Finished
func callbackQThread_Finished(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QThread) ConnectFinished(f func()) {
	if ptr.Pointer() != nil {
		C.QThread_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::finished", f)
	}
}

func (ptr *QThread) DisconnectFinished() {
	if ptr.Pointer() != nil {
		C.QThread_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::finished")
	}
}

func (ptr *QThread) IsFinished() bool {
	if ptr.Pointer() != nil {
		return C.QThread_IsFinished(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QThread) IsInterruptionRequested() bool {
	if ptr.Pointer() != nil {
		return C.QThread_IsInterruptionRequested(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QThread) IsRunning() bool {
	if ptr.Pointer() != nil {
		return C.QThread_IsRunning(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QThread) LoopLevel() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QThread_LoopLevel(ptr.Pointer())))
	}
	return 0
}

func (ptr *QThread) Priority() QThread__Priority {
	if ptr.Pointer() != nil {
		return QThread__Priority(C.QThread_Priority(ptr.Pointer()))
	}
	return 0
}

//export callbackQThread_Quit
func callbackQThread_Quit(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::quit"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QThread) ConnectQuit(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::quit", f)
	}
}

func (ptr *QThread) DisconnectQuit() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::quit")
	}
}

func (ptr *QThread) Quit() {
	if ptr.Pointer() != nil {
		C.QThread_Quit(ptr.Pointer())
	}
}

func (ptr *QThread) RequestInterruption() {
	if ptr.Pointer() != nil {
		C.QThread_RequestInterruption(ptr.Pointer())
	}
}

//export callbackQThread_Run
func callbackQThread_Run(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::run"); signal != nil {
		signal.(func())()
	} else {
		NewQThreadFromPointer(ptr).RunDefault()
	}
}

func (ptr *QThread) ConnectRun(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::run", f)
	}
}

func (ptr *QThread) DisconnectRun() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::run")
	}
}

func (ptr *QThread) Run() {
	if ptr.Pointer() != nil {
		C.QThread_Run(ptr.Pointer())
	}
}

func (ptr *QThread) RunDefault() {
	if ptr.Pointer() != nil {
		C.QThread_RunDefault(ptr.Pointer())
	}
}

func (ptr *QThread) SetEventDispatcher(eventDispatcher QAbstractEventDispatcher_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_SetEventDispatcher(ptr.Pointer(), PointerFromQAbstractEventDispatcher(eventDispatcher))
	}
}

func (ptr *QThread) SetStackSize(stackSize uint) {
	if ptr.Pointer() != nil {
		C.QThread_SetStackSize(ptr.Pointer(), C.uint(uint32(stackSize)))
	}
}

func (ptr *QThread) StackSize() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QThread_StackSize(ptr.Pointer())))
	}
	return 0
}

//export callbackQThread_Started
func callbackQThread_Started(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::started"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QThread) ConnectStarted(f func()) {
	if ptr.Pointer() != nil {
		C.QThread_ConnectStarted(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::started", f)
	}
}

func (ptr *QThread) DisconnectStarted() {
	if ptr.Pointer() != nil {
		C.QThread_DisconnectStarted(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::started")
	}
}

func (ptr *QThread) DestroyQThread() {
	if ptr.Pointer() != nil {
		C.QThread_DestroyQThread(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func QThread_IdealThreadCount() int {
	return int(int32(C.QThread_QThread_IdealThreadCount()))
}

func (ptr *QThread) IdealThreadCount() int {
	return int(int32(C.QThread_QThread_IdealThreadCount()))
}

func QThread_Msleep(msecs uint) {
	C.QThread_QThread_Msleep(C.ulong(uint32(msecs)))
}

func (ptr *QThread) Msleep(msecs uint) {
	C.QThread_QThread_Msleep(C.ulong(uint32(msecs)))
}

func QThread_SetTerminationEnabled(enabled bool) {
	C.QThread_QThread_SetTerminationEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func (ptr *QThread) SetTerminationEnabled(enabled bool) {
	C.QThread_QThread_SetTerminationEnabled(C.char(int8(qt.GoBoolToInt(enabled))))
}

func QThread_Sleep(secs uint) {
	C.QThread_QThread_Sleep(C.ulong(uint32(secs)))
}

func (ptr *QThread) Sleep(secs uint) {
	C.QThread_QThread_Sleep(C.ulong(uint32(secs)))
}

//export callbackQThread_Start
func callbackQThread_Start(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QThread) ConnectStart(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::start", f)
	}
}

func (ptr *QThread) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::start")
	}
}

func (ptr *QThread) Start() {
	if ptr.Pointer() != nil {
		C.QThread_Start(ptr.Pointer())
	}
}

//export callbackQThread_Terminate
func callbackQThread_Terminate(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::terminate"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QThread) ConnectTerminate(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::terminate", f)
	}
}

func (ptr *QThread) DisconnectTerminate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::terminate")
	}
}

func (ptr *QThread) Terminate() {
	if ptr.Pointer() != nil {
		C.QThread_Terminate(ptr.Pointer())
	}
}

func QThread_Usleep(usecs uint) {
	C.QThread_QThread_Usleep(C.ulong(uint32(usecs)))
}

func (ptr *QThread) Usleep(usecs uint) {
	C.QThread_QThread_Usleep(C.ulong(uint32(usecs)))
}

func (ptr *QThread) Wait(time uint) bool {
	if ptr.Pointer() != nil {
		return C.QThread_Wait(ptr.Pointer(), C.ulong(uint32(time))) != 0
	}
	return false
}

func QThread_YieldCurrentThread() {
	C.QThread_QThread_YieldCurrentThread()
}

func (ptr *QThread) YieldCurrentThread() {
	C.QThread_QThread_YieldCurrentThread()
}

//export callbackQThread_TimerEvent
func callbackQThread_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQThreadFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QThread) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::timerEvent", f)
	}
}

func (ptr *QThread) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::timerEvent")
	}
}

func (ptr *QThread) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QThread) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQThread_ChildEvent
func callbackQThread_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQThreadFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QThread) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::childEvent", f)
	}
}

func (ptr *QThread) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::childEvent")
	}
}

func (ptr *QThread) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QThread) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQThread_ConnectNotify
func callbackQThread_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQThreadFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QThread) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::connectNotify", f)
	}
}

func (ptr *QThread) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::connectNotify")
	}
}

func (ptr *QThread) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QThread) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQThread_CustomEvent
func callbackQThread_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQThreadFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QThread) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::customEvent", f)
	}
}

func (ptr *QThread) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::customEvent")
	}
}

func (ptr *QThread) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QThread) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQThread_DeleteLater
func callbackQThread_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQThreadFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QThread) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::deleteLater", f)
	}
}

func (ptr *QThread) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::deleteLater")
	}
}

func (ptr *QThread) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QThread_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QThread) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QThread_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQThread_DisconnectNotify
func callbackQThread_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQThreadFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QThread) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::disconnectNotify", f)
	}
}

func (ptr *QThread) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::disconnectNotify")
	}
}

func (ptr *QThread) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QThread) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThread_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQThread_EventFilter
func callbackQThread_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQThreadFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QThread) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::eventFilter", f)
	}
}

func (ptr *QThread) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::eventFilter")
	}
}

func (ptr *QThread) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThread_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QThread) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThread_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQThread_MetaObject
func callbackQThread_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThread::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQThreadFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QThread) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::metaObject", f)
	}
}

func (ptr *QThread) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThread::metaObject")
	}
}

func (ptr *QThread) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QThread_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QThread) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QThread_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QThreadPool struct {
	QObject
}

type QThreadPool_ITF interface {
	QObject_ITF
	QThreadPool_PTR() *QThreadPool
}

func (p *QThreadPool) QThreadPool_PTR() *QThreadPool {
	return p
}

func (p *QThreadPool) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QThreadPool) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQThreadPool(ptr QThreadPool_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QThreadPool_PTR().Pointer()
	}
	return nil
}

func NewQThreadPoolFromPointer(ptr unsafe.Pointer) *QThreadPool {
	var n = new(QThreadPool)
	n.SetPointer(ptr)
	return n
}
func (ptr *QThreadPool) ActiveThreadCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QThreadPool_ActiveThreadCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QThreadPool) ExpiryTimeout() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QThreadPool_ExpiryTimeout(ptr.Pointer())))
	}
	return 0
}

func (ptr *QThreadPool) MaxThreadCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QThreadPool_MaxThreadCount(ptr.Pointer())))
	}
	return 0
}

func (ptr *QThreadPool) SetExpiryTimeout(expiryTimeout int) {
	if ptr.Pointer() != nil {
		C.QThreadPool_SetExpiryTimeout(ptr.Pointer(), C.int(int32(expiryTimeout)))
	}
}

func (ptr *QThreadPool) SetMaxThreadCount(maxThreadCount int) {
	if ptr.Pointer() != nil {
		C.QThreadPool_SetMaxThreadCount(ptr.Pointer(), C.int(int32(maxThreadCount)))
	}
}

func NewQThreadPool(parent QObject_ITF) *QThreadPool {
	var tmpValue = NewQThreadPoolFromPointer(C.QThreadPool_NewQThreadPool(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QThreadPool) Cancel(runnable QRunnable_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_Cancel(ptr.Pointer(), PointerFromQRunnable(runnable))
	}
}

func (ptr *QThreadPool) Clear() {
	if ptr.Pointer() != nil {
		C.QThreadPool_Clear(ptr.Pointer())
	}
}

func QThreadPool_GlobalInstance() *QThreadPool {
	var tmpValue = NewQThreadPoolFromPointer(C.QThreadPool_QThreadPool_GlobalInstance())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QThreadPool) GlobalInstance() *QThreadPool {
	var tmpValue = NewQThreadPoolFromPointer(C.QThreadPool_QThreadPool_GlobalInstance())
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QThreadPool) ReleaseThread() {
	if ptr.Pointer() != nil {
		C.QThreadPool_ReleaseThread(ptr.Pointer())
	}
}

func (ptr *QThreadPool) ReserveThread() {
	if ptr.Pointer() != nil {
		C.QThreadPool_ReserveThread(ptr.Pointer())
	}
}

func (ptr *QThreadPool) Start(runnable QRunnable_ITF, priority int) {
	if ptr.Pointer() != nil {
		C.QThreadPool_Start(ptr.Pointer(), PointerFromQRunnable(runnable), C.int(int32(priority)))
	}
}

func (ptr *QThreadPool) TryStart(runnable QRunnable_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThreadPool_TryStart(ptr.Pointer(), PointerFromQRunnable(runnable)) != 0
	}
	return false
}

func (ptr *QThreadPool) WaitForDone(msecs int) bool {
	if ptr.Pointer() != nil {
		return C.QThreadPool_WaitForDone(ptr.Pointer(), C.int(int32(msecs))) != 0
	}
	return false
}

func (ptr *QThreadPool) DestroyQThreadPool() {
	if ptr.Pointer() != nil {
		C.QThreadPool_DestroyQThreadPool(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQThreadPool_TimerEvent
func callbackQThreadPool_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQThreadPoolFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QThreadPool) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::timerEvent", f)
	}
}

func (ptr *QThreadPool) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::timerEvent")
	}
}

func (ptr *QThreadPool) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QThreadPool) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQThreadPool_ChildEvent
func callbackQThreadPool_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQThreadPoolFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QThreadPool) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::childEvent", f)
	}
}

func (ptr *QThreadPool) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::childEvent")
	}
}

func (ptr *QThreadPool) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QThreadPool) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQThreadPool_ConnectNotify
func callbackQThreadPool_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQThreadPoolFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QThreadPool) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::connectNotify", f)
	}
}

func (ptr *QThreadPool) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::connectNotify")
	}
}

func (ptr *QThreadPool) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QThreadPool) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQThreadPool_CustomEvent
func callbackQThreadPool_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQThreadPoolFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QThreadPool) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::customEvent", f)
	}
}

func (ptr *QThreadPool) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::customEvent")
	}
}

func (ptr *QThreadPool) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QThreadPool) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQThreadPool_DeleteLater
func callbackQThreadPool_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQThreadPoolFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QThreadPool) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::deleteLater", f)
	}
}

func (ptr *QThreadPool) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::deleteLater")
	}
}

func (ptr *QThreadPool) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QThreadPool_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QThreadPool) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QThreadPool_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQThreadPool_DisconnectNotify
func callbackQThreadPool_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQThreadPoolFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QThreadPool) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::disconnectNotify", f)
	}
}

func (ptr *QThreadPool) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::disconnectNotify")
	}
}

func (ptr *QThreadPool) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QThreadPool) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QThreadPool_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQThreadPool_Event
func callbackQThreadPool_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQThreadPoolFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QThreadPool) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::event", f)
	}
}

func (ptr *QThreadPool) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::event")
	}
}

func (ptr *QThreadPool) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThreadPool_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QThreadPool) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThreadPool_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQThreadPool_EventFilter
func callbackQThreadPool_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQThreadPoolFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QThreadPool) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::eventFilter", f)
	}
}

func (ptr *QThreadPool) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::eventFilter")
	}
}

func (ptr *QThreadPool) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThreadPool_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QThreadPool) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QThreadPool_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQThreadPool_MetaObject
func callbackQThreadPool_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QThreadPool::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQThreadPoolFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QThreadPool) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::metaObject", f)
	}
}

func (ptr *QThreadPool) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QThreadPool::metaObject")
	}
}

func (ptr *QThreadPool) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QThreadPool_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QThreadPool) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QThreadPool_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QThreadStorage struct {
	ptr unsafe.Pointer
}

type QThreadStorage_ITF interface {
	QThreadStorage_PTR() *QThreadStorage
}

func (p *QThreadStorage) QThreadStorage_PTR() *QThreadStorage {
	return p
}

func (p *QThreadStorage) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QThreadStorage) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQThreadStorage(ptr QThreadStorage_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QThreadStorage_PTR().Pointer()
	}
	return nil
}

func NewQThreadStorageFromPointer(ptr unsafe.Pointer) *QThreadStorage {
	var n = new(QThreadStorage)
	n.SetPointer(ptr)
	return n
}

type QTime struct {
	ptr unsafe.Pointer
}

type QTime_ITF interface {
	QTime_PTR() *QTime
}

func (p *QTime) QTime_PTR() *QTime {
	return p
}

func (p *QTime) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTime) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTime(ptr QTime_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTime_PTR().Pointer()
	}
	return nil
}

func NewQTimeFromPointer(ptr unsafe.Pointer) *QTime {
	var n = new(QTime)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTime) DestroyQTime() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QTime_CurrentTime() *QTime {
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_CurrentTime())
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func (ptr *QTime) CurrentTime() *QTime {
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_CurrentTime())
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func QTime_FromString(stri string, format Qt__DateFormat) *QTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_FromString(striC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func (ptr *QTime) FromString(stri string, format Qt__DateFormat) *QTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_FromString(striC, C.longlong(format)))
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func QTime_FromString2(stri string, format string) *QTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_FromString2(striC, formatC))
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func (ptr *QTime) FromString2(stri string, format string) *QTime {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var formatC = C.CString(format)
	defer C.free(unsafe.Pointer(formatC))
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_FromString2(striC, formatC))
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func NewQTime() *QTime {
	var tmpValue = NewQTimeFromPointer(C.QTime_NewQTime())
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func NewQTime3(h int, m int, s int, ms int) *QTime {
	var tmpValue = NewQTimeFromPointer(C.QTime_NewQTime3(C.int(int32(h)), C.int(int32(m)), C.int(int32(s)), C.int(int32(ms))))
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func (ptr *QTime) AddMSecs(ms int) *QTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTimeFromPointer(C.QTime_AddMSecs(ptr.Pointer(), C.int(int32(ms))))
		runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
		return tmpValue
	}
	return nil
}

func (ptr *QTime) AddSecs(s int) *QTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTimeFromPointer(C.QTime_AddSecs(ptr.Pointer(), C.int(int32(s))))
		runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
		return tmpValue
	}
	return nil
}

func (ptr *QTime) Elapsed() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_Elapsed(ptr.Pointer())))
	}
	return 0
}

func QTime_FromMSecsSinceStartOfDay(msecs int) *QTime {
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_FromMSecsSinceStartOfDay(C.int(int32(msecs))))
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func (ptr *QTime) FromMSecsSinceStartOfDay(msecs int) *QTime {
	var tmpValue = NewQTimeFromPointer(C.QTime_QTime_FromMSecsSinceStartOfDay(C.int(int32(msecs))))
	runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
	return tmpValue
}

func (ptr *QTime) Hour() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_Hour(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTime) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QTime_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func QTime_IsValid2(h int, m int, s int, ms int) bool {
	return C.QTime_QTime_IsValid2(C.int(int32(h)), C.int(int32(m)), C.int(int32(s)), C.int(int32(ms))) != 0
}

func (ptr *QTime) IsValid2(h int, m int, s int, ms int) bool {
	return C.QTime_QTime_IsValid2(C.int(int32(h)), C.int(int32(m)), C.int(int32(s)), C.int(int32(ms))) != 0
}

func (ptr *QTime) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTime_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTime) Minute() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_Minute(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTime) Msec() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_Msec(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTime) MsecsSinceStartOfDay() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_MsecsSinceStartOfDay(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTime) MsecsTo(t QTime_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_MsecsTo(ptr.Pointer(), PointerFromQTime(t))))
	}
	return 0
}

func (ptr *QTime) Restart() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_Restart(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTime) Second() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_Second(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTime) SecsTo(t QTime_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTime_SecsTo(ptr.Pointer(), PointerFromQTime(t))))
	}
	return 0
}

func (ptr *QTime) SetHMS(h int, m int, s int, ms int) bool {
	if ptr.Pointer() != nil {
		return C.QTime_SetHMS(ptr.Pointer(), C.int(int32(h)), C.int(int32(m)), C.int(int32(s)), C.int(int32(ms))) != 0
	}
	return false
}

func (ptr *QTime) Start() {
	if ptr.Pointer() != nil {
		C.QTime_Start(ptr.Pointer())
	}
}

func (ptr *QTime) ToString2(format Qt__DateFormat) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTime_ToString2(ptr.Pointer(), C.longlong(format)))
	}
	return ""
}

func (ptr *QTime) ToString(format string) string {
	if ptr.Pointer() != nil {
		var formatC = C.CString(format)
		defer C.free(unsafe.Pointer(formatC))
		return cGoUnpackString(C.QTime_ToString(ptr.Pointer(), formatC))
	}
	return ""
}

//QTimeLine::CurveShape
type QTimeLine__CurveShape int64

const (
	QTimeLine__EaseInCurve    = QTimeLine__CurveShape(0)
	QTimeLine__EaseOutCurve   = QTimeLine__CurveShape(1)
	QTimeLine__EaseInOutCurve = QTimeLine__CurveShape(2)
	QTimeLine__LinearCurve    = QTimeLine__CurveShape(3)
	QTimeLine__SineCurve      = QTimeLine__CurveShape(4)
	QTimeLine__CosineCurve    = QTimeLine__CurveShape(5)
)

//QTimeLine::Direction
type QTimeLine__Direction int64

const (
	QTimeLine__Forward  = QTimeLine__Direction(0)
	QTimeLine__Backward = QTimeLine__Direction(1)
)

//QTimeLine::State
type QTimeLine__State int64

const (
	QTimeLine__NotRunning = QTimeLine__State(0)
	QTimeLine__Paused     = QTimeLine__State(1)
	QTimeLine__Running    = QTimeLine__State(2)
)

type QTimeLine struct {
	QObject
}

type QTimeLine_ITF interface {
	QObject_ITF
	QTimeLine_PTR() *QTimeLine
}

func (p *QTimeLine) QTimeLine_PTR() *QTimeLine {
	return p
}

func (p *QTimeLine) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QTimeLine) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTimeLine(ptr QTimeLine_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTimeLine_PTR().Pointer()
	}
	return nil
}

func NewQTimeLineFromPointer(ptr unsafe.Pointer) *QTimeLine {
	var n = new(QTimeLine)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTimeLine) CurrentTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_CurrentTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimeLine) CurveShape() QTimeLine__CurveShape {
	if ptr.Pointer() != nil {
		return QTimeLine__CurveShape(C.QTimeLine_CurveShape(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTimeLine) Direction() QTimeLine__Direction {
	if ptr.Pointer() != nil {
		return QTimeLine__Direction(C.QTimeLine_Direction(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTimeLine) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_Duration(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimeLine) EasingCurve() *QEasingCurve {
	if ptr.Pointer() != nil {
		var tmpValue = NewQEasingCurveFromPointer(C.QTimeLine_EasingCurve(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QEasingCurve).DestroyQEasingCurve)
		return tmpValue
	}
	return nil
}

func (ptr *QTimeLine) LoopCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_LoopCount(ptr.Pointer())))
	}
	return 0
}

//export callbackQTimeLine_SetCurrentTime
func callbackQTimeLine_SetCurrentTime(ptr unsafe.Pointer, msec C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msec)))
	}

}

func (ptr *QTimeLine) ConnectSetCurrentTime(f func(msec int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::setCurrentTime", f)
	}
}

func (ptr *QTimeLine) DisconnectSetCurrentTime(msec int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::setCurrentTime")
	}
}

func (ptr *QTimeLine) SetCurrentTime(msec int) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetCurrentTime(ptr.Pointer(), C.int(int32(msec)))
	}
}

func (ptr *QTimeLine) SetCurveShape(shape QTimeLine__CurveShape) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetCurveShape(ptr.Pointer(), C.longlong(shape))
	}
}

func (ptr *QTimeLine) SetDirection(direction QTimeLine__Direction) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QTimeLine) SetDuration(duration int) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetDuration(ptr.Pointer(), C.int(int32(duration)))
	}
}

func (ptr *QTimeLine) SetEasingCurve(curve QEasingCurve_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetEasingCurve(ptr.Pointer(), PointerFromQEasingCurve(curve))
	}
}

func (ptr *QTimeLine) SetLoopCount(count int) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetLoopCount(ptr.Pointer(), C.int(int32(count)))
	}
}

func (ptr *QTimeLine) SetUpdateInterval(interval int) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetUpdateInterval(ptr.Pointer(), C.int(int32(interval)))
	}
}

func (ptr *QTimeLine) UpdateInterval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_UpdateInterval(ptr.Pointer())))
	}
	return 0
}

func NewQTimeLine(duration int, parent QObject_ITF) *QTimeLine {
	var tmpValue = NewQTimeLineFromPointer(C.QTimeLine_NewQTimeLine(C.int(int32(duration)), PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTimeLine) CurrentFrame() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_CurrentFrame(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimeLine) CurrentValue() float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTimeLine_CurrentValue(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTimeLine) EndFrame() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_EndFrame(ptr.Pointer())))
	}
	return 0
}

//export callbackQTimeLine_Finished
func callbackQTimeLine_Finished(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::finished"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimeLine) ConnectFinished(f func()) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ConnectFinished(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::finished", f)
	}
}

func (ptr *QTimeLine) DisconnectFinished() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DisconnectFinished(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::finished")
	}
}

//export callbackQTimeLine_FrameChanged
func callbackQTimeLine_FrameChanged(ptr unsafe.Pointer, frame C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::frameChanged"); signal != nil {
		signal.(func(int))(int(int32(frame)))
	}

}

func (ptr *QTimeLine) ConnectFrameChanged(f func(frame int)) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ConnectFrameChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::frameChanged", f)
	}
}

func (ptr *QTimeLine) DisconnectFrameChanged() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DisconnectFrameChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::frameChanged")
	}
}

func (ptr *QTimeLine) FrameForTime(msec int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_FrameForTime(ptr.Pointer(), C.int(int32(msec)))))
	}
	return 0
}

//export callbackQTimeLine_Resume
func callbackQTimeLine_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::resume"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimeLine) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::resume", f)
	}
}

func (ptr *QTimeLine) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::resume")
	}
}

func (ptr *QTimeLine) Resume() {
	if ptr.Pointer() != nil {
		C.QTimeLine_Resume(ptr.Pointer())
	}
}

func (ptr *QTimeLine) SetEndFrame(frame int) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetEndFrame(ptr.Pointer(), C.int(int32(frame)))
	}
}

func (ptr *QTimeLine) SetFrameRange(startFrame int, endFrame int) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetFrameRange(ptr.Pointer(), C.int(int32(startFrame)), C.int(int32(endFrame)))
	}
}

//export callbackQTimeLine_SetPaused
func callbackQTimeLine_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	}

}

func (ptr *QTimeLine) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::setPaused", f)
	}
}

func (ptr *QTimeLine) DisconnectSetPaused(paused bool) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::setPaused")
	}
}

func (ptr *QTimeLine) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QTimeLine) SetStartFrame(frame int) {
	if ptr.Pointer() != nil {
		C.QTimeLine_SetStartFrame(ptr.Pointer(), C.int(int32(frame)))
	}
}

//export callbackQTimeLine_Start
func callbackQTimeLine_Start(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::start"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimeLine) ConnectStart(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::start", f)
	}
}

func (ptr *QTimeLine) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::start")
	}
}

func (ptr *QTimeLine) Start() {
	if ptr.Pointer() != nil {
		C.QTimeLine_Start(ptr.Pointer())
	}
}

func (ptr *QTimeLine) StartFrame() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeLine_StartFrame(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimeLine) State() QTimeLine__State {
	if ptr.Pointer() != nil {
		return QTimeLine__State(C.QTimeLine_State(ptr.Pointer()))
	}
	return 0
}

//export callbackQTimeLine_StateChanged
func callbackQTimeLine_StateChanged(ptr unsafe.Pointer, newState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::stateChanged"); signal != nil {
		signal.(func(QTimeLine__State))(QTimeLine__State(newState))
	}

}

func (ptr *QTimeLine) ConnectStateChanged(f func(newState QTimeLine__State)) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ConnectStateChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::stateChanged", f)
	}
}

func (ptr *QTimeLine) DisconnectStateChanged() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DisconnectStateChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::stateChanged")
	}
}

//export callbackQTimeLine_Stop
func callbackQTimeLine_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimeLine) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::stop", f)
	}
}

func (ptr *QTimeLine) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::stop")
	}
}

func (ptr *QTimeLine) Stop() {
	if ptr.Pointer() != nil {
		C.QTimeLine_Stop(ptr.Pointer())
	}
}

//export callbackQTimeLine_TimerEvent
func callbackQTimeLine_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQTimeLineFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTimeLine) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::timerEvent", f)
	}
}

func (ptr *QTimeLine) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::timerEvent")
	}
}

func (ptr *QTimeLine) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QTimeLine) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQTimeLine_ToggleDirection
func callbackQTimeLine_ToggleDirection(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::toggleDirection"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimeLine) ConnectToggleDirection(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::toggleDirection", f)
	}
}

func (ptr *QTimeLine) DisconnectToggleDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::toggleDirection")
	}
}

func (ptr *QTimeLine) ToggleDirection() {
	if ptr.Pointer() != nil {
		C.QTimeLine_ToggleDirection(ptr.Pointer())
	}
}

//export callbackQTimeLine_ValueChanged
func callbackQTimeLine_ValueChanged(ptr unsafe.Pointer, value C.double) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::valueChanged"); signal != nil {
		signal.(func(float64))(float64(value))
	}

}

func (ptr *QTimeLine) ConnectValueChanged(f func(value float64)) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ConnectValueChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::valueChanged", f)
	}
}

func (ptr *QTimeLine) DisconnectValueChanged() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DisconnectValueChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::valueChanged")
	}
}

//export callbackQTimeLine_ValueForTime
func callbackQTimeLine_ValueForTime(ptr unsafe.Pointer, msec C.int) C.double {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::valueForTime"); signal != nil {
		return C.double(signal.(func(int) float64)(int(int32(msec))))
	}

	return C.double(NewQTimeLineFromPointer(ptr).ValueForTimeDefault(int(int32(msec))))
}

func (ptr *QTimeLine) ConnectValueForTime(f func(msec int) float64) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::valueForTime", f)
	}
}

func (ptr *QTimeLine) DisconnectValueForTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::valueForTime")
	}
}

func (ptr *QTimeLine) ValueForTime(msec int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTimeLine_ValueForTime(ptr.Pointer(), C.int(int32(msec))))
	}
	return 0
}

func (ptr *QTimeLine) ValueForTimeDefault(msec int) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QTimeLine_ValueForTimeDefault(ptr.Pointer(), C.int(int32(msec))))
	}
	return 0
}

//export callbackQTimeLine_DestroyQTimeLine
func callbackQTimeLine_DestroyQTimeLine(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::~QTimeLine"); signal != nil {
		signal.(func())()
	} else {
		NewQTimeLineFromPointer(ptr).DestroyQTimeLineDefault()
	}
}

func (ptr *QTimeLine) ConnectDestroyQTimeLine(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::~QTimeLine", f)
	}
}

func (ptr *QTimeLine) DisconnectDestroyQTimeLine() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::~QTimeLine")
	}
}

func (ptr *QTimeLine) DestroyQTimeLine() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DestroyQTimeLine(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTimeLine) DestroyQTimeLineDefault() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DestroyQTimeLineDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTimeLine_ChildEvent
func callbackQTimeLine_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQTimeLineFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QTimeLine) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::childEvent", f)
	}
}

func (ptr *QTimeLine) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::childEvent")
	}
}

func (ptr *QTimeLine) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QTimeLine) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQTimeLine_ConnectNotify
func callbackQTimeLine_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTimeLineFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTimeLine) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::connectNotify", f)
	}
}

func (ptr *QTimeLine) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::connectNotify")
	}
}

func (ptr *QTimeLine) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTimeLine) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTimeLine_CustomEvent
func callbackQTimeLine_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQTimeLineFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QTimeLine) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::customEvent", f)
	}
}

func (ptr *QTimeLine) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::customEvent")
	}
}

func (ptr *QTimeLine) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QTimeLine) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQTimeLine_DeleteLater
func callbackQTimeLine_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTimeLineFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTimeLine) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::deleteLater", f)
	}
}

func (ptr *QTimeLine) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::deleteLater")
	}
}

func (ptr *QTimeLine) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTimeLine) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTimeLine_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTimeLine_DisconnectNotify
func callbackQTimeLine_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTimeLineFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTimeLine) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::disconnectNotify", f)
	}
}

func (ptr *QTimeLine) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::disconnectNotify")
	}
}

func (ptr *QTimeLine) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTimeLine) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeLine_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTimeLine_Event
func callbackQTimeLine_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTimeLineFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QTimeLine) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::event", f)
	}
}

func (ptr *QTimeLine) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::event")
	}
}

func (ptr *QTimeLine) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimeLine_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTimeLine) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimeLine_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTimeLine_EventFilter
func callbackQTimeLine_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTimeLineFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QTimeLine) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::eventFilter", f)
	}
}

func (ptr *QTimeLine) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::eventFilter")
	}
}

func (ptr *QTimeLine) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimeLine_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTimeLine) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimeLine_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTimeLine_MetaObject
func callbackQTimeLine_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimeLine::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQTimeLineFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTimeLine) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::metaObject", f)
	}
}

func (ptr *QTimeLine) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimeLine::metaObject")
	}
}

func (ptr *QTimeLine) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTimeLine_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTimeLine) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTimeLine_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

//QTimeZone::NameType
type QTimeZone__NameType int64

const (
	QTimeZone__DefaultName = QTimeZone__NameType(0)
	QTimeZone__LongName    = QTimeZone__NameType(1)
	QTimeZone__ShortName   = QTimeZone__NameType(2)
	QTimeZone__OffsetName  = QTimeZone__NameType(3)
)

//QTimeZone::TimeType
type QTimeZone__TimeType int64

const (
	QTimeZone__StandardTime = QTimeZone__TimeType(0)
	QTimeZone__DaylightTime = QTimeZone__TimeType(1)
	QTimeZone__GenericTime  = QTimeZone__TimeType(2)
)

type QTimeZone struct {
	ptr unsafe.Pointer
}

type QTimeZone_ITF interface {
	QTimeZone_PTR() *QTimeZone
}

func (p *QTimeZone) QTimeZone_PTR() *QTimeZone {
	return p
}

func (p *QTimeZone) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QTimeZone) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQTimeZone(ptr QTimeZone_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTimeZone_PTR().Pointer()
	}
	return nil
}

func NewQTimeZoneFromPointer(ptr unsafe.Pointer) *QTimeZone {
	var n = new(QTimeZone)
	n.SetPointer(ptr)
	return n
}
func NewQTimeZone() *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_NewQTimeZone())
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func NewQTimeZone2(ianaId QByteArray_ITF) *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_NewQTimeZone2(PointerFromQByteArray(ianaId)))
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func NewQTimeZone4(ianaId QByteArray_ITF, offsetSeconds int, name string, abbreviation string, country QLocale__Country, comment string) *QTimeZone {
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var abbreviationC = C.CString(abbreviation)
	defer C.free(unsafe.Pointer(abbreviationC))
	var commentC = C.CString(comment)
	defer C.free(unsafe.Pointer(commentC))
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_NewQTimeZone4(PointerFromQByteArray(ianaId), C.int(int32(offsetSeconds)), nameC, abbreviationC, C.longlong(country), commentC))
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func NewQTimeZone5(other QTimeZone_ITF) *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_NewQTimeZone5(PointerFromQTimeZone(other)))
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func NewQTimeZone3(offsetSeconds int) *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_NewQTimeZone3(C.int(int32(offsetSeconds))))
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func (ptr *QTimeZone) Abbreviation(atDateTime QDateTime_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTimeZone_Abbreviation(ptr.Pointer(), PointerFromQDateTime(atDateTime)))
	}
	return ""
}

func QTimeZone_AvailableTimeZoneIds() []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).availableTimeZoneIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_AvailableTimeZoneIds())
}

func (ptr *QTimeZone) AvailableTimeZoneIds() []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).availableTimeZoneIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_AvailableTimeZoneIds())
}

func QTimeZone_AvailableTimeZoneIds2(country QLocale__Country) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).availableTimeZoneIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_AvailableTimeZoneIds2(C.longlong(country)))
}

func (ptr *QTimeZone) AvailableTimeZoneIds2(country QLocale__Country) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).availableTimeZoneIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_AvailableTimeZoneIds2(C.longlong(country)))
}

func QTimeZone_AvailableTimeZoneIds3(offsetSeconds int) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).availableTimeZoneIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_AvailableTimeZoneIds3(C.int(int32(offsetSeconds))))
}

func (ptr *QTimeZone) AvailableTimeZoneIds3(offsetSeconds int) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).availableTimeZoneIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_AvailableTimeZoneIds3(C.int(int32(offsetSeconds))))
}

func (ptr *QTimeZone) Comment() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTimeZone_Comment(ptr.Pointer()))
	}
	return ""
}

func (ptr *QTimeZone) Country() QLocale__Country {
	if ptr.Pointer() != nil {
		return QLocale__Country(C.QTimeZone_Country(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTimeZone) DaylightTimeOffset(atDateTime QDateTime_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeZone_DaylightTimeOffset(ptr.Pointer(), PointerFromQDateTime(atDateTime))))
	}
	return 0
}

func (ptr *QTimeZone) DisplayName2(timeType QTimeZone__TimeType, nameType QTimeZone__NameType, locale QLocale_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTimeZone_DisplayName2(ptr.Pointer(), C.longlong(timeType), C.longlong(nameType), PointerFromQLocale(locale)))
	}
	return ""
}

func (ptr *QTimeZone) DisplayName(atDateTime QDateTime_ITF, nameType QTimeZone__NameType, locale QLocale_ITF) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QTimeZone_DisplayName(ptr.Pointer(), PointerFromQDateTime(atDateTime), C.longlong(nameType), PointerFromQLocale(locale)))
	}
	return ""
}

func (ptr *QTimeZone) HasDaylightTime() bool {
	if ptr.Pointer() != nil {
		return C.QTimeZone_HasDaylightTime(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTimeZone) HasTransitions() bool {
	if ptr.Pointer() != nil {
		return C.QTimeZone_HasTransitions(ptr.Pointer()) != 0
	}
	return false
}

func QTimeZone_IanaIdToWindowsId(ianaId QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_IanaIdToWindowsId(PointerFromQByteArray(ianaId)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QTimeZone) IanaIdToWindowsId(ianaId QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_IanaIdToWindowsId(PointerFromQByteArray(ianaId)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QTimeZone) Id() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_Id(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTimeZone) IsDaylightTime(atDateTime QDateTime_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimeZone_IsDaylightTime(ptr.Pointer(), PointerFromQDateTime(atDateTime)) != 0
	}
	return false
}

func QTimeZone_IsTimeZoneIdAvailable(ianaId QByteArray_ITF) bool {
	return C.QTimeZone_QTimeZone_IsTimeZoneIdAvailable(PointerFromQByteArray(ianaId)) != 0
}

func (ptr *QTimeZone) IsTimeZoneIdAvailable(ianaId QByteArray_ITF) bool {
	return C.QTimeZone_QTimeZone_IsTimeZoneIdAvailable(PointerFromQByteArray(ianaId)) != 0
}

func (ptr *QTimeZone) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QTimeZone_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTimeZone) OffsetFromUtc(atDateTime QDateTime_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeZone_OffsetFromUtc(ptr.Pointer(), PointerFromQDateTime(atDateTime))))
	}
	return 0
}

func (ptr *QTimeZone) StandardTimeOffset(atDateTime QDateTime_ITF) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimeZone_StandardTimeOffset(ptr.Pointer(), PointerFromQDateTime(atDateTime))))
	}
	return 0
}

func (ptr *QTimeZone) Swap(other QTimeZone_ITF) {
	if ptr.Pointer() != nil {
		C.QTimeZone_Swap(ptr.Pointer(), PointerFromQTimeZone(other))
	}
}

func QTimeZone_SystemTimeZone() *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_QTimeZone_SystemTimeZone())
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func (ptr *QTimeZone) SystemTimeZone() *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_QTimeZone_SystemTimeZone())
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func QTimeZone_SystemTimeZoneId() *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_SystemTimeZoneId())
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QTimeZone) SystemTimeZoneId() *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_SystemTimeZoneId())
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QTimeZone_Utc() *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_QTimeZone_Utc())
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func (ptr *QTimeZone) Utc() *QTimeZone {
	var tmpValue = NewQTimeZoneFromPointer(C.QTimeZone_QTimeZone_Utc())
	runtime.SetFinalizer(tmpValue, (*QTimeZone).DestroyQTimeZone)
	return tmpValue
}

func QTimeZone_WindowsIdToDefaultIanaId(windowsId QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_WindowsIdToDefaultIanaId(PointerFromQByteArray(windowsId)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QTimeZone) WindowsIdToDefaultIanaId(windowsId QByteArray_ITF) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_WindowsIdToDefaultIanaId(PointerFromQByteArray(windowsId)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QTimeZone_WindowsIdToDefaultIanaId2(windowsId QByteArray_ITF, country QLocale__Country) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_WindowsIdToDefaultIanaId2(PointerFromQByteArray(windowsId), C.longlong(country)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QTimeZone) WindowsIdToDefaultIanaId2(windowsId QByteArray_ITF, country QLocale__Country) *QByteArray {
	var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_QTimeZone_WindowsIdToDefaultIanaId2(PointerFromQByteArray(windowsId), C.longlong(country)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func QTimeZone_WindowsIdToIanaIds(windowsId QByteArray_ITF) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).windowsIdToIanaIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_WindowsIdToIanaIds(PointerFromQByteArray(windowsId)))
}

func (ptr *QTimeZone) WindowsIdToIanaIds(windowsId QByteArray_ITF) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).windowsIdToIanaIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_WindowsIdToIanaIds(PointerFromQByteArray(windowsId)))
}

func QTimeZone_WindowsIdToIanaIds2(windowsId QByteArray_ITF, country QLocale__Country) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).windowsIdToIanaIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_WindowsIdToIanaIds2(PointerFromQByteArray(windowsId), C.longlong(country)))
}

func (ptr *QTimeZone) WindowsIdToIanaIds2(windowsId QByteArray_ITF, country QLocale__Country) []*QByteArray {
	return func(l C.struct_QtCore_PackedList) []*QByteArray {
		var out = make([]*QByteArray, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQTimeZoneFromPointer(l.data).windowsIdToIanaIds_atList(i)
		}
		return out
	}(C.QTimeZone_QTimeZone_WindowsIdToIanaIds2(PointerFromQByteArray(windowsId), C.longlong(country)))
}

func (ptr *QTimeZone) DestroyQTimeZone() {
	if ptr.Pointer() != nil {
		C.QTimeZone_DestroyQTimeZone(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QTimeZone) availableTimeZoneIds_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_availableTimeZoneIds_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QTimeZone) windowsIdToIanaIds_atList(i int) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QTimeZone_windowsIdToIanaIds_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

type QTimer struct {
	QObject
}

type QTimer_ITF interface {
	QObject_ITF
	QTimer_PTR() *QTimer
}

func (p *QTimer) QTimer_PTR() *QTimer {
	return p
}

func (p *QTimer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QTimer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTimer(ptr QTimer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTimer_PTR().Pointer()
	}
	return nil
}

func NewQTimerFromPointer(ptr unsafe.Pointer) *QTimer {
	var n = new(QTimer)
	n.SetPointer(ptr)
	return n
}
func (ptr *QTimer) RemainingTime() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimer_RemainingTime(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimer) SetInterval(msec int) {
	if ptr.Pointer() != nil {
		C.QTimer_SetInterval(ptr.Pointer(), C.int(int32(msec)))
	}
}

func NewQTimer(parent QObject_ITF) *QTimer {
	var tmpValue = NewQTimerFromPointer(C.QTimer_NewQTimer(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QTimer) Interval() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimer_Interval(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimer) IsActive() bool {
	if ptr.Pointer() != nil {
		return C.QTimer_IsActive(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTimer) IsSingleShot() bool {
	if ptr.Pointer() != nil {
		return C.QTimer_IsSingleShot(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTimer) SetSingleShot(singleShot bool) {
	if ptr.Pointer() != nil {
		C.QTimer_SetSingleShot(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(singleShot))))
	}
}

func (ptr *QTimer) SetTimerType(atype Qt__TimerType) {
	if ptr.Pointer() != nil {
		C.QTimer_SetTimerType(ptr.Pointer(), C.longlong(atype))
	}
}

func QTimer_SingleShot2(msec int, timerType Qt__TimerType, receiver QObject_ITF, member string) {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	C.QTimer_QTimer_SingleShot2(C.int(int32(msec)), C.longlong(timerType), PointerFromQObject(receiver), memberC)
}

func (ptr *QTimer) SingleShot2(msec int, timerType Qt__TimerType, receiver QObject_ITF, member string) {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	C.QTimer_QTimer_SingleShot2(C.int(int32(msec)), C.longlong(timerType), PointerFromQObject(receiver), memberC)
}

func QTimer_SingleShot(msec int, receiver QObject_ITF, member string) {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	C.QTimer_QTimer_SingleShot(C.int(int32(msec)), PointerFromQObject(receiver), memberC)
}

func (ptr *QTimer) SingleShot(msec int, receiver QObject_ITF, member string) {
	var memberC = C.CString(member)
	defer C.free(unsafe.Pointer(memberC))
	C.QTimer_QTimer_SingleShot(C.int(int32(msec)), PointerFromQObject(receiver), memberC)
}

//export callbackQTimer_Start2
func callbackQTimer_Start2(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::start2"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimer) ConnectStart2(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::start2", f)
	}
}

func (ptr *QTimer) DisconnectStart2() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::start2")
	}
}

func (ptr *QTimer) Start2() {
	if ptr.Pointer() != nil {
		C.QTimer_Start2(ptr.Pointer())
	}
}

//export callbackQTimer_Start
func callbackQTimer_Start(ptr unsafe.Pointer, msec C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::start"); signal != nil {
		signal.(func(int))(int(int32(msec)))
	}

}

func (ptr *QTimer) ConnectStart(f func(msec int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::start", f)
	}
}

func (ptr *QTimer) DisconnectStart(msec int) {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::start")
	}
}

func (ptr *QTimer) Start(msec int) {
	if ptr.Pointer() != nil {
		C.QTimer_Start(ptr.Pointer(), C.int(int32(msec)))
	}
}

//export callbackQTimer_Stop
func callbackQTimer_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::stop"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimer) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::stop", f)
	}
}

func (ptr *QTimer) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::stop")
	}
}

func (ptr *QTimer) Stop() {
	if ptr.Pointer() != nil {
		C.QTimer_Stop(ptr.Pointer())
	}
}

//export callbackQTimer_Timeout
func callbackQTimer_Timeout(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::timeout"); signal != nil {
		signal.(func())()
	}

}

func (ptr *QTimer) ConnectTimeout(f func()) {
	if ptr.Pointer() != nil {
		C.QTimer_ConnectTimeout(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::timeout", f)
	}
}

func (ptr *QTimer) DisconnectTimeout() {
	if ptr.Pointer() != nil {
		C.QTimer_DisconnectTimeout(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::timeout")
	}
}

//export callbackQTimer_TimerEvent
func callbackQTimer_TimerEvent(ptr unsafe.Pointer, e unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(e))
	} else {
		NewQTimerFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(e))
	}
}

func (ptr *QTimer) ConnectTimerEvent(f func(e *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::timerEvent", f)
	}
}

func (ptr *QTimer) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::timerEvent")
	}
}

func (ptr *QTimer) TimerEvent(e QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(e))
	}
}

func (ptr *QTimer) TimerEventDefault(e QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(e))
	}
}

func (ptr *QTimer) TimerId() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimer_TimerId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimer) TimerType() Qt__TimerType {
	if ptr.Pointer() != nil {
		return Qt__TimerType(C.QTimer_TimerType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QTimer) DestroyQTimer() {
	if ptr.Pointer() != nil {
		C.QTimer_DestroyQTimer(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTimer_ChildEvent
func callbackQTimer_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQTimerFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QTimer) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::childEvent", f)
	}
}

func (ptr *QTimer) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::childEvent")
	}
}

func (ptr *QTimer) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QTimer) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQTimer_ConnectNotify
func callbackQTimer_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTimerFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTimer) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::connectNotify", f)
	}
}

func (ptr *QTimer) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::connectNotify")
	}
}

func (ptr *QTimer) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTimer) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTimer_CustomEvent
func callbackQTimer_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQTimerFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QTimer) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::customEvent", f)
	}
}

func (ptr *QTimer) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::customEvent")
	}
}

func (ptr *QTimer) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QTimer) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQTimer_DeleteLater
func callbackQTimer_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTimerFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTimer) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::deleteLater", f)
	}
}

func (ptr *QTimer) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::deleteLater")
	}
}

func (ptr *QTimer) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTimer_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTimer) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTimer_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTimer_DisconnectNotify
func callbackQTimer_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTimerFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTimer) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::disconnectNotify", f)
	}
}

func (ptr *QTimer) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::disconnectNotify")
	}
}

func (ptr *QTimer) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTimer) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTimer_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTimer_Event
func callbackQTimer_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTimerFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QTimer) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::event", f)
	}
}

func (ptr *QTimer) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::event")
	}
}

func (ptr *QTimer) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimer_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTimer) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimer_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTimer_EventFilter
func callbackQTimer_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTimerFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QTimer) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::eventFilter", f)
	}
}

func (ptr *QTimer) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::eventFilter")
	}
}

func (ptr *QTimer) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimer_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTimer) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTimer_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTimer_MetaObject
func callbackQTimer_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTimer::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQTimerFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTimer) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::metaObject", f)
	}
}

func (ptr *QTimer) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTimer::metaObject")
	}
}

func (ptr *QTimer) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTimer_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTimer) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTimer_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QTimerEvent struct {
	QEvent
}

type QTimerEvent_ITF interface {
	QEvent_ITF
	QTimerEvent_PTR() *QTimerEvent
}

func (p *QTimerEvent) QTimerEvent_PTR() *QTimerEvent {
	return p
}

func (p *QTimerEvent) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QEvent_PTR().Pointer()
	}
	return nil
}

func (p *QTimerEvent) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QEvent_PTR().SetPointer(ptr)
	}
}

func PointerFromQTimerEvent(ptr QTimerEvent_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTimerEvent_PTR().Pointer()
	}
	return nil
}

func NewQTimerEventFromPointer(ptr unsafe.Pointer) *QTimerEvent {
	var n = new(QTimerEvent)
	n.SetPointer(ptr)
	return n
}

func (ptr *QTimerEvent) DestroyQTimerEvent() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQTimerEvent(timerId int) *QTimerEvent {
	var tmpValue = NewQTimerEventFromPointer(C.QTimerEvent_NewQTimerEvent(C.int(int32(timerId))))
	runtime.SetFinalizer(tmpValue, (*QTimerEvent).DestroyQTimerEvent)
	return tmpValue
}

func (ptr *QTimerEvent) TimerId() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimerEvent_TimerId(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimerEvent) Id() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QTimerEvent_Id(ptr.Pointer())))
	}
	return 0
}

func (ptr *QTimerEvent) SetId(vin int) {
	if ptr.Pointer() != nil {
		C.QTimerEvent_SetId(ptr.Pointer(), C.int(int32(vin)))
	}
}

type QTranslator struct {
	QObject
}

type QTranslator_ITF interface {
	QObject_ITF
	QTranslator_PTR() *QTranslator
}

func (p *QTranslator) QTranslator_PTR() *QTranslator {
	return p
}

func (p *QTranslator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QTranslator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQTranslator(ptr QTranslator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QTranslator_PTR().Pointer()
	}
	return nil
}

func NewQTranslatorFromPointer(ptr unsafe.Pointer) *QTranslator {
	var n = new(QTranslator)
	n.SetPointer(ptr)
	return n
}
func NewQTranslator(parent QObject_ITF) *QTranslator {
	var tmpValue = NewQTranslatorFromPointer(C.QTranslator_NewQTranslator(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

//export callbackQTranslator_IsEmpty
func callbackQTranslator_IsEmpty(ptr unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::isEmpty"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func() bool)())))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTranslatorFromPointer(ptr).IsEmptyDefault())))
}

func (ptr *QTranslator) ConnectIsEmpty(f func() bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::isEmpty", f)
	}
}

func (ptr *QTranslator) DisconnectIsEmpty() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::isEmpty")
	}
}

func (ptr *QTranslator) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QTranslator_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTranslator) IsEmptyDefault() bool {
	if ptr.Pointer() != nil {
		return C.QTranslator_IsEmptyDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QTranslator) Load2(locale QLocale_ITF, filename string, prefix string, directory string, suffix string) bool {
	if ptr.Pointer() != nil {
		var filenameC = C.CString(filename)
		defer C.free(unsafe.Pointer(filenameC))
		var prefixC = C.CString(prefix)
		defer C.free(unsafe.Pointer(prefixC))
		var directoryC = C.CString(directory)
		defer C.free(unsafe.Pointer(directoryC))
		var suffixC = C.CString(suffix)
		defer C.free(unsafe.Pointer(suffixC))
		return C.QTranslator_Load2(ptr.Pointer(), PointerFromQLocale(locale), filenameC, prefixC, directoryC, suffixC) != 0
	}
	return false
}

func (ptr *QTranslator) Load(filename string, directory string, search_delimiters string, suffix string) bool {
	if ptr.Pointer() != nil {
		var filenameC = C.CString(filename)
		defer C.free(unsafe.Pointer(filenameC))
		var directoryC = C.CString(directory)
		defer C.free(unsafe.Pointer(directoryC))
		var search_delimitersC = C.CString(search_delimiters)
		defer C.free(unsafe.Pointer(search_delimitersC))
		var suffixC = C.CString(suffix)
		defer C.free(unsafe.Pointer(suffixC))
		return C.QTranslator_Load(ptr.Pointer(), filenameC, directoryC, search_delimitersC, suffixC) != 0
	}
	return false
}

func (ptr *QTranslator) Load3(data string, len int, directory string) bool {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		var directoryC = C.CString(directory)
		defer C.free(unsafe.Pointer(directoryC))
		return C.QTranslator_Load3(ptr.Pointer(), dataC, C.int(int32(len)), directoryC) != 0
	}
	return false
}

//export callbackQTranslator_Translate
func callbackQTranslator_Translate(ptr unsafe.Pointer, context C.struct_QtCore_PackedString, sourceText C.struct_QtCore_PackedString, disambiguation C.struct_QtCore_PackedString, n C.int) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::translate"); signal != nil {
		return C.CString(signal.(func(string, string, string, int) string)(cGoUnpackString(context), cGoUnpackString(sourceText), cGoUnpackString(disambiguation), int(int32(n))))
	}

	return C.CString(NewQTranslatorFromPointer(ptr).TranslateDefault(cGoUnpackString(context), cGoUnpackString(sourceText), cGoUnpackString(disambiguation), int(int32(n))))
}

func (ptr *QTranslator) ConnectTranslate(f func(context string, sourceText string, disambiguation string, n int) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::translate", f)
	}
}

func (ptr *QTranslator) DisconnectTranslate() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::translate")
	}
}

func (ptr *QTranslator) Translate(context string, sourceText string, disambiguation string, n int) string {
	if ptr.Pointer() != nil {
		var contextC = C.CString(context)
		defer C.free(unsafe.Pointer(contextC))
		var sourceTextC = C.CString(sourceText)
		defer C.free(unsafe.Pointer(sourceTextC))
		var disambiguationC = C.CString(disambiguation)
		defer C.free(unsafe.Pointer(disambiguationC))
		return cGoUnpackString(C.QTranslator_Translate(ptr.Pointer(), contextC, sourceTextC, disambiguationC, C.int(int32(n))))
	}
	return ""
}

func (ptr *QTranslator) TranslateDefault(context string, sourceText string, disambiguation string, n int) string {
	if ptr.Pointer() != nil {
		var contextC = C.CString(context)
		defer C.free(unsafe.Pointer(contextC))
		var sourceTextC = C.CString(sourceText)
		defer C.free(unsafe.Pointer(sourceTextC))
		var disambiguationC = C.CString(disambiguation)
		defer C.free(unsafe.Pointer(disambiguationC))
		return cGoUnpackString(C.QTranslator_TranslateDefault(ptr.Pointer(), contextC, sourceTextC, disambiguationC, C.int(int32(n))))
	}
	return ""
}

func (ptr *QTranslator) DestroyQTranslator() {
	if ptr.Pointer() != nil {
		C.QTranslator_DestroyQTranslator(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTranslator_TimerEvent
func callbackQTranslator_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQTranslatorFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QTranslator) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::timerEvent", f)
	}
}

func (ptr *QTranslator) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::timerEvent")
	}
}

func (ptr *QTranslator) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QTranslator) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQTranslator_ChildEvent
func callbackQTranslator_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQTranslatorFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QTranslator) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::childEvent", f)
	}
}

func (ptr *QTranslator) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::childEvent")
	}
}

func (ptr *QTranslator) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QTranslator) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQTranslator_ConnectNotify
func callbackQTranslator_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTranslatorFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTranslator) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::connectNotify", f)
	}
}

func (ptr *QTranslator) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::connectNotify")
	}
}

func (ptr *QTranslator) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTranslator) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTranslator_CustomEvent
func callbackQTranslator_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQTranslatorFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QTranslator) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::customEvent", f)
	}
}

func (ptr *QTranslator) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::customEvent")
	}
}

func (ptr *QTranslator) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QTranslator) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQTranslator_DeleteLater
func callbackQTranslator_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQTranslatorFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QTranslator) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::deleteLater", f)
	}
}

func (ptr *QTranslator) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::deleteLater")
	}
}

func (ptr *QTranslator) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QTranslator_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QTranslator) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QTranslator_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQTranslator_DisconnectNotify
func callbackQTranslator_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQTranslatorFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QTranslator) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::disconnectNotify", f)
	}
}

func (ptr *QTranslator) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::disconnectNotify")
	}
}

func (ptr *QTranslator) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QTranslator) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QTranslator_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQTranslator_Event
func callbackQTranslator_Event(ptr unsafe.Pointer, e unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(e)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTranslatorFromPointer(ptr).EventDefault(NewQEventFromPointer(e)))))
}

func (ptr *QTranslator) ConnectEvent(f func(e *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::event", f)
	}
}

func (ptr *QTranslator) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::event")
	}
}

func (ptr *QTranslator) Event(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTranslator_Event(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

func (ptr *QTranslator) EventDefault(e QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTranslator_EventDefault(ptr.Pointer(), PointerFromQEvent(e)) != 0
	}
	return false
}

//export callbackQTranslator_EventFilter
func callbackQTranslator_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQTranslatorFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QTranslator) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::eventFilter", f)
	}
}

func (ptr *QTranslator) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::eventFilter")
	}
}

func (ptr *QTranslator) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTranslator_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QTranslator) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QTranslator_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQTranslator_MetaObject
func callbackQTranslator_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QTranslator::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQTranslatorFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QTranslator) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::metaObject", f)
	}
}

func (ptr *QTranslator) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QTranslator::metaObject")
	}
}

func (ptr *QTranslator) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTranslator_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QTranslator) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QTranslator_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QUnhandledException struct {
	QException
}

type QUnhandledException_ITF interface {
	QException_ITF
	QUnhandledException_PTR() *QUnhandledException
}

func (p *QUnhandledException) QUnhandledException_PTR() *QUnhandledException {
	return p
}

func (p *QUnhandledException) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QException_PTR().Pointer()
	}
	return nil
}

func (p *QUnhandledException) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QException_PTR().SetPointer(ptr)
	}
}

func PointerFromQUnhandledException(ptr QUnhandledException_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QUnhandledException_PTR().Pointer()
	}
	return nil
}

func NewQUnhandledExceptionFromPointer(ptr unsafe.Pointer) *QUnhandledException {
	var n = new(QUnhandledException)
	n.SetPointer(ptr)
	return n
}

func (ptr *QUnhandledException) DestroyQUnhandledException() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QUnicodeTables::GraphemeBreakClass
type QUnicodeTables__GraphemeBreakClass int64

const (
	QUnicodeTables__GraphemeBreak_Other             = QUnicodeTables__GraphemeBreakClass(0)
	QUnicodeTables__GraphemeBreak_CR                = QUnicodeTables__GraphemeBreakClass(1)
	QUnicodeTables__GraphemeBreak_LF                = QUnicodeTables__GraphemeBreakClass(2)
	QUnicodeTables__GraphemeBreak_Control           = QUnicodeTables__GraphemeBreakClass(3)
	QUnicodeTables__GraphemeBreak_Extend            = QUnicodeTables__GraphemeBreakClass(4)
	QUnicodeTables__GraphemeBreak_RegionalIndicator = QUnicodeTables__GraphemeBreakClass(5)
	QUnicodeTables__GraphemeBreak_Prepend           = QUnicodeTables__GraphemeBreakClass(6)
	QUnicodeTables__GraphemeBreak_SpacingMark       = QUnicodeTables__GraphemeBreakClass(7)
	QUnicodeTables__GraphemeBreak_L                 = QUnicodeTables__GraphemeBreakClass(8)
	QUnicodeTables__GraphemeBreak_V                 = QUnicodeTables__GraphemeBreakClass(9)
	QUnicodeTables__GraphemeBreak_T                 = QUnicodeTables__GraphemeBreakClass(10)
	QUnicodeTables__GraphemeBreak_LV                = QUnicodeTables__GraphemeBreakClass(11)
	QUnicodeTables__GraphemeBreak_LVT               = QUnicodeTables__GraphemeBreakClass(12)
)

//QUnicodeTables::LineBreakClass
type QUnicodeTables__LineBreakClass int64

const (
	QUnicodeTables__LineBreak_OP = QUnicodeTables__LineBreakClass(0)
	QUnicodeTables__LineBreak_CL = QUnicodeTables__LineBreakClass(1)
	QUnicodeTables__LineBreak_CP = QUnicodeTables__LineBreakClass(2)
	QUnicodeTables__LineBreak_QU = QUnicodeTables__LineBreakClass(3)
	QUnicodeTables__LineBreak_GL = QUnicodeTables__LineBreakClass(4)
	QUnicodeTables__LineBreak_NS = QUnicodeTables__LineBreakClass(5)
	QUnicodeTables__LineBreak_EX = QUnicodeTables__LineBreakClass(6)
	QUnicodeTables__LineBreak_SY = QUnicodeTables__LineBreakClass(7)
	QUnicodeTables__LineBreak_IS = QUnicodeTables__LineBreakClass(8)
	QUnicodeTables__LineBreak_PR = QUnicodeTables__LineBreakClass(9)
	QUnicodeTables__LineBreak_PO = QUnicodeTables__LineBreakClass(10)
	QUnicodeTables__LineBreak_NU = QUnicodeTables__LineBreakClass(11)
	QUnicodeTables__LineBreak_AL = QUnicodeTables__LineBreakClass(12)
	QUnicodeTables__LineBreak_HL = QUnicodeTables__LineBreakClass(13)
	QUnicodeTables__LineBreak_ID = QUnicodeTables__LineBreakClass(14)
	QUnicodeTables__LineBreak_IN = QUnicodeTables__LineBreakClass(15)
	QUnicodeTables__LineBreak_HY = QUnicodeTables__LineBreakClass(16)
	QUnicodeTables__LineBreak_BA = QUnicodeTables__LineBreakClass(17)
	QUnicodeTables__LineBreak_BB = QUnicodeTables__LineBreakClass(18)
	QUnicodeTables__LineBreak_B2 = QUnicodeTables__LineBreakClass(19)
	QUnicodeTables__LineBreak_ZW = QUnicodeTables__LineBreakClass(20)
	QUnicodeTables__LineBreak_CM = QUnicodeTables__LineBreakClass(21)
	QUnicodeTables__LineBreak_WJ = QUnicodeTables__LineBreakClass(22)
	QUnicodeTables__LineBreak_H2 = QUnicodeTables__LineBreakClass(23)
	QUnicodeTables__LineBreak_H3 = QUnicodeTables__LineBreakClass(24)
	QUnicodeTables__LineBreak_JL = QUnicodeTables__LineBreakClass(25)
	QUnicodeTables__LineBreak_JV = QUnicodeTables__LineBreakClass(26)
	QUnicodeTables__LineBreak_JT = QUnicodeTables__LineBreakClass(27)
	QUnicodeTables__LineBreak_RI = QUnicodeTables__LineBreakClass(28)
	QUnicodeTables__LineBreak_CB = QUnicodeTables__LineBreakClass(29)
	QUnicodeTables__LineBreak_SA = QUnicodeTables__LineBreakClass(30)
	QUnicodeTables__LineBreak_SG = QUnicodeTables__LineBreakClass(31)
	QUnicodeTables__LineBreak_SP = QUnicodeTables__LineBreakClass(32)
	QUnicodeTables__LineBreak_CR = QUnicodeTables__LineBreakClass(33)
	QUnicodeTables__LineBreak_LF = QUnicodeTables__LineBreakClass(34)
	QUnicodeTables__LineBreak_BK = QUnicodeTables__LineBreakClass(35)
)

//QUnicodeTables::SentenceBreakClass
type QUnicodeTables__SentenceBreakClass int64

const (
	QUnicodeTables__SentenceBreak_Other     = QUnicodeTables__SentenceBreakClass(0)
	QUnicodeTables__SentenceBreak_CR        = QUnicodeTables__SentenceBreakClass(1)
	QUnicodeTables__SentenceBreak_LF        = QUnicodeTables__SentenceBreakClass(2)
	QUnicodeTables__SentenceBreak_Sep       = QUnicodeTables__SentenceBreakClass(3)
	QUnicodeTables__SentenceBreak_Extend    = QUnicodeTables__SentenceBreakClass(4)
	QUnicodeTables__SentenceBreak_Sp        = QUnicodeTables__SentenceBreakClass(5)
	QUnicodeTables__SentenceBreak_Lower     = QUnicodeTables__SentenceBreakClass(6)
	QUnicodeTables__SentenceBreak_Upper     = QUnicodeTables__SentenceBreakClass(7)
	QUnicodeTables__SentenceBreak_OLetter   = QUnicodeTables__SentenceBreakClass(8)
	QUnicodeTables__SentenceBreak_Numeric   = QUnicodeTables__SentenceBreakClass(9)
	QUnicodeTables__SentenceBreak_ATerm     = QUnicodeTables__SentenceBreakClass(10)
	QUnicodeTables__SentenceBreak_SContinue = QUnicodeTables__SentenceBreakClass(11)
	QUnicodeTables__SentenceBreak_STerm     = QUnicodeTables__SentenceBreakClass(12)
	QUnicodeTables__SentenceBreak_Close     = QUnicodeTables__SentenceBreakClass(13)
)

//QUnicodeTables::WordBreakClass
type QUnicodeTables__WordBreakClass int64

const (
	QUnicodeTables__WordBreak_Other             = QUnicodeTables__WordBreakClass(0)
	QUnicodeTables__WordBreak_CR                = QUnicodeTables__WordBreakClass(1)
	QUnicodeTables__WordBreak_LF                = QUnicodeTables__WordBreakClass(2)
	QUnicodeTables__WordBreak_Newline           = QUnicodeTables__WordBreakClass(3)
	QUnicodeTables__WordBreak_Extend            = QUnicodeTables__WordBreakClass(4)
	QUnicodeTables__WordBreak_RegionalIndicator = QUnicodeTables__WordBreakClass(5)
	QUnicodeTables__WordBreak_Katakana          = QUnicodeTables__WordBreakClass(6)
	QUnicodeTables__WordBreak_HebrewLetter      = QUnicodeTables__WordBreakClass(7)
	QUnicodeTables__WordBreak_ALetter           = QUnicodeTables__WordBreakClass(8)
	QUnicodeTables__WordBreak_SingleQuote       = QUnicodeTables__WordBreakClass(9)
	QUnicodeTables__WordBreak_DoubleQuote       = QUnicodeTables__WordBreakClass(10)
	QUnicodeTables__WordBreak_MidNumLet         = QUnicodeTables__WordBreakClass(11)
	QUnicodeTables__WordBreak_MidLetter         = QUnicodeTables__WordBreakClass(12)
	QUnicodeTables__WordBreak_MidNum            = QUnicodeTables__WordBreakClass(13)
	QUnicodeTables__WordBreak_Numeric           = QUnicodeTables__WordBreakClass(14)
	QUnicodeTables__WordBreak_ExtendNumLet      = QUnicodeTables__WordBreakClass(15)
)

type QUnicodeTables struct {
	ptr unsafe.Pointer
}

type QUnicodeTables_ITF interface {
	QUnicodeTables_PTR() *QUnicodeTables
}

func (p *QUnicodeTables) QUnicodeTables_PTR() *QUnicodeTables {
	return p
}

func (p *QUnicodeTables) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QUnicodeTables) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQUnicodeTables(ptr QUnicodeTables_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QUnicodeTables_PTR().Pointer()
	}
	return nil
}

func NewQUnicodeTablesFromPointer(ptr unsafe.Pointer) *QUnicodeTables {
	var n = new(QUnicodeTables)
	n.SetPointer(ptr)
	return n
}

func (ptr *QUnicodeTables) DestroyQUnicodeTables() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QUnicodeTools::CharAttributeOption
type QUnicodeTools__CharAttributeOption int64

const (
	QUnicodeTools__GraphemeBreaks       = QUnicodeTools__CharAttributeOption(0x01)
	QUnicodeTools__WordBreaks           = QUnicodeTools__CharAttributeOption(0x02)
	QUnicodeTools__SentenceBreaks       = QUnicodeTools__CharAttributeOption(0x04)
	QUnicodeTools__LineBreaks           = QUnicodeTools__CharAttributeOption(0x08)
	QUnicodeTools__WhiteSpaces          = QUnicodeTools__CharAttributeOption(0x10)
	QUnicodeTools__DefaultOptionsCompat = QUnicodeTools__CharAttributeOption(QUnicodeTools__GraphemeBreaks | QUnicodeTools__LineBreaks | QUnicodeTools__WhiteSpaces)
	QUnicodeTools__DontClearAttributes  = QUnicodeTools__CharAttributeOption(0x1000)
)

type QUnicodeTools struct {
	ptr unsafe.Pointer
}

type QUnicodeTools_ITF interface {
	QUnicodeTools_PTR() *QUnicodeTools
}

func (p *QUnicodeTools) QUnicodeTools_PTR() *QUnicodeTools {
	return p
}

func (p *QUnicodeTools) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QUnicodeTools) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQUnicodeTools(ptr QUnicodeTools_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QUnicodeTools_PTR().Pointer()
	}
	return nil
}

func NewQUnicodeToolsFromPointer(ptr unsafe.Pointer) *QUnicodeTools {
	var n = new(QUnicodeTools)
	n.SetPointer(ptr)
	return n
}

func (ptr *QUnicodeTools) DestroyQUnicodeTools() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QUrl::ComponentFormattingOption
type QUrl__ComponentFormattingOption int64

const (
	QUrl__PrettyDecoded    = QUrl__ComponentFormattingOption(0x000000)
	QUrl__EncodeSpaces     = QUrl__ComponentFormattingOption(0x100000)
	QUrl__EncodeUnicode    = QUrl__ComponentFormattingOption(0x200000)
	QUrl__EncodeDelimiters = QUrl__ComponentFormattingOption(0x400000 | 0x800000)
	QUrl__EncodeReserved   = QUrl__ComponentFormattingOption(0x1000000)
	QUrl__DecodeReserved   = QUrl__ComponentFormattingOption(0x2000000)
	QUrl__FullyEncoded     = QUrl__ComponentFormattingOption(QUrl__EncodeSpaces | QUrl__EncodeUnicode | QUrl__EncodeDelimiters | QUrl__EncodeReserved)
	QUrl__FullyDecoded     = QUrl__ComponentFormattingOption(QUrl__FullyEncoded | QUrl__DecodeReserved | 0x4000000)
)

//QUrl::ParsingMode
type QUrl__ParsingMode int64

const (
	QUrl__TolerantMode = QUrl__ParsingMode(0)
	QUrl__StrictMode   = QUrl__ParsingMode(1)
	QUrl__DecodedMode  = QUrl__ParsingMode(2)
)

//QUrl::UrlFormattingOption
type QUrl__UrlFormattingOption int64

const (
	QUrl__None                  = QUrl__UrlFormattingOption(0x0)
	QUrl__RemoveScheme          = QUrl__UrlFormattingOption(0x1)
	QUrl__RemovePassword        = QUrl__UrlFormattingOption(0x2)
	QUrl__RemoveUserInfo        = QUrl__UrlFormattingOption(QUrl__RemovePassword | 0x4)
	QUrl__RemovePort            = QUrl__UrlFormattingOption(0x8)
	QUrl__RemoveAuthority       = QUrl__UrlFormattingOption(QUrl__RemoveUserInfo | QUrl__RemovePort | 0x10)
	QUrl__RemovePath            = QUrl__UrlFormattingOption(0x20)
	QUrl__RemoveQuery           = QUrl__UrlFormattingOption(0x40)
	QUrl__RemoveFragment        = QUrl__UrlFormattingOption(0x80)
	QUrl__PreferLocalFile       = QUrl__UrlFormattingOption(0x200)
	QUrl__StripTrailingSlash    = QUrl__UrlFormattingOption(0x400)
	QUrl__RemoveFilename        = QUrl__UrlFormattingOption(0x800)
	QUrl__NormalizePathSegments = QUrl__UrlFormattingOption(0x1000)
)

//QUrl::UserInputResolutionOption
type QUrl__UserInputResolutionOption int64

const (
	QUrl__DefaultResolution = QUrl__UserInputResolutionOption(0)
	QUrl__AssumeLocalFile   = QUrl__UserInputResolutionOption(1)
)

type QUrl struct {
	ptr unsafe.Pointer
}

type QUrl_ITF interface {
	QUrl_PTR() *QUrl
}

func (p *QUrl) QUrl_PTR() *QUrl {
	return p
}

func (p *QUrl) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QUrl) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQUrl(ptr QUrl_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QUrl_PTR().Pointer()
	}
	return nil
}

func NewQUrlFromPointer(ptr unsafe.Pointer) *QUrl {
	var n = new(QUrl)
	n.SetPointer(ptr)
	return n
}
func QUrl_FromEncoded(input QByteArray_ITF, parsingMode QUrl__ParsingMode) *QUrl {
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromEncoded(PointerFromQByteArray(input), C.longlong(parsingMode)))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func (ptr *QUrl) FromEncoded(input QByteArray_ITF, parsingMode QUrl__ParsingMode) *QUrl {
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromEncoded(PointerFromQByteArray(input), C.longlong(parsingMode)))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func NewQUrl() *QUrl {
	var tmpValue = NewQUrlFromPointer(C.QUrl_NewQUrl())
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func NewQUrl4(other QUrl_ITF) *QUrl {
	var tmpValue = NewQUrlFromPointer(C.QUrl_NewQUrl4(PointerFromQUrl(other)))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func NewQUrl3(url string, parsingMode QUrl__ParsingMode) *QUrl {
	var urlC = C.CString(url)
	defer C.free(unsafe.Pointer(urlC))
	var tmpValue = NewQUrlFromPointer(C.QUrl_NewQUrl3(urlC, C.longlong(parsingMode)))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func NewQUrl2(other QUrl_ITF) *QUrl {
	var tmpValue = NewQUrlFromPointer(C.QUrl_NewQUrl2(PointerFromQUrl(other)))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func (ptr *QUrl) Adjusted(options QUrl__UrlFormattingOption) *QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = NewQUrlFromPointer(C.QUrl_Adjusted(ptr.Pointer(), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QUrl) Authority(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Authority(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) Clear() {
	if ptr.Pointer() != nil {
		C.QUrl_Clear(ptr.Pointer())
	}
}

func (ptr *QUrl) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QUrl) FileName(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_FileName(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) Fragment(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Fragment(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func QUrl_FromAce(domain QByteArray_ITF) string {
	return cGoUnpackString(C.QUrl_QUrl_FromAce(PointerFromQByteArray(domain)))
}

func (ptr *QUrl) FromAce(domain QByteArray_ITF) string {
	return cGoUnpackString(C.QUrl_QUrl_FromAce(PointerFromQByteArray(domain)))
}

func QUrl_FromLocalFile(localFile string) *QUrl {
	var localFileC = C.CString(localFile)
	defer C.free(unsafe.Pointer(localFileC))
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromLocalFile(localFileC))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func (ptr *QUrl) FromLocalFile(localFile string) *QUrl {
	var localFileC = C.CString(localFile)
	defer C.free(unsafe.Pointer(localFileC))
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromLocalFile(localFileC))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func QUrl_FromPercentEncoding(input QByteArray_ITF) string {
	return cGoUnpackString(C.QUrl_QUrl_FromPercentEncoding(PointerFromQByteArray(input)))
}

func (ptr *QUrl) FromPercentEncoding(input QByteArray_ITF) string {
	return cGoUnpackString(C.QUrl_QUrl_FromPercentEncoding(PointerFromQByteArray(input)))
}

func QUrl_FromStringList(urls []string, mode QUrl__ParsingMode) []*QUrl {
	var urlsC = C.CString(strings.Join(urls, "|"))
	defer C.free(unsafe.Pointer(urlsC))
	return func(l C.struct_QtCore_PackedList) []*QUrl {
		var out = make([]*QUrl, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQUrlFromPointer(l.data).fromStringList_atList(i)
		}
		return out
	}(C.QUrl_QUrl_FromStringList(urlsC, C.longlong(mode)))
}

func (ptr *QUrl) FromStringList(urls []string, mode QUrl__ParsingMode) []*QUrl {
	var urlsC = C.CString(strings.Join(urls, "|"))
	defer C.free(unsafe.Pointer(urlsC))
	return func(l C.struct_QtCore_PackedList) []*QUrl {
		var out = make([]*QUrl, int(l.len))
		for i := 0; i < int(l.len); i++ {
			out[i] = NewQUrlFromPointer(l.data).fromStringList_atList(i)
		}
		return out
	}(C.QUrl_QUrl_FromStringList(urlsC, C.longlong(mode)))
}

func QUrl_FromUserInput(userInput string) *QUrl {
	var userInputC = C.CString(userInput)
	defer C.free(unsafe.Pointer(userInputC))
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromUserInput(userInputC))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func (ptr *QUrl) FromUserInput(userInput string) *QUrl {
	var userInputC = C.CString(userInput)
	defer C.free(unsafe.Pointer(userInputC))
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromUserInput(userInputC))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func QUrl_FromUserInput2(userInput string, workingDirectory string, options QUrl__UserInputResolutionOption) *QUrl {
	var userInputC = C.CString(userInput)
	defer C.free(unsafe.Pointer(userInputC))
	var workingDirectoryC = C.CString(workingDirectory)
	defer C.free(unsafe.Pointer(workingDirectoryC))
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromUserInput2(userInputC, workingDirectoryC, C.longlong(options)))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func (ptr *QUrl) FromUserInput2(userInput string, workingDirectory string, options QUrl__UserInputResolutionOption) *QUrl {
	var userInputC = C.CString(userInput)
	defer C.free(unsafe.Pointer(userInputC))
	var workingDirectoryC = C.CString(workingDirectory)
	defer C.free(unsafe.Pointer(workingDirectoryC))
	var tmpValue = NewQUrlFromPointer(C.QUrl_QUrl_FromUserInput2(userInputC, workingDirectoryC, C.longlong(options)))
	runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
	return tmpValue
}

func (ptr *QUrl) HasFragment() bool {
	if ptr.Pointer() != nil {
		return C.QUrl_HasFragment(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUrl) HasQuery() bool {
	if ptr.Pointer() != nil {
		return C.QUrl_HasQuery(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUrl) Host(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Host(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func QUrl_IdnWhitelist() []string {
	return strings.Split(cGoUnpackString(C.QUrl_QUrl_IdnWhitelist()), "|")
}

func (ptr *QUrl) IdnWhitelist() []string {
	return strings.Split(cGoUnpackString(C.QUrl_QUrl_IdnWhitelist()), "|")
}

func (ptr *QUrl) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QUrl_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUrl) IsLocalFile() bool {
	if ptr.Pointer() != nil {
		return C.QUrl_IsLocalFile(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUrl) IsParentOf(childUrl QUrl_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QUrl_IsParentOf(ptr.Pointer(), PointerFromQUrl(childUrl)) != 0
	}
	return false
}

func (ptr *QUrl) IsRelative() bool {
	if ptr.Pointer() != nil {
		return C.QUrl_IsRelative(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUrl) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QUrl_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUrl) Matches(url QUrl_ITF, options QUrl__UrlFormattingOption) bool {
	if ptr.Pointer() != nil {
		return C.QUrl_Matches(ptr.Pointer(), PointerFromQUrl(url), C.longlong(options)) != 0
	}
	return false
}

func (ptr *QUrl) Password(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Password(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) Path(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Path(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) Port(defaultPort int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QUrl_Port(ptr.Pointer(), C.int(int32(defaultPort)))))
	}
	return 0
}

func (ptr *QUrl) Query(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Query(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) Resolved(relative QUrl_ITF) *QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = NewQUrlFromPointer(C.QUrl_Resolved(ptr.Pointer(), PointerFromQUrl(relative)))
		runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QUrl) Scheme() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Scheme(ptr.Pointer()))
	}
	return ""
}

func (ptr *QUrl) SetAuthority(authority string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var authorityC = C.CString(authority)
		defer C.free(unsafe.Pointer(authorityC))
		C.QUrl_SetAuthority(ptr.Pointer(), authorityC, C.longlong(mode))
	}
}

func (ptr *QUrl) SetFragment(fragment string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var fragmentC = C.CString(fragment)
		defer C.free(unsafe.Pointer(fragmentC))
		C.QUrl_SetFragment(ptr.Pointer(), fragmentC, C.longlong(mode))
	}
}

func (ptr *QUrl) SetHost(host string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var hostC = C.CString(host)
		defer C.free(unsafe.Pointer(hostC))
		C.QUrl_SetHost(ptr.Pointer(), hostC, C.longlong(mode))
	}
}

func QUrl_SetIdnWhitelist(list []string) {
	var listC = C.CString(strings.Join(list, "|"))
	defer C.free(unsafe.Pointer(listC))
	C.QUrl_QUrl_SetIdnWhitelist(listC)
}

func (ptr *QUrl) SetIdnWhitelist(list []string) {
	var listC = C.CString(strings.Join(list, "|"))
	defer C.free(unsafe.Pointer(listC))
	C.QUrl_QUrl_SetIdnWhitelist(listC)
}

func (ptr *QUrl) SetPassword(password string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var passwordC = C.CString(password)
		defer C.free(unsafe.Pointer(passwordC))
		C.QUrl_SetPassword(ptr.Pointer(), passwordC, C.longlong(mode))
	}
}

func (ptr *QUrl) SetPath(path string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var pathC = C.CString(path)
		defer C.free(unsafe.Pointer(pathC))
		C.QUrl_SetPath(ptr.Pointer(), pathC, C.longlong(mode))
	}
}

func (ptr *QUrl) SetPort(port int) {
	if ptr.Pointer() != nil {
		C.QUrl_SetPort(ptr.Pointer(), C.int(int32(port)))
	}
}

func (ptr *QUrl) SetQuery(query string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var queryC = C.CString(query)
		defer C.free(unsafe.Pointer(queryC))
		C.QUrl_SetQuery(ptr.Pointer(), queryC, C.longlong(mode))
	}
}

func (ptr *QUrl) SetQuery2(query QUrlQuery_ITF) {
	if ptr.Pointer() != nil {
		C.QUrl_SetQuery2(ptr.Pointer(), PointerFromQUrlQuery(query))
	}
}

func (ptr *QUrl) SetScheme(scheme string) {
	if ptr.Pointer() != nil {
		var schemeC = C.CString(scheme)
		defer C.free(unsafe.Pointer(schemeC))
		C.QUrl_SetScheme(ptr.Pointer(), schemeC)
	}
}

func (ptr *QUrl) SetUrl(url string, parsingMode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var urlC = C.CString(url)
		defer C.free(unsafe.Pointer(urlC))
		C.QUrl_SetUrl(ptr.Pointer(), urlC, C.longlong(parsingMode))
	}
}

func (ptr *QUrl) SetUserInfo(userInfo string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var userInfoC = C.CString(userInfo)
		defer C.free(unsafe.Pointer(userInfoC))
		C.QUrl_SetUserInfo(ptr.Pointer(), userInfoC, C.longlong(mode))
	}
}

func (ptr *QUrl) SetUserName(userName string, mode QUrl__ParsingMode) {
	if ptr.Pointer() != nil {
		var userNameC = C.CString(userName)
		defer C.free(unsafe.Pointer(userNameC))
		C.QUrl_SetUserName(ptr.Pointer(), userNameC, C.longlong(mode))
	}
}

func (ptr *QUrl) Swap(other QUrl_ITF) {
	if ptr.Pointer() != nil {
		C.QUrl_Swap(ptr.Pointer(), PointerFromQUrl(other))
	}
}

func QUrl_ToAce(domain string) *QByteArray {
	var domainC = C.CString(domain)
	defer C.free(unsafe.Pointer(domainC))
	var tmpValue = NewQByteArrayFromPointer(C.QUrl_QUrl_ToAce(domainC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QUrl) ToAce(domain string) *QByteArray {
	var domainC = C.CString(domain)
	defer C.free(unsafe.Pointer(domainC))
	var tmpValue = NewQByteArrayFromPointer(C.QUrl_QUrl_ToAce(domainC))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QUrl) ToDisplayString(options QUrl__UrlFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_ToDisplayString(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) ToEncoded(options QUrl__UrlFormattingOption) *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QUrl_ToEncoded(ptr.Pointer(), C.longlong(options)))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QUrl) ToLocalFile() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_ToLocalFile(ptr.Pointer()))
	}
	return ""
}

func QUrl_ToPercentEncoding(input string, exclude QByteArray_ITF, include QByteArray_ITF) *QByteArray {
	var inputC = C.CString(input)
	defer C.free(unsafe.Pointer(inputC))
	var tmpValue = NewQByteArrayFromPointer(C.QUrl_QUrl_ToPercentEncoding(inputC, PointerFromQByteArray(exclude), PointerFromQByteArray(include)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QUrl) ToPercentEncoding(input string, exclude QByteArray_ITF, include QByteArray_ITF) *QByteArray {
	var inputC = C.CString(input)
	defer C.free(unsafe.Pointer(inputC))
	var tmpValue = NewQByteArrayFromPointer(C.QUrl_QUrl_ToPercentEncoding(inputC, PointerFromQByteArray(exclude), PointerFromQByteArray(include)))
	runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
	return tmpValue
}

func (ptr *QUrl) ToString(options QUrl__UrlFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_ToString(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) TopLevelDomain(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_TopLevelDomain(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) Url(options QUrl__UrlFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_Url(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) UserInfo(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_UserInfo(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) UserName(options QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrl_UserName(ptr.Pointer(), C.longlong(options)))
	}
	return ""
}

func (ptr *QUrl) DestroyQUrl() {
	if ptr.Pointer() != nil {
		C.QUrl_DestroyQUrl(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func (ptr *QUrl) fromStringList_atList(i int) *QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = NewQUrlFromPointer(C.QUrl_fromStringList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

type QUrlQuery struct {
	ptr unsafe.Pointer
}

type QUrlQuery_ITF interface {
	QUrlQuery_PTR() *QUrlQuery
}

func (p *QUrlQuery) QUrlQuery_PTR() *QUrlQuery {
	return p
}

func (p *QUrlQuery) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QUrlQuery) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQUrlQuery(ptr QUrlQuery_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QUrlQuery_PTR().Pointer()
	}
	return nil
}

func NewQUrlQueryFromPointer(ptr unsafe.Pointer) *QUrlQuery {
	var n = new(QUrlQuery)
	n.SetPointer(ptr)
	return n
}
func NewQUrlQuery() *QUrlQuery {
	var tmpValue = NewQUrlQueryFromPointer(C.QUrlQuery_NewQUrlQuery())
	runtime.SetFinalizer(tmpValue, (*QUrlQuery).DestroyQUrlQuery)
	return tmpValue
}

func NewQUrlQuery3(queryString string) *QUrlQuery {
	var queryStringC = C.CString(queryString)
	defer C.free(unsafe.Pointer(queryStringC))
	var tmpValue = NewQUrlQueryFromPointer(C.QUrlQuery_NewQUrlQuery3(queryStringC))
	runtime.SetFinalizer(tmpValue, (*QUrlQuery).DestroyQUrlQuery)
	return tmpValue
}

func NewQUrlQuery2(url QUrl_ITF) *QUrlQuery {
	var tmpValue = NewQUrlQueryFromPointer(C.QUrlQuery_NewQUrlQuery2(PointerFromQUrl(url)))
	runtime.SetFinalizer(tmpValue, (*QUrlQuery).DestroyQUrlQuery)
	return tmpValue
}

func NewQUrlQuery4(other QUrlQuery_ITF) *QUrlQuery {
	var tmpValue = NewQUrlQueryFromPointer(C.QUrlQuery_NewQUrlQuery4(PointerFromQUrlQuery(other)))
	runtime.SetFinalizer(tmpValue, (*QUrlQuery).DestroyQUrlQuery)
	return tmpValue
}

func (ptr *QUrlQuery) AddQueryItem(key string, value string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		var valueC = C.CString(value)
		defer C.free(unsafe.Pointer(valueC))
		C.QUrlQuery_AddQueryItem(ptr.Pointer(), keyC, valueC)
	}
}

func (ptr *QUrlQuery) AllQueryItemValues(key string, encoding QUrl__ComponentFormattingOption) []string {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return strings.Split(cGoUnpackString(C.QUrlQuery_AllQueryItemValues(ptr.Pointer(), keyC, C.longlong(encoding))), "|")
	}
	return make([]string, 0)
}

func (ptr *QUrlQuery) Clear() {
	if ptr.Pointer() != nil {
		C.QUrlQuery_Clear(ptr.Pointer())
	}
}

func QUrlQuery_DefaultQueryPairDelimiter() *QChar {
	var tmpValue = NewQCharFromPointer(C.QUrlQuery_QUrlQuery_DefaultQueryPairDelimiter())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func (ptr *QUrlQuery) DefaultQueryPairDelimiter() *QChar {
	var tmpValue = NewQCharFromPointer(C.QUrlQuery_QUrlQuery_DefaultQueryPairDelimiter())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func QUrlQuery_DefaultQueryValueDelimiter() *QChar {
	var tmpValue = NewQCharFromPointer(C.QUrlQuery_QUrlQuery_DefaultQueryValueDelimiter())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func (ptr *QUrlQuery) DefaultQueryValueDelimiter() *QChar {
	var tmpValue = NewQCharFromPointer(C.QUrlQuery_QUrlQuery_DefaultQueryValueDelimiter())
	runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
	return tmpValue
}

func (ptr *QUrlQuery) HasQueryItem(key string) bool {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return C.QUrlQuery_HasQueryItem(ptr.Pointer(), keyC) != 0
	}
	return false
}

func (ptr *QUrlQuery) IsEmpty() bool {
	if ptr.Pointer() != nil {
		return C.QUrlQuery_IsEmpty(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUrlQuery) Query(encoding QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrlQuery_Query(ptr.Pointer(), C.longlong(encoding)))
	}
	return ""
}

func (ptr *QUrlQuery) QueryItemValue(key string, encoding QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		return cGoUnpackString(C.QUrlQuery_QueryItemValue(ptr.Pointer(), keyC, C.longlong(encoding)))
	}
	return ""
}

func (ptr *QUrlQuery) QueryPairDelimiter() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QUrlQuery_QueryPairDelimiter(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QUrlQuery) QueryValueDelimiter() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QUrlQuery_QueryValueDelimiter(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QUrlQuery) RemoveAllQueryItems(key string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QUrlQuery_RemoveAllQueryItems(ptr.Pointer(), keyC)
	}
}

func (ptr *QUrlQuery) RemoveQueryItem(key string) {
	if ptr.Pointer() != nil {
		var keyC = C.CString(key)
		defer C.free(unsafe.Pointer(keyC))
		C.QUrlQuery_RemoveQueryItem(ptr.Pointer(), keyC)
	}
}

func (ptr *QUrlQuery) SetQuery(queryString string) {
	if ptr.Pointer() != nil {
		var queryStringC = C.CString(queryString)
		defer C.free(unsafe.Pointer(queryStringC))
		C.QUrlQuery_SetQuery(ptr.Pointer(), queryStringC)
	}
}

func (ptr *QUrlQuery) SetQueryDelimiters(valueDelimiter QChar_ITF, pairDelimiter QChar_ITF) {
	if ptr.Pointer() != nil {
		C.QUrlQuery_SetQueryDelimiters(ptr.Pointer(), PointerFromQChar(valueDelimiter), PointerFromQChar(pairDelimiter))
	}
}

func (ptr *QUrlQuery) Swap(other QUrlQuery_ITF) {
	if ptr.Pointer() != nil {
		C.QUrlQuery_Swap(ptr.Pointer(), PointerFromQUrlQuery(other))
	}
}

func (ptr *QUrlQuery) ToString(encoding QUrl__ComponentFormattingOption) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUrlQuery_ToString(ptr.Pointer(), C.longlong(encoding)))
	}
	return ""
}

func (ptr *QUrlQuery) DestroyQUrlQuery() {
	if ptr.Pointer() != nil {
		C.QUrlQuery_DestroyQUrlQuery(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QUuid::Variant
type QUuid__Variant int64

const (
	QUuid__VarUnknown = QUuid__Variant(-1)
	QUuid__NCS        = QUuid__Variant(0)
	QUuid__DCE        = QUuid__Variant(2)
	QUuid__Microsoft  = QUuid__Variant(6)
	QUuid__Reserved   = QUuid__Variant(7)
)

//QUuid::Version
type QUuid__Version int64

const (
	QUuid__VerUnknown    = QUuid__Version(-1)
	QUuid__Time          = QUuid__Version(1)
	QUuid__EmbeddedPOSIX = QUuid__Version(2)
	QUuid__Md5           = QUuid__Version(3)
	QUuid__Name          = QUuid__Version(QUuid__Md5)
	QUuid__Random        = QUuid__Version(4)
	QUuid__Sha1          = QUuid__Version(5)
)

type QUuid struct {
	ptr unsafe.Pointer
}

type QUuid_ITF interface {
	QUuid_PTR() *QUuid
}

func (p *QUuid) QUuid_PTR() *QUuid {
	return p
}

func (p *QUuid) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QUuid) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQUuid(ptr QUuid_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QUuid_PTR().Pointer()
	}
	return nil
}

func NewQUuidFromPointer(ptr unsafe.Pointer) *QUuid {
	var n = new(QUuid)
	n.SetPointer(ptr)
	return n
}

func (ptr *QUuid) DestroyQUuid() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QUuid_CreateUuid() *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuid())
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) CreateUuid() *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuid())
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func QUuid_CreateUuidV3(ns QUuid_ITF, baseData QByteArray_ITF) *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV3(PointerFromQUuid(ns), PointerFromQByteArray(baseData)))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) CreateUuidV3(ns QUuid_ITF, baseData QByteArray_ITF) *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV3(PointerFromQUuid(ns), PointerFromQByteArray(baseData)))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func QUuid_CreateUuidV5(ns QUuid_ITF, baseData QByteArray_ITF) *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV5(PointerFromQUuid(ns), PointerFromQByteArray(baseData)))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) CreateUuidV5(ns QUuid_ITF, baseData QByteArray_ITF) *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV5(PointerFromQUuid(ns), PointerFromQByteArray(baseData)))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) Variant() QUuid__Variant {
	if ptr.Pointer() != nil {
		return QUuid__Variant(C.QUuid_Variant(ptr.Pointer()))
	}
	return 0
}

func (ptr *QUuid) Version() QUuid__Version {
	if ptr.Pointer() != nil {
		return QUuid__Version(C.QUuid_Version(ptr.Pointer()))
	}
	return 0
}

func NewQUuid() *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_NewQUuid())
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func NewQUuid5(text QByteArray_ITF) *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_NewQUuid5(PointerFromQByteArray(text)))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func NewQUuid3(text string) *QUuid {
	var textC = C.CString(text)
	defer C.free(unsafe.Pointer(textC))
	var tmpValue = NewQUuidFromPointer(C.QUuid_NewQUuid3(textC))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func NewQUuid2(l uint, w1 uint16, w2 uint16, b1 string, b2 string, b3 string, b4 string, b5 string, b6 string, b7 string, b8 string) *QUuid {
	var b1C = C.CString(b1)
	defer C.free(unsafe.Pointer(b1C))
	var b2C = C.CString(b2)
	defer C.free(unsafe.Pointer(b2C))
	var b3C = C.CString(b3)
	defer C.free(unsafe.Pointer(b3C))
	var b4C = C.CString(b4)
	defer C.free(unsafe.Pointer(b4C))
	var b5C = C.CString(b5)
	defer C.free(unsafe.Pointer(b5C))
	var b6C = C.CString(b6)
	defer C.free(unsafe.Pointer(b6C))
	var b7C = C.CString(b7)
	defer C.free(unsafe.Pointer(b7C))
	var b8C = C.CString(b8)
	defer C.free(unsafe.Pointer(b8C))
	var tmpValue = NewQUuidFromPointer(C.QUuid_NewQUuid2(C.uint(uint32(l)), C.ushort(w1), C.ushort(w2), b1C, b2C, b3C, b4C, b5C, b6C, b7C, b8C))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func QUuid_CreateUuidV32(ns QUuid_ITF, baseData string) *QUuid {
	var baseDataC = C.CString(baseData)
	defer C.free(unsafe.Pointer(baseDataC))
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV32(PointerFromQUuid(ns), baseDataC))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) CreateUuidV32(ns QUuid_ITF, baseData string) *QUuid {
	var baseDataC = C.CString(baseData)
	defer C.free(unsafe.Pointer(baseDataC))
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV32(PointerFromQUuid(ns), baseDataC))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func QUuid_CreateUuidV52(ns QUuid_ITF, baseData string) *QUuid {
	var baseDataC = C.CString(baseData)
	defer C.free(unsafe.Pointer(baseDataC))
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV52(PointerFromQUuid(ns), baseDataC))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) CreateUuidV52(ns QUuid_ITF, baseData string) *QUuid {
	var baseDataC = C.CString(baseData)
	defer C.free(unsafe.Pointer(baseDataC))
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_CreateUuidV52(PointerFromQUuid(ns), baseDataC))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func QUuid_FromRfc4122(bytes QByteArray_ITF) *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_FromRfc4122(PointerFromQByteArray(bytes)))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) FromRfc4122(bytes QByteArray_ITF) *QUuid {
	var tmpValue = NewQUuidFromPointer(C.QUuid_QUuid_FromRfc4122(PointerFromQByteArray(bytes)))
	runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
	return tmpValue
}

func (ptr *QUuid) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QUuid_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QUuid) ToByteArray() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QUuid_ToByteArray(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QUuid) ToRfc4122() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QUuid_ToRfc4122(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QUuid) ToString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QUuid_ToString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QUuid) Data1() uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QUuid_Data1(ptr.Pointer())))
	}
	return 0
}

func (ptr *QUuid) SetData1(vui uint) {
	if ptr.Pointer() != nil {
		C.QUuid_SetData1(ptr.Pointer(), C.uint(uint32(vui)))
	}
}

func (ptr *QUuid) Data2() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QUuid_Data2(ptr.Pointer()))
	}
	return 0
}

func (ptr *QUuid) SetData2(vus uint16) {
	if ptr.Pointer() != nil {
		C.QUuid_SetData2(ptr.Pointer(), C.ushort(vus))
	}
}

func (ptr *QUuid) Data3() uint16 {
	if ptr.Pointer() != nil {
		return uint16(C.QUuid_Data3(ptr.Pointer()))
	}
	return 0
}

func (ptr *QUuid) SetData3(vus uint16) {
	if ptr.Pointer() != nil {
		C.QUuid_SetData3(ptr.Pointer(), C.ushort(vus))
	}
}

type QVarLengthArray struct {
	ptr unsafe.Pointer
}

type QVarLengthArray_ITF interface {
	QVarLengthArray_PTR() *QVarLengthArray
}

func (p *QVarLengthArray) QVarLengthArray_PTR() *QVarLengthArray {
	return p
}

func (p *QVarLengthArray) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVarLengthArray) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVarLengthArray(ptr QVarLengthArray_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVarLengthArray_PTR().Pointer()
	}
	return nil
}

func NewQVarLengthArrayFromPointer(ptr unsafe.Pointer) *QVarLengthArray {
	var n = new(QVarLengthArray)
	n.SetPointer(ptr)
	return n
}

type QVariant struct {
	ptr unsafe.Pointer
}

type QVariant_ITF interface {
	QVariant_PTR() *QVariant
}

func (p *QVariant) QVariant_PTR() *QVariant {
	return p
}

func (p *QVariant) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVariant) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVariant(ptr QVariant_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVariant_PTR().Pointer()
	}
	return nil
}

func NewQVariantFromPointer(ptr unsafe.Pointer) *QVariant {
	var n = new(QVariant)
	n.SetPointer(ptr)
	return n
}
func NewQVariant20(c QChar_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant20(PointerFromQChar(c)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant18(val QLatin1String_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant18(PointerFromQLatin1String(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant11(val bool) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant11(C.char(int8(qt.GoBoolToInt(val)))))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant16(val QBitArray_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant16(PointerFromQBitArray(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant15(val QByteArray_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant15(PointerFromQByteArray(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant21(val QDate_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant21(PointerFromQDate(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant23(val QDateTime_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant23(PointerFromQDateTime(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant39(val QEasingCurve_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant39(PointerFromQEasingCurve(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant45(val QJsonArray_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant45(PointerFromQJsonArray(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant46(val QJsonDocument_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant46(PointerFromQJsonDocument(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant44(val QJsonObject_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant44(PointerFromQJsonObject(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant43(val QJsonValue_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant43(PointerFromQJsonValue(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant31(val QLine_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant31(PointerFromQLine(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant32(val QLineF_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant32(PointerFromQLineF(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant35(l QLocale_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant35(PointerFromQLocale(l)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant41(val QModelIndex_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant41(PointerFromQModelIndex(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant42(val QPersistentModelIndex_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant42(PointerFromQPersistentModelIndex(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant29(val QPoint_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant29(PointerFromQPoint(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant30(val QPointF_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant30(PointerFromQPointF(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant33(val QRect_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant33(PointerFromQRect(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant34(val QRectF_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant34(PointerFromQRectF(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant36(regExp QRegExp_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant36(PointerFromQRegExp(regExp)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant37(re QRegularExpression_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant37(PointerFromQRegularExpression(re)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant27(val QSize_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant27(PointerFromQSize(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant28(val QSizeF_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant28(PointerFromQSizeF(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant17(val string) *QVariant {
	var valC = C.CString(val)
	defer C.free(unsafe.Pointer(valC))
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant17(valC))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant19(val []string) *QVariant {
	var valC = C.CString(strings.Join(val, "|"))
	defer C.free(unsafe.Pointer(valC))
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant19(valC))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant22(val QTime_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant22(PointerFromQTime(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant38(val QUrl_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant38(PointerFromQUrl(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant40(val QUuid_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant40(PointerFromQUuid(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant5(p QVariant_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant5(PointerFromQVariant(p)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant14(val string) *QVariant {
	var valC = C.CString(val)
	defer C.free(unsafe.Pointer(valC))
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant14(valC))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant12(val float64) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant12(C.double(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant13(val float32) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant13(C.float(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant3(typeId int, copy unsafe.Pointer) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant3(C.int(int32(typeId)), copy))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant7(val int) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant7(C.int(int32(val))))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant9(val int64) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant9(C.longlong(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant10(val uint64) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant10(C.ulonglong(val)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant8(val uint) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant8(C.uint(uint32(val))))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func (ptr *QVariant) ToByteArray() *QByteArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQByteArrayFromPointer(C.QVariant_ToByteArray(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QByteArray).DestroyQByteArray)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToChar() *QChar {
	if ptr.Pointer() != nil {
		var tmpValue = NewQCharFromPointer(C.QVariant_ToChar(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QChar).DestroyQChar)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToDate() *QDate {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateFromPointer(C.QVariant_ToDate(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDate).DestroyQDate)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToDateTime() *QDateTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQDateTimeFromPointer(C.QVariant_ToDateTime(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QDateTime).DestroyQDateTime)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToEasingCurve() *QEasingCurve {
	if ptr.Pointer() != nil {
		var tmpValue = NewQEasingCurveFromPointer(C.QVariant_ToEasingCurve(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QEasingCurve).DestroyQEasingCurve)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToLine() *QLine {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFromPointer(C.QVariant_ToLine(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLine).DestroyQLine)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToLineF() *QLineF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLineFFromPointer(C.QVariant_ToLineF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLineF).DestroyQLineF)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToLocale() *QLocale {
	if ptr.Pointer() != nil {
		var tmpValue = NewQLocaleFromPointer(C.QVariant_ToLocale(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QLocale).DestroyQLocale)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToPoint() *QPoint {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFromPointer(C.QVariant_ToPoint(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPoint).DestroyQPoint)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToPointF() *QPointF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPointFFromPointer(C.QVariant_ToPointF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPointF).DestroyQPointF)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToRect() *QRect {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFromPointer(C.QVariant_ToRect(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRect).DestroyQRect)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToRectF() *QRectF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRectFFromPointer(C.QVariant_ToRectF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRectF).DestroyQRectF)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToRegExp() *QRegExp {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegExpFromPointer(C.QVariant_ToRegExp(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegExp).DestroyQRegExp)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToRegularExpression() *QRegularExpression {
	if ptr.Pointer() != nil {
		var tmpValue = NewQRegularExpressionFromPointer(C.QVariant_ToRegularExpression(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QRegularExpression).DestroyQRegularExpression)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToSize() *QSize {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFromPointer(C.QVariant_ToSize(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSize).DestroyQSize)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToSizeF() *QSizeF {
	if ptr.Pointer() != nil {
		var tmpValue = NewQSizeFFromPointer(C.QVariant_ToSizeF(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QSizeF).DestroyQSizeF)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToStringList() []string {
	if ptr.Pointer() != nil {
		return strings.Split(cGoUnpackString(C.QVariant_ToStringList(ptr.Pointer())), "|")
	}
	return make([]string, 0)
}

func (ptr *QVariant) ToTime() *QTime {
	if ptr.Pointer() != nil {
		var tmpValue = NewQTimeFromPointer(C.QVariant_ToTime(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QTime).DestroyQTime)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToUrl() *QUrl {
	if ptr.Pointer() != nil {
		var tmpValue = NewQUrlFromPointer(C.QVariant_ToUrl(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QUrl).DestroyQUrl)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) DestroyQVariant() {
	if ptr.Pointer() != nil {
		C.QVariant_DestroyQVariant(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

func NewQVariant() *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant())
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func (ptr *QVariant) Clear() {
	if ptr.Pointer() != nil {
		C.QVariant_Clear(ptr.Pointer())
	}
}

func NewQVariant6(s QDataStream_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant6(PointerFromQDataStream(s)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func NewQVariant47(other QVariant_ITF) *QVariant {
	var tmpValue = NewQVariantFromPointer(C.QVariant_NewQVariant47(PointerFromQVariant(other)))
	runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
	return tmpValue
}

func (ptr *QVariant) Convert(targetTypeId int) bool {
	if ptr.Pointer() != nil {
		return C.QVariant_Convert(ptr.Pointer(), C.int(int32(targetTypeId))) != 0
	}
	return false
}

func (ptr *QVariant) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVariant_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVariant) IsValid() bool {
	if ptr.Pointer() != nil {
		return C.QVariant_IsValid(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVariant) Swap(other QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QVariant_Swap(ptr.Pointer(), PointerFromQVariant(other))
	}
}

func (ptr *QVariant) ToBitArray() *QBitArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQBitArrayFromPointer(C.QVariant_ToBitArray(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QBitArray).DestroyQBitArray)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToBool() bool {
	if ptr.Pointer() != nil {
		return C.QVariant_ToBool(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVariant) ToDouble(ok bool) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QVariant_ToDouble(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QVariant) ToFloat(ok bool) float32 {
	if ptr.Pointer() != nil {
		return float32(C.QVariant_ToFloat(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QVariant) ToInt(ok bool) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVariant_ToInt(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QVariant) ToJsonArray() *QJsonArray {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonArrayFromPointer(C.QVariant_ToJsonArray(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonArray).DestroyQJsonArray)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToJsonDocument() *QJsonDocument {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonDocumentFromPointer(C.QVariant_ToJsonDocument(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonDocument).DestroyQJsonDocument)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToJsonObject() *QJsonObject {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonObjectFromPointer(C.QVariant_ToJsonObject(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonObject).DestroyQJsonObject)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToJsonValue() *QJsonValue {
	if ptr.Pointer() != nil {
		var tmpValue = NewQJsonValueFromPointer(C.QVariant_ToJsonValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QJsonValue).DestroyQJsonValue)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToList() []*QVariant {
	if ptr.Pointer() != nil {
		return func(l C.struct_QtCore_PackedList) []*QVariant {
			var out = make([]*QVariant, int(l.len))
			for i := 0; i < int(l.len); i++ {
				out[i] = NewQVariantFromPointer(l.data).toList_atList(i)
			}
			return out
		}(C.QVariant_ToList(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVariant) ToLongLong(ok bool) int64 {
	if ptr.Pointer() != nil {
		return int64(C.QVariant_ToLongLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QVariant) ToModelIndex() *QModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQModelIndexFromPointer(C.QVariant_ToModelIndex(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QModelIndex).DestroyQModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToPersistentModelIndex() *QPersistentModelIndex {
	if ptr.Pointer() != nil {
		var tmpValue = NewQPersistentModelIndexFromPointer(C.QVariant_ToPersistentModelIndex(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QPersistentModelIndex).DestroyQPersistentModelIndex)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) ToReal(ok bool) float64 {
	if ptr.Pointer() != nil {
		return float64(C.QVariant_ToReal(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QVariant) ToString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QVariant_ToString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QVariant) ToUInt(ok bool) uint {
	if ptr.Pointer() != nil {
		return uint(uint32(C.QVariant_ToUInt(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok))))))
	}
	return 0
}

func (ptr *QVariant) ToULongLong(ok bool) uint64 {
	if ptr.Pointer() != nil {
		return uint64(C.QVariant_ToULongLong(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(ok)))))
	}
	return 0
}

func (ptr *QVariant) ToUuid() *QUuid {
	if ptr.Pointer() != nil {
		var tmpValue = NewQUuidFromPointer(C.QVariant_ToUuid(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QUuid).DestroyQUuid)
		return tmpValue
	}
	return nil
}

func (ptr *QVariant) TypeName() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QVariant_TypeName(ptr.Pointer()))
	}
	return ""
}

func QVariant_TypeToName(typeId int) string {
	return cGoUnpackString(C.QVariant_QVariant_TypeToName(C.int(int32(typeId))))
}

func (ptr *QVariant) TypeToName(typeId int) string {
	return cGoUnpackString(C.QVariant_QVariant_TypeToName(C.int(int32(typeId))))
}

func (ptr *QVariant) UserType() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVariant_UserType(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVariant) ToColor() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QVariant_ToColor(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVariant) ToFont() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QVariant_ToFont(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVariant) ToImage() unsafe.Pointer {
	if ptr.Pointer() != nil {
		return unsafe.Pointer(C.QVariant_ToImage(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVariant) toList_atList(i int) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QVariant_toList_atList(ptr.Pointer(), C.int(int32(i))))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

type QVariantAnimation struct {
	QAbstractAnimation
}

type QVariantAnimation_ITF interface {
	QAbstractAnimation_ITF
	QVariantAnimation_PTR() *QVariantAnimation
}

func (p *QVariantAnimation) QVariantAnimation_PTR() *QVariantAnimation {
	return p
}

func (p *QVariantAnimation) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QAbstractAnimation_PTR().Pointer()
	}
	return nil
}

func (p *QVariantAnimation) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QAbstractAnimation_PTR().SetPointer(ptr)
	}
}

func PointerFromQVariantAnimation(ptr QVariantAnimation_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVariantAnimation_PTR().Pointer()
	}
	return nil
}

func NewQVariantAnimationFromPointer(ptr unsafe.Pointer) *QVariantAnimation {
	var n = new(QVariantAnimation)
	n.SetPointer(ptr)
	return n
}
func (ptr *QVariantAnimation) CurrentValue() *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QVariantAnimation_CurrentValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQVariantAnimation_Duration
func callbackQVariantAnimation_Duration(ptr unsafe.Pointer) C.int {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::duration"); signal != nil {
		return C.int(int32(signal.(func() int)()))
	}

	return C.int(int32(NewQVariantAnimationFromPointer(ptr).DurationDefault()))
}

func (ptr *QVariantAnimation) ConnectDuration(f func() int) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::duration", f)
	}
}

func (ptr *QVariantAnimation) DisconnectDuration() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::duration")
	}
}

func (ptr *QVariantAnimation) Duration() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVariantAnimation_Duration(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVariantAnimation) DurationDefault() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVariantAnimation_DurationDefault(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVariantAnimation) EasingCurve() *QEasingCurve {
	if ptr.Pointer() != nil {
		var tmpValue = NewQEasingCurveFromPointer(C.QVariantAnimation_EasingCurve(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QEasingCurve).DestroyQEasingCurve)
		return tmpValue
	}
	return nil
}

func (ptr *QVariantAnimation) EndValue() *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QVariantAnimation_EndValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVariantAnimation) SetDuration(msecs int) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetDuration(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QVariantAnimation) SetEasingCurve(easing QEasingCurve_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetEasingCurve(ptr.Pointer(), PointerFromQEasingCurve(easing))
	}
}

func (ptr *QVariantAnimation) SetEndValue(value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetEndValue(ptr.Pointer(), PointerFromQVariant(value))
	}
}

func (ptr *QVariantAnimation) SetStartValue(value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetStartValue(ptr.Pointer(), PointerFromQVariant(value))
	}
}

func (ptr *QVariantAnimation) StartValue() *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QVariantAnimation_StartValue(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func NewQVariantAnimation(parent QObject_ITF) *QVariantAnimation {
	var tmpValue = NewQVariantAnimationFromPointer(C.QVariantAnimation_NewQVariantAnimation(PointerFromQObject(parent)))
	if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
		tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
	}
	return tmpValue
}

func (ptr *QVariantAnimation) KeyValueAt(step float64) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QVariantAnimation_KeyValueAt(ptr.Pointer(), C.double(step)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

//export callbackQVariantAnimation_Event
func callbackQVariantAnimation_Event(ptr unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::event"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QEvent) bool)(NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVariantAnimationFromPointer(ptr).EventDefault(NewQEventFromPointer(event)))))
}

func (ptr *QVariantAnimation) ConnectEvent(f func(event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::event", f)
	}
}

func (ptr *QVariantAnimation) DisconnectEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::event")
	}
}

func (ptr *QVariantAnimation) Event(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QVariantAnimation_Event(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVariantAnimation) EventDefault(event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QVariantAnimation_EventDefault(ptr.Pointer(), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVariantAnimation_Interpolated
func callbackQVariantAnimation_Interpolated(ptr unsafe.Pointer, from unsafe.Pointer, to unsafe.Pointer, progress C.double) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::interpolated"); signal != nil {
		return PointerFromQVariant(signal.(func(*QVariant, *QVariant, float64) *QVariant)(NewQVariantFromPointer(from), NewQVariantFromPointer(to), float64(progress)))
	}

	return PointerFromQVariant(NewQVariantAnimationFromPointer(ptr).InterpolatedDefault(NewQVariantFromPointer(from), NewQVariantFromPointer(to), float64(progress)))
}

func (ptr *QVariantAnimation) ConnectInterpolated(f func(from *QVariant, to *QVariant, progress float64) *QVariant) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::interpolated", f)
	}
}

func (ptr *QVariantAnimation) DisconnectInterpolated() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::interpolated")
	}
}

func (ptr *QVariantAnimation) Interpolated(from QVariant_ITF, to QVariant_ITF, progress float64) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QVariantAnimation_Interpolated(ptr.Pointer(), PointerFromQVariant(from), PointerFromQVariant(to), C.double(progress)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVariantAnimation) InterpolatedDefault(from QVariant_ITF, to QVariant_ITF, progress float64) *QVariant {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVariantFromPointer(C.QVariantAnimation_InterpolatedDefault(ptr.Pointer(), PointerFromQVariant(from), PointerFromQVariant(to), C.double(progress)))
		runtime.SetFinalizer(tmpValue, (*QVariant).DestroyQVariant)
		return tmpValue
	}
	return nil
}

func (ptr *QVariantAnimation) SetKeyValueAt(step float64, value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetKeyValueAt(ptr.Pointer(), C.double(step), PointerFromQVariant(value))
	}
}

//export callbackQVariantAnimation_UpdateCurrentTime
func callbackQVariantAnimation_UpdateCurrentTime(ptr unsafe.Pointer, vin C.int) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::updateCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(vin)))
	} else {
		NewQVariantAnimationFromPointer(ptr).UpdateCurrentTimeDefault(int(int32(vin)))
	}
}

func (ptr *QVariantAnimation) ConnectUpdateCurrentTime(f func(vin int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateCurrentTime", f)
	}
}

func (ptr *QVariantAnimation) DisconnectUpdateCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateCurrentTime")
	}
}

func (ptr *QVariantAnimation) UpdateCurrentTime(vin int) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateCurrentTime(ptr.Pointer(), C.int(int32(vin)))
	}
}

func (ptr *QVariantAnimation) UpdateCurrentTimeDefault(vin int) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateCurrentTimeDefault(ptr.Pointer(), C.int(int32(vin)))
	}
}

//export callbackQVariantAnimation_UpdateCurrentValue
func callbackQVariantAnimation_UpdateCurrentValue(ptr unsafe.Pointer, value unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::updateCurrentValue"); signal != nil {
		signal.(func(*QVariant))(NewQVariantFromPointer(value))
	} else {
		NewQVariantAnimationFromPointer(ptr).UpdateCurrentValueDefault(NewQVariantFromPointer(value))
	}
}

func (ptr *QVariantAnimation) ConnectUpdateCurrentValue(f func(value *QVariant)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateCurrentValue", f)
	}
}

func (ptr *QVariantAnimation) DisconnectUpdateCurrentValue() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateCurrentValue")
	}
}

func (ptr *QVariantAnimation) UpdateCurrentValue(value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateCurrentValue(ptr.Pointer(), PointerFromQVariant(value))
	}
}

func (ptr *QVariantAnimation) UpdateCurrentValueDefault(value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateCurrentValueDefault(ptr.Pointer(), PointerFromQVariant(value))
	}
}

//export callbackQVariantAnimation_UpdateState
func callbackQVariantAnimation_UpdateState(ptr unsafe.Pointer, newState C.longlong, oldState C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::updateState"); signal != nil {
		signal.(func(QAbstractAnimation__State, QAbstractAnimation__State))(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	} else {
		NewQVariantAnimationFromPointer(ptr).UpdateStateDefault(QAbstractAnimation__State(newState), QAbstractAnimation__State(oldState))
	}
}

func (ptr *QVariantAnimation) ConnectUpdateState(f func(newState QAbstractAnimation__State, oldState QAbstractAnimation__State)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateState", f)
	}
}

func (ptr *QVariantAnimation) DisconnectUpdateState() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateState")
	}
}

func (ptr *QVariantAnimation) UpdateState(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateState(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

func (ptr *QVariantAnimation) UpdateStateDefault(newState QAbstractAnimation__State, oldState QAbstractAnimation__State) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateStateDefault(ptr.Pointer(), C.longlong(newState), C.longlong(oldState))
	}
}

//export callbackQVariantAnimation_ValueChanged
func callbackQVariantAnimation_ValueChanged(ptr unsafe.Pointer, value unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::valueChanged"); signal != nil {
		signal.(func(*QVariant))(NewQVariantFromPointer(value))
	}

}

func (ptr *QVariantAnimation) ConnectValueChanged(f func(value *QVariant)) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_ConnectValueChanged(ptr.Pointer())
		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::valueChanged", f)
	}
}

func (ptr *QVariantAnimation) DisconnectValueChanged() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_DisconnectValueChanged(ptr.Pointer())
		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::valueChanged")
	}
}

func (ptr *QVariantAnimation) ValueChanged(value QVariant_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_ValueChanged(ptr.Pointer(), PointerFromQVariant(value))
	}
}

func (ptr *QVariantAnimation) DestroyQVariantAnimation() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_DestroyQVariantAnimation(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVariantAnimation_SetCurrentTime
func callbackQVariantAnimation_SetCurrentTime(ptr unsafe.Pointer, msecs C.int) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::setCurrentTime"); signal != nil {
		signal.(func(int))(int(int32(msecs)))
	} else {
		NewQVariantAnimationFromPointer(ptr).SetCurrentTimeDefault(int(int32(msecs)))
	}
}

func (ptr *QVariantAnimation) ConnectSetCurrentTime(f func(msecs int)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::setCurrentTime", f)
	}
}

func (ptr *QVariantAnimation) DisconnectSetCurrentTime() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::setCurrentTime")
	}
}

func (ptr *QVariantAnimation) SetCurrentTime(msecs int) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetCurrentTime(ptr.Pointer(), C.int(int32(msecs)))
	}
}

func (ptr *QVariantAnimation) SetCurrentTimeDefault(msecs int) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetCurrentTimeDefault(ptr.Pointer(), C.int(int32(msecs)))
	}
}

//export callbackQVariantAnimation_Pause
func callbackQVariantAnimation_Pause(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::pause"); signal != nil {
		signal.(func())()
	} else {
		NewQVariantAnimationFromPointer(ptr).PauseDefault()
	}
}

func (ptr *QVariantAnimation) ConnectPause(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::pause", f)
	}
}

func (ptr *QVariantAnimation) DisconnectPause() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::pause")
	}
}

func (ptr *QVariantAnimation) Pause() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_Pause(ptr.Pointer())
	}
}

func (ptr *QVariantAnimation) PauseDefault() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_PauseDefault(ptr.Pointer())
	}
}

//export callbackQVariantAnimation_Resume
func callbackQVariantAnimation_Resume(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::resume"); signal != nil {
		signal.(func())()
	} else {
		NewQVariantAnimationFromPointer(ptr).ResumeDefault()
	}
}

func (ptr *QVariantAnimation) ConnectResume(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::resume", f)
	}
}

func (ptr *QVariantAnimation) DisconnectResume() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::resume")
	}
}

func (ptr *QVariantAnimation) Resume() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_Resume(ptr.Pointer())
	}
}

func (ptr *QVariantAnimation) ResumeDefault() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_ResumeDefault(ptr.Pointer())
	}
}

//export callbackQVariantAnimation_SetPaused
func callbackQVariantAnimation_SetPaused(ptr unsafe.Pointer, paused C.char) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::setPaused"); signal != nil {
		signal.(func(bool))(int8(paused) != 0)
	} else {
		NewQVariantAnimationFromPointer(ptr).SetPausedDefault(int8(paused) != 0)
	}
}

func (ptr *QVariantAnimation) ConnectSetPaused(f func(paused bool)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::setPaused", f)
	}
}

func (ptr *QVariantAnimation) DisconnectSetPaused() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::setPaused")
	}
}

func (ptr *QVariantAnimation) SetPaused(paused bool) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetPaused(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

func (ptr *QVariantAnimation) SetPausedDefault(paused bool) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_SetPausedDefault(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(paused))))
	}
}

//export callbackQVariantAnimation_Start
func callbackQVariantAnimation_Start(ptr unsafe.Pointer, policy C.longlong) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::start"); signal != nil {
		signal.(func(QAbstractAnimation__DeletionPolicy))(QAbstractAnimation__DeletionPolicy(policy))
	} else {
		NewQVariantAnimationFromPointer(ptr).StartDefault(QAbstractAnimation__DeletionPolicy(policy))
	}
}

func (ptr *QVariantAnimation) ConnectStart(f func(policy QAbstractAnimation__DeletionPolicy)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::start", f)
	}
}

func (ptr *QVariantAnimation) DisconnectStart() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::start")
	}
}

func (ptr *QVariantAnimation) Start(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_Start(ptr.Pointer(), C.longlong(policy))
	}
}

func (ptr *QVariantAnimation) StartDefault(policy QAbstractAnimation__DeletionPolicy) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_StartDefault(ptr.Pointer(), C.longlong(policy))
	}
}

//export callbackQVariantAnimation_Stop
func callbackQVariantAnimation_Stop(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::stop"); signal != nil {
		signal.(func())()
	} else {
		NewQVariantAnimationFromPointer(ptr).StopDefault()
	}
}

func (ptr *QVariantAnimation) ConnectStop(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::stop", f)
	}
}

func (ptr *QVariantAnimation) DisconnectStop() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::stop")
	}
}

func (ptr *QVariantAnimation) Stop() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_Stop(ptr.Pointer())
	}
}

func (ptr *QVariantAnimation) StopDefault() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_StopDefault(ptr.Pointer())
	}
}

//export callbackQVariantAnimation_UpdateDirection
func callbackQVariantAnimation_UpdateDirection(ptr unsafe.Pointer, direction C.longlong) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::updateDirection"); signal != nil {
		signal.(func(QAbstractAnimation__Direction))(QAbstractAnimation__Direction(direction))
	} else {
		NewQVariantAnimationFromPointer(ptr).UpdateDirectionDefault(QAbstractAnimation__Direction(direction))
	}
}

func (ptr *QVariantAnimation) ConnectUpdateDirection(f func(direction QAbstractAnimation__Direction)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateDirection", f)
	}
}

func (ptr *QVariantAnimation) DisconnectUpdateDirection() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::updateDirection")
	}
}

func (ptr *QVariantAnimation) UpdateDirection(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateDirection(ptr.Pointer(), C.longlong(direction))
	}
}

func (ptr *QVariantAnimation) UpdateDirectionDefault(direction QAbstractAnimation__Direction) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_UpdateDirectionDefault(ptr.Pointer(), C.longlong(direction))
	}
}

//export callbackQVariantAnimation_TimerEvent
func callbackQVariantAnimation_TimerEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::timerEvent"); signal != nil {
		signal.(func(*QTimerEvent))(NewQTimerEventFromPointer(event))
	} else {
		NewQVariantAnimationFromPointer(ptr).TimerEventDefault(NewQTimerEventFromPointer(event))
	}
}

func (ptr *QVariantAnimation) ConnectTimerEvent(f func(event *QTimerEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::timerEvent", f)
	}
}

func (ptr *QVariantAnimation) DisconnectTimerEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::timerEvent")
	}
}

func (ptr *QVariantAnimation) TimerEvent(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_TimerEvent(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

func (ptr *QVariantAnimation) TimerEventDefault(event QTimerEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_TimerEventDefault(ptr.Pointer(), PointerFromQTimerEvent(event))
	}
}

//export callbackQVariantAnimation_ChildEvent
func callbackQVariantAnimation_ChildEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::childEvent"); signal != nil {
		signal.(func(*QChildEvent))(NewQChildEventFromPointer(event))
	} else {
		NewQVariantAnimationFromPointer(ptr).ChildEventDefault(NewQChildEventFromPointer(event))
	}
}

func (ptr *QVariantAnimation) ConnectChildEvent(f func(event *QChildEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::childEvent", f)
	}
}

func (ptr *QVariantAnimation) DisconnectChildEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::childEvent")
	}
}

func (ptr *QVariantAnimation) ChildEvent(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_ChildEvent(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

func (ptr *QVariantAnimation) ChildEventDefault(event QChildEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_ChildEventDefault(ptr.Pointer(), PointerFromQChildEvent(event))
	}
}

//export callbackQVariantAnimation_ConnectNotify
func callbackQVariantAnimation_ConnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::connectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQVariantAnimationFromPointer(ptr).ConnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVariantAnimation) ConnectConnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::connectNotify", f)
	}
}

func (ptr *QVariantAnimation) DisconnectConnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::connectNotify")
	}
}

func (ptr *QVariantAnimation) ConnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_ConnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVariantAnimation) ConnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_ConnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQVariantAnimation_CustomEvent
func callbackQVariantAnimation_CustomEvent(ptr unsafe.Pointer, event unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::customEvent"); signal != nil {
		signal.(func(*QEvent))(NewQEventFromPointer(event))
	} else {
		NewQVariantAnimationFromPointer(ptr).CustomEventDefault(NewQEventFromPointer(event))
	}
}

func (ptr *QVariantAnimation) ConnectCustomEvent(f func(event *QEvent)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::customEvent", f)
	}
}

func (ptr *QVariantAnimation) DisconnectCustomEvent() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::customEvent")
	}
}

func (ptr *QVariantAnimation) CustomEvent(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_CustomEvent(ptr.Pointer(), PointerFromQEvent(event))
	}
}

func (ptr *QVariantAnimation) CustomEventDefault(event QEvent_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_CustomEventDefault(ptr.Pointer(), PointerFromQEvent(event))
	}
}

//export callbackQVariantAnimation_DeleteLater
func callbackQVariantAnimation_DeleteLater(ptr unsafe.Pointer) {
	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::deleteLater"); signal != nil {
		signal.(func())()
	} else {
		NewQVariantAnimationFromPointer(ptr).DeleteLaterDefault()
	}
}

func (ptr *QVariantAnimation) ConnectDeleteLater(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::deleteLater", f)
	}
}

func (ptr *QVariantAnimation) DisconnectDeleteLater() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::deleteLater")
	}
}

func (ptr *QVariantAnimation) DeleteLater() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_DeleteLater(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QVariantAnimation) DeleteLaterDefault() {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_DeleteLaterDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

//export callbackQVariantAnimation_DisconnectNotify
func callbackQVariantAnimation_DisconnectNotify(ptr unsafe.Pointer, sign unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::disconnectNotify"); signal != nil {
		signal.(func(*QMetaMethod))(NewQMetaMethodFromPointer(sign))
	} else {
		NewQVariantAnimationFromPointer(ptr).DisconnectNotifyDefault(NewQMetaMethodFromPointer(sign))
	}
}

func (ptr *QVariantAnimation) ConnectDisconnectNotify(f func(sign *QMetaMethod)) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::disconnectNotify", f)
	}
}

func (ptr *QVariantAnimation) DisconnectDisconnectNotify() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::disconnectNotify")
	}
}

func (ptr *QVariantAnimation) DisconnectNotify(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_DisconnectNotify(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

func (ptr *QVariantAnimation) DisconnectNotifyDefault(sign QMetaMethod_ITF) {
	if ptr.Pointer() != nil {
		C.QVariantAnimation_DisconnectNotifyDefault(ptr.Pointer(), PointerFromQMetaMethod(sign))
	}
}

//export callbackQVariantAnimation_EventFilter
func callbackQVariantAnimation_EventFilter(ptr unsafe.Pointer, watched unsafe.Pointer, event unsafe.Pointer) C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::eventFilter"); signal != nil {
		return C.char(int8(qt.GoBoolToInt(signal.(func(*QObject, *QEvent) bool)(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
	}

	return C.char(int8(qt.GoBoolToInt(NewQVariantAnimationFromPointer(ptr).EventFilterDefault(NewQObjectFromPointer(watched), NewQEventFromPointer(event)))))
}

func (ptr *QVariantAnimation) ConnectEventFilter(f func(watched *QObject, event *QEvent) bool) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::eventFilter", f)
	}
}

func (ptr *QVariantAnimation) DisconnectEventFilter() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::eventFilter")
	}
}

func (ptr *QVariantAnimation) EventFilter(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QVariantAnimation_EventFilter(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

func (ptr *QVariantAnimation) EventFilterDefault(watched QObject_ITF, event QEvent_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QVariantAnimation_EventFilterDefault(ptr.Pointer(), PointerFromQObject(watched), PointerFromQEvent(event)) != 0
	}
	return false
}

//export callbackQVariantAnimation_MetaObject
func callbackQVariantAnimation_MetaObject(ptr unsafe.Pointer) unsafe.Pointer {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QVariantAnimation::metaObject"); signal != nil {
		return PointerFromQMetaObject(signal.(func() *QMetaObject)())
	}

	return PointerFromQMetaObject(NewQVariantAnimationFromPointer(ptr).MetaObjectDefault())
}

func (ptr *QVariantAnimation) ConnectMetaObject(f func() *QMetaObject) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::metaObject", f)
	}
}

func (ptr *QVariantAnimation) DisconnectMetaObject() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QVariantAnimation::metaObject")
	}
}

func (ptr *QVariantAnimation) MetaObject() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QVariantAnimation_MetaObject(ptr.Pointer()))
	}
	return nil
}

func (ptr *QVariantAnimation) MetaObjectDefault() *QMetaObject {
	if ptr.Pointer() != nil {
		return NewQMetaObjectFromPointer(C.QVariantAnimation_MetaObjectDefault(ptr.Pointer()))
	}
	return nil
}

type QVector struct {
	ptr unsafe.Pointer
}

type QVector_ITF interface {
	QVector_PTR() *QVector
}

func (p *QVector) QVector_PTR() *QVector {
	return p
}

func (p *QVector) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVector) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVector(ptr QVector_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVector_PTR().Pointer()
	}
	return nil
}

func NewQVectorFromPointer(ptr unsafe.Pointer) *QVector {
	var n = new(QVector)
	n.SetPointer(ptr)
	return n
}

type QVectorIterator struct {
	ptr unsafe.Pointer
}

type QVectorIterator_ITF interface {
	QVectorIterator_PTR() *QVectorIterator
}

func (p *QVectorIterator) QVectorIterator_PTR() *QVectorIterator {
	return p
}

func (p *QVectorIterator) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVectorIterator) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVectorIterator(ptr QVectorIterator_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVectorIterator_PTR().Pointer()
	}
	return nil
}

func NewQVectorIteratorFromPointer(ptr unsafe.Pointer) *QVectorIterator {
	var n = new(QVectorIterator)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVectorIterator) DestroyQVectorIterator() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

type QVersionNumber struct {
	ptr unsafe.Pointer
}

type QVersionNumber_ITF interface {
	QVersionNumber_PTR() *QVersionNumber
}

func (p *QVersionNumber) QVersionNumber_PTR() *QVersionNumber {
	return p
}

func (p *QVersionNumber) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QVersionNumber) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQVersionNumber(ptr QVersionNumber_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QVersionNumber_PTR().Pointer()
	}
	return nil
}

func NewQVersionNumberFromPointer(ptr unsafe.Pointer) *QVersionNumber {
	var n = new(QVersionNumber)
	n.SetPointer(ptr)
	return n
}

func (ptr *QVersionNumber) DestroyQVersionNumber() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func QVersionNumber_Compare(v1 QVersionNumber_ITF, v2 QVersionNumber_ITF) int {
	return int(int32(C.QVersionNumber_QVersionNumber_Compare(PointerFromQVersionNumber(v1), PointerFromQVersionNumber(v2))))
}

func (ptr *QVersionNumber) Compare(v1 QVersionNumber_ITF, v2 QVersionNumber_ITF) int {
	return int(int32(C.QVersionNumber_QVersionNumber_Compare(PointerFromQVersionNumber(v1), PointerFromQVersionNumber(v2))))
}

func QVersionNumber_FromString(stri string, suffixIndex int) *QVersionNumber {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_QVersionNumber_FromString(striC, C.int(int32(suffixIndex))))
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func (ptr *QVersionNumber) FromString(stri string, suffixIndex int) *QVersionNumber {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_QVersionNumber_FromString(striC, C.int(int32(suffixIndex))))
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func (ptr *QVersionNumber) IsPrefixOf(other QVersionNumber_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QVersionNumber_IsPrefixOf(ptr.Pointer(), PointerFromQVersionNumber(other)) != 0
	}
	return false
}

func (ptr *QVersionNumber) Normalized() *QVersionNumber {
	if ptr.Pointer() != nil {
		var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_Normalized(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
		return tmpValue
	}
	return nil
}

func (ptr *QVersionNumber) ToString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QVersionNumber_ToString(ptr.Pointer()))
	}
	return ""
}

func NewQVersionNumber() *QVersionNumber {
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_NewQVersionNumber())
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func NewQVersionNumber5(maj int) *QVersionNumber {
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_NewQVersionNumber5(C.int(int32(maj))))
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func NewQVersionNumber6(maj int, min int) *QVersionNumber {
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_NewQVersionNumber6(C.int(int32(maj)), C.int(int32(min))))
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func NewQVersionNumber7(maj int, min int, mic int) *QVersionNumber {
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_NewQVersionNumber7(C.int(int32(maj)), C.int(int32(min)), C.int(int32(mic))))
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func QVersionNumber_CommonPrefix(v1 QVersionNumber_ITF, v2 QVersionNumber_ITF) *QVersionNumber {
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_QVersionNumber_CommonPrefix(PointerFromQVersionNumber(v1), PointerFromQVersionNumber(v2)))
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func (ptr *QVersionNumber) CommonPrefix(v1 QVersionNumber_ITF, v2 QVersionNumber_ITF) *QVersionNumber {
	var tmpValue = NewQVersionNumberFromPointer(C.QVersionNumber_QVersionNumber_CommonPrefix(PointerFromQVersionNumber(v1), PointerFromQVersionNumber(v2)))
	runtime.SetFinalizer(tmpValue, (*QVersionNumber).DestroyQVersionNumber)
	return tmpValue
}

func (ptr *QVersionNumber) IsNormalized() bool {
	if ptr.Pointer() != nil {
		return C.QVersionNumber_IsNormalized(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVersionNumber) IsNull() bool {
	if ptr.Pointer() != nil {
		return C.QVersionNumber_IsNull(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QVersionNumber) MajorVersion() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVersionNumber_MajorVersion(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVersionNumber) MicroVersion() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVersionNumber_MicroVersion(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVersionNumber) MinorVersion() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVersionNumber_MinorVersion(ptr.Pointer())))
	}
	return 0
}

func (ptr *QVersionNumber) SegmentAt(index int) int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVersionNumber_SegmentAt(ptr.Pointer(), C.int(int32(index)))))
	}
	return 0
}

func (ptr *QVersionNumber) SegmentCount() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QVersionNumber_SegmentCount(ptr.Pointer())))
	}
	return 0
}

type QWaitCondition struct {
	ptr unsafe.Pointer
}

type QWaitCondition_ITF interface {
	QWaitCondition_PTR() *QWaitCondition
}

func (p *QWaitCondition) QWaitCondition_PTR() *QWaitCondition {
	return p
}

func (p *QWaitCondition) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QWaitCondition) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQWaitCondition(ptr QWaitCondition_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWaitCondition_PTR().Pointer()
	}
	return nil
}

func NewQWaitConditionFromPointer(ptr unsafe.Pointer) *QWaitCondition {
	var n = new(QWaitCondition)
	n.SetPointer(ptr)
	return n
}
func NewQWaitCondition() *QWaitCondition {
	var tmpValue = NewQWaitConditionFromPointer(C.QWaitCondition_NewQWaitCondition())
	runtime.SetFinalizer(tmpValue, (*QWaitCondition).DestroyQWaitCondition)
	return tmpValue
}

func (ptr *QWaitCondition) Wait(lockedMutex QMutex_ITF, time uint) bool {
	if ptr.Pointer() != nil {
		return C.QWaitCondition_Wait(ptr.Pointer(), PointerFromQMutex(lockedMutex), C.ulong(uint32(time))) != 0
	}
	return false
}

func (ptr *QWaitCondition) Wait2(lockedReadWriteLock QReadWriteLock_ITF, time uint) bool {
	if ptr.Pointer() != nil {
		return C.QWaitCondition_Wait2(ptr.Pointer(), PointerFromQReadWriteLock(lockedReadWriteLock), C.ulong(uint32(time))) != 0
	}
	return false
}

func (ptr *QWaitCondition) WakeAll() {
	if ptr.Pointer() != nil {
		C.QWaitCondition_WakeAll(ptr.Pointer())
	}
}

func (ptr *QWaitCondition) WakeOne() {
	if ptr.Pointer() != nil {
		C.QWaitCondition_WakeOne(ptr.Pointer())
	}
}

func (ptr *QWaitCondition) DestroyQWaitCondition() {
	if ptr.Pointer() != nil {
		C.QWaitCondition_DestroyQWaitCondition(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QWeakPointer struct {
	ptr unsafe.Pointer
}

type QWeakPointer_ITF interface {
	QWeakPointer_PTR() *QWeakPointer
}

func (p *QWeakPointer) QWeakPointer_PTR() *QWeakPointer {
	return p
}

func (p *QWeakPointer) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QWeakPointer) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQWeakPointer(ptr QWeakPointer_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWeakPointer_PTR().Pointer()
	}
	return nil
}

func NewQWeakPointerFromPointer(ptr unsafe.Pointer) *QWeakPointer {
	var n = new(QWeakPointer)
	n.SetPointer(ptr)
	return n
}

type QWinEventNotifier struct {
	QObject
}

type QWinEventNotifier_ITF interface {
	QObject_ITF
	QWinEventNotifier_PTR() *QWinEventNotifier
}

func (p *QWinEventNotifier) QWinEventNotifier_PTR() *QWinEventNotifier {
	return p
}

func (p *QWinEventNotifier) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QObject_PTR().Pointer()
	}
	return nil
}

func (p *QWinEventNotifier) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QObject_PTR().SetPointer(ptr)
	}
}

func PointerFromQWinEventNotifier(ptr QWinEventNotifier_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWinEventNotifier_PTR().Pointer()
	}
	return nil
}

func NewQWinEventNotifierFromPointer(ptr unsafe.Pointer) *QWinEventNotifier {
	var n = new(QWinEventNotifier)
	n.SetPointer(ptr)
	return n
}

type QWriteLocker struct {
	ptr unsafe.Pointer
}

type QWriteLocker_ITF interface {
	QWriteLocker_PTR() *QWriteLocker
}

func (p *QWriteLocker) QWriteLocker_PTR() *QWriteLocker {
	return p
}

func (p *QWriteLocker) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QWriteLocker) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQWriteLocker(ptr QWriteLocker_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QWriteLocker_PTR().Pointer()
	}
	return nil
}

func NewQWriteLockerFromPointer(ptr unsafe.Pointer) *QWriteLocker {
	var n = new(QWriteLocker)
	n.SetPointer(ptr)
	return n
}
func NewQWriteLocker(lock QReadWriteLock_ITF) *QWriteLocker {
	var tmpValue = NewQWriteLockerFromPointer(C.QWriteLocker_NewQWriteLocker(PointerFromQReadWriteLock(lock)))
	runtime.SetFinalizer(tmpValue, (*QWriteLocker).DestroyQWriteLocker)
	return tmpValue
}

func (ptr *QWriteLocker) ReadWriteLock() *QReadWriteLock {
	if ptr.Pointer() != nil {
		return NewQReadWriteLockFromPointer(C.QWriteLocker_ReadWriteLock(ptr.Pointer()))
	}
	return nil
}

func (ptr *QWriteLocker) Relock() {
	if ptr.Pointer() != nil {
		C.QWriteLocker_Relock(ptr.Pointer())
	}
}

func (ptr *QWriteLocker) Unlock() {
	if ptr.Pointer() != nil {
		C.QWriteLocker_Unlock(ptr.Pointer())
	}
}

func (ptr *QWriteLocker) DestroyQWriteLocker() {
	if ptr.Pointer() != nil {
		C.QWriteLocker_DestroyQWriteLocker(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QXmlStreamAttribute struct {
	ptr unsafe.Pointer
}

type QXmlStreamAttribute_ITF interface {
	QXmlStreamAttribute_PTR() *QXmlStreamAttribute
}

func (p *QXmlStreamAttribute) QXmlStreamAttribute_PTR() *QXmlStreamAttribute {
	return p
}

func (p *QXmlStreamAttribute) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QXmlStreamAttribute) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQXmlStreamAttribute(ptr QXmlStreamAttribute_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamAttribute_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamAttributeFromPointer(ptr unsafe.Pointer) *QXmlStreamAttribute {
	var n = new(QXmlStreamAttribute)
	n.SetPointer(ptr)
	return n
}
func NewQXmlStreamAttribute() *QXmlStreamAttribute {
	var tmpValue = NewQXmlStreamAttributeFromPointer(C.QXmlStreamAttribute_NewQXmlStreamAttribute())
	runtime.SetFinalizer(tmpValue, (*QXmlStreamAttribute).DestroyQXmlStreamAttribute)
	return tmpValue
}

func NewQXmlStreamAttribute5(other QXmlStreamAttribute_ITF) *QXmlStreamAttribute {
	var tmpValue = NewQXmlStreamAttributeFromPointer(C.QXmlStreamAttribute_NewQXmlStreamAttribute5(PointerFromQXmlStreamAttribute(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamAttribute).DestroyQXmlStreamAttribute)
	return tmpValue
}

func NewQXmlStreamAttribute3(namespaceUri string, name string, value string) *QXmlStreamAttribute {
	var namespaceUriC = C.CString(namespaceUri)
	defer C.free(unsafe.Pointer(namespaceUriC))
	var nameC = C.CString(name)
	defer C.free(unsafe.Pointer(nameC))
	var valueC = C.CString(value)
	defer C.free(unsafe.Pointer(valueC))
	var tmpValue = NewQXmlStreamAttributeFromPointer(C.QXmlStreamAttribute_NewQXmlStreamAttribute3(namespaceUriC, nameC, valueC))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamAttribute).DestroyQXmlStreamAttribute)
	return tmpValue
}

func NewQXmlStreamAttribute2(qualifiedName string, value string) *QXmlStreamAttribute {
	var qualifiedNameC = C.CString(qualifiedName)
	defer C.free(unsafe.Pointer(qualifiedNameC))
	var valueC = C.CString(value)
	defer C.free(unsafe.Pointer(valueC))
	var tmpValue = NewQXmlStreamAttributeFromPointer(C.QXmlStreamAttribute_NewQXmlStreamAttribute2(qualifiedNameC, valueC))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamAttribute).DestroyQXmlStreamAttribute)
	return tmpValue
}

func NewQXmlStreamAttribute4(other QXmlStreamAttribute_ITF) *QXmlStreamAttribute {
	var tmpValue = NewQXmlStreamAttributeFromPointer(C.QXmlStreamAttribute_NewQXmlStreamAttribute4(PointerFromQXmlStreamAttribute(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamAttribute).DestroyQXmlStreamAttribute)
	return tmpValue
}

func (ptr *QXmlStreamAttribute) IsDefault() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamAttribute_IsDefault(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamAttribute) Name() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttribute_Name(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttribute) NamespaceUri() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttribute_NamespaceUri(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttribute) Prefix() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttribute_Prefix(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttribute) QualifiedName() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttribute_QualifiedName(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttribute) Value() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttribute_Value(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttribute) DestroyQXmlStreamAttribute() {
	if ptr.Pointer() != nil {
		C.QXmlStreamAttribute_DestroyQXmlStreamAttribute(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QXmlStreamAttributes struct {
	QVector
}

type QXmlStreamAttributes_ITF interface {
	QVector_ITF
	QXmlStreamAttributes_PTR() *QXmlStreamAttributes
}

func (p *QXmlStreamAttributes) QXmlStreamAttributes_PTR() *QXmlStreamAttributes {
	return p
}

func (p *QXmlStreamAttributes) Pointer() unsafe.Pointer {
	if p != nil {
		return p.QVector_PTR().Pointer()
	}
	return nil
}

func (p *QXmlStreamAttributes) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.QVector_PTR().SetPointer(ptr)
	}
}

func PointerFromQXmlStreamAttributes(ptr QXmlStreamAttributes_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamAttributes_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamAttributesFromPointer(ptr unsafe.Pointer) *QXmlStreamAttributes {
	var n = new(QXmlStreamAttributes)
	n.SetPointer(ptr)
	return n
}

func (ptr *QXmlStreamAttributes) DestroyQXmlStreamAttributes() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

func NewQXmlStreamAttributes() *QXmlStreamAttributes {
	var tmpValue = NewQXmlStreamAttributesFromPointer(C.QXmlStreamAttributes_NewQXmlStreamAttributes())
	runtime.SetFinalizer(tmpValue, (*QXmlStreamAttributes).DestroyQXmlStreamAttributes)
	return tmpValue
}

func (ptr *QXmlStreamAttributes) Append(namespaceUri string, name string, value string) {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var valueC = C.CString(value)
		defer C.free(unsafe.Pointer(valueC))
		C.QXmlStreamAttributes_Append(ptr.Pointer(), namespaceUriC, nameC, valueC)
	}
}

func (ptr *QXmlStreamAttributes) Append2(qualifiedName string, value string) {
	if ptr.Pointer() != nil {
		var qualifiedNameC = C.CString(qualifiedName)
		defer C.free(unsafe.Pointer(qualifiedNameC))
		var valueC = C.CString(value)
		defer C.free(unsafe.Pointer(valueC))
		C.QXmlStreamAttributes_Append2(ptr.Pointer(), qualifiedNameC, valueC)
	}
}

func (ptr *QXmlStreamAttributes) HasAttribute2(qualifiedName QLatin1String_ITF) bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamAttributes_HasAttribute2(ptr.Pointer(), PointerFromQLatin1String(qualifiedName)) != 0
	}
	return false
}

func (ptr *QXmlStreamAttributes) HasAttribute3(namespaceUri string, name string) bool {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return C.QXmlStreamAttributes_HasAttribute3(ptr.Pointer(), namespaceUriC, nameC) != 0
	}
	return false
}

func (ptr *QXmlStreamAttributes) HasAttribute(qualifiedName string) bool {
	if ptr.Pointer() != nil {
		var qualifiedNameC = C.CString(qualifiedName)
		defer C.free(unsafe.Pointer(qualifiedNameC))
		return C.QXmlStreamAttributes_HasAttribute(ptr.Pointer(), qualifiedNameC) != 0
	}
	return false
}

func (ptr *QXmlStreamAttributes) Value3(namespaceUri QLatin1String_ITF, name QLatin1String_ITF) *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttributes_Value3(ptr.Pointer(), PointerFromQLatin1String(namespaceUri), PointerFromQLatin1String(name)))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttributes) Value5(qualifiedName QLatin1String_ITF) *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttributes_Value5(ptr.Pointer(), PointerFromQLatin1String(qualifiedName)))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttributes) Value2(namespaceUri string, name QLatin1String_ITF) *QStringRef {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttributes_Value2(ptr.Pointer(), namespaceUriC, PointerFromQLatin1String(name)))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttributes) Value(namespaceUri string, name string) *QStringRef {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttributes_Value(ptr.Pointer(), namespaceUriC, nameC))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamAttributes) Value4(qualifiedName string) *QStringRef {
	if ptr.Pointer() != nil {
		var qualifiedNameC = C.CString(qualifiedName)
		defer C.free(unsafe.Pointer(qualifiedNameC))
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamAttributes_Value4(ptr.Pointer(), qualifiedNameC))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

type QXmlStreamEntityDeclaration struct {
	ptr unsafe.Pointer
}

type QXmlStreamEntityDeclaration_ITF interface {
	QXmlStreamEntityDeclaration_PTR() *QXmlStreamEntityDeclaration
}

func (p *QXmlStreamEntityDeclaration) QXmlStreamEntityDeclaration_PTR() *QXmlStreamEntityDeclaration {
	return p
}

func (p *QXmlStreamEntityDeclaration) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QXmlStreamEntityDeclaration) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQXmlStreamEntityDeclaration(ptr QXmlStreamEntityDeclaration_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamEntityDeclaration_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamEntityDeclarationFromPointer(ptr unsafe.Pointer) *QXmlStreamEntityDeclaration {
	var n = new(QXmlStreamEntityDeclaration)
	n.SetPointer(ptr)
	return n
}
func NewQXmlStreamEntityDeclaration() *QXmlStreamEntityDeclaration {
	var tmpValue = NewQXmlStreamEntityDeclarationFromPointer(C.QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration())
	runtime.SetFinalizer(tmpValue, (*QXmlStreamEntityDeclaration).DestroyQXmlStreamEntityDeclaration)
	return tmpValue
}

func NewQXmlStreamEntityDeclaration3(other QXmlStreamEntityDeclaration_ITF) *QXmlStreamEntityDeclaration {
	var tmpValue = NewQXmlStreamEntityDeclarationFromPointer(C.QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration3(PointerFromQXmlStreamEntityDeclaration(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamEntityDeclaration).DestroyQXmlStreamEntityDeclaration)
	return tmpValue
}

func NewQXmlStreamEntityDeclaration2(other QXmlStreamEntityDeclaration_ITF) *QXmlStreamEntityDeclaration {
	var tmpValue = NewQXmlStreamEntityDeclarationFromPointer(C.QXmlStreamEntityDeclaration_NewQXmlStreamEntityDeclaration2(PointerFromQXmlStreamEntityDeclaration(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamEntityDeclaration).DestroyQXmlStreamEntityDeclaration)
	return tmpValue
}

func (ptr *QXmlStreamEntityDeclaration) Name() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamEntityDeclaration_Name(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamEntityDeclaration) NotationName() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamEntityDeclaration_NotationName(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamEntityDeclaration) PublicId() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamEntityDeclaration_PublicId(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamEntityDeclaration) SystemId() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamEntityDeclaration_SystemId(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamEntityDeclaration) Value() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamEntityDeclaration_Value(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamEntityDeclaration) DestroyQXmlStreamEntityDeclaration() {
	if ptr.Pointer() != nil {
		C.QXmlStreamEntityDeclaration_DestroyQXmlStreamEntityDeclaration(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QXmlStreamEntityResolver struct {
	ptr unsafe.Pointer
}

type QXmlStreamEntityResolver_ITF interface {
	QXmlStreamEntityResolver_PTR() *QXmlStreamEntityResolver
}

func (p *QXmlStreamEntityResolver) QXmlStreamEntityResolver_PTR() *QXmlStreamEntityResolver {
	return p
}

func (p *QXmlStreamEntityResolver) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QXmlStreamEntityResolver) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQXmlStreamEntityResolver(ptr QXmlStreamEntityResolver_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamEntityResolver_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamEntityResolverFromPointer(ptr unsafe.Pointer) *QXmlStreamEntityResolver {
	var n = new(QXmlStreamEntityResolver)
	n.SetPointer(ptr)
	return n
}

//export callbackQXmlStreamEntityResolver_ResolveUndeclaredEntity
func callbackQXmlStreamEntityResolver_ResolveUndeclaredEntity(ptr unsafe.Pointer, name C.struct_QtCore_PackedString) *C.char {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QXmlStreamEntityResolver::resolveUndeclaredEntity"); signal != nil {
		return C.CString(signal.(func(string) string)(cGoUnpackString(name)))
	}

	return C.CString(NewQXmlStreamEntityResolverFromPointer(ptr).ResolveUndeclaredEntityDefault(cGoUnpackString(name)))
}

func (ptr *QXmlStreamEntityResolver) ConnectResolveUndeclaredEntity(f func(name string) string) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QXmlStreamEntityResolver::resolveUndeclaredEntity", f)
	}
}

func (ptr *QXmlStreamEntityResolver) DisconnectResolveUndeclaredEntity() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QXmlStreamEntityResolver::resolveUndeclaredEntity")
	}
}

func (ptr *QXmlStreamEntityResolver) ResolveUndeclaredEntity(name string) string {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return cGoUnpackString(C.QXmlStreamEntityResolver_ResolveUndeclaredEntity(ptr.Pointer(), nameC))
	}
	return ""
}

func (ptr *QXmlStreamEntityResolver) ResolveUndeclaredEntityDefault(name string) string {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		return cGoUnpackString(C.QXmlStreamEntityResolver_ResolveUndeclaredEntityDefault(ptr.Pointer(), nameC))
	}
	return ""
}

//export callbackQXmlStreamEntityResolver_DestroyQXmlStreamEntityResolver
func callbackQXmlStreamEntityResolver_DestroyQXmlStreamEntityResolver(ptr unsafe.Pointer) {

	if signal := qt.GetSignal(fmt.Sprint(ptr), "QXmlStreamEntityResolver::~QXmlStreamEntityResolver"); signal != nil {
		signal.(func())()
	} else {
		NewQXmlStreamEntityResolverFromPointer(ptr).DestroyQXmlStreamEntityResolverDefault()
	}
}

func (ptr *QXmlStreamEntityResolver) ConnectDestroyQXmlStreamEntityResolver(f func()) {
	if ptr.Pointer() != nil {

		qt.ConnectSignal(fmt.Sprint(ptr.Pointer()), "QXmlStreamEntityResolver::~QXmlStreamEntityResolver", f)
	}
}

func (ptr *QXmlStreamEntityResolver) DisconnectDestroyQXmlStreamEntityResolver() {
	if ptr.Pointer() != nil {

		qt.DisconnectSignal(fmt.Sprint(ptr.Pointer()), "QXmlStreamEntityResolver::~QXmlStreamEntityResolver")
	}
}

func (ptr *QXmlStreamEntityResolver) DestroyQXmlStreamEntityResolver() {
	if ptr.Pointer() != nil {
		C.QXmlStreamEntityResolver_DestroyQXmlStreamEntityResolver(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

func (ptr *QXmlStreamEntityResolver) DestroyQXmlStreamEntityResolverDefault() {
	if ptr.Pointer() != nil {
		C.QXmlStreamEntityResolver_DestroyQXmlStreamEntityResolverDefault(ptr.Pointer())
		qt.DisconnectAllSignals(fmt.Sprint(ptr.Pointer()))
		ptr.SetPointer(nil)
	}
}

type QXmlStreamNamespaceDeclaration struct {
	ptr unsafe.Pointer
}

type QXmlStreamNamespaceDeclaration_ITF interface {
	QXmlStreamNamespaceDeclaration_PTR() *QXmlStreamNamespaceDeclaration
}

func (p *QXmlStreamNamespaceDeclaration) QXmlStreamNamespaceDeclaration_PTR() *QXmlStreamNamespaceDeclaration {
	return p
}

func (p *QXmlStreamNamespaceDeclaration) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QXmlStreamNamespaceDeclaration) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQXmlStreamNamespaceDeclaration(ptr QXmlStreamNamespaceDeclaration_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamNamespaceDeclaration_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamNamespaceDeclarationFromPointer(ptr unsafe.Pointer) *QXmlStreamNamespaceDeclaration {
	var n = new(QXmlStreamNamespaceDeclaration)
	n.SetPointer(ptr)
	return n
}
func NewQXmlStreamNamespaceDeclaration() *QXmlStreamNamespaceDeclaration {
	var tmpValue = NewQXmlStreamNamespaceDeclarationFromPointer(C.QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration())
	runtime.SetFinalizer(tmpValue, (*QXmlStreamNamespaceDeclaration).DestroyQXmlStreamNamespaceDeclaration)
	return tmpValue
}

func NewQXmlStreamNamespaceDeclaration3(other QXmlStreamNamespaceDeclaration_ITF) *QXmlStreamNamespaceDeclaration {
	var tmpValue = NewQXmlStreamNamespaceDeclarationFromPointer(C.QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration3(PointerFromQXmlStreamNamespaceDeclaration(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamNamespaceDeclaration).DestroyQXmlStreamNamespaceDeclaration)
	return tmpValue
}

func NewQXmlStreamNamespaceDeclaration4(prefix string, namespaceUri string) *QXmlStreamNamespaceDeclaration {
	var prefixC = C.CString(prefix)
	defer C.free(unsafe.Pointer(prefixC))
	var namespaceUriC = C.CString(namespaceUri)
	defer C.free(unsafe.Pointer(namespaceUriC))
	var tmpValue = NewQXmlStreamNamespaceDeclarationFromPointer(C.QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration4(prefixC, namespaceUriC))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamNamespaceDeclaration).DestroyQXmlStreamNamespaceDeclaration)
	return tmpValue
}

func NewQXmlStreamNamespaceDeclaration2(other QXmlStreamNamespaceDeclaration_ITF) *QXmlStreamNamespaceDeclaration {
	var tmpValue = NewQXmlStreamNamespaceDeclarationFromPointer(C.QXmlStreamNamespaceDeclaration_NewQXmlStreamNamespaceDeclaration2(PointerFromQXmlStreamNamespaceDeclaration(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamNamespaceDeclaration).DestroyQXmlStreamNamespaceDeclaration)
	return tmpValue
}

func (ptr *QXmlStreamNamespaceDeclaration) NamespaceUri() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamNamespaceDeclaration_NamespaceUri(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamNamespaceDeclaration) Prefix() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamNamespaceDeclaration_Prefix(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamNamespaceDeclaration) DestroyQXmlStreamNamespaceDeclaration() {
	if ptr.Pointer() != nil {
		C.QXmlStreamNamespaceDeclaration_DestroyQXmlStreamNamespaceDeclaration(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QXmlStreamNotationDeclaration struct {
	ptr unsafe.Pointer
}

type QXmlStreamNotationDeclaration_ITF interface {
	QXmlStreamNotationDeclaration_PTR() *QXmlStreamNotationDeclaration
}

func (p *QXmlStreamNotationDeclaration) QXmlStreamNotationDeclaration_PTR() *QXmlStreamNotationDeclaration {
	return p
}

func (p *QXmlStreamNotationDeclaration) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QXmlStreamNotationDeclaration) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQXmlStreamNotationDeclaration(ptr QXmlStreamNotationDeclaration_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamNotationDeclaration_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamNotationDeclarationFromPointer(ptr unsafe.Pointer) *QXmlStreamNotationDeclaration {
	var n = new(QXmlStreamNotationDeclaration)
	n.SetPointer(ptr)
	return n
}
func NewQXmlStreamNotationDeclaration() *QXmlStreamNotationDeclaration {
	var tmpValue = NewQXmlStreamNotationDeclarationFromPointer(C.QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration())
	runtime.SetFinalizer(tmpValue, (*QXmlStreamNotationDeclaration).DestroyQXmlStreamNotationDeclaration)
	return tmpValue
}

func NewQXmlStreamNotationDeclaration3(other QXmlStreamNotationDeclaration_ITF) *QXmlStreamNotationDeclaration {
	var tmpValue = NewQXmlStreamNotationDeclarationFromPointer(C.QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration3(PointerFromQXmlStreamNotationDeclaration(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamNotationDeclaration).DestroyQXmlStreamNotationDeclaration)
	return tmpValue
}

func NewQXmlStreamNotationDeclaration2(other QXmlStreamNotationDeclaration_ITF) *QXmlStreamNotationDeclaration {
	var tmpValue = NewQXmlStreamNotationDeclarationFromPointer(C.QXmlStreamNotationDeclaration_NewQXmlStreamNotationDeclaration2(PointerFromQXmlStreamNotationDeclaration(other)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamNotationDeclaration).DestroyQXmlStreamNotationDeclaration)
	return tmpValue
}

func (ptr *QXmlStreamNotationDeclaration) Name() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamNotationDeclaration_Name(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamNotationDeclaration) PublicId() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamNotationDeclaration_PublicId(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamNotationDeclaration) SystemId() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamNotationDeclaration_SystemId(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamNotationDeclaration) DestroyQXmlStreamNotationDeclaration() {
	if ptr.Pointer() != nil {
		C.QXmlStreamNotationDeclaration_DestroyQXmlStreamNotationDeclaration(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//QXmlStreamReader::Error
type QXmlStreamReader__Error int64

const (
	QXmlStreamReader__NoError                     = QXmlStreamReader__Error(0)
	QXmlStreamReader__UnexpectedElementError      = QXmlStreamReader__Error(1)
	QXmlStreamReader__CustomError                 = QXmlStreamReader__Error(2)
	QXmlStreamReader__NotWellFormedError          = QXmlStreamReader__Error(3)
	QXmlStreamReader__PrematureEndOfDocumentError = QXmlStreamReader__Error(4)
)

//QXmlStreamReader::ReadElementTextBehaviour
type QXmlStreamReader__ReadElementTextBehaviour int64

const (
	QXmlStreamReader__ErrorOnUnexpectedElement = QXmlStreamReader__ReadElementTextBehaviour(0)
	QXmlStreamReader__IncludeChildElements     = QXmlStreamReader__ReadElementTextBehaviour(1)
	QXmlStreamReader__SkipChildElements        = QXmlStreamReader__ReadElementTextBehaviour(2)
)

//QXmlStreamReader::TokenType
type QXmlStreamReader__TokenType int64

const (
	QXmlStreamReader__NoToken               = QXmlStreamReader__TokenType(0)
	QXmlStreamReader__Invalid               = QXmlStreamReader__TokenType(1)
	QXmlStreamReader__StartDocument         = QXmlStreamReader__TokenType(2)
	QXmlStreamReader__EndDocument           = QXmlStreamReader__TokenType(3)
	QXmlStreamReader__StartElement          = QXmlStreamReader__TokenType(4)
	QXmlStreamReader__EndElement            = QXmlStreamReader__TokenType(5)
	QXmlStreamReader__Characters            = QXmlStreamReader__TokenType(6)
	QXmlStreamReader__Comment               = QXmlStreamReader__TokenType(7)
	QXmlStreamReader__DTD                   = QXmlStreamReader__TokenType(8)
	QXmlStreamReader__EntityReference       = QXmlStreamReader__TokenType(9)
	QXmlStreamReader__ProcessingInstruction = QXmlStreamReader__TokenType(10)
)

type QXmlStreamReader struct {
	ptr unsafe.Pointer
}

type QXmlStreamReader_ITF interface {
	QXmlStreamReader_PTR() *QXmlStreamReader
}

func (p *QXmlStreamReader) QXmlStreamReader_PTR() *QXmlStreamReader {
	return p
}

func (p *QXmlStreamReader) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QXmlStreamReader) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQXmlStreamReader(ptr QXmlStreamReader_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamReader_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamReaderFromPointer(ptr unsafe.Pointer) *QXmlStreamReader {
	var n = new(QXmlStreamReader)
	n.SetPointer(ptr)
	return n
}
func (ptr *QXmlStreamReader) NamespaceProcessing() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_NamespaceProcessing(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) SetNamespaceProcessing(vbo bool) {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_SetNamespaceProcessing(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(vbo))))
	}
}

func NewQXmlStreamReader() *QXmlStreamReader {
	var tmpValue = NewQXmlStreamReaderFromPointer(C.QXmlStreamReader_NewQXmlStreamReader())
	runtime.SetFinalizer(tmpValue, (*QXmlStreamReader).DestroyQXmlStreamReader)
	return tmpValue
}

func NewQXmlStreamReader2(device QIODevice_ITF) *QXmlStreamReader {
	var tmpValue = NewQXmlStreamReaderFromPointer(C.QXmlStreamReader_NewQXmlStreamReader2(PointerFromQIODevice(device)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamReader).DestroyQXmlStreamReader)
	return tmpValue
}

func NewQXmlStreamReader3(data QByteArray_ITF) *QXmlStreamReader {
	var tmpValue = NewQXmlStreamReaderFromPointer(C.QXmlStreamReader_NewQXmlStreamReader3(PointerFromQByteArray(data)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamReader).DestroyQXmlStreamReader)
	return tmpValue
}

func NewQXmlStreamReader4(data string) *QXmlStreamReader {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQXmlStreamReaderFromPointer(C.QXmlStreamReader_NewQXmlStreamReader4(dataC))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamReader).DestroyQXmlStreamReader)
	return tmpValue
}

func NewQXmlStreamReader5(data string) *QXmlStreamReader {
	var dataC = C.CString(data)
	defer C.free(unsafe.Pointer(dataC))
	var tmpValue = NewQXmlStreamReaderFromPointer(C.QXmlStreamReader_NewQXmlStreamReader5(dataC))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamReader).DestroyQXmlStreamReader)
	return tmpValue
}

func (ptr *QXmlStreamReader) AddData(data QByteArray_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_AddData(ptr.Pointer(), PointerFromQByteArray(data))
	}
}

func (ptr *QXmlStreamReader) AddData2(data string) {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QXmlStreamReader_AddData2(ptr.Pointer(), dataC)
	}
}

func (ptr *QXmlStreamReader) AddData3(data string) {
	if ptr.Pointer() != nil {
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QXmlStreamReader_AddData3(ptr.Pointer(), dataC)
	}
}

func (ptr *QXmlStreamReader) AddExtraNamespaceDeclaration(extraNamespaceDeclaration QXmlStreamNamespaceDeclaration_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_AddExtraNamespaceDeclaration(ptr.Pointer(), PointerFromQXmlStreamNamespaceDeclaration(extraNamespaceDeclaration))
	}
}

func (ptr *QXmlStreamReader) AtEnd() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_AtEnd(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) Attributes() *QXmlStreamAttributes {
	if ptr.Pointer() != nil {
		var tmpValue = NewQXmlStreamAttributesFromPointer(C.QXmlStreamReader_Attributes(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QXmlStreamAttributes).DestroyQXmlStreamAttributes)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) CharacterOffset() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QXmlStreamReader_CharacterOffset(ptr.Pointer()))
	}
	return 0
}

func (ptr *QXmlStreamReader) Clear() {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_Clear(ptr.Pointer())
	}
}

func (ptr *QXmlStreamReader) ColumnNumber() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QXmlStreamReader_ColumnNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QXmlStreamReader) Device() *QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIODeviceFromPointer(C.QXmlStreamReader_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) DocumentEncoding() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_DocumentEncoding(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) DocumentVersion() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_DocumentVersion(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) DtdName() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_DtdName(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) DtdPublicId() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_DtdPublicId(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) DtdSystemId() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_DtdSystemId(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) EntityResolver() *QXmlStreamEntityResolver {
	if ptr.Pointer() != nil {
		return NewQXmlStreamEntityResolverFromPointer(C.QXmlStreamReader_EntityResolver(ptr.Pointer()))
	}
	return nil
}

func (ptr *QXmlStreamReader) Error() QXmlStreamReader__Error {
	if ptr.Pointer() != nil {
		return QXmlStreamReader__Error(C.QXmlStreamReader_Error(ptr.Pointer()))
	}
	return 0
}

func (ptr *QXmlStreamReader) ErrorString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QXmlStreamReader_ErrorString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QXmlStreamReader) HasError() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_HasError(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsCDATA() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsCDATA(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsCharacters() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsCharacters(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsComment() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsComment(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsDTD() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsDTD(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsEndDocument() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsEndDocument(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsEndElement() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsEndElement(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsEntityReference() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsEntityReference(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsProcessingInstruction() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsProcessingInstruction(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsStandaloneDocument() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsStandaloneDocument(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsStartDocument() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsStartDocument(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsStartElement() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsStartElement(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) IsWhitespace() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_IsWhitespace(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) LineNumber() int64 {
	if ptr.Pointer() != nil {
		return int64(C.QXmlStreamReader_LineNumber(ptr.Pointer()))
	}
	return 0
}

func (ptr *QXmlStreamReader) Name() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_Name(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) NamespaceUri() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_NamespaceUri(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) Prefix() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_Prefix(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) ProcessingInstructionData() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_ProcessingInstructionData(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) ProcessingInstructionTarget() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_ProcessingInstructionTarget(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) QualifiedName() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_QualifiedName(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) RaiseError(message string) {
	if ptr.Pointer() != nil {
		var messageC = C.CString(message)
		defer C.free(unsafe.Pointer(messageC))
		C.QXmlStreamReader_RaiseError(ptr.Pointer(), messageC)
	}
}

func (ptr *QXmlStreamReader) ReadElementText(behaviour QXmlStreamReader__ReadElementTextBehaviour) string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QXmlStreamReader_ReadElementText(ptr.Pointer(), C.longlong(behaviour)))
	}
	return ""
}

func (ptr *QXmlStreamReader) ReadNext() QXmlStreamReader__TokenType {
	if ptr.Pointer() != nil {
		return QXmlStreamReader__TokenType(C.QXmlStreamReader_ReadNext(ptr.Pointer()))
	}
	return 0
}

func (ptr *QXmlStreamReader) ReadNextStartElement() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamReader_ReadNextStartElement(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamReader) SetDevice(device QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_SetDevice(ptr.Pointer(), PointerFromQIODevice(device))
	}
}

func (ptr *QXmlStreamReader) SetEntityResolver(resolver QXmlStreamEntityResolver_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_SetEntityResolver(ptr.Pointer(), PointerFromQXmlStreamEntityResolver(resolver))
	}
}

func (ptr *QXmlStreamReader) SkipCurrentElement() {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_SkipCurrentElement(ptr.Pointer())
	}
}

func (ptr *QXmlStreamReader) Text() *QStringRef {
	if ptr.Pointer() != nil {
		var tmpValue = NewQStringRefFromPointer(C.QXmlStreamReader_Text(ptr.Pointer()))
		runtime.SetFinalizer(tmpValue, (*QStringRef).DestroyQStringRef)
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamReader) TokenString() string {
	if ptr.Pointer() != nil {
		return cGoUnpackString(C.QXmlStreamReader_TokenString(ptr.Pointer()))
	}
	return ""
}

func (ptr *QXmlStreamReader) TokenType() QXmlStreamReader__TokenType {
	if ptr.Pointer() != nil {
		return QXmlStreamReader__TokenType(C.QXmlStreamReader_TokenType(ptr.Pointer()))
	}
	return 0
}

func (ptr *QXmlStreamReader) DestroyQXmlStreamReader() {
	if ptr.Pointer() != nil {
		C.QXmlStreamReader_DestroyQXmlStreamReader(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

type QXmlStreamWriter struct {
	ptr unsafe.Pointer
}

type QXmlStreamWriter_ITF interface {
	QXmlStreamWriter_PTR() *QXmlStreamWriter
}

func (p *QXmlStreamWriter) QXmlStreamWriter_PTR() *QXmlStreamWriter {
	return p
}

func (p *QXmlStreamWriter) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QXmlStreamWriter) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQXmlStreamWriter(ptr QXmlStreamWriter_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QXmlStreamWriter_PTR().Pointer()
	}
	return nil
}

func NewQXmlStreamWriterFromPointer(ptr unsafe.Pointer) *QXmlStreamWriter {
	var n = new(QXmlStreamWriter)
	n.SetPointer(ptr)
	return n
}
func (ptr *QXmlStreamWriter) AutoFormattingIndent() int {
	if ptr.Pointer() != nil {
		return int(int32(C.QXmlStreamWriter_AutoFormattingIndent(ptr.Pointer())))
	}
	return 0
}

func (ptr *QXmlStreamWriter) SetAutoFormattingIndent(spacesOrTabs int) {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_SetAutoFormattingIndent(ptr.Pointer(), C.int(int32(spacesOrTabs)))
	}
}

func NewQXmlStreamWriter() *QXmlStreamWriter {
	var tmpValue = NewQXmlStreamWriterFromPointer(C.QXmlStreamWriter_NewQXmlStreamWriter())
	runtime.SetFinalizer(tmpValue, (*QXmlStreamWriter).DestroyQXmlStreamWriter)
	return tmpValue
}

func NewQXmlStreamWriter3(array QByteArray_ITF) *QXmlStreamWriter {
	var tmpValue = NewQXmlStreamWriterFromPointer(C.QXmlStreamWriter_NewQXmlStreamWriter3(PointerFromQByteArray(array)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamWriter).DestroyQXmlStreamWriter)
	return tmpValue
}

func NewQXmlStreamWriter2(device QIODevice_ITF) *QXmlStreamWriter {
	var tmpValue = NewQXmlStreamWriterFromPointer(C.QXmlStreamWriter_NewQXmlStreamWriter2(PointerFromQIODevice(device)))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamWriter).DestroyQXmlStreamWriter)
	return tmpValue
}

func NewQXmlStreamWriter4(stri string) *QXmlStreamWriter {
	var striC = C.CString(stri)
	defer C.free(unsafe.Pointer(striC))
	var tmpValue = NewQXmlStreamWriterFromPointer(C.QXmlStreamWriter_NewQXmlStreamWriter4(striC))
	runtime.SetFinalizer(tmpValue, (*QXmlStreamWriter).DestroyQXmlStreamWriter)
	return tmpValue
}

func (ptr *QXmlStreamWriter) AutoFormatting() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamWriter_AutoFormatting(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamWriter) Codec() *QTextCodec {
	if ptr.Pointer() != nil {
		return NewQTextCodecFromPointer(C.QXmlStreamWriter_Codec(ptr.Pointer()))
	}
	return nil
}

func (ptr *QXmlStreamWriter) Device() *QIODevice {
	if ptr.Pointer() != nil {
		var tmpValue = NewQIODeviceFromPointer(C.QXmlStreamWriter_Device(ptr.Pointer()))
		if !qt.ExistsSignal(fmt.Sprint(tmpValue.Pointer()), "QObject::destroyed") {
			tmpValue.ConnectDestroyed(func(*QObject) { tmpValue.SetPointer(nil) })
		}
		return tmpValue
	}
	return nil
}

func (ptr *QXmlStreamWriter) HasError() bool {
	if ptr.Pointer() != nil {
		return C.QXmlStreamWriter_HasError(ptr.Pointer()) != 0
	}
	return false
}

func (ptr *QXmlStreamWriter) SetAutoFormatting(enable bool) {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_SetAutoFormatting(ptr.Pointer(), C.char(int8(qt.GoBoolToInt(enable))))
	}
}

func (ptr *QXmlStreamWriter) SetCodec(codec QTextCodec_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_SetCodec(ptr.Pointer(), PointerFromQTextCodec(codec))
	}
}

func (ptr *QXmlStreamWriter) SetCodec2(codecName string) {
	if ptr.Pointer() != nil {
		var codecNameC = C.CString(codecName)
		defer C.free(unsafe.Pointer(codecNameC))
		C.QXmlStreamWriter_SetCodec2(ptr.Pointer(), codecNameC)
	}
}

func (ptr *QXmlStreamWriter) SetDevice(device QIODevice_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_SetDevice(ptr.Pointer(), PointerFromQIODevice(device))
	}
}

func (ptr *QXmlStreamWriter) WriteAttribute(namespaceUri string, name string, value string) {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var valueC = C.CString(value)
		defer C.free(unsafe.Pointer(valueC))
		C.QXmlStreamWriter_WriteAttribute(ptr.Pointer(), namespaceUriC, nameC, valueC)
	}
}

func (ptr *QXmlStreamWriter) WriteAttribute2(qualifiedName string, value string) {
	if ptr.Pointer() != nil {
		var qualifiedNameC = C.CString(qualifiedName)
		defer C.free(unsafe.Pointer(qualifiedNameC))
		var valueC = C.CString(value)
		defer C.free(unsafe.Pointer(valueC))
		C.QXmlStreamWriter_WriteAttribute2(ptr.Pointer(), qualifiedNameC, valueC)
	}
}

func (ptr *QXmlStreamWriter) WriteAttribute3(attribute QXmlStreamAttribute_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_WriteAttribute3(ptr.Pointer(), PointerFromQXmlStreamAttribute(attribute))
	}
}

func (ptr *QXmlStreamWriter) WriteAttributes(attributes QXmlStreamAttributes_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_WriteAttributes(ptr.Pointer(), PointerFromQXmlStreamAttributes(attributes))
	}
}

func (ptr *QXmlStreamWriter) WriteCDATA(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QXmlStreamWriter_WriteCDATA(ptr.Pointer(), textC)
	}
}

func (ptr *QXmlStreamWriter) WriteCharacters(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QXmlStreamWriter_WriteCharacters(ptr.Pointer(), textC)
	}
}

func (ptr *QXmlStreamWriter) WriteComment(text string) {
	if ptr.Pointer() != nil {
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QXmlStreamWriter_WriteComment(ptr.Pointer(), textC)
	}
}

func (ptr *QXmlStreamWriter) WriteCurrentToken(reader QXmlStreamReader_ITF) {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_WriteCurrentToken(ptr.Pointer(), PointerFromQXmlStreamReader(reader))
	}
}

func (ptr *QXmlStreamWriter) WriteDTD(dtd string) {
	if ptr.Pointer() != nil {
		var dtdC = C.CString(dtd)
		defer C.free(unsafe.Pointer(dtdC))
		C.QXmlStreamWriter_WriteDTD(ptr.Pointer(), dtdC)
	}
}

func (ptr *QXmlStreamWriter) WriteDefaultNamespace(namespaceUri string) {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		C.QXmlStreamWriter_WriteDefaultNamespace(ptr.Pointer(), namespaceUriC)
	}
}

func (ptr *QXmlStreamWriter) WriteEmptyElement(namespaceUri string, name string) {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QXmlStreamWriter_WriteEmptyElement(ptr.Pointer(), namespaceUriC, nameC)
	}
}

func (ptr *QXmlStreamWriter) WriteEmptyElement2(qualifiedName string) {
	if ptr.Pointer() != nil {
		var qualifiedNameC = C.CString(qualifiedName)
		defer C.free(unsafe.Pointer(qualifiedNameC))
		C.QXmlStreamWriter_WriteEmptyElement2(ptr.Pointer(), qualifiedNameC)
	}
}

func (ptr *QXmlStreamWriter) WriteEndDocument() {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_WriteEndDocument(ptr.Pointer())
	}
}

func (ptr *QXmlStreamWriter) WriteEndElement() {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_WriteEndElement(ptr.Pointer())
	}
}

func (ptr *QXmlStreamWriter) WriteEntityReference(name string) {
	if ptr.Pointer() != nil {
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QXmlStreamWriter_WriteEntityReference(ptr.Pointer(), nameC)
	}
}

func (ptr *QXmlStreamWriter) WriteNamespace(namespaceUri string, prefix string) {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var prefixC = C.CString(prefix)
		defer C.free(unsafe.Pointer(prefixC))
		C.QXmlStreamWriter_WriteNamespace(ptr.Pointer(), namespaceUriC, prefixC)
	}
}

func (ptr *QXmlStreamWriter) WriteProcessingInstruction(target string, data string) {
	if ptr.Pointer() != nil {
		var targetC = C.CString(target)
		defer C.free(unsafe.Pointer(targetC))
		var dataC = C.CString(data)
		defer C.free(unsafe.Pointer(dataC))
		C.QXmlStreamWriter_WriteProcessingInstruction(ptr.Pointer(), targetC, dataC)
	}
}

func (ptr *QXmlStreamWriter) WriteStartDocument2() {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_WriteStartDocument2(ptr.Pointer())
	}
}

func (ptr *QXmlStreamWriter) WriteStartDocument(version string) {
	if ptr.Pointer() != nil {
		var versionC = C.CString(version)
		defer C.free(unsafe.Pointer(versionC))
		C.QXmlStreamWriter_WriteStartDocument(ptr.Pointer(), versionC)
	}
}

func (ptr *QXmlStreamWriter) WriteStartDocument3(version string, standalone bool) {
	if ptr.Pointer() != nil {
		var versionC = C.CString(version)
		defer C.free(unsafe.Pointer(versionC))
		C.QXmlStreamWriter_WriteStartDocument3(ptr.Pointer(), versionC, C.char(int8(qt.GoBoolToInt(standalone))))
	}
}

func (ptr *QXmlStreamWriter) WriteStartElement(namespaceUri string, name string) {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		C.QXmlStreamWriter_WriteStartElement(ptr.Pointer(), namespaceUriC, nameC)
	}
}

func (ptr *QXmlStreamWriter) WriteStartElement2(qualifiedName string) {
	if ptr.Pointer() != nil {
		var qualifiedNameC = C.CString(qualifiedName)
		defer C.free(unsafe.Pointer(qualifiedNameC))
		C.QXmlStreamWriter_WriteStartElement2(ptr.Pointer(), qualifiedNameC)
	}
}

func (ptr *QXmlStreamWriter) WriteTextElement(namespaceUri string, name string, text string) {
	if ptr.Pointer() != nil {
		var namespaceUriC = C.CString(namespaceUri)
		defer C.free(unsafe.Pointer(namespaceUriC))
		var nameC = C.CString(name)
		defer C.free(unsafe.Pointer(nameC))
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QXmlStreamWriter_WriteTextElement(ptr.Pointer(), namespaceUriC, nameC, textC)
	}
}

func (ptr *QXmlStreamWriter) WriteTextElement2(qualifiedName string, text string) {
	if ptr.Pointer() != nil {
		var qualifiedNameC = C.CString(qualifiedName)
		defer C.free(unsafe.Pointer(qualifiedNameC))
		var textC = C.CString(text)
		defer C.free(unsafe.Pointer(textC))
		C.QXmlStreamWriter_WriteTextElement2(ptr.Pointer(), qualifiedNameC, textC)
	}
}

func (ptr *QXmlStreamWriter) DestroyQXmlStreamWriter() {
	if ptr.Pointer() != nil {
		C.QXmlStreamWriter_DestroyQXmlStreamWriter(ptr.Pointer())
		ptr.SetPointer(nil)
	}
}

//Qt::AlignmentFlag
type Qt__AlignmentFlag int64

const (
	Qt__AlignLeft            = Qt__AlignmentFlag(0x0001)
	Qt__AlignLeading         = Qt__AlignmentFlag(Qt__AlignLeft)
	Qt__AlignRight           = Qt__AlignmentFlag(0x0002)
	Qt__AlignTrailing        = Qt__AlignmentFlag(Qt__AlignRight)
	Qt__AlignHCenter         = Qt__AlignmentFlag(0x0004)
	Qt__AlignJustify         = Qt__AlignmentFlag(0x0008)
	Qt__AlignAbsolute        = Qt__AlignmentFlag(0x0010)
	Qt__AlignHorizontal_Mask = Qt__AlignmentFlag(Qt__AlignLeft | Qt__AlignRight | Qt__AlignHCenter | Qt__AlignJustify | Qt__AlignAbsolute)
	Qt__AlignTop             = Qt__AlignmentFlag(0x0020)
	Qt__AlignBottom          = Qt__AlignmentFlag(0x0040)
	Qt__AlignVCenter         = Qt__AlignmentFlag(0x0080)
	Qt__AlignBaseline        = Qt__AlignmentFlag(0x0100)
	Qt__AlignVertical_Mask   = Qt__AlignmentFlag(Qt__AlignTop | Qt__AlignBottom | Qt__AlignVCenter | Qt__AlignBaseline)
	Qt__AlignCenter          = Qt__AlignmentFlag(Qt__AlignVCenter | Qt__AlignHCenter)
)

//Qt::AnchorPoint
type Qt__AnchorPoint int64

const (
	Qt__AnchorLeft             = Qt__AnchorPoint(0)
	Qt__AnchorHorizontalCenter = Qt__AnchorPoint(1)
	Qt__AnchorRight            = Qt__AnchorPoint(2)
	Qt__AnchorTop              = Qt__AnchorPoint(3)
	Qt__AnchorVerticalCenter   = Qt__AnchorPoint(4)
	Qt__AnchorBottom           = Qt__AnchorPoint(5)
)

//Qt::ApplicationAttribute
type Qt__ApplicationAttribute int64

const (
	Qt__AA_ImmediateWidgetCreation                 = Qt__ApplicationAttribute(0)
	Qt__AA_MSWindowsUseDirect3DByDefault           = Qt__ApplicationAttribute(1)
	Qt__AA_DontShowIconsInMenus                    = Qt__ApplicationAttribute(2)
	Qt__AA_NativeWindows                           = Qt__ApplicationAttribute(3)
	Qt__AA_DontCreateNativeWidgetSiblings          = Qt__ApplicationAttribute(4)
	Qt__AA_PluginApplication                       = Qt__ApplicationAttribute(5)
	Qt__AA_MacPluginApplication                    = Qt__ApplicationAttribute(Qt__AA_PluginApplication)
	Qt__AA_DontUseNativeMenuBar                    = Qt__ApplicationAttribute(6)
	Qt__AA_MacDontSwapCtrlAndMeta                  = Qt__ApplicationAttribute(7)
	Qt__AA_Use96Dpi                                = Qt__ApplicationAttribute(8)
	Qt__AA_X11InitThreads                          = Qt__ApplicationAttribute(10)
	Qt__AA_SynthesizeTouchForUnhandledMouseEvents  = Qt__ApplicationAttribute(11)
	Qt__AA_SynthesizeMouseForUnhandledTouchEvents  = Qt__ApplicationAttribute(12)
	Qt__AA_UseHighDpiPixmaps                       = Qt__ApplicationAttribute(13)
	Qt__AA_ForceRasterWidgets                      = Qt__ApplicationAttribute(14)
	Qt__AA_UseDesktopOpenGL                        = Qt__ApplicationAttribute(15)
	Qt__AA_UseOpenGLES                             = Qt__ApplicationAttribute(16)
	Qt__AA_UseSoftwareOpenGL                       = Qt__ApplicationAttribute(17)
	Qt__AA_ShareOpenGLContexts                     = Qt__ApplicationAttribute(18)
	Qt__AA_SetPalette                              = Qt__ApplicationAttribute(19)
	Qt__AA_EnableHighDpiScaling                    = Qt__ApplicationAttribute(20)
	Qt__AA_DisableHighDpiScaling                   = Qt__ApplicationAttribute(21)
	Qt__AA_UseStyleSheetPropagationInWidgetStyles  = Qt__ApplicationAttribute(22)
	Qt__AA_DontUseNativeDialogs                    = Qt__ApplicationAttribute(23)
	Qt__AA_SynthesizeMouseForUnhandledTabletEvents = Qt__ApplicationAttribute(24)
	Qt__AA_CompressHighFrequencyEvents             = Qt__ApplicationAttribute(25)
	Qt__AA_AttributeCount                          = Qt__ApplicationAttribute(26)
)

//Qt::ApplicationState
type Qt__ApplicationState int64

const (
	Qt__ApplicationSuspended = Qt__ApplicationState(0x00000000)
	Qt__ApplicationHidden    = Qt__ApplicationState(0x00000001)
	Qt__ApplicationInactive  = Qt__ApplicationState(0x00000002)
	Qt__ApplicationActive    = Qt__ApplicationState(0x00000004)
)

//Qt::ArrowType
type Qt__ArrowType int64

const (
	Qt__NoArrow    = Qt__ArrowType(0)
	Qt__UpArrow    = Qt__ArrowType(1)
	Qt__DownArrow  = Qt__ArrowType(2)
	Qt__LeftArrow  = Qt__ArrowType(3)
	Qt__RightArrow = Qt__ArrowType(4)
)

//Qt::AspectRatioMode
type Qt__AspectRatioMode int64

const (
	Qt__IgnoreAspectRatio          = Qt__AspectRatioMode(0)
	Qt__KeepAspectRatio            = Qt__AspectRatioMode(1)
	Qt__KeepAspectRatioByExpanding = Qt__AspectRatioMode(2)
)

//Qt::Axis
type Qt__Axis int64

const (
	Qt__XAxis = Qt__Axis(0)
	Qt__YAxis = Qt__Axis(1)
	Qt__ZAxis = Qt__Axis(2)
)

//Qt::BGMode
type Qt__BGMode int64

const (
	Qt__TransparentMode = Qt__BGMode(0)
	Qt__OpaqueMode      = Qt__BGMode(1)
)

//Qt::BrushStyle
type Qt__BrushStyle int64

var (
	Qt__NoBrush                = Qt__BrushStyle(0)
	Qt__SolidPattern           = Qt__BrushStyle(1)
	Qt__Dense1Pattern          = Qt__BrushStyle(2)
	Qt__Dense2Pattern          = Qt__BrushStyle(3)
	Qt__Dense3Pattern          = Qt__BrushStyle(4)
	Qt__Dense4Pattern          = Qt__BrushStyle(5)
	Qt__Dense5Pattern          = Qt__BrushStyle(6)
	Qt__Dense6Pattern          = Qt__BrushStyle(7)
	Qt__Dense7Pattern          = Qt__BrushStyle(8)
	Qt__HorPattern             = Qt__BrushStyle(9)
	Qt__VerPattern             = Qt__BrushStyle(10)
	Qt__CrossPattern           = Qt__BrushStyle(11)
	Qt__BDiagPattern           = Qt__BrushStyle(12)
	Qt__FDiagPattern           = Qt__BrushStyle(13)
	Qt__DiagCrossPattern       = Qt__BrushStyle(14)
	Qt__LinearGradientPattern  = Qt__BrushStyle(15)
	Qt__RadialGradientPattern  = Qt__BrushStyle(16)
	Qt__ConicalGradientPattern = Qt__BrushStyle(17)
	Qt__TexturePattern         = Qt__BrushStyle(24)
)

//Qt::CaseSensitivity
type Qt__CaseSensitivity int64

const (
	Qt__CaseInsensitive = Qt__CaseSensitivity(0)
	Qt__CaseSensitive   = Qt__CaseSensitivity(1)
)

//Qt::CheckState
type Qt__CheckState int64

const (
	Qt__Unchecked        = Qt__CheckState(0)
	Qt__PartiallyChecked = Qt__CheckState(1)
	Qt__Checked          = Qt__CheckState(2)
)

//Qt::ClipOperation
type Qt__ClipOperation int64

const (
	Qt__NoClip        = Qt__ClipOperation(0)
	Qt__ReplaceClip   = Qt__ClipOperation(1)
	Qt__IntersectClip = Qt__ClipOperation(2)
)

//Qt::ConnectionType
type Qt__ConnectionType int64

const (
	Qt__AutoConnection           = Qt__ConnectionType(0)
	Qt__DirectConnection         = Qt__ConnectionType(1)
	Qt__QueuedConnection         = Qt__ConnectionType(2)
	Qt__BlockingQueuedConnection = Qt__ConnectionType(3)
	Qt__UniqueConnection         = Qt__ConnectionType(0x80)
)

//Qt::ContextMenuPolicy
type Qt__ContextMenuPolicy int64

const (
	Qt__NoContextMenu      = Qt__ContextMenuPolicy(0)
	Qt__DefaultContextMenu = Qt__ContextMenuPolicy(1)
	Qt__ActionsContextMenu = Qt__ContextMenuPolicy(2)
	Qt__CustomContextMenu  = Qt__ContextMenuPolicy(3)
	Qt__PreventContextMenu = Qt__ContextMenuPolicy(4)
)

//Qt::CoordinateSystem
type Qt__CoordinateSystem int64

const (
	Qt__DeviceCoordinates  = Qt__CoordinateSystem(0)
	Qt__LogicalCoordinates = Qt__CoordinateSystem(1)
)

//Qt::Corner
type Qt__Corner int64

const (
	Qt__TopLeftCorner     = Qt__Corner(0x00000)
	Qt__TopRightCorner    = Qt__Corner(0x00001)
	Qt__BottomLeftCorner  = Qt__Corner(0x00002)
	Qt__BottomRightCorner = Qt__Corner(0x00003)
)

//Qt::CursorMoveStyle
type Qt__CursorMoveStyle int64

var (
	Qt__LogicalMoveStyle = Qt__CursorMoveStyle(0)
	Qt__VisualMoveStyle  = Qt__CursorMoveStyle(1)
)

//Qt::CursorShape
type Qt__CursorShape int64

const (
	Qt__ArrowCursor        = Qt__CursorShape(0)
	Qt__UpArrowCursor      = Qt__CursorShape(1)
	Qt__CrossCursor        = Qt__CursorShape(2)
	Qt__WaitCursor         = Qt__CursorShape(3)
	Qt__IBeamCursor        = Qt__CursorShape(4)
	Qt__SizeVerCursor      = Qt__CursorShape(5)
	Qt__SizeHorCursor      = Qt__CursorShape(6)
	Qt__SizeBDiagCursor    = Qt__CursorShape(7)
	Qt__SizeFDiagCursor    = Qt__CursorShape(8)
	Qt__SizeAllCursor      = Qt__CursorShape(9)
	Qt__BlankCursor        = Qt__CursorShape(10)
	Qt__SplitVCursor       = Qt__CursorShape(11)
	Qt__SplitHCursor       = Qt__CursorShape(12)
	Qt__PointingHandCursor = Qt__CursorShape(13)
	Qt__ForbiddenCursor    = Qt__CursorShape(14)
	Qt__WhatsThisCursor    = Qt__CursorShape(15)
	Qt__BusyCursor         = Qt__CursorShape(16)
	Qt__OpenHandCursor     = Qt__CursorShape(17)
	Qt__ClosedHandCursor   = Qt__CursorShape(18)
	Qt__DragCopyCursor     = Qt__CursorShape(19)
	Qt__DragMoveCursor     = Qt__CursorShape(20)
	Qt__DragLinkCursor     = Qt__CursorShape(21)
	Qt__LastCursor         = Qt__CursorShape(Qt__DragLinkCursor)
	Qt__BitmapCursor       = Qt__CursorShape(24)
	Qt__CustomCursor       = Qt__CursorShape(25)
)

//Qt::DateFormat
type Qt__DateFormat int64

var (
	Qt__TextDate               = Qt__DateFormat(0)
	Qt__ISODate                = Qt__DateFormat(1)
	Qt__SystemLocaleDate       = Qt__DateFormat(2)
	Qt__LocalDate              = Qt__DateFormat(Qt__SystemLocaleDate)
	Qt__LocaleDate             = Qt__DateFormat(C.Qt_LocaleDate_Type())
	Qt__SystemLocaleShortDate  = Qt__DateFormat(C.Qt_SystemLocaleShortDate_Type())
	Qt__SystemLocaleLongDate   = Qt__DateFormat(C.Qt_SystemLocaleLongDate_Type())
	Qt__DefaultLocaleShortDate = Qt__DateFormat(C.Qt_DefaultLocaleShortDate_Type())
	Qt__DefaultLocaleLongDate  = Qt__DateFormat(C.Qt_DefaultLocaleLongDate_Type())
	Qt__RFC2822Date            = Qt__DateFormat(C.Qt_RFC2822Date_Type())
)

//Qt::DayOfWeek
type Qt__DayOfWeek int64

const (
	Qt__Monday    = Qt__DayOfWeek(1)
	Qt__Tuesday   = Qt__DayOfWeek(2)
	Qt__Wednesday = Qt__DayOfWeek(3)
	Qt__Thursday  = Qt__DayOfWeek(4)
	Qt__Friday    = Qt__DayOfWeek(5)
	Qt__Saturday  = Qt__DayOfWeek(6)
	Qt__Sunday    = Qt__DayOfWeek(7)
)

//Qt::DockWidgetArea
type Qt__DockWidgetArea int64

const (
	Qt__LeftDockWidgetArea   = Qt__DockWidgetArea(0x1)
	Qt__RightDockWidgetArea  = Qt__DockWidgetArea(0x2)
	Qt__TopDockWidgetArea    = Qt__DockWidgetArea(0x4)
	Qt__BottomDockWidgetArea = Qt__DockWidgetArea(0x8)
	Qt__DockWidgetArea_Mask  = Qt__DockWidgetArea(0xf)
	Qt__AllDockWidgetAreas   = Qt__DockWidgetArea(Qt__DockWidgetArea_Mask)
	Qt__NoDockWidgetArea     = Qt__DockWidgetArea(0)
)

//Qt::DropAction
type Qt__DropAction int64

const (
	Qt__CopyAction       = Qt__DropAction(0x1)
	Qt__MoveAction       = Qt__DropAction(0x2)
	Qt__LinkAction       = Qt__DropAction(0x4)
	Qt__ActionMask       = Qt__DropAction(0xff)
	Qt__TargetMoveAction = Qt__DropAction(0x8002)
	Qt__IgnoreAction     = Qt__DropAction(0x0)
)

//Qt::Edge
type Qt__Edge int64

const (
	Qt__TopEdge    = Qt__Edge(0x00001)
	Qt__LeftEdge   = Qt__Edge(0x00002)
	Qt__RightEdge  = Qt__Edge(0x00004)
	Qt__BottomEdge = Qt__Edge(0x00008)
)

//Qt::EnterKeyType
type Qt__EnterKeyType int64

const (
	Qt__EnterKeyDefault  = Qt__EnterKeyType(0)
	Qt__EnterKeyReturn   = Qt__EnterKeyType(1)
	Qt__EnterKeyDone     = Qt__EnterKeyType(2)
	Qt__EnterKeyGo       = Qt__EnterKeyType(3)
	Qt__EnterKeySend     = Qt__EnterKeyType(4)
	Qt__EnterKeySearch   = Qt__EnterKeyType(5)
	Qt__EnterKeyNext     = Qt__EnterKeyType(6)
	Qt__EnterKeyPrevious = Qt__EnterKeyType(7)
)

//Qt::EventPriority
type Qt__EventPriority int64

const (
	Qt__HighEventPriority   = Qt__EventPriority(1)
	Qt__NormalEventPriority = Qt__EventPriority(0)
	Qt__LowEventPriority    = Qt__EventPriority(-1)
)

//Qt::FillRule
type Qt__FillRule int64

const (
	Qt__OddEvenFill = Qt__FillRule(0)
	Qt__WindingFill = Qt__FillRule(1)
)

//Qt::FindChildOption
type Qt__FindChildOption int64

const (
	Qt__FindDirectChildrenOnly  = Qt__FindChildOption(0x0)
	Qt__FindChildrenRecursively = Qt__FindChildOption(0x1)
)

//Qt::FocusPolicy
type Qt__FocusPolicy int64

const (
	Qt__NoFocus     = Qt__FocusPolicy(0)
	Qt__TabFocus    = Qt__FocusPolicy(0x1)
	Qt__ClickFocus  = Qt__FocusPolicy(0x2)
	Qt__StrongFocus = Qt__FocusPolicy(Qt__TabFocus | Qt__ClickFocus | 0x8)
	Qt__WheelFocus  = Qt__FocusPolicy(Qt__StrongFocus | 0x4)
)

//Qt::FocusReason
type Qt__FocusReason int64

const (
	Qt__MouseFocusReason        = Qt__FocusReason(0)
	Qt__TabFocusReason          = Qt__FocusReason(1)
	Qt__BacktabFocusReason      = Qt__FocusReason(2)
	Qt__ActiveWindowFocusReason = Qt__FocusReason(3)
	Qt__PopupFocusReason        = Qt__FocusReason(4)
	Qt__ShortcutFocusReason     = Qt__FocusReason(5)
	Qt__MenuBarFocusReason      = Qt__FocusReason(6)
	Qt__OtherFocusReason        = Qt__FocusReason(7)
	Qt__NoFocusReason           = Qt__FocusReason(8)
)

//Qt::GestureFlag
type Qt__GestureFlag int64

const (
	Qt__DontStartGestureOnChildren       = Qt__GestureFlag(0x01)
	Qt__ReceivePartialGestures           = Qt__GestureFlag(0x02)
	Qt__IgnoredGesturesPropagateToParent = Qt__GestureFlag(0x04)
)

//Qt::GestureState
type Qt__GestureState int64

const (
	Qt__NoGesture       = Qt__GestureState(0)
	Qt__GestureStarted  = Qt__GestureState(1)
	Qt__GestureUpdated  = Qt__GestureState(2)
	Qt__GestureFinished = Qt__GestureState(3)
	Qt__GestureCanceled = Qt__GestureState(4)
)

//Qt::GestureType
type Qt__GestureType int64

var (
	Qt__TapGesture        = Qt__GestureType(1)
	Qt__TapAndHoldGesture = Qt__GestureType(2)
	Qt__PanGesture        = Qt__GestureType(3)
	Qt__PinchGesture      = Qt__GestureType(4)
	Qt__SwipeGesture      = Qt__GestureType(5)
	Qt__CustomGesture     = Qt__GestureType(0x0100)
	Qt__LastGestureType   = Qt__GestureType(C.Qt_LastGestureType_Type())
)

//Qt::GlobalColor
type Qt__GlobalColor int64

const (
	Qt__color0      = Qt__GlobalColor(0)
	Qt__color1      = Qt__GlobalColor(1)
	Qt__black       = Qt__GlobalColor(2)
	Qt__white       = Qt__GlobalColor(3)
	Qt__darkGray    = Qt__GlobalColor(4)
	Qt__gray        = Qt__GlobalColor(5)
	Qt__lightGray   = Qt__GlobalColor(6)
	Qt__red         = Qt__GlobalColor(7)
	Qt__green       = Qt__GlobalColor(8)
	Qt__blue        = Qt__GlobalColor(9)
	Qt__cyan        = Qt__GlobalColor(10)
	Qt__magenta     = Qt__GlobalColor(11)
	Qt__yellow      = Qt__GlobalColor(12)
	Qt__darkRed     = Qt__GlobalColor(13)
	Qt__darkGreen   = Qt__GlobalColor(14)
	Qt__darkBlue    = Qt__GlobalColor(15)
	Qt__darkCyan    = Qt__GlobalColor(16)
	Qt__darkMagenta = Qt__GlobalColor(17)
	Qt__darkYellow  = Qt__GlobalColor(18)
	Qt__transparent = Qt__GlobalColor(19)
)

//Qt::HitTestAccuracy
type Qt__HitTestAccuracy int64

const (
	Qt__ExactHit = Qt__HitTestAccuracy(0)
	Qt__FuzzyHit = Qt__HitTestAccuracy(1)
)

//Qt::ImageConversionFlag
type Qt__ImageConversionFlag int64

const (
	Qt__ColorMode_Mask       = Qt__ImageConversionFlag(0x00000003)
	Qt__AutoColor            = Qt__ImageConversionFlag(0x00000000)
	Qt__ColorOnly            = Qt__ImageConversionFlag(0x00000003)
	Qt__MonoOnly             = Qt__ImageConversionFlag(0x00000002)
	Qt__AlphaDither_Mask     = Qt__ImageConversionFlag(0x0000000c)
	Qt__ThresholdAlphaDither = Qt__ImageConversionFlag(0x00000000)
	Qt__OrderedAlphaDither   = Qt__ImageConversionFlag(0x00000004)
	Qt__DiffuseAlphaDither   = Qt__ImageConversionFlag(0x00000008)
	Qt__NoAlpha              = Qt__ImageConversionFlag(0x0000000c)
	Qt__Dither_Mask          = Qt__ImageConversionFlag(0x00000030)
	Qt__DiffuseDither        = Qt__ImageConversionFlag(0x00000000)
	Qt__OrderedDither        = Qt__ImageConversionFlag(0x00000010)
	Qt__ThresholdDither      = Qt__ImageConversionFlag(0x00000020)
	Qt__DitherMode_Mask      = Qt__ImageConversionFlag(0x000000c0)
	Qt__AutoDither           = Qt__ImageConversionFlag(0x00000000)
	Qt__PreferDither         = Qt__ImageConversionFlag(0x00000040)
	Qt__AvoidDither          = Qt__ImageConversionFlag(0x00000080)
	Qt__NoOpaqueDetection    = Qt__ImageConversionFlag(0x00000100)
	Qt__NoFormatConversion   = Qt__ImageConversionFlag(0x00000200)
)

//Qt::InputMethodHint
type Qt__InputMethodHint int64

const (
	Qt__ImhNone                   = Qt__InputMethodHint(0x0)
	Qt__ImhHiddenText             = Qt__InputMethodHint(0x1)
	Qt__ImhSensitiveData          = Qt__InputMethodHint(0x2)
	Qt__ImhNoAutoUppercase        = Qt__InputMethodHint(0x4)
	Qt__ImhPreferNumbers          = Qt__InputMethodHint(0x8)
	Qt__ImhPreferUppercase        = Qt__InputMethodHint(0x10)
	Qt__ImhPreferLowercase        = Qt__InputMethodHint(0x20)
	Qt__ImhNoPredictiveText       = Qt__InputMethodHint(0x40)
	Qt__ImhDate                   = Qt__InputMethodHint(0x80)
	Qt__ImhTime                   = Qt__InputMethodHint(0x100)
	Qt__ImhPreferLatin            = Qt__InputMethodHint(0x200)
	Qt__ImhMultiLine              = Qt__InputMethodHint(0x400)
	Qt__ImhDigitsOnly             = Qt__InputMethodHint(0x10000)
	Qt__ImhFormattedNumbersOnly   = Qt__InputMethodHint(0x20000)
	Qt__ImhUppercaseOnly          = Qt__InputMethodHint(0x40000)
	Qt__ImhLowercaseOnly          = Qt__InputMethodHint(0x80000)
	Qt__ImhDialableCharactersOnly = Qt__InputMethodHint(0x100000)
	Qt__ImhEmailCharactersOnly    = Qt__InputMethodHint(0x200000)
	Qt__ImhUrlCharactersOnly      = Qt__InputMethodHint(0x400000)
	Qt__ImhLatinOnly              = Qt__InputMethodHint(0x800000)
	Qt__ImhExclusiveInputMask     = Qt__InputMethodHint(0xffff0000)
)

//Qt::InputMethodQuery
type Qt__InputMethodQuery int64

const (
	Qt__ImEnabled                = Qt__InputMethodQuery(0x1)
	Qt__ImCursorRectangle        = Qt__InputMethodQuery(0x2)
	Qt__ImMicroFocus             = Qt__InputMethodQuery(0x2)
	Qt__ImFont                   = Qt__InputMethodQuery(0x4)
	Qt__ImCursorPosition         = Qt__InputMethodQuery(0x8)
	Qt__ImSurroundingText        = Qt__InputMethodQuery(0x10)
	Qt__ImCurrentSelection       = Qt__InputMethodQuery(0x20)
	Qt__ImMaximumTextLength      = Qt__InputMethodQuery(0x40)
	Qt__ImAnchorPosition         = Qt__InputMethodQuery(0x80)
	Qt__ImHints                  = Qt__InputMethodQuery(0x100)
	Qt__ImPreferredLanguage      = Qt__InputMethodQuery(0x200)
	Qt__ImAbsolutePosition       = Qt__InputMethodQuery(0x400)
	Qt__ImTextBeforeCursor       = Qt__InputMethodQuery(0x800)
	Qt__ImTextAfterCursor        = Qt__InputMethodQuery(0x1000)
	Qt__ImEnterKeyType           = Qt__InputMethodQuery(0x2000)
	Qt__ImAnchorRectangle        = Qt__InputMethodQuery(0x4000)
	Qt__ImInputItemClipRectangle = Qt__InputMethodQuery(0x8000)
	Qt__ImPlatformData           = Qt__InputMethodQuery(0x80000000)
	Qt__ImQueryInput             = Qt__InputMethodQuery(Qt__ImCursorRectangle | Qt__ImCursorPosition | Qt__ImSurroundingText | Qt__ImCurrentSelection | Qt__ImAnchorRectangle | Qt__ImAnchorPosition)
	Qt__ImQueryAll               = Qt__InputMethodQuery(0xffffffff)
)

//Qt::ItemDataRole
type Qt__ItemDataRole int64

const (
	Qt__DisplayRole               = Qt__ItemDataRole(0)
	Qt__DecorationRole            = Qt__ItemDataRole(1)
	Qt__EditRole                  = Qt__ItemDataRole(2)
	Qt__ToolTipRole               = Qt__ItemDataRole(3)
	Qt__StatusTipRole             = Qt__ItemDataRole(4)
	Qt__WhatsThisRole             = Qt__ItemDataRole(5)
	Qt__FontRole                  = Qt__ItemDataRole(6)
	Qt__TextAlignmentRole         = Qt__ItemDataRole(7)
	Qt__BackgroundColorRole       = Qt__ItemDataRole(8)
	Qt__BackgroundRole            = Qt__ItemDataRole(8)
	Qt__TextColorRole             = Qt__ItemDataRole(9)
	Qt__ForegroundRole            = Qt__ItemDataRole(9)
	Qt__CheckStateRole            = Qt__ItemDataRole(10)
	Qt__AccessibleTextRole        = Qt__ItemDataRole(11)
	Qt__AccessibleDescriptionRole = Qt__ItemDataRole(12)
	Qt__SizeHintRole              = Qt__ItemDataRole(13)
	Qt__InitialSortOrderRole      = Qt__ItemDataRole(14)
	Qt__DisplayPropertyRole       = Qt__ItemDataRole(27)
	Qt__DecorationPropertyRole    = Qt__ItemDataRole(28)
	Qt__ToolTipPropertyRole       = Qt__ItemDataRole(29)
	Qt__StatusTipPropertyRole     = Qt__ItemDataRole(30)
	Qt__WhatsThisPropertyRole     = Qt__ItemDataRole(31)
	Qt__UserRole                  = Qt__ItemDataRole(0x0100)
)

//Qt::ItemFlag
type Qt__ItemFlag int64

const (
	Qt__NoItemFlags          = Qt__ItemFlag(0)
	Qt__ItemIsSelectable     = Qt__ItemFlag(1)
	Qt__ItemIsEditable       = Qt__ItemFlag(2)
	Qt__ItemIsDragEnabled    = Qt__ItemFlag(4)
	Qt__ItemIsDropEnabled    = Qt__ItemFlag(8)
	Qt__ItemIsUserCheckable  = Qt__ItemFlag(16)
	Qt__ItemIsEnabled        = Qt__ItemFlag(32)
	Qt__ItemIsAutoTristate   = Qt__ItemFlag(64)
	Qt__ItemIsTristate       = Qt__ItemFlag(Qt__ItemIsAutoTristate)
	Qt__ItemNeverHasChildren = Qt__ItemFlag(128)
	Qt__ItemIsUserTristate   = Qt__ItemFlag(256)
)

//Qt::ItemSelectionMode
type Qt__ItemSelectionMode int64

const (
	Qt__ContainsItemShape          = Qt__ItemSelectionMode(0x0)
	Qt__IntersectsItemShape        = Qt__ItemSelectionMode(0x1)
	Qt__ContainsItemBoundingRect   = Qt__ItemSelectionMode(0x2)
	Qt__IntersectsItemBoundingRect = Qt__ItemSelectionMode(0x3)
)

//Qt::ItemSelectionOperation
type Qt__ItemSelectionOperation int64

const (
	Qt__ReplaceSelection = Qt__ItemSelectionOperation(0)
	Qt__AddToSelection   = Qt__ItemSelectionOperation(1)
)

//Qt::Key
type Qt__Key int64

const (
	Qt__Key_Escape                 = Qt__Key(0x01000000)
	Qt__Key_Tab                    = Qt__Key(0x01000001)
	Qt__Key_Backtab                = Qt__Key(0x01000002)
	Qt__Key_Backspace              = Qt__Key(0x01000003)
	Qt__Key_Return                 = Qt__Key(0x01000004)
	Qt__Key_Enter                  = Qt__Key(0x01000005)
	Qt__Key_Insert                 = Qt__Key(0x01000006)
	Qt__Key_Delete                 = Qt__Key(0x01000007)
	Qt__Key_Pause                  = Qt__Key(0x01000008)
	Qt__Key_Print                  = Qt__Key(0x01000009)
	Qt__Key_SysReq                 = Qt__Key(0x0100000a)
	Qt__Key_Clear                  = Qt__Key(0x0100000b)
	Qt__Key_Home                   = Qt__Key(0x01000010)
	Qt__Key_End                    = Qt__Key(0x01000011)
	Qt__Key_Left                   = Qt__Key(0x01000012)
	Qt__Key_Up                     = Qt__Key(0x01000013)
	Qt__Key_Right                  = Qt__Key(0x01000014)
	Qt__Key_Down                   = Qt__Key(0x01000015)
	Qt__Key_PageUp                 = Qt__Key(0x01000016)
	Qt__Key_PageDown               = Qt__Key(0x01000017)
	Qt__Key_Shift                  = Qt__Key(0x01000020)
	Qt__Key_Control                = Qt__Key(0x01000021)
	Qt__Key_Meta                   = Qt__Key(0x01000022)
	Qt__Key_Alt                    = Qt__Key(0x01000023)
	Qt__Key_CapsLock               = Qt__Key(0x01000024)
	Qt__Key_NumLock                = Qt__Key(0x01000025)
	Qt__Key_ScrollLock             = Qt__Key(0x01000026)
	Qt__Key_F1                     = Qt__Key(0x01000030)
	Qt__Key_F2                     = Qt__Key(0x01000031)
	Qt__Key_F3                     = Qt__Key(0x01000032)
	Qt__Key_F4                     = Qt__Key(0x01000033)
	Qt__Key_F5                     = Qt__Key(0x01000034)
	Qt__Key_F6                     = Qt__Key(0x01000035)
	Qt__Key_F7                     = Qt__Key(0x01000036)
	Qt__Key_F8                     = Qt__Key(0x01000037)
	Qt__Key_F9                     = Qt__Key(0x01000038)
	Qt__Key_F10                    = Qt__Key(0x01000039)
	Qt__Key_F11                    = Qt__Key(0x0100003a)
	Qt__Key_F12                    = Qt__Key(0x0100003b)
	Qt__Key_F13                    = Qt__Key(0x0100003c)
	Qt__Key_F14                    = Qt__Key(0x0100003d)
	Qt__Key_F15                    = Qt__Key(0x0100003e)
	Qt__Key_F16                    = Qt__Key(0x0100003f)
	Qt__Key_F17                    = Qt__Key(0x01000040)
	Qt__Key_F18                    = Qt__Key(0x01000041)
	Qt__Key_F19                    = Qt__Key(0x01000042)
	Qt__Key_F20                    = Qt__Key(0x01000043)
	Qt__Key_F21                    = Qt__Key(0x01000044)
	Qt__Key_F22                    = Qt__Key(0x01000045)
	Qt__Key_F23                    = Qt__Key(0x01000046)
	Qt__Key_F24                    = Qt__Key(0x01000047)
	Qt__Key_F25                    = Qt__Key(0x01000048)
	Qt__Key_F26                    = Qt__Key(0x01000049)
	Qt__Key_F27                    = Qt__Key(0x0100004a)
	Qt__Key_F28                    = Qt__Key(0x0100004b)
	Qt__Key_F29                    = Qt__Key(0x0100004c)
	Qt__Key_F30                    = Qt__Key(0x0100004d)
	Qt__Key_F31                    = Qt__Key(0x0100004e)
	Qt__Key_F32                    = Qt__Key(0x0100004f)
	Qt__Key_F33                    = Qt__Key(0x01000050)
	Qt__Key_F34                    = Qt__Key(0x01000051)
	Qt__Key_F35                    = Qt__Key(0x01000052)
	Qt__Key_Super_L                = Qt__Key(0x01000053)
	Qt__Key_Super_R                = Qt__Key(0x01000054)
	Qt__Key_Menu                   = Qt__Key(0x01000055)
	Qt__Key_Hyper_L                = Qt__Key(0x01000056)
	Qt__Key_Hyper_R                = Qt__Key(0x01000057)
	Qt__Key_Help                   = Qt__Key(0x01000058)
	Qt__Key_Direction_L            = Qt__Key(0x01000059)
	Qt__Key_Direction_R            = Qt__Key(0x01000060)
	Qt__Key_Space                  = Qt__Key(0x20)
	Qt__Key_Any                    = Qt__Key(Qt__Key_Space)
	Qt__Key_Exclam                 = Qt__Key(0x21)
	Qt__Key_QuoteDbl               = Qt__Key(0x22)
	Qt__Key_NumberSign             = Qt__Key(0x23)
	Qt__Key_Dollar                 = Qt__Key(0x24)
	Qt__Key_Percent                = Qt__Key(0x25)
	Qt__Key_Ampersand              = Qt__Key(0x26)
	Qt__Key_Apostrophe             = Qt__Key(0x27)
	Qt__Key_ParenLeft              = Qt__Key(0x28)
	Qt__Key_ParenRight             = Qt__Key(0x29)
	Qt__Key_Asterisk               = Qt__Key(0x2a)
	Qt__Key_Plus                   = Qt__Key(0x2b)
	Qt__Key_Comma                  = Qt__Key(0x2c)
	Qt__Key_Minus                  = Qt__Key(0x2d)
	Qt__Key_Period                 = Qt__Key(0x2e)
	Qt__Key_Slash                  = Qt__Key(0x2f)
	Qt__Key_0                      = Qt__Key(0x30)
	Qt__Key_1                      = Qt__Key(0x31)
	Qt__Key_2                      = Qt__Key(0x32)
	Qt__Key_3                      = Qt__Key(0x33)
	Qt__Key_4                      = Qt__Key(0x34)
	Qt__Key_5                      = Qt__Key(0x35)
	Qt__Key_6                      = Qt__Key(0x36)
	Qt__Key_7                      = Qt__Key(0x37)
	Qt__Key_8                      = Qt__Key(0x38)
	Qt__Key_9                      = Qt__Key(0x39)
	Qt__Key_Colon                  = Qt__Key(0x3a)
	Qt__Key_Semicolon              = Qt__Key(0x3b)
	Qt__Key_Less                   = Qt__Key(0x3c)
	Qt__Key_Equal                  = Qt__Key(0x3d)
	Qt__Key_Greater                = Qt__Key(0x3e)
	Qt__Key_Question               = Qt__Key(0x3f)
	Qt__Key_At                     = Qt__Key(0x40)
	Qt__Key_A                      = Qt__Key(0x41)
	Qt__Key_B                      = Qt__Key(0x42)
	Qt__Key_C                      = Qt__Key(0x43)
	Qt__Key_D                      = Qt__Key(0x44)
	Qt__Key_E                      = Qt__Key(0x45)
	Qt__Key_F                      = Qt__Key(0x46)
	Qt__Key_G                      = Qt__Key(0x47)
	Qt__Key_H                      = Qt__Key(0x48)
	Qt__Key_I                      = Qt__Key(0x49)
	Qt__Key_J                      = Qt__Key(0x4a)
	Qt__Key_K                      = Qt__Key(0x4b)
	Qt__Key_L                      = Qt__Key(0x4c)
	Qt__Key_M                      = Qt__Key(0x4d)
	Qt__Key_N                      = Qt__Key(0x4e)
	Qt__Key_O                      = Qt__Key(0x4f)
	Qt__Key_P                      = Qt__Key(0x50)
	Qt__Key_Q                      = Qt__Key(0x51)
	Qt__Key_R                      = Qt__Key(0x52)
	Qt__Key_S                      = Qt__Key(0x53)
	Qt__Key_T                      = Qt__Key(0x54)
	Qt__Key_U                      = Qt__Key(0x55)
	Qt__Key_V                      = Qt__Key(0x56)
	Qt__Key_W                      = Qt__Key(0x57)
	Qt__Key_X                      = Qt__Key(0x58)
	Qt__Key_Y                      = Qt__Key(0x59)
	Qt__Key_Z                      = Qt__Key(0x5a)
	Qt__Key_BracketLeft            = Qt__Key(0x5b)
	Qt__Key_Backslash              = Qt__Key(0x5c)
	Qt__Key_BracketRight           = Qt__Key(0x5d)
	Qt__Key_AsciiCircum            = Qt__Key(0x5e)
	Qt__Key_Underscore             = Qt__Key(0x5f)
	Qt__Key_QuoteLeft              = Qt__Key(0x60)
	Qt__Key_BraceLeft              = Qt__Key(0x7b)
	Qt__Key_Bar                    = Qt__Key(0x7c)
	Qt__Key_BraceRight             = Qt__Key(0x7d)
	Qt__Key_AsciiTilde             = Qt__Key(0x7e)
	Qt__Key_nobreakspace           = Qt__Key(0x0a0)
	Qt__Key_exclamdown             = Qt__Key(0x0a1)
	Qt__Key_cent                   = Qt__Key(0x0a2)
	Qt__Key_sterling               = Qt__Key(0x0a3)
	Qt__Key_currency               = Qt__Key(0x0a4)
	Qt__Key_yen                    = Qt__Key(0x0a5)
	Qt__Key_brokenbar              = Qt__Key(0x0a6)
	Qt__Key_section                = Qt__Key(0x0a7)
	Qt__Key_diaeresis              = Qt__Key(0x0a8)
	Qt__Key_copyright              = Qt__Key(0x0a9)
	Qt__Key_ordfeminine            = Qt__Key(0x0aa)
	Qt__Key_guillemotleft          = Qt__Key(0x0ab)
	Qt__Key_notsign                = Qt__Key(0x0ac)
	Qt__Key_hyphen                 = Qt__Key(0x0ad)
	Qt__Key_registered             = Qt__Key(0x0ae)
	Qt__Key_macron                 = Qt__Key(0x0af)
	Qt__Key_degree                 = Qt__Key(0x0b0)
	Qt__Key_plusminus              = Qt__Key(0x0b1)
	Qt__Key_twosuperior            = Qt__Key(0x0b2)
	Qt__Key_threesuperior          = Qt__Key(0x0b3)
	Qt__Key_acute                  = Qt__Key(0x0b4)
	Qt__Key_mu                     = Qt__Key(0x0b5)
	Qt__Key_paragraph              = Qt__Key(0x0b6)
	Qt__Key_periodcentered         = Qt__Key(0x0b7)
	Qt__Key_cedilla                = Qt__Key(0x0b8)
	Qt__Key_onesuperior            = Qt__Key(0x0b9)
	Qt__Key_masculine              = Qt__Key(0x0ba)
	Qt__Key_guillemotright         = Qt__Key(0x0bb)
	Qt__Key_onequarter             = Qt__Key(0x0bc)
	Qt__Key_onehalf                = Qt__Key(0x0bd)
	Qt__Key_threequarters          = Qt__Key(0x0be)
	Qt__Key_questiondown           = Qt__Key(0x0bf)
	Qt__Key_Agrave                 = Qt__Key(0x0c0)
	Qt__Key_Aacute                 = Qt__Key(0x0c1)
	Qt__Key_Acircumflex            = Qt__Key(0x0c2)
	Qt__Key_Atilde                 = Qt__Key(0x0c3)
	Qt__Key_Adiaeresis             = Qt__Key(0x0c4)
	Qt__Key_Aring                  = Qt__Key(0x0c5)
	Qt__Key_AE                     = Qt__Key(0x0c6)
	Qt__Key_Ccedilla               = Qt__Key(0x0c7)
	Qt__Key_Egrave                 = Qt__Key(0x0c8)
	Qt__Key_Eacute                 = Qt__Key(0x0c9)
	Qt__Key_Ecircumflex            = Qt__Key(0x0ca)
	Qt__Key_Ediaeresis             = Qt__Key(0x0cb)
	Qt__Key_Igrave                 = Qt__Key(0x0cc)
	Qt__Key_Iacute                 = Qt__Key(0x0cd)
	Qt__Key_Icircumflex            = Qt__Key(0x0ce)
	Qt__Key_Idiaeresis             = Qt__Key(0x0cf)
	Qt__Key_ETH                    = Qt__Key(0x0d0)
	Qt__Key_Ntilde                 = Qt__Key(0x0d1)
	Qt__Key_Ograve                 = Qt__Key(0x0d2)
	Qt__Key_Oacute                 = Qt__Key(0x0d3)
	Qt__Key_Ocircumflex            = Qt__Key(0x0d4)
	Qt__Key_Otilde                 = Qt__Key(0x0d5)
	Qt__Key_Odiaeresis             = Qt__Key(0x0d6)
	Qt__Key_multiply               = Qt__Key(0x0d7)
	Qt__Key_Ooblique               = Qt__Key(0x0d8)
	Qt__Key_Ugrave                 = Qt__Key(0x0d9)
	Qt__Key_Uacute                 = Qt__Key(0x0da)
	Qt__Key_Ucircumflex            = Qt__Key(0x0db)
	Qt__Key_Udiaeresis             = Qt__Key(0x0dc)
	Qt__Key_Yacute                 = Qt__Key(0x0dd)
	Qt__Key_THORN                  = Qt__Key(0x0de)
	Qt__Key_ssharp                 = Qt__Key(0x0df)
	Qt__Key_division               = Qt__Key(0x0f7)
	Qt__Key_ydiaeresis             = Qt__Key(0x0ff)
	Qt__Key_AltGr                  = Qt__Key(0x01001103)
	Qt__Key_Multi_key              = Qt__Key(0x01001120)
	Qt__Key_Codeinput              = Qt__Key(0x01001137)
	Qt__Key_SingleCandidate        = Qt__Key(0x0100113c)
	Qt__Key_MultipleCandidate      = Qt__Key(0x0100113d)
	Qt__Key_PreviousCandidate      = Qt__Key(0x0100113e)
	Qt__Key_Mode_switch            = Qt__Key(0x0100117e)
	Qt__Key_Kanji                  = Qt__Key(0x01001121)
	Qt__Key_Muhenkan               = Qt__Key(0x01001122)
	Qt__Key_Henkan                 = Qt__Key(0x01001123)
	Qt__Key_Romaji                 = Qt__Key(0x01001124)
	Qt__Key_Hiragana               = Qt__Key(0x01001125)
	Qt__Key_Katakana               = Qt__Key(0x01001126)
	Qt__Key_Hiragana_Katakana      = Qt__Key(0x01001127)
	Qt__Key_Zenkaku                = Qt__Key(0x01001128)
	Qt__Key_Hankaku                = Qt__Key(0x01001129)
	Qt__Key_Zenkaku_Hankaku        = Qt__Key(0x0100112a)
	Qt__Key_Touroku                = Qt__Key(0x0100112b)
	Qt__Key_Massyo                 = Qt__Key(0x0100112c)
	Qt__Key_Kana_Lock              = Qt__Key(0x0100112d)
	Qt__Key_Kana_Shift             = Qt__Key(0x0100112e)
	Qt__Key_Eisu_Shift             = Qt__Key(0x0100112f)
	Qt__Key_Eisu_toggle            = Qt__Key(0x01001130)
	Qt__Key_Hangul                 = Qt__Key(0x01001131)
	Qt__Key_Hangul_Start           = Qt__Key(0x01001132)
	Qt__Key_Hangul_End             = Qt__Key(0x01001133)
	Qt__Key_Hangul_Hanja           = Qt__Key(0x01001134)
	Qt__Key_Hangul_Jamo            = Qt__Key(0x01001135)
	Qt__Key_Hangul_Romaja          = Qt__Key(0x01001136)
	Qt__Key_Hangul_Jeonja          = Qt__Key(0x01001138)
	Qt__Key_Hangul_Banja           = Qt__Key(0x01001139)
	Qt__Key_Hangul_PreHanja        = Qt__Key(0x0100113a)
	Qt__Key_Hangul_PostHanja       = Qt__Key(0x0100113b)
	Qt__Key_Hangul_Special         = Qt__Key(0x0100113f)
	Qt__Key_Dead_Grave             = Qt__Key(0x01001250)
	Qt__Key_Dead_Acute             = Qt__Key(0x01001251)
	Qt__Key_Dead_Circumflex        = Qt__Key(0x01001252)
	Qt__Key_Dead_Tilde             = Qt__Key(0x01001253)
	Qt__Key_Dead_Macron            = Qt__Key(0x01001254)
	Qt__Key_Dead_Breve             = Qt__Key(0x01001255)
	Qt__Key_Dead_Abovedot          = Qt__Key(0x01001256)
	Qt__Key_Dead_Diaeresis         = Qt__Key(0x01001257)
	Qt__Key_Dead_Abovering         = Qt__Key(0x01001258)
	Qt__Key_Dead_Doubleacute       = Qt__Key(0x01001259)
	Qt__Key_Dead_Caron             = Qt__Key(0x0100125a)
	Qt__Key_Dead_Cedilla           = Qt__Key(0x0100125b)
	Qt__Key_Dead_Ogonek            = Qt__Key(0x0100125c)
	Qt__Key_Dead_Iota              = Qt__Key(0x0100125d)
	Qt__Key_Dead_Voiced_Sound      = Qt__Key(0x0100125e)
	Qt__Key_Dead_Semivoiced_Sound  = Qt__Key(0x0100125f)
	Qt__Key_Dead_Belowdot          = Qt__Key(0x01001260)
	Qt__Key_Dead_Hook              = Qt__Key(0x01001261)
	Qt__Key_Dead_Horn              = Qt__Key(0x01001262)
	Qt__Key_Back                   = Qt__Key(0x01000061)
	Qt__Key_Forward                = Qt__Key(0x01000062)
	Qt__Key_Stop                   = Qt__Key(0x01000063)
	Qt__Key_Refresh                = Qt__Key(0x01000064)
	Qt__Key_VolumeDown             = Qt__Key(0x01000070)
	Qt__Key_VolumeMute             = Qt__Key(0x01000071)
	Qt__Key_VolumeUp               = Qt__Key(0x01000072)
	Qt__Key_BassBoost              = Qt__Key(0x01000073)
	Qt__Key_BassUp                 = Qt__Key(0x01000074)
	Qt__Key_BassDown               = Qt__Key(0x01000075)
	Qt__Key_TrebleUp               = Qt__Key(0x01000076)
	Qt__Key_TrebleDown             = Qt__Key(0x01000077)
	Qt__Key_MediaPlay              = Qt__Key(0x01000080)
	Qt__Key_MediaStop              = Qt__Key(0x01000081)
	Qt__Key_MediaPrevious          = Qt__Key(0x01000082)
	Qt__Key_MediaNext              = Qt__Key(0x01000083)
	Qt__Key_MediaRecord            = Qt__Key(0x01000084)
	Qt__Key_MediaPause             = Qt__Key(0x1000085)
	Qt__Key_MediaTogglePlayPause   = Qt__Key(0x1000086)
	Qt__Key_HomePage               = Qt__Key(0x01000090)
	Qt__Key_Favorites              = Qt__Key(0x01000091)
	Qt__Key_Search                 = Qt__Key(0x01000092)
	Qt__Key_Standby                = Qt__Key(0x01000093)
	Qt__Key_OpenUrl                = Qt__Key(0x01000094)
	Qt__Key_LaunchMail             = Qt__Key(0x010000a0)
	Qt__Key_LaunchMedia            = Qt__Key(0x010000a1)
	Qt__Key_Launch0                = Qt__Key(0x010000a2)
	Qt__Key_Launch1                = Qt__Key(0x010000a3)
	Qt__Key_Launch2                = Qt__Key(0x010000a4)
	Qt__Key_Launch3                = Qt__Key(0x010000a5)
	Qt__Key_Launch4                = Qt__Key(0x010000a6)
	Qt__Key_Launch5                = Qt__Key(0x010000a7)
	Qt__Key_Launch6                = Qt__Key(0x010000a8)
	Qt__Key_Launch7                = Qt__Key(0x010000a9)
	Qt__Key_Launch8                = Qt__Key(0x010000aa)
	Qt__Key_Launch9                = Qt__Key(0x010000ab)
	Qt__Key_LaunchA                = Qt__Key(0x010000ac)
	Qt__Key_LaunchB                = Qt__Key(0x010000ad)
	Qt__Key_LaunchC                = Qt__Key(0x010000ae)
	Qt__Key_LaunchD                = Qt__Key(0x010000af)
	Qt__Key_LaunchE                = Qt__Key(0x010000b0)
	Qt__Key_LaunchF                = Qt__Key(0x010000b1)
	Qt__Key_MonBrightnessUp        = Qt__Key(0x010000b2)
	Qt__Key_MonBrightnessDown      = Qt__Key(0x010000b3)
	Qt__Key_KeyboardLightOnOff     = Qt__Key(0x010000b4)
	Qt__Key_KeyboardBrightnessUp   = Qt__Key(0x010000b5)
	Qt__Key_KeyboardBrightnessDown = Qt__Key(0x010000b6)
	Qt__Key_PowerOff               = Qt__Key(0x010000b7)
	Qt__Key_WakeUp                 = Qt__Key(0x010000b8)
	Qt__Key_Eject                  = Qt__Key(0x010000b9)
	Qt__Key_ScreenSaver            = Qt__Key(0x010000ba)
	Qt__Key_WWW                    = Qt__Key(0x010000bb)
	Qt__Key_Memo                   = Qt__Key(0x010000bc)
	Qt__Key_LightBulb              = Qt__Key(0x010000bd)
	Qt__Key_Shop                   = Qt__Key(0x010000be)
	Qt__Key_History                = Qt__Key(0x010000bf)
	Qt__Key_AddFavorite            = Qt__Key(0x010000c0)
	Qt__Key_HotLinks               = Qt__Key(0x010000c1)
	Qt__Key_BrightnessAdjust       = Qt__Key(0x010000c2)
	Qt__Key_Finance                = Qt__Key(0x010000c3)
	Qt__Key_Community              = Qt__Key(0x010000c4)
	Qt__Key_AudioRewind            = Qt__Key(0x010000c5)
	Qt__Key_BackForward            = Qt__Key(0x010000c6)
	Qt__Key_ApplicationLeft        = Qt__Key(0x010000c7)
	Qt__Key_ApplicationRight       = Qt__Key(0x010000c8)
	Qt__Key_Book                   = Qt__Key(0x010000c9)
	Qt__Key_CD                     = Qt__Key(0x010000ca)
	Qt__Key_Calculator             = Qt__Key(0x010000cb)
	Qt__Key_ToDoList               = Qt__Key(0x010000cc)
	Qt__Key_ClearGrab              = Qt__Key(0x010000cd)
	Qt__Key_Close                  = Qt__Key(0x010000ce)
	Qt__Key_Copy                   = Qt__Key(0x010000cf)
	Qt__Key_Cut                    = Qt__Key(0x010000d0)
	Qt__Key_Display                = Qt__Key(0x010000d1)
	Qt__Key_DOS                    = Qt__Key(0x010000d2)
	Qt__Key_Documents              = Qt__Key(0x010000d3)
	Qt__Key_Excel                  = Qt__Key(0x010000d4)
	Qt__Key_Explorer               = Qt__Key(0x010000d5)
	Qt__Key_Game                   = Qt__Key(0x010000d6)
	Qt__Key_Go                     = Qt__Key(0x010000d7)
	Qt__Key_iTouch                 = Qt__Key(0x010000d8)
	Qt__Key_LogOff                 = Qt__Key(0x010000d9)
	Qt__Key_Market                 = Qt__Key(0x010000da)
	Qt__Key_Meeting                = Qt__Key(0x010000db)
	Qt__Key_MenuKB                 = Qt__Key(0x010000dc)
	Qt__Key_MenuPB                 = Qt__Key(0x010000dd)
	Qt__Key_MySites                = Qt__Key(0x010000de)
	Qt__Key_News                   = Qt__Key(0x010000df)
	Qt__Key_OfficeHome             = Qt__Key(0x010000e0)
	Qt__Key_Option                 = Qt__Key(0x010000e1)
	Qt__Key_Paste                  = Qt__Key(0x010000e2)
	Qt__Key_Phone                  = Qt__Key(0x010000e3)
	Qt__Key_Calendar               = Qt__Key(0x010000e4)
	Qt__Key_Reply                  = Qt__Key(0x010000e5)
	Qt__Key_Reload                 = Qt__Key(0x010000e6)
	Qt__Key_RotateWindows          = Qt__Key(0x010000e7)
	Qt__Key_RotationPB             = Qt__Key(0x010000e8)
	Qt__Key_RotationKB             = Qt__Key(0x010000e9)
	Qt__Key_Save                   = Qt__Key(0x010000ea)
	Qt__Key_Send                   = Qt__Key(0x010000eb)
	Qt__Key_Spell                  = Qt__Key(0x010000ec)
	Qt__Key_SplitScreen            = Qt__Key(0x010000ed)
	Qt__Key_Support                = Qt__Key(0x010000ee)
	Qt__Key_TaskPane               = Qt__Key(0x010000ef)
	Qt__Key_Terminal               = Qt__Key(0x010000f0)
	Qt__Key_Tools                  = Qt__Key(0x010000f1)
	Qt__Key_Travel                 = Qt__Key(0x010000f2)
	Qt__Key_Video                  = Qt__Key(0x010000f3)
	Qt__Key_Word                   = Qt__Key(0x010000f4)
	Qt__Key_Xfer                   = Qt__Key(0x010000f5)
	Qt__Key_ZoomIn                 = Qt__Key(0x010000f6)
	Qt__Key_ZoomOut                = Qt__Key(0x010000f7)
	Qt__Key_Away                   = Qt__Key(0x010000f8)
	Qt__Key_Messenger              = Qt__Key(0x010000f9)
	Qt__Key_WebCam                 = Qt__Key(0x010000fa)
	Qt__Key_MailForward            = Qt__Key(0x010000fb)
	Qt__Key_Pictures               = Qt__Key(0x010000fc)
	Qt__Key_Music                  = Qt__Key(0x010000fd)
	Qt__Key_Battery                = Qt__Key(0x010000fe)
	Qt__Key_Bluetooth              = Qt__Key(0x010000ff)
	Qt__Key_WLAN                   = Qt__Key(0x01000100)
	Qt__Key_UWB                    = Qt__Key(0x01000101)
	Qt__Key_AudioForward           = Qt__Key(0x01000102)
	Qt__Key_AudioRepeat            = Qt__Key(0x01000103)
	Qt__Key_AudioRandomPlay        = Qt__Key(0x01000104)
	Qt__Key_Subtitle               = Qt__Key(0x01000105)
	Qt__Key_AudioCycleTrack        = Qt__Key(0x01000106)
	Qt__Key_Time                   = Qt__Key(0x01000107)
	Qt__Key_Hibernate              = Qt__Key(0x01000108)
	Qt__Key_View                   = Qt__Key(0x01000109)
	Qt__Key_TopMenu                = Qt__Key(0x0100010a)
	Qt__Key_PowerDown              = Qt__Key(0x0100010b)
	Qt__Key_Suspend                = Qt__Key(0x0100010c)
	Qt__Key_ContrastAdjust         = Qt__Key(0x0100010d)
	Qt__Key_LaunchG                = Qt__Key(0x0100010e)
	Qt__Key_LaunchH                = Qt__Key(0x0100010f)
	Qt__Key_TouchpadToggle         = Qt__Key(0x01000110)
	Qt__Key_TouchpadOn             = Qt__Key(0x01000111)
	Qt__Key_TouchpadOff            = Qt__Key(0x01000112)
	Qt__Key_MicMute                = Qt__Key(0x01000113)
	Qt__Key_Red                    = Qt__Key(0x01000114)
	Qt__Key_Green                  = Qt__Key(0x01000115)
	Qt__Key_Yellow                 = Qt__Key(0x01000116)
	Qt__Key_Blue                   = Qt__Key(0x01000117)
	Qt__Key_ChannelUp              = Qt__Key(0x01000118)
	Qt__Key_ChannelDown            = Qt__Key(0x01000119)
	Qt__Key_Guide                  = Qt__Key(0x0100011a)
	Qt__Key_Info                   = Qt__Key(0x0100011b)
	Qt__Key_Settings               = Qt__Key(0x0100011c)
	Qt__Key_MicVolumeUp            = Qt__Key(0x0100011d)
	Qt__Key_MicVolumeDown          = Qt__Key(0x0100011e)
	Qt__Key_New                    = Qt__Key(0x01000120)
	Qt__Key_Open                   = Qt__Key(0x01000121)
	Qt__Key_Find                   = Qt__Key(0x01000122)
	Qt__Key_Undo                   = Qt__Key(0x01000123)
	Qt__Key_Redo                   = Qt__Key(0x01000124)
	Qt__Key_MediaLast              = Qt__Key(0x0100ffff)
	Qt__Key_Select                 = Qt__Key(0x01010000)
	Qt__Key_Yes                    = Qt__Key(0x01010001)
	Qt__Key_No                     = Qt__Key(0x01010002)
	Qt__Key_Cancel                 = Qt__Key(0x01020001)
	Qt__Key_Printer                = Qt__Key(0x01020002)
	Qt__Key_Execute                = Qt__Key(0x01020003)
	Qt__Key_Sleep                  = Qt__Key(0x01020004)
	Qt__Key_Play                   = Qt__Key(0x01020005)
	Qt__Key_Zoom                   = Qt__Key(0x01020006)
	Qt__Key_Exit                   = Qt__Key(0x0102000a)
	Qt__Key_Context1               = Qt__Key(0x01100000)
	Qt__Key_Context2               = Qt__Key(0x01100001)
	Qt__Key_Context3               = Qt__Key(0x01100002)
	Qt__Key_Context4               = Qt__Key(0x01100003)
	Qt__Key_Call                   = Qt__Key(0x01100004)
	Qt__Key_Hangup                 = Qt__Key(0x01100005)
	Qt__Key_Flip                   = Qt__Key(0x01100006)
	Qt__Key_ToggleCallHangup       = Qt__Key(0x01100007)
	Qt__Key_VoiceDial              = Qt__Key(0x01100008)
	Qt__Key_LastNumberRedial       = Qt__Key(0x01100009)
	Qt__Key_Camera                 = Qt__Key(0x01100020)
	Qt__Key_CameraFocus            = Qt__Key(0x01100021)
	Qt__Key_unknown                = Qt__Key(0x01ffffff)
)

//Qt::KeyboardModifier
type Qt__KeyboardModifier int64

const (
	Qt__NoModifier           = Qt__KeyboardModifier(0x00000000)
	Qt__ShiftModifier        = Qt__KeyboardModifier(0x02000000)
	Qt__ControlModifier      = Qt__KeyboardModifier(0x04000000)
	Qt__AltModifier          = Qt__KeyboardModifier(0x08000000)
	Qt__MetaModifier         = Qt__KeyboardModifier(0x10000000)
	Qt__KeypadModifier       = Qt__KeyboardModifier(0x20000000)
	Qt__GroupSwitchModifier  = Qt__KeyboardModifier(0x40000000)
	Qt__KeyboardModifierMask = Qt__KeyboardModifier(0xfe000000)
)

//Qt::LayoutDirection
type Qt__LayoutDirection int64

const (
	Qt__LeftToRight         = Qt__LayoutDirection(0)
	Qt__RightToLeft         = Qt__LayoutDirection(1)
	Qt__LayoutDirectionAuto = Qt__LayoutDirection(2)
)

//Qt::MaskMode
type Qt__MaskMode int64

const (
	Qt__MaskInColor  = Qt__MaskMode(0)
	Qt__MaskOutColor = Qt__MaskMode(1)
)

//Qt::MatchFlag
type Qt__MatchFlag int64

const (
	Qt__MatchExactly       = Qt__MatchFlag(0)
	Qt__MatchContains      = Qt__MatchFlag(1)
	Qt__MatchStartsWith    = Qt__MatchFlag(2)
	Qt__MatchEndsWith      = Qt__MatchFlag(3)
	Qt__MatchRegExp        = Qt__MatchFlag(4)
	Qt__MatchWildcard      = Qt__MatchFlag(5)
	Qt__MatchFixedString   = Qt__MatchFlag(8)
	Qt__MatchCaseSensitive = Qt__MatchFlag(16)
	Qt__MatchWrap          = Qt__MatchFlag(32)
	Qt__MatchRecursive     = Qt__MatchFlag(64)
)

//Qt::Modifier
type Qt__Modifier int64

const (
	Qt__META          = Qt__Modifier(Qt__MetaModifier)
	Qt__SHIFT         = Qt__Modifier(Qt__ShiftModifier)
	Qt__CTRL          = Qt__Modifier(Qt__ControlModifier)
	Qt__ALT           = Qt__Modifier(Qt__AltModifier)
	Qt__MODIFIER_MASK = Qt__Modifier(Qt__KeyboardModifierMask)
	Qt__UNICODE_ACCEL = Qt__Modifier(0x00000000)
)

//Qt::MouseButton
type Qt__MouseButton int64

const (
	Qt__NoButton        = Qt__MouseButton(0x00000000)
	Qt__LeftButton      = Qt__MouseButton(0x00000001)
	Qt__RightButton     = Qt__MouseButton(0x00000002)
	Qt__MidButton       = Qt__MouseButton(0x00000004)
	Qt__MiddleButton    = Qt__MouseButton(Qt__MidButton)
	Qt__BackButton      = Qt__MouseButton(0x00000008)
	Qt__XButton1        = Qt__MouseButton(Qt__BackButton)
	Qt__ExtraButton1    = Qt__MouseButton(Qt__XButton1)
	Qt__ForwardButton   = Qt__MouseButton(0x00000010)
	Qt__XButton2        = Qt__MouseButton(Qt__ForwardButton)
	Qt__ExtraButton2    = Qt__MouseButton(Qt__ForwardButton)
	Qt__TaskButton      = Qt__MouseButton(0x00000020)
	Qt__ExtraButton3    = Qt__MouseButton(Qt__TaskButton)
	Qt__ExtraButton4    = Qt__MouseButton(0x00000040)
	Qt__ExtraButton5    = Qt__MouseButton(0x00000080)
	Qt__ExtraButton6    = Qt__MouseButton(0x00000100)
	Qt__ExtraButton7    = Qt__MouseButton(0x00000200)
	Qt__ExtraButton8    = Qt__MouseButton(0x00000400)
	Qt__ExtraButton9    = Qt__MouseButton(0x00000800)
	Qt__ExtraButton10   = Qt__MouseButton(0x00001000)
	Qt__ExtraButton11   = Qt__MouseButton(0x00002000)
	Qt__ExtraButton12   = Qt__MouseButton(0x00004000)
	Qt__ExtraButton13   = Qt__MouseButton(0x00008000)
	Qt__ExtraButton14   = Qt__MouseButton(0x00010000)
	Qt__ExtraButton15   = Qt__MouseButton(0x00020000)
	Qt__ExtraButton16   = Qt__MouseButton(0x00040000)
	Qt__ExtraButton17   = Qt__MouseButton(0x00080000)
	Qt__ExtraButton18   = Qt__MouseButton(0x00100000)
	Qt__ExtraButton19   = Qt__MouseButton(0x00200000)
	Qt__ExtraButton20   = Qt__MouseButton(0x00400000)
	Qt__ExtraButton21   = Qt__MouseButton(0x00800000)
	Qt__ExtraButton22   = Qt__MouseButton(0x01000000)
	Qt__ExtraButton23   = Qt__MouseButton(0x02000000)
	Qt__ExtraButton24   = Qt__MouseButton(0x04000000)
	Qt__AllButtons      = Qt__MouseButton(0x07ffffff)
	Qt__MaxMouseButton  = Qt__MouseButton(Qt__ExtraButton24)
	Qt__MouseButtonMask = Qt__MouseButton(0xffffffff)
)

//Qt::MouseEventFlag
type Qt__MouseEventFlag int64

const (
	Qt__MouseEventCreatedDoubleClick = Qt__MouseEventFlag(0x01)
	Qt__MouseEventFlagMask           = Qt__MouseEventFlag(0xFF)
)

//Qt::MouseEventSource
type Qt__MouseEventSource int64

const (
	Qt__MouseEventNotSynthesized           = Qt__MouseEventSource(0)
	Qt__MouseEventSynthesizedBySystem      = Qt__MouseEventSource(1)
	Qt__MouseEventSynthesizedByQt          = Qt__MouseEventSource(2)
	Qt__MouseEventSynthesizedByApplication = Qt__MouseEventSource(3)
)

//Qt::NativeGestureType
type Qt__NativeGestureType int64

const (
	Qt__BeginNativeGesture     = Qt__NativeGestureType(0)
	Qt__EndNativeGesture       = Qt__NativeGestureType(1)
	Qt__PanNativeGesture       = Qt__NativeGestureType(2)
	Qt__ZoomNativeGesture      = Qt__NativeGestureType(3)
	Qt__SmartZoomNativeGesture = Qt__NativeGestureType(4)
	Qt__RotateNativeGesture    = Qt__NativeGestureType(5)
	Qt__SwipeNativeGesture     = Qt__NativeGestureType(6)
)

//Qt::NavigationMode
type Qt__NavigationMode int64

const (
	Qt__NavigationModeNone               = Qt__NavigationMode(0)
	Qt__NavigationModeKeypadTabOrder     = Qt__NavigationMode(1)
	Qt__NavigationModeKeypadDirectional  = Qt__NavigationMode(2)
	Qt__NavigationModeCursorAuto         = Qt__NavigationMode(3)
	Qt__NavigationModeCursorForceVisible = Qt__NavigationMode(4)
)

//Qt::Orientation
type Qt__Orientation int64

const (
	Qt__Horizontal = Qt__Orientation(0x1)
	Qt__Vertical   = Qt__Orientation(0x2)
)

//Qt::PenCapStyle
type Qt__PenCapStyle int64

var (
	Qt__FlatCap      = Qt__PenCapStyle(0x00)
	Qt__SquareCap    = Qt__PenCapStyle(0x10)
	Qt__RoundCap     = Qt__PenCapStyle(0x20)
	Qt__MPenCapStyle = Qt__PenCapStyle(0x30)
)

//Qt::PenJoinStyle
type Qt__PenJoinStyle int64

var (
	Qt__MiterJoin     = Qt__PenJoinStyle(0x00)
	Qt__BevelJoin     = Qt__PenJoinStyle(0x40)
	Qt__RoundJoin     = Qt__PenJoinStyle(0x80)
	Qt__SvgMiterJoin  = Qt__PenJoinStyle(0x100)
	Qt__MPenJoinStyle = Qt__PenJoinStyle(0x1c0)
)

//Qt::PenStyle
type Qt__PenStyle int64

var (
	Qt__NoPen          = Qt__PenStyle(0)
	Qt__SolidLine      = Qt__PenStyle(1)
	Qt__DashLine       = Qt__PenStyle(2)
	Qt__DotLine        = Qt__PenStyle(3)
	Qt__DashDotLine    = Qt__PenStyle(4)
	Qt__DashDotDotLine = Qt__PenStyle(5)
	Qt__CustomDashLine = Qt__PenStyle(6)
	Qt__MPenStyle      = Qt__PenStyle(0x0f)
)

//Qt::ScreenOrientation
type Qt__ScreenOrientation int64

const (
	Qt__PrimaryOrientation           = Qt__ScreenOrientation(0x00000000)
	Qt__PortraitOrientation          = Qt__ScreenOrientation(0x00000001)
	Qt__LandscapeOrientation         = Qt__ScreenOrientation(0x00000002)
	Qt__InvertedPortraitOrientation  = Qt__ScreenOrientation(0x00000004)
	Qt__InvertedLandscapeOrientation = Qt__ScreenOrientation(0x00000008)
)

//Qt::ScrollBarPolicy
type Qt__ScrollBarPolicy int64

const (
	Qt__ScrollBarAsNeeded  = Qt__ScrollBarPolicy(0)
	Qt__ScrollBarAlwaysOff = Qt__ScrollBarPolicy(1)
	Qt__ScrollBarAlwaysOn  = Qt__ScrollBarPolicy(2)
)

//Qt::ScrollPhase
type Qt__ScrollPhase int64

const (
	Qt__NoScrollPhase = Qt__ScrollPhase(0)
	Qt__ScrollBegin   = Qt__ScrollPhase(1)
	Qt__ScrollUpdate  = Qt__ScrollPhase(2)
	Qt__ScrollEnd     = Qt__ScrollPhase(3)
)

//Qt::ShortcutContext
type Qt__ShortcutContext int64

const (
	Qt__WidgetShortcut             = Qt__ShortcutContext(0)
	Qt__WindowShortcut             = Qt__ShortcutContext(1)
	Qt__ApplicationShortcut        = Qt__ShortcutContext(2)
	Qt__WidgetWithChildrenShortcut = Qt__ShortcutContext(3)
)

//Qt::SizeHint
type Qt__SizeHint int64

const (
	Qt__MinimumSize    = Qt__SizeHint(0)
	Qt__PreferredSize  = Qt__SizeHint(1)
	Qt__MaximumSize    = Qt__SizeHint(2)
	Qt__MinimumDescent = Qt__SizeHint(3)
	Qt__NSizeHints     = Qt__SizeHint(4)
)

//Qt::SizeMode
type Qt__SizeMode int64

const (
	Qt__AbsoluteSize = Qt__SizeMode(0)
	Qt__RelativeSize = Qt__SizeMode(1)
)

//Qt::SortOrder
type Qt__SortOrder int64

const (
	Qt__AscendingOrder  = Qt__SortOrder(0)
	Qt__DescendingOrder = Qt__SortOrder(1)
)

//Qt::TabFocusBehavior
type Qt__TabFocusBehavior int64

const (
	Qt__NoTabFocus           = Qt__TabFocusBehavior(0x00)
	Qt__TabFocusTextControls = Qt__TabFocusBehavior(0x01)
	Qt__TabFocusListControls = Qt__TabFocusBehavior(0x02)
	Qt__TabFocusAllControls  = Qt__TabFocusBehavior(0xff)
)

//Qt::TextElideMode
type Qt__TextElideMode int64

const (
	Qt__ElideLeft   = Qt__TextElideMode(0)
	Qt__ElideRight  = Qt__TextElideMode(1)
	Qt__ElideMiddle = Qt__TextElideMode(2)
	Qt__ElideNone   = Qt__TextElideMode(3)
)

//Qt::TextFlag
type Qt__TextFlag int64

const (
	Qt__TextSingleLine            = Qt__TextFlag(0x0100)
	Qt__TextDontClip              = Qt__TextFlag(0x0200)
	Qt__TextExpandTabs            = Qt__TextFlag(0x0400)
	Qt__TextShowMnemonic          = Qt__TextFlag(0x0800)
	Qt__TextWordWrap              = Qt__TextFlag(0x1000)
	Qt__TextWrapAnywhere          = Qt__TextFlag(0x2000)
	Qt__TextDontPrint             = Qt__TextFlag(0x4000)
	Qt__TextIncludeTrailingSpaces = Qt__TextFlag(0x08000000)
	Qt__TextHideMnemonic          = Qt__TextFlag(0x8000)
	Qt__TextJustificationForced   = Qt__TextFlag(0x10000)
	Qt__TextForceLeftToRight      = Qt__TextFlag(0x20000)
	Qt__TextForceRightToLeft      = Qt__TextFlag(0x40000)
	Qt__TextLongestVariant        = Qt__TextFlag(0x80000)
	Qt__TextBypassShaping         = Qt__TextFlag(0x100000)
)

//Qt::TextFormat
type Qt__TextFormat int64

const (
	Qt__PlainText = Qt__TextFormat(0)
	Qt__RichText  = Qt__TextFormat(1)
	Qt__AutoText  = Qt__TextFormat(2)
)

//Qt::TextInteractionFlag
type Qt__TextInteractionFlag int64

const (
	Qt__NoTextInteraction         = Qt__TextInteractionFlag(0)
	Qt__TextSelectableByMouse     = Qt__TextInteractionFlag(1)
	Qt__TextSelectableByKeyboard  = Qt__TextInteractionFlag(2)
	Qt__LinksAccessibleByMouse    = Qt__TextInteractionFlag(4)
	Qt__LinksAccessibleByKeyboard = Qt__TextInteractionFlag(8)
	Qt__TextEditable              = Qt__TextInteractionFlag(16)
	Qt__TextEditorInteraction     = Qt__TextInteractionFlag(Qt__TextSelectableByMouse | Qt__TextSelectableByKeyboard | Qt__TextEditable)
	Qt__TextBrowserInteraction    = Qt__TextInteractionFlag(Qt__TextSelectableByMouse | Qt__LinksAccessibleByMouse | Qt__LinksAccessibleByKeyboard)
)

//Qt::TileRule
type Qt__TileRule int64

const (
	Qt__StretchTile = Qt__TileRule(0)
	Qt__RepeatTile  = Qt__TileRule(1)
	Qt__RoundTile   = Qt__TileRule(2)
)

//Qt::TimeSpec
type Qt__TimeSpec int64

const (
	Qt__LocalTime     = Qt__TimeSpec(0)
	Qt__UTC           = Qt__TimeSpec(1)
	Qt__OffsetFromUTC = Qt__TimeSpec(2)
	Qt__TimeZone      = Qt__TimeSpec(3)
)

//Qt::TimerType
type Qt__TimerType int64

const (
	Qt__PreciseTimer    = Qt__TimerType(0)
	Qt__CoarseTimer     = Qt__TimerType(1)
	Qt__VeryCoarseTimer = Qt__TimerType(2)
)

//Qt::ToolBarArea
type Qt__ToolBarArea int64

const (
	Qt__LeftToolBarArea   = Qt__ToolBarArea(0x1)
	Qt__RightToolBarArea  = Qt__ToolBarArea(0x2)
	Qt__TopToolBarArea    = Qt__ToolBarArea(0x4)
	Qt__BottomToolBarArea = Qt__ToolBarArea(0x8)
	Qt__ToolBarArea_Mask  = Qt__ToolBarArea(0xf)
	Qt__AllToolBarAreas   = Qt__ToolBarArea(Qt__ToolBarArea_Mask)
	Qt__NoToolBarArea     = Qt__ToolBarArea(0)
)

//Qt::ToolButtonStyle
type Qt__ToolButtonStyle int64

var (
	Qt__ToolButtonIconOnly       = Qt__ToolButtonStyle(0)
	Qt__ToolButtonTextOnly       = Qt__ToolButtonStyle(1)
	Qt__ToolButtonTextBesideIcon = Qt__ToolButtonStyle(2)
	Qt__ToolButtonTextUnderIcon  = Qt__ToolButtonStyle(3)
	Qt__ToolButtonFollowStyle    = Qt__ToolButtonStyle(4)
)

//Qt::TouchPointState
type Qt__TouchPointState int64

const (
	Qt__TouchPointPressed    = Qt__TouchPointState(0x01)
	Qt__TouchPointMoved      = Qt__TouchPointState(0x02)
	Qt__TouchPointStationary = Qt__TouchPointState(0x04)
	Qt__TouchPointReleased   = Qt__TouchPointState(0x08)
)

//Qt::TransformationMode
type Qt__TransformationMode int64

const (
	Qt__FastTransformation   = Qt__TransformationMode(0)
	Qt__SmoothTransformation = Qt__TransformationMode(1)
)

//Qt::UIEffect
type Qt__UIEffect int64

const (
	Qt__UI_General        = Qt__UIEffect(0)
	Qt__UI_AnimateMenu    = Qt__UIEffect(1)
	Qt__UI_FadeMenu       = Qt__UIEffect(2)
	Qt__UI_AnimateCombo   = Qt__UIEffect(3)
	Qt__UI_AnimateTooltip = Qt__UIEffect(4)
	Qt__UI_FadeTooltip    = Qt__UIEffect(5)
	Qt__UI_AnimateToolBox = Qt__UIEffect(6)
)

//Qt::WhiteSpaceMode
type Qt__WhiteSpaceMode int64

const (
	Qt__WhiteSpaceNormal        = Qt__WhiteSpaceMode(0)
	Qt__WhiteSpacePre           = Qt__WhiteSpaceMode(1)
	Qt__WhiteSpaceNoWrap        = Qt__WhiteSpaceMode(2)
	Qt__WhiteSpaceModeUndefined = Qt__WhiteSpaceMode(-1)
)

//Qt::WidgetAttribute
type Qt__WidgetAttribute int64

const (
	Qt__WA_Disabled                        = Qt__WidgetAttribute(0)
	Qt__WA_UnderMouse                      = Qt__WidgetAttribute(1)
	Qt__WA_MouseTracking                   = Qt__WidgetAttribute(2)
	Qt__WA_ContentsPropagated              = Qt__WidgetAttribute(3)
	Qt__WA_OpaquePaintEvent                = Qt__WidgetAttribute(4)
	Qt__WA_NoBackground                    = Qt__WidgetAttribute(Qt__WA_OpaquePaintEvent)
	Qt__WA_StaticContents                  = Qt__WidgetAttribute(5)
	Qt__WA_LaidOut                         = Qt__WidgetAttribute(7)
	Qt__WA_PaintOnScreen                   = Qt__WidgetAttribute(8)
	Qt__WA_NoSystemBackground              = Qt__WidgetAttribute(9)
	Qt__WA_UpdatesDisabled                 = Qt__WidgetAttribute(10)
	Qt__WA_Mapped                          = Qt__WidgetAttribute(11)
	Qt__WA_MacNoClickThrough               = Qt__WidgetAttribute(12)
	Qt__WA_InputMethodEnabled              = Qt__WidgetAttribute(14)
	Qt__WA_WState_Visible                  = Qt__WidgetAttribute(15)
	Qt__WA_WState_Hidden                   = Qt__WidgetAttribute(16)
	Qt__WA_ForceDisabled                   = Qt__WidgetAttribute(32)
	Qt__WA_KeyCompression                  = Qt__WidgetAttribute(33)
	Qt__WA_PendingMoveEvent                = Qt__WidgetAttribute(34)
	Qt__WA_PendingResizeEvent              = Qt__WidgetAttribute(35)
	Qt__WA_SetPalette                      = Qt__WidgetAttribute(36)
	Qt__WA_SetFont                         = Qt__WidgetAttribute(37)
	Qt__WA_SetCursor                       = Qt__WidgetAttribute(38)
	Qt__WA_NoChildEventsFromChildren       = Qt__WidgetAttribute(39)
	Qt__WA_WindowModified                  = Qt__WidgetAttribute(41)
	Qt__WA_Resized                         = Qt__WidgetAttribute(42)
	Qt__WA_Moved                           = Qt__WidgetAttribute(43)
	Qt__WA_PendingUpdate                   = Qt__WidgetAttribute(44)
	Qt__WA_InvalidSize                     = Qt__WidgetAttribute(45)
	Qt__WA_MacBrushedMetal                 = Qt__WidgetAttribute(46)
	Qt__WA_MacMetalStyle                   = Qt__WidgetAttribute(Qt__WA_MacBrushedMetal)
	Qt__WA_CustomWhatsThis                 = Qt__WidgetAttribute(47)
	Qt__WA_LayoutOnEntireRect              = Qt__WidgetAttribute(48)
	Qt__WA_OutsideWSRange                  = Qt__WidgetAttribute(49)
	Qt__WA_GrabbedShortcut                 = Qt__WidgetAttribute(50)
	Qt__WA_TransparentForMouseEvents       = Qt__WidgetAttribute(51)
	Qt__WA_PaintUnclipped                  = Qt__WidgetAttribute(52)
	Qt__WA_SetWindowIcon                   = Qt__WidgetAttribute(53)
	Qt__WA_NoMouseReplay                   = Qt__WidgetAttribute(54)
	Qt__WA_DeleteOnClose                   = Qt__WidgetAttribute(55)
	Qt__WA_RightToLeft                     = Qt__WidgetAttribute(56)
	Qt__WA_SetLayoutDirection              = Qt__WidgetAttribute(57)
	Qt__WA_NoChildEventsForParent          = Qt__WidgetAttribute(58)
	Qt__WA_ForceUpdatesDisabled            = Qt__WidgetAttribute(59)
	Qt__WA_WState_Created                  = Qt__WidgetAttribute(60)
	Qt__WA_WState_CompressKeys             = Qt__WidgetAttribute(61)
	Qt__WA_WState_InPaintEvent             = Qt__WidgetAttribute(62)
	Qt__WA_WState_Reparented               = Qt__WidgetAttribute(63)
	Qt__WA_WState_ConfigPending            = Qt__WidgetAttribute(64)
	Qt__WA_WState_Polished                 = Qt__WidgetAttribute(66)
	Qt__WA_WState_DND                      = Qt__WidgetAttribute(67)
	Qt__WA_WState_OwnSizePolicy            = Qt__WidgetAttribute(68)
	Qt__WA_WState_ExplicitShowHide         = Qt__WidgetAttribute(69)
	Qt__WA_ShowModal                       = Qt__WidgetAttribute(70)
	Qt__WA_MouseNoMask                     = Qt__WidgetAttribute(71)
	Qt__WA_GroupLeader                     = Qt__WidgetAttribute(72)
	Qt__WA_NoMousePropagation              = Qt__WidgetAttribute(73)
	Qt__WA_Hover                           = Qt__WidgetAttribute(74)
	Qt__WA_InputMethodTransparent          = Qt__WidgetAttribute(75)
	Qt__WA_QuitOnClose                     = Qt__WidgetAttribute(76)
	Qt__WA_KeyboardFocusChange             = Qt__WidgetAttribute(77)
	Qt__WA_AcceptDrops                     = Qt__WidgetAttribute(78)
	Qt__WA_DropSiteRegistered              = Qt__WidgetAttribute(79)
	Qt__WA_ForceAcceptDrops                = Qt__WidgetAttribute(Qt__WA_DropSiteRegistered)
	Qt__WA_WindowPropagation               = Qt__WidgetAttribute(80)
	Qt__WA_NoX11EventCompression           = Qt__WidgetAttribute(81)
	Qt__WA_TintedBackground                = Qt__WidgetAttribute(82)
	Qt__WA_X11OpenGLOverlay                = Qt__WidgetAttribute(83)
	Qt__WA_AlwaysShowToolTips              = Qt__WidgetAttribute(84)
	Qt__WA_MacOpaqueSizeGrip               = Qt__WidgetAttribute(85)
	Qt__WA_SetStyle                        = Qt__WidgetAttribute(86)
	Qt__WA_SetLocale                       = Qt__WidgetAttribute(87)
	Qt__WA_MacShowFocusRect                = Qt__WidgetAttribute(88)
	Qt__WA_MacNormalSize                   = Qt__WidgetAttribute(89)
	Qt__WA_MacSmallSize                    = Qt__WidgetAttribute(90)
	Qt__WA_MacMiniSize                     = Qt__WidgetAttribute(91)
	Qt__WA_LayoutUsesWidgetRect            = Qt__WidgetAttribute(92)
	Qt__WA_StyledBackground                = Qt__WidgetAttribute(93)
	Qt__WA_MSWindowsUseDirect3D            = Qt__WidgetAttribute(94)
	Qt__WA_CanHostQMdiSubWindowTitleBar    = Qt__WidgetAttribute(95)
	Qt__WA_MacAlwaysShowToolWindow         = Qt__WidgetAttribute(96)
	Qt__WA_StyleSheet                      = Qt__WidgetAttribute(97)
	Qt__WA_ShowWithoutActivating           = Qt__WidgetAttribute(98)
	Qt__WA_X11BypassTransientForHint       = Qt__WidgetAttribute(99)
	Qt__WA_NativeWindow                    = Qt__WidgetAttribute(100)
	Qt__WA_DontCreateNativeAncestors       = Qt__WidgetAttribute(101)
	Qt__WA_MacVariableSize                 = Qt__WidgetAttribute(102)
	Qt__WA_DontShowOnScreen                = Qt__WidgetAttribute(103)
	Qt__WA_X11NetWmWindowTypeDesktop       = Qt__WidgetAttribute(104)
	Qt__WA_X11NetWmWindowTypeDock          = Qt__WidgetAttribute(105)
	Qt__WA_X11NetWmWindowTypeToolBar       = Qt__WidgetAttribute(106)
	Qt__WA_X11NetWmWindowTypeMenu          = Qt__WidgetAttribute(107)
	Qt__WA_X11NetWmWindowTypeUtility       = Qt__WidgetAttribute(108)
	Qt__WA_X11NetWmWindowTypeSplash        = Qt__WidgetAttribute(109)
	Qt__WA_X11NetWmWindowTypeDialog        = Qt__WidgetAttribute(110)
	Qt__WA_X11NetWmWindowTypeDropDownMenu  = Qt__WidgetAttribute(111)
	Qt__WA_X11NetWmWindowTypePopupMenu     = Qt__WidgetAttribute(112)
	Qt__WA_X11NetWmWindowTypeToolTip       = Qt__WidgetAttribute(113)
	Qt__WA_X11NetWmWindowTypeNotification  = Qt__WidgetAttribute(114)
	Qt__WA_X11NetWmWindowTypeCombo         = Qt__WidgetAttribute(115)
	Qt__WA_X11NetWmWindowTypeDND           = Qt__WidgetAttribute(116)
	Qt__WA_MacFrameworkScaled              = Qt__WidgetAttribute(117)
	Qt__WA_SetWindowModality               = Qt__WidgetAttribute(118)
	Qt__WA_WState_WindowOpacitySet         = Qt__WidgetAttribute(119)
	Qt__WA_TranslucentBackground           = Qt__WidgetAttribute(120)
	Qt__WA_AcceptTouchEvents               = Qt__WidgetAttribute(121)
	Qt__WA_WState_AcceptedTouchBeginEvent  = Qt__WidgetAttribute(122)
	Qt__WA_TouchPadAcceptSingleTouchEvents = Qt__WidgetAttribute(123)
	Qt__WA_X11DoNotAcceptFocus             = Qt__WidgetAttribute(126)
	Qt__WA_MacNoShadow                     = Qt__WidgetAttribute(127)
	Qt__WA_AlwaysStackOnTop                = Qt__WidgetAttribute(128)
	Qt__WA_AttributeCount                  = Qt__WidgetAttribute(129)
)

//Qt::WindowFrameSection
type Qt__WindowFrameSection int64

const (
	Qt__NoSection          = Qt__WindowFrameSection(0)
	Qt__LeftSection        = Qt__WindowFrameSection(1)
	Qt__TopLeftSection     = Qt__WindowFrameSection(2)
	Qt__TopSection         = Qt__WindowFrameSection(3)
	Qt__TopRightSection    = Qt__WindowFrameSection(4)
	Qt__RightSection       = Qt__WindowFrameSection(5)
	Qt__BottomRightSection = Qt__WindowFrameSection(6)
	Qt__BottomSection      = Qt__WindowFrameSection(7)
	Qt__BottomLeftSection  = Qt__WindowFrameSection(8)
	Qt__TitleBarArea       = Qt__WindowFrameSection(9)
)

//Qt::WindowModality
type Qt__WindowModality int64

const (
	Qt__NonModal         = Qt__WindowModality(0)
	Qt__WindowModal      = Qt__WindowModality(1)
	Qt__ApplicationModal = Qt__WindowModality(2)
)

//Qt::WindowState
type Qt__WindowState int64

const (
	Qt__WindowNoState    = Qt__WindowState(0x00000000)
	Qt__WindowMinimized  = Qt__WindowState(0x00000001)
	Qt__WindowMaximized  = Qt__WindowState(0x00000002)
	Qt__WindowFullScreen = Qt__WindowState(0x00000004)
	Qt__WindowActive     = Qt__WindowState(0x00000008)
)

//Qt::WindowType
type Qt__WindowType int64

const (
	Qt__Widget                              = Qt__WindowType(0x00000000)
	Qt__Window                              = Qt__WindowType(0x00000001)
	Qt__Dialog                              = Qt__WindowType(0x00000002 | Qt__Window)
	Qt__Sheet                               = Qt__WindowType(0x00000004 | Qt__Window)
	Qt__Drawer                              = Qt__WindowType(Qt__Sheet | Qt__Dialog)
	Qt__Popup                               = Qt__WindowType(0x00000008 | Qt__Window)
	Qt__Tool                                = Qt__WindowType(Qt__Popup | Qt__Dialog)
	Qt__ToolTip                             = Qt__WindowType(Qt__Popup | Qt__Sheet)
	Qt__SplashScreen                        = Qt__WindowType(Qt__ToolTip | Qt__Dialog)
	Qt__Desktop                             = Qt__WindowType(0x00000010 | Qt__Window)
	Qt__SubWindow                           = Qt__WindowType(0x00000012)
	Qt__ForeignWindow                       = Qt__WindowType(0x00000020 | Qt__Window)
	Qt__CoverWindow                         = Qt__WindowType(0x00000040 | Qt__Window)
	Qt__WindowType_Mask                     = Qt__WindowType(0x000000ff)
	Qt__MSWindowsFixedSizeDialogHint        = Qt__WindowType(0x00000100)
	Qt__MSWindowsOwnDC                      = Qt__WindowType(0x00000200)
	Qt__BypassWindowManagerHint             = Qt__WindowType(0x00000400)
	Qt__X11BypassWindowManagerHint          = Qt__WindowType(Qt__BypassWindowManagerHint)
	Qt__FramelessWindowHint                 = Qt__WindowType(0x00000800)
	Qt__WindowTitleHint                     = Qt__WindowType(0x00001000)
	Qt__WindowSystemMenuHint                = Qt__WindowType(0x00002000)
	Qt__WindowMinimizeButtonHint            = Qt__WindowType(0x00004000)
	Qt__WindowMaximizeButtonHint            = Qt__WindowType(0x00008000)
	Qt__WindowMinMaxButtonsHint             = Qt__WindowType(Qt__WindowMinimizeButtonHint | Qt__WindowMaximizeButtonHint)
	Qt__WindowContextHelpButtonHint         = Qt__WindowType(0x00010000)
	Qt__WindowShadeButtonHint               = Qt__WindowType(0x00020000)
	Qt__WindowStaysOnTopHint                = Qt__WindowType(0x00040000)
	Qt__WindowTransparentForInput           = Qt__WindowType(0x00080000)
	Qt__WindowOverridesSystemGestures       = Qt__WindowType(0x00100000)
	Qt__WindowDoesNotAcceptFocus            = Qt__WindowType(0x00200000)
	Qt__MaximizeUsingFullscreenGeometryHint = Qt__WindowType(0x00400000)
	Qt__CustomizeWindowHint                 = Qt__WindowType(0x02000000)
	Qt__WindowStaysOnBottomHint             = Qt__WindowType(0x04000000)
	Qt__WindowCloseButtonHint               = Qt__WindowType(0x08000000)
	Qt__MacWindowToolBarButtonHint          = Qt__WindowType(0x10000000)
	Qt__BypassGraphicsProxyWidget           = Qt__WindowType(0x20000000)
	Qt__NoDropShadowWindowHint              = Qt__WindowType(0x40000000)
	Qt__WindowFullscreenButtonHint          = Qt__WindowType(0x80000000)
	Qt__WindowOkButtonHint                  = Qt__WindowType(0x00080000)
	Qt__WindowCancelButtonHint              = Qt__WindowType(0x00100000)
)

type Qt struct {
	ptr unsafe.Pointer
}

type Qt_ITF interface {
	Qt_PTR() *Qt
}

func (p *Qt) Qt_PTR() *Qt {
	return p
}

func (p *Qt) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *Qt) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQt(ptr Qt_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.Qt_PTR().Pointer()
	}
	return nil
}

func NewQtFromPointer(ptr unsafe.Pointer) *Qt {
	var n = new(Qt)
	n.SetPointer(ptr)
	return n
}

func (ptr *Qt) DestroyQt() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QtGlobalStatic::GuardValues
type QtGlobalStatic__GuardValues int64

const (
	QtGlobalStatic__Destroyed     = QtGlobalStatic__GuardValues(-2)
	QtGlobalStatic__Initialized   = QtGlobalStatic__GuardValues(-1)
	QtGlobalStatic__Uninitialized = QtGlobalStatic__GuardValues(0)
	QtGlobalStatic__Initializing  = QtGlobalStatic__GuardValues(1)
)

type QtGlobalStatic struct {
	ptr unsafe.Pointer
}

type QtGlobalStatic_ITF interface {
	QtGlobalStatic_PTR() *QtGlobalStatic
}

func (p *QtGlobalStatic) QtGlobalStatic_PTR() *QtGlobalStatic {
	return p
}

func (p *QtGlobalStatic) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QtGlobalStatic) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQtGlobalStatic(ptr QtGlobalStatic_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QtGlobalStatic_PTR().Pointer()
	}
	return nil
}

func NewQtGlobalStaticFromPointer(ptr unsafe.Pointer) *QtGlobalStatic {
	var n = new(QtGlobalStatic)
	n.SetPointer(ptr)
	return n
}

func (ptr *QtGlobalStatic) DestroyQtGlobalStatic() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}

//QtMetaTypePrivate::IteratorCapability
type QtMetaTypePrivate__IteratorCapability int64

const (
	QtMetaTypePrivate__ForwardCapability       = QtMetaTypePrivate__IteratorCapability(1)
	QtMetaTypePrivate__BiDirectionalCapability = QtMetaTypePrivate__IteratorCapability(2)
	QtMetaTypePrivate__RandomAccessCapability  = QtMetaTypePrivate__IteratorCapability(4)
)

type QtMetaTypePrivate struct {
	ptr unsafe.Pointer
}

type QtMetaTypePrivate_ITF interface {
	QtMetaTypePrivate_PTR() *QtMetaTypePrivate
}

func (p *QtMetaTypePrivate) QtMetaTypePrivate_PTR() *QtMetaTypePrivate {
	return p
}

func (p *QtMetaTypePrivate) Pointer() unsafe.Pointer {
	if p != nil {
		return p.ptr
	}
	return nil
}

func (p *QtMetaTypePrivate) SetPointer(ptr unsafe.Pointer) {
	if p != nil {
		p.ptr = ptr
	}
}

func PointerFromQtMetaTypePrivate(ptr QtMetaTypePrivate_ITF) unsafe.Pointer {
	if ptr != nil {
		return ptr.QtMetaTypePrivate_PTR().Pointer()
	}
	return nil
}

func NewQtMetaTypePrivateFromPointer(ptr unsafe.Pointer) *QtMetaTypePrivate {
	var n = new(QtMetaTypePrivate)
	n.SetPointer(ptr)
	return n
}

func (ptr *QtMetaTypePrivate) DestroyQtMetaTypePrivate() {
	C.free(ptr.Pointer())
	ptr.SetPointer(nil)
}
