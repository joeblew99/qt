// +build !minimal

#pragma once

#ifndef GO_QTQUICK_H
#define GO_QTQUICK_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

struct QtQuick_PackedString { char* data; long long len; };
struct QtQuick_PackedList { void* data; long long len; };
void* QQuickAsyncImageProvider_NewQQuickAsyncImageProvider();
void QQuickAsyncImageProvider_DestroyQQuickAsyncImageProvider(void* ptr);
void QQuickAsyncImageProvider_DestroyQQuickAsyncImageProviderDefault(void* ptr);
void* QQuickAsyncImageProvider_RequestImageResponse(void* ptr, char* id, void* requestedSize);
void* QQuickAsyncImageProvider_RequestImage(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickAsyncImageProvider_RequestImageDefault(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickAsyncImageProvider_RequestPixmap(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickAsyncImageProvider_RequestPixmapDefault(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickAsyncImageProvider_RequestTexture(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickAsyncImageProvider_RequestTextureDefault(void* ptr, char* id, void* size, void* requestedSize);
char QQuickFramebufferObject_MirrorVertically(void* ptr);
void QQuickFramebufferObject_SetMirrorVertically(void* ptr, char enable);
void QQuickFramebufferObject_SetTextureFollowsItemSize(void* ptr, char follows);
char QQuickFramebufferObject_TextureFollowsItemSize(void* ptr);
char QQuickFramebufferObject_IsTextureProvider(void* ptr);
char QQuickFramebufferObject_IsTextureProviderDefault(void* ptr);
void QQuickFramebufferObject_ConnectMirrorVerticallyChanged(void* ptr);
void QQuickFramebufferObject_DisconnectMirrorVerticallyChanged(void* ptr);
void QQuickFramebufferObject_MirrorVerticallyChanged(void* ptr, char vbo);
void QQuickFramebufferObject_ReleaseResources(void* ptr);
void QQuickFramebufferObject_ReleaseResourcesDefault(void* ptr);
void QQuickFramebufferObject_ConnectTextureFollowsItemSizeChanged(void* ptr);
void QQuickFramebufferObject_DisconnectTextureFollowsItemSizeChanged(void* ptr);
void QQuickFramebufferObject_TextureFollowsItemSizeChanged(void* ptr, char vbo);
void* QQuickFramebufferObject_TextureProvider(void* ptr);
void* QQuickFramebufferObject_TextureProviderDefault(void* ptr);
char QQuickFramebufferObject_ChildMouseEventFilter(void* ptr, void* item, void* event);
char QQuickFramebufferObject_ChildMouseEventFilterDefault(void* ptr, void* item, void* event);
char QQuickFramebufferObject_Contains(void* ptr, void* point);
char QQuickFramebufferObject_ContainsDefault(void* ptr, void* point);
void QQuickFramebufferObject_DragEnterEvent(void* ptr, void* event);
void QQuickFramebufferObject_DragEnterEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_DragLeaveEvent(void* ptr, void* event);
void QQuickFramebufferObject_DragLeaveEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_DragMoveEvent(void* ptr, void* event);
void QQuickFramebufferObject_DragMoveEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_DropEvent(void* ptr, void* event);
void QQuickFramebufferObject_DropEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_FocusInEvent(void* ptr, void* event);
void QQuickFramebufferObject_FocusInEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_FocusOutEvent(void* ptr, void* event);
void QQuickFramebufferObject_FocusOutEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_GeometryChanged(void* ptr, void* newGeometry, void* oldGeometry);
void QQuickFramebufferObject_GeometryChangedDefault(void* ptr, void* newGeometry, void* oldGeometry);
void QQuickFramebufferObject_HoverEnterEvent(void* ptr, void* event);
void QQuickFramebufferObject_HoverEnterEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_HoverLeaveEvent(void* ptr, void* event);
void QQuickFramebufferObject_HoverLeaveEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_HoverMoveEvent(void* ptr, void* event);
void QQuickFramebufferObject_HoverMoveEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_InputMethodEvent(void* ptr, void* event);
void QQuickFramebufferObject_InputMethodEventDefault(void* ptr, void* event);
void* QQuickFramebufferObject_InputMethodQuery(void* ptr, long long query);
void* QQuickFramebufferObject_InputMethodQueryDefault(void* ptr, long long query);
void QQuickFramebufferObject_KeyPressEvent(void* ptr, void* event);
void QQuickFramebufferObject_KeyPressEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_KeyReleaseEvent(void* ptr, void* event);
void QQuickFramebufferObject_KeyReleaseEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_MouseDoubleClickEvent(void* ptr, void* event);
void QQuickFramebufferObject_MouseDoubleClickEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_MouseMoveEvent(void* ptr, void* event);
void QQuickFramebufferObject_MouseMoveEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_MousePressEvent(void* ptr, void* event);
void QQuickFramebufferObject_MousePressEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_MouseReleaseEvent(void* ptr, void* event);
void QQuickFramebufferObject_MouseReleaseEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_MouseUngrabEvent(void* ptr);
void QQuickFramebufferObject_MouseUngrabEventDefault(void* ptr);
void QQuickFramebufferObject_TouchEvent(void* ptr, void* event);
void QQuickFramebufferObject_TouchEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_TouchUngrabEvent(void* ptr);
void QQuickFramebufferObject_TouchUngrabEventDefault(void* ptr);
void QQuickFramebufferObject_Update(void* ptr);
void QQuickFramebufferObject_UpdateDefault(void* ptr);
void QQuickFramebufferObject_UpdatePolish(void* ptr);
void QQuickFramebufferObject_UpdatePolishDefault(void* ptr);
void QQuickFramebufferObject_WheelEvent(void* ptr, void* event);
void QQuickFramebufferObject_WheelEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_TimerEvent(void* ptr, void* event);
void QQuickFramebufferObject_TimerEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_ChildEvent(void* ptr, void* event);
void QQuickFramebufferObject_ChildEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_ConnectNotify(void* ptr, void* sign);
void QQuickFramebufferObject_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickFramebufferObject_CustomEvent(void* ptr, void* event);
void QQuickFramebufferObject_CustomEventDefault(void* ptr, void* event);
void QQuickFramebufferObject_DeleteLater(void* ptr);
void QQuickFramebufferObject_DeleteLaterDefault(void* ptr);
void QQuickFramebufferObject_DisconnectNotify(void* ptr, void* sign);
void QQuickFramebufferObject_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickFramebufferObject_EventFilter(void* ptr, void* watched, void* event);
char QQuickFramebufferObject_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickFramebufferObject_MetaObject(void* ptr);
void* QQuickFramebufferObject_MetaObjectDefault(void* ptr);
void* QQuickImageProvider_NewQQuickImageProvider(long long ty, long long flags);
long long QQuickImageProvider_Flags(void* ptr);
long long QQuickImageProvider_ImageType(void* ptr);
void* QQuickImageProvider_RequestImage(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickImageProvider_RequestImageDefault(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickImageProvider_RequestPixmap(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickImageProvider_RequestPixmapDefault(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickImageProvider_RequestTexture(void* ptr, char* id, void* size, void* requestedSize);
void* QQuickImageProvider_RequestTextureDefault(void* ptr, char* id, void* size, void* requestedSize);
void QQuickImageProvider_DestroyQQuickImageProvider(void* ptr);
void QQuickImageProvider_DestroyQQuickImageProviderDefault(void* ptr);
void* QQuickImageResponse_NewQQuickImageResponse();
void QQuickImageResponse_Cancel(void* ptr);
void QQuickImageResponse_CancelDefault(void* ptr);
struct QtQuick_PackedString QQuickImageResponse_ErrorString(void* ptr);
struct QtQuick_PackedString QQuickImageResponse_ErrorStringDefault(void* ptr);
void QQuickImageResponse_ConnectFinished(void* ptr);
void QQuickImageResponse_DisconnectFinished(void* ptr);
void QQuickImageResponse_Finished(void* ptr);
void* QQuickImageResponse_TextureFactory(void* ptr);
void QQuickImageResponse_DestroyQQuickImageResponse(void* ptr);
void QQuickImageResponse_DestroyQQuickImageResponseDefault(void* ptr);
void QQuickImageResponse_TimerEvent(void* ptr, void* event);
void QQuickImageResponse_TimerEventDefault(void* ptr, void* event);
void QQuickImageResponse_ChildEvent(void* ptr, void* event);
void QQuickImageResponse_ChildEventDefault(void* ptr, void* event);
void QQuickImageResponse_ConnectNotify(void* ptr, void* sign);
void QQuickImageResponse_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickImageResponse_CustomEvent(void* ptr, void* event);
void QQuickImageResponse_CustomEventDefault(void* ptr, void* event);
void QQuickImageResponse_DeleteLater(void* ptr);
void QQuickImageResponse_DeleteLaterDefault(void* ptr);
void QQuickImageResponse_DisconnectNotify(void* ptr, void* sign);
void QQuickImageResponse_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickImageResponse_Event(void* ptr, void* e);
char QQuickImageResponse_EventDefault(void* ptr, void* e);
char QQuickImageResponse_EventFilter(void* ptr, void* watched, void* event);
char QQuickImageResponse_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickImageResponse_MetaObject(void* ptr);
void* QQuickImageResponse_MetaObjectDefault(void* ptr);
void* QQuickItem_NewQQuickItem(void* parent);
char QQuickItem_ActiveFocusOnTab(void* ptr);
char QQuickItem_Antialiasing(void* ptr);
double QQuickItem_BaselineOffset(void* ptr);
void* QQuickItem_ChildrenRect(void* ptr);
char QQuickItem_Clip(void* ptr);
char QQuickItem_HasActiveFocus(void* ptr);
char QQuickItem_HasFocus(void* ptr);
double QQuickItem_Height(void* ptr);
double QQuickItem_ImplicitHeight(void* ptr);
char QQuickItem_IsEnabled(void* ptr);
char QQuickItem_IsTextureProvider(void* ptr);
char QQuickItem_IsTextureProviderDefault(void* ptr);
char QQuickItem_IsVisible(void* ptr);
double QQuickItem_Opacity(void* ptr);
void* QQuickItem_ParentItem(void* ptr);
void QQuickItem_ResetAntialiasing(void* ptr);
void QQuickItem_ResetHeight(void* ptr);
void QQuickItem_ResetWidth(void* ptr);
double QQuickItem_Rotation(void* ptr);
double QQuickItem_Scale(void* ptr);
void QQuickItem_SetActiveFocusOnTab(void* ptr, char vbo);
void QQuickItem_SetAntialiasing(void* ptr, char vbo);
void QQuickItem_SetBaselineOffset(void* ptr, double vqr);
void QQuickItem_SetClip(void* ptr, char vbo);
void QQuickItem_SetEnabled(void* ptr, char vbo);
void QQuickItem_SetFocus(void* ptr, char vbo);
void QQuickItem_SetFocus2(void* ptr, char focus, long long reason);
void QQuickItem_SetHeight(void* ptr, double vqr);
void QQuickItem_SetImplicitHeight(void* ptr, double vqr);
void QQuickItem_SetImplicitWidth(void* ptr, double vqr);
void QQuickItem_SetOpacity(void* ptr, double vqr);
void QQuickItem_SetParentItem(void* ptr, void* parent);
void QQuickItem_SetRotation(void* ptr, double vqr);
void QQuickItem_SetScale(void* ptr, double vqr);
void QQuickItem_SetSmooth(void* ptr, char vbo);
void QQuickItem_SetState(void* ptr, char* vqs);
void QQuickItem_SetTransformOrigin(void* ptr, long long vtr);
void QQuickItem_SetVisible(void* ptr, char vbo);
void QQuickItem_SetWidth(void* ptr, double vqr);
void QQuickItem_SetX(void* ptr, double vqr);
void QQuickItem_SetY(void* ptr, double vqr);
void QQuickItem_SetZ(void* ptr, double vqr);
char QQuickItem_Smooth(void* ptr);
struct QtQuick_PackedString QQuickItem_State(void* ptr);
void* QQuickItem_TextureProvider(void* ptr);
void* QQuickItem_TextureProviderDefault(void* ptr);
long long QQuickItem_TransformOrigin(void* ptr);
double QQuickItem_Width(void* ptr);
double QQuickItem_X(void* ptr);
double QQuickItem_Y(void* ptr);
double QQuickItem_Z(void* ptr);
char QQuickItem_AcceptHoverEvents(void* ptr);
long long QQuickItem_AcceptedMouseButtons(void* ptr);
void* QQuickItem_ChildAt(void* ptr, double x, double y);
struct QtQuick_PackedList QQuickItem_ChildItems(void* ptr);
char QQuickItem_ChildMouseEventFilter(void* ptr, void* item, void* event);
char QQuickItem_ChildMouseEventFilterDefault(void* ptr, void* item, void* event);
void QQuickItem_ClassBegin(void* ptr);
void QQuickItem_ComponentComplete(void* ptr);
char QQuickItem_Contains(void* ptr, void* point);
char QQuickItem_ContainsDefault(void* ptr, void* point);
void* QQuickItem_Cursor(void* ptr);
void QQuickItem_DragEnterEvent(void* ptr, void* event);
void QQuickItem_DragEnterEventDefault(void* ptr, void* event);
void QQuickItem_DragLeaveEvent(void* ptr, void* event);
void QQuickItem_DragLeaveEventDefault(void* ptr, void* event);
void QQuickItem_DragMoveEvent(void* ptr, void* event);
void QQuickItem_DragMoveEventDefault(void* ptr, void* event);
void QQuickItem_DropEvent(void* ptr, void* event);
void QQuickItem_DropEventDefault(void* ptr, void* event);
char QQuickItem_Event(void* ptr, void* ev);
char QQuickItem_FiltersChildMouseEvents(void* ptr);
long long QQuickItem_Flags(void* ptr);
void QQuickItem_FocusInEvent(void* ptr, void* event);
void QQuickItem_FocusInEventDefault(void* ptr, void* event);
void QQuickItem_FocusOutEvent(void* ptr, void* event);
void QQuickItem_FocusOutEventDefault(void* ptr, void* event);
void QQuickItem_ForceActiveFocus(void* ptr);
void QQuickItem_ForceActiveFocus2(void* ptr, long long reason);
void QQuickItem_GeometryChanged(void* ptr, void* newGeometry, void* oldGeometry);
void QQuickItem_GeometryChangedDefault(void* ptr, void* newGeometry, void* oldGeometry);
void QQuickItem_GrabMouse(void* ptr);
char QQuickItem_HeightValid(void* ptr);
void QQuickItem_HoverEnterEvent(void* ptr, void* event);
void QQuickItem_HoverEnterEventDefault(void* ptr, void* event);
void QQuickItem_HoverLeaveEvent(void* ptr, void* event);
void QQuickItem_HoverLeaveEventDefault(void* ptr, void* event);
void QQuickItem_HoverMoveEvent(void* ptr, void* event);
void QQuickItem_HoverMoveEventDefault(void* ptr, void* event);
double QQuickItem_ImplicitWidth(void* ptr);
void QQuickItem_InputMethodEvent(void* ptr, void* event);
void QQuickItem_InputMethodEventDefault(void* ptr, void* event);
void* QQuickItem_InputMethodQuery(void* ptr, long long query);
void* QQuickItem_InputMethodQueryDefault(void* ptr, long long query);
char QQuickItem_IsAncestorOf(void* ptr, void* child);
char QQuickItem_IsComponentComplete(void* ptr);
char QQuickItem_IsFocusScope(void* ptr);
char QQuickItem_KeepMouseGrab(void* ptr);
char QQuickItem_KeepTouchGrab(void* ptr);
void QQuickItem_KeyPressEvent(void* ptr, void* event);
void QQuickItem_KeyPressEventDefault(void* ptr, void* event);
void QQuickItem_KeyReleaseEvent(void* ptr, void* event);
void QQuickItem_KeyReleaseEventDefault(void* ptr, void* event);
void* QQuickItem_MapFromGlobal(void* ptr, void* point);
void* QQuickItem_MapFromItem(void* ptr, void* item, void* point);
void* QQuickItem_MapFromScene(void* ptr, void* point);
void* QQuickItem_MapRectFromItem(void* ptr, void* item, void* rect);
void* QQuickItem_MapRectFromScene(void* ptr, void* rect);
void* QQuickItem_MapRectToItem(void* ptr, void* item, void* rect);
void* QQuickItem_MapRectToScene(void* ptr, void* rect);
void* QQuickItem_MapToGlobal(void* ptr, void* point);
void* QQuickItem_MapToItem(void* ptr, void* item, void* point);
void* QQuickItem_MapToScene(void* ptr, void* point);
void QQuickItem_MouseDoubleClickEvent(void* ptr, void* event);
void QQuickItem_MouseDoubleClickEventDefault(void* ptr, void* event);
void QQuickItem_MouseMoveEvent(void* ptr, void* event);
void QQuickItem_MouseMoveEventDefault(void* ptr, void* event);
void QQuickItem_MousePressEvent(void* ptr, void* event);
void QQuickItem_MousePressEventDefault(void* ptr, void* event);
void QQuickItem_MouseReleaseEvent(void* ptr, void* event);
void QQuickItem_MouseReleaseEventDefault(void* ptr, void* event);
void QQuickItem_MouseUngrabEvent(void* ptr);
void QQuickItem_MouseUngrabEventDefault(void* ptr);
void* QQuickItem_NextItemInFocusChain(void* ptr, char forward);
void QQuickItem_Polish(void* ptr);
void QQuickItem_ReleaseResources(void* ptr);
void QQuickItem_ReleaseResourcesDefault(void* ptr);
void* QQuickItem_ScopedFocusItem(void* ptr);
void QQuickItem_SetAcceptHoverEvents(void* ptr, char enabled);
void QQuickItem_SetAcceptedMouseButtons(void* ptr, long long buttons);
void QQuickItem_SetCursor(void* ptr, void* cursor);
void QQuickItem_SetFiltersChildMouseEvents(void* ptr, char filter);
void QQuickItem_SetFlag(void* ptr, long long flag, char enabled);
void QQuickItem_SetFlags(void* ptr, long long flags);
void QQuickItem_SetKeepMouseGrab(void* ptr, char keep);
void QQuickItem_SetKeepTouchGrab(void* ptr, char keep);
void QQuickItem_StackAfter(void* ptr, void* sibling);
void QQuickItem_StackBefore(void* ptr, void* sibling);
void QQuickItem_TouchEvent(void* ptr, void* event);
void QQuickItem_TouchEventDefault(void* ptr, void* event);
void QQuickItem_TouchUngrabEvent(void* ptr);
void QQuickItem_TouchUngrabEventDefault(void* ptr);
void QQuickItem_UngrabMouse(void* ptr);
void QQuickItem_UngrabTouchPoints(void* ptr);
void QQuickItem_UnsetCursor(void* ptr);
void QQuickItem_Update(void* ptr);
void QQuickItem_UpdateInputMethod(void* ptr, long long queries);
void QQuickItem_UpdatePolish(void* ptr);
void QQuickItem_UpdatePolishDefault(void* ptr);
void QQuickItem_WheelEvent(void* ptr, void* event);
void QQuickItem_WheelEventDefault(void* ptr, void* event);
char QQuickItem_WidthValid(void* ptr);
void* QQuickItem_Window(void* ptr);
void QQuickItem_ConnectWindowChanged(void* ptr);
void QQuickItem_DisconnectWindowChanged(void* ptr);
void QQuickItem_WindowChanged(void* ptr, void* window);
void QQuickItem_DestroyQQuickItem(void* ptr);
void QQuickItem_DestroyQQuickItemDefault(void* ptr);
void* QQuickItem_childItems_atList(void* ptr, int i);
void QQuickItem_TimerEvent(void* ptr, void* event);
void QQuickItem_TimerEventDefault(void* ptr, void* event);
void QQuickItem_ChildEvent(void* ptr, void* event);
void QQuickItem_ChildEventDefault(void* ptr, void* event);
void QQuickItem_ConnectNotify(void* ptr, void* sign);
void QQuickItem_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickItem_CustomEvent(void* ptr, void* event);
void QQuickItem_CustomEventDefault(void* ptr, void* event);
void QQuickItem_DeleteLater(void* ptr);
void QQuickItem_DeleteLaterDefault(void* ptr);
void QQuickItem_DisconnectNotify(void* ptr, void* sign);
void QQuickItem_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickItem_EventFilter(void* ptr, void* watched, void* event);
char QQuickItem_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickItem_MetaObject(void* ptr);
void* QQuickItem_MetaObjectDefault(void* ptr);
void* QQuickItemGrabResult_Image(void* ptr);
void* QQuickItemGrabResult_Url(void* ptr);
void QQuickItemGrabResult_ConnectReady(void* ptr);
void QQuickItemGrabResult_DisconnectReady(void* ptr);
void QQuickItemGrabResult_Ready(void* ptr);
char QQuickItemGrabResult_SaveToFile(void* ptr, char* fileName);
void QQuickItemGrabResult_TimerEvent(void* ptr, void* event);
void QQuickItemGrabResult_TimerEventDefault(void* ptr, void* event);
void QQuickItemGrabResult_ChildEvent(void* ptr, void* event);
void QQuickItemGrabResult_ChildEventDefault(void* ptr, void* event);
void QQuickItemGrabResult_ConnectNotify(void* ptr, void* sign);
void QQuickItemGrabResult_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickItemGrabResult_CustomEvent(void* ptr, void* event);
void QQuickItemGrabResult_CustomEventDefault(void* ptr, void* event);
void QQuickItemGrabResult_DeleteLater(void* ptr);
void QQuickItemGrabResult_DeleteLaterDefault(void* ptr);
void QQuickItemGrabResult_DisconnectNotify(void* ptr, void* sign);
void QQuickItemGrabResult_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickItemGrabResult_Event(void* ptr, void* e);
char QQuickItemGrabResult_EventDefault(void* ptr, void* e);
char QQuickItemGrabResult_EventFilter(void* ptr, void* watched, void* event);
char QQuickItemGrabResult_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickItemGrabResult_MetaObject(void* ptr);
void* QQuickItemGrabResult_MetaObjectDefault(void* ptr);
double QQuickPaintedItem_ContentsScale(void* ptr);
void* QQuickPaintedItem_ContentsSize(void* ptr);
void* QQuickPaintedItem_FillColor(void* ptr);
long long QQuickPaintedItem_RenderTarget(void* ptr);
void QQuickPaintedItem_SetContentsScale(void* ptr, double vqr);
void QQuickPaintedItem_SetContentsSize(void* ptr, void* vqs);
void QQuickPaintedItem_SetFillColor(void* ptr, void* vqc);
void QQuickPaintedItem_SetRenderTarget(void* ptr, long long target);
void QQuickPaintedItem_SetTextureSize(void* ptr, void* size);
void* QQuickPaintedItem_TextureSize(void* ptr);
void* QQuickPaintedItem_NewQQuickPaintedItem(void* parent);
char QQuickPaintedItem_Antialiasing(void* ptr);
void QQuickPaintedItem_ConnectContentsScaleChanged(void* ptr);
void QQuickPaintedItem_DisconnectContentsScaleChanged(void* ptr);
void QQuickPaintedItem_ContentsScaleChanged(void* ptr);
void QQuickPaintedItem_ConnectContentsSizeChanged(void* ptr);
void QQuickPaintedItem_DisconnectContentsSizeChanged(void* ptr);
void QQuickPaintedItem_ContentsSizeChanged(void* ptr);
void QQuickPaintedItem_ConnectFillColorChanged(void* ptr);
void QQuickPaintedItem_DisconnectFillColorChanged(void* ptr);
void QQuickPaintedItem_FillColorChanged(void* ptr);
char QQuickPaintedItem_IsTextureProvider(void* ptr);
char QQuickPaintedItem_IsTextureProviderDefault(void* ptr);
char QQuickPaintedItem_Mipmap(void* ptr);
char QQuickPaintedItem_OpaquePainting(void* ptr);
void QQuickPaintedItem_Paint(void* ptr, void* painter);
long long QQuickPaintedItem_PerformanceHints(void* ptr);
void QQuickPaintedItem_ReleaseResources(void* ptr);
void QQuickPaintedItem_ReleaseResourcesDefault(void* ptr);
void QQuickPaintedItem_ConnectRenderTargetChanged(void* ptr);
void QQuickPaintedItem_DisconnectRenderTargetChanged(void* ptr);
void QQuickPaintedItem_RenderTargetChanged(void* ptr);
void QQuickPaintedItem_SetAntialiasing(void* ptr, char enable);
void QQuickPaintedItem_SetMipmap(void* ptr, char enable);
void QQuickPaintedItem_SetOpaquePainting(void* ptr, char opaque);
void QQuickPaintedItem_SetPerformanceHint(void* ptr, long long hint, char enabled);
void QQuickPaintedItem_SetPerformanceHints(void* ptr, long long hints);
void* QQuickPaintedItem_TextureProvider(void* ptr);
void* QQuickPaintedItem_TextureProviderDefault(void* ptr);
void QQuickPaintedItem_ConnectTextureSizeChanged(void* ptr);
void QQuickPaintedItem_DisconnectTextureSizeChanged(void* ptr);
void QQuickPaintedItem_TextureSizeChanged(void* ptr);
void QQuickPaintedItem_Update(void* ptr, void* rect);
void QQuickPaintedItem_DestroyQQuickPaintedItem(void* ptr);
void QQuickPaintedItem_DestroyQQuickPaintedItemDefault(void* ptr);
char QQuickPaintedItem_ChildMouseEventFilter(void* ptr, void* item, void* event);
char QQuickPaintedItem_ChildMouseEventFilterDefault(void* ptr, void* item, void* event);
char QQuickPaintedItem_Contains(void* ptr, void* point);
char QQuickPaintedItem_ContainsDefault(void* ptr, void* point);
void QQuickPaintedItem_DragEnterEvent(void* ptr, void* event);
void QQuickPaintedItem_DragEnterEventDefault(void* ptr, void* event);
void QQuickPaintedItem_DragLeaveEvent(void* ptr, void* event);
void QQuickPaintedItem_DragLeaveEventDefault(void* ptr, void* event);
void QQuickPaintedItem_DragMoveEvent(void* ptr, void* event);
void QQuickPaintedItem_DragMoveEventDefault(void* ptr, void* event);
void QQuickPaintedItem_DropEvent(void* ptr, void* event);
void QQuickPaintedItem_DropEventDefault(void* ptr, void* event);
void QQuickPaintedItem_FocusInEvent(void* ptr, void* event);
void QQuickPaintedItem_FocusInEventDefault(void* ptr, void* event);
void QQuickPaintedItem_FocusOutEvent(void* ptr, void* event);
void QQuickPaintedItem_FocusOutEventDefault(void* ptr, void* event);
void QQuickPaintedItem_GeometryChanged(void* ptr, void* newGeometry, void* oldGeometry);
void QQuickPaintedItem_GeometryChangedDefault(void* ptr, void* newGeometry, void* oldGeometry);
void QQuickPaintedItem_HoverEnterEvent(void* ptr, void* event);
void QQuickPaintedItem_HoverEnterEventDefault(void* ptr, void* event);
void QQuickPaintedItem_HoverLeaveEvent(void* ptr, void* event);
void QQuickPaintedItem_HoverLeaveEventDefault(void* ptr, void* event);
void QQuickPaintedItem_HoverMoveEvent(void* ptr, void* event);
void QQuickPaintedItem_HoverMoveEventDefault(void* ptr, void* event);
void QQuickPaintedItem_InputMethodEvent(void* ptr, void* event);
void QQuickPaintedItem_InputMethodEventDefault(void* ptr, void* event);
void* QQuickPaintedItem_InputMethodQuery(void* ptr, long long query);
void* QQuickPaintedItem_InputMethodQueryDefault(void* ptr, long long query);
void QQuickPaintedItem_KeyPressEvent(void* ptr, void* event);
void QQuickPaintedItem_KeyPressEventDefault(void* ptr, void* event);
void QQuickPaintedItem_KeyReleaseEvent(void* ptr, void* event);
void QQuickPaintedItem_KeyReleaseEventDefault(void* ptr, void* event);
void QQuickPaintedItem_MouseDoubleClickEvent(void* ptr, void* event);
void QQuickPaintedItem_MouseDoubleClickEventDefault(void* ptr, void* event);
void QQuickPaintedItem_MouseMoveEvent(void* ptr, void* event);
void QQuickPaintedItem_MouseMoveEventDefault(void* ptr, void* event);
void QQuickPaintedItem_MousePressEvent(void* ptr, void* event);
void QQuickPaintedItem_MousePressEventDefault(void* ptr, void* event);
void QQuickPaintedItem_MouseReleaseEvent(void* ptr, void* event);
void QQuickPaintedItem_MouseReleaseEventDefault(void* ptr, void* event);
void QQuickPaintedItem_MouseUngrabEvent(void* ptr);
void QQuickPaintedItem_MouseUngrabEventDefault(void* ptr);
void QQuickPaintedItem_TouchEvent(void* ptr, void* event);
void QQuickPaintedItem_TouchEventDefault(void* ptr, void* event);
void QQuickPaintedItem_TouchUngrabEvent(void* ptr);
void QQuickPaintedItem_TouchUngrabEventDefault(void* ptr);
void QQuickPaintedItem_UpdatePolish(void* ptr);
void QQuickPaintedItem_UpdatePolishDefault(void* ptr);
void QQuickPaintedItem_WheelEvent(void* ptr, void* event);
void QQuickPaintedItem_WheelEventDefault(void* ptr, void* event);
void QQuickPaintedItem_TimerEvent(void* ptr, void* event);
void QQuickPaintedItem_TimerEventDefault(void* ptr, void* event);
void QQuickPaintedItem_ChildEvent(void* ptr, void* event);
void QQuickPaintedItem_ChildEventDefault(void* ptr, void* event);
void QQuickPaintedItem_ConnectNotify(void* ptr, void* sign);
void QQuickPaintedItem_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickPaintedItem_CustomEvent(void* ptr, void* event);
void QQuickPaintedItem_CustomEventDefault(void* ptr, void* event);
void QQuickPaintedItem_DeleteLater(void* ptr);
void QQuickPaintedItem_DeleteLaterDefault(void* ptr);
void QQuickPaintedItem_DisconnectNotify(void* ptr, void* sign);
void QQuickPaintedItem_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickPaintedItem_EventFilter(void* ptr, void* watched, void* event);
char QQuickPaintedItem_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickPaintedItem_MetaObject(void* ptr);
void* QQuickPaintedItem_MetaObjectDefault(void* ptr);
void* QQuickRenderControl_NewQQuickRenderControl(void* parent);
void* QQuickRenderControl_Grab(void* ptr);
void QQuickRenderControl_Initialize(void* ptr, void* gl);
void QQuickRenderControl_Invalidate(void* ptr);
void QQuickRenderControl_PolishItems(void* ptr);
void QQuickRenderControl_PrepareThread(void* ptr, void* targetThread);
void QQuickRenderControl_Render(void* ptr);
void QQuickRenderControl_ConnectRenderRequested(void* ptr);
void QQuickRenderControl_DisconnectRenderRequested(void* ptr);
void QQuickRenderControl_RenderRequested(void* ptr);
void* QQuickRenderControl_RenderWindow(void* ptr, void* offset);
void* QQuickRenderControl_RenderWindowDefault(void* ptr, void* offset);
void* QQuickRenderControl_QQuickRenderControl_RenderWindowFor(void* win, void* offset);
void QQuickRenderControl_ConnectSceneChanged(void* ptr);
void QQuickRenderControl_DisconnectSceneChanged(void* ptr);
void QQuickRenderControl_SceneChanged(void* ptr);
char QQuickRenderControl_Sync(void* ptr);
void QQuickRenderControl_DestroyQQuickRenderControl(void* ptr);
void QQuickRenderControl_TimerEvent(void* ptr, void* event);
void QQuickRenderControl_TimerEventDefault(void* ptr, void* event);
void QQuickRenderControl_ChildEvent(void* ptr, void* event);
void QQuickRenderControl_ChildEventDefault(void* ptr, void* event);
void QQuickRenderControl_ConnectNotify(void* ptr, void* sign);
void QQuickRenderControl_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickRenderControl_CustomEvent(void* ptr, void* event);
void QQuickRenderControl_CustomEventDefault(void* ptr, void* event);
void QQuickRenderControl_DeleteLater(void* ptr);
void QQuickRenderControl_DeleteLaterDefault(void* ptr);
void QQuickRenderControl_DisconnectNotify(void* ptr, void* sign);
void QQuickRenderControl_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickRenderControl_Event(void* ptr, void* e);
char QQuickRenderControl_EventDefault(void* ptr, void* e);
char QQuickRenderControl_EventFilter(void* ptr, void* watched, void* event);
char QQuickRenderControl_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickRenderControl_MetaObject(void* ptr);
void* QQuickRenderControl_MetaObjectDefault(void* ptr);
void* QQuickTextDocument_NewQQuickTextDocument(void* parent);
void* QQuickTextDocument_TextDocument(void* ptr);
void QQuickTextDocument_TimerEvent(void* ptr, void* event);
void QQuickTextDocument_TimerEventDefault(void* ptr, void* event);
void QQuickTextDocument_ChildEvent(void* ptr, void* event);
void QQuickTextDocument_ChildEventDefault(void* ptr, void* event);
void QQuickTextDocument_ConnectNotify(void* ptr, void* sign);
void QQuickTextDocument_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickTextDocument_CustomEvent(void* ptr, void* event);
void QQuickTextDocument_CustomEventDefault(void* ptr, void* event);
void QQuickTextDocument_DeleteLater(void* ptr);
void QQuickTextDocument_DeleteLaterDefault(void* ptr);
void QQuickTextDocument_DisconnectNotify(void* ptr, void* sign);
void QQuickTextDocument_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickTextDocument_Event(void* ptr, void* e);
char QQuickTextDocument_EventDefault(void* ptr, void* e);
char QQuickTextDocument_EventFilter(void* ptr, void* watched, void* event);
char QQuickTextDocument_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickTextDocument_MetaObject(void* ptr);
void* QQuickTextDocument_MetaObjectDefault(void* ptr);
void* QQuickTextureFactory_Image(void* ptr);
void* QQuickTextureFactory_ImageDefault(void* ptr);
void* QQuickTextureFactory_NewQQuickTextureFactory();
void* QQuickTextureFactory_CreateTexture(void* ptr, void* window);
int QQuickTextureFactory_TextureByteCount(void* ptr);
void* QQuickTextureFactory_QQuickTextureFactory_TextureFactoryForImage(void* image);
void* QQuickTextureFactory_TextureSize(void* ptr);
void QQuickTextureFactory_DestroyQQuickTextureFactory(void* ptr);
void QQuickTextureFactory_DestroyQQuickTextureFactoryDefault(void* ptr);
void QQuickTextureFactory_TimerEvent(void* ptr, void* event);
void QQuickTextureFactory_TimerEventDefault(void* ptr, void* event);
void QQuickTextureFactory_ChildEvent(void* ptr, void* event);
void QQuickTextureFactory_ChildEventDefault(void* ptr, void* event);
void QQuickTextureFactory_ConnectNotify(void* ptr, void* sign);
void QQuickTextureFactory_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickTextureFactory_CustomEvent(void* ptr, void* event);
void QQuickTextureFactory_CustomEventDefault(void* ptr, void* event);
void QQuickTextureFactory_DeleteLater(void* ptr);
void QQuickTextureFactory_DeleteLaterDefault(void* ptr);
void QQuickTextureFactory_DisconnectNotify(void* ptr, void* sign);
void QQuickTextureFactory_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickTextureFactory_Event(void* ptr, void* e);
char QQuickTextureFactory_EventDefault(void* ptr, void* e);
char QQuickTextureFactory_EventFilter(void* ptr, void* watched, void* event);
char QQuickTextureFactory_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickTextureFactory_MetaObject(void* ptr);
void* QQuickTextureFactory_MetaObjectDefault(void* ptr);
long long QQuickView_ResizeMode(void* ptr);
void QQuickView_SetResizeMode(void* ptr, long long vre);
long long QQuickView_Status(void* ptr);
void* QQuickView_NewQQuickView2(void* engine, void* parent);
void* QQuickView_NewQQuickView(void* parent);
void* QQuickView_NewQQuickView3(void* source, void* parent);
void* QQuickView_Engine(void* ptr);
struct QtQuick_PackedList QQuickView_Errors(void* ptr);
void* QQuickView_InitialSize(void* ptr);
void QQuickView_KeyPressEvent(void* ptr, void* e);
void QQuickView_KeyReleaseEvent(void* ptr, void* e);
void QQuickView_MouseMoveEvent(void* ptr, void* e);
void QQuickView_MousePressEvent(void* ptr, void* e);
void QQuickView_MouseReleaseEvent(void* ptr, void* e);
void* QQuickView_RootContext(void* ptr);
void* QQuickView_RootObject(void* ptr);
void QQuickView_SetSource(void* ptr, void* url);
void* QQuickView_Source(void* ptr);
void QQuickView_ConnectStatusChanged(void* ptr);
void QQuickView_DisconnectStatusChanged(void* ptr);
void QQuickView_StatusChanged(void* ptr, long long status);
void QQuickView_DestroyQQuickView(void* ptr);
void QQuickView_DestroyQQuickViewDefault(void* ptr);
void* QQuickView_errors_atList(void* ptr, int i);
void QQuickView_ReleaseResources(void* ptr);
void QQuickView_ReleaseResourcesDefault(void* ptr);
void QQuickView_Update(void* ptr);
void QQuickView_UpdateDefault(void* ptr);
void QQuickView_SetHeight(void* ptr, int arg);
void QQuickView_SetHeightDefault(void* ptr, int arg);
void QQuickView_SetMaximumHeight(void* ptr, int h);
void QQuickView_SetMaximumHeightDefault(void* ptr, int h);
void QQuickView_SetMaximumWidth(void* ptr, int w);
void QQuickView_SetMaximumWidthDefault(void* ptr, int w);
void QQuickView_SetMinimumHeight(void* ptr, int h);
void QQuickView_SetMinimumHeightDefault(void* ptr, int h);
void QQuickView_SetMinimumWidth(void* ptr, int w);
void QQuickView_SetMinimumWidthDefault(void* ptr, int w);
void QQuickView_SetTitle(void* ptr, char* vqs);
void QQuickView_SetTitleDefault(void* ptr, char* vqs);
void QQuickView_SetVisible(void* ptr, char visible);
void QQuickView_SetVisibleDefault(void* ptr, char visible);
void QQuickView_SetWidth(void* ptr, int arg);
void QQuickView_SetWidthDefault(void* ptr, int arg);
void QQuickView_SetX(void* ptr, int arg);
void QQuickView_SetXDefault(void* ptr, int arg);
void QQuickView_SetY(void* ptr, int arg);
void QQuickView_SetYDefault(void* ptr, int arg);
void QQuickView_Alert(void* ptr, int msec);
void QQuickView_AlertDefault(void* ptr, int msec);
char QQuickView_Close(void* ptr);
char QQuickView_CloseDefault(void* ptr);
void* QQuickView_FocusObject(void* ptr);
void* QQuickView_FocusObjectDefault(void* ptr);
void* QQuickView_Format(void* ptr);
void* QQuickView_FormatDefault(void* ptr);
void QQuickView_Hide(void* ptr);
void QQuickView_HideDefault(void* ptr);
void QQuickView_Lower(void* ptr);
void QQuickView_LowerDefault(void* ptr);
void QQuickView_MoveEvent(void* ptr, void* ev);
void QQuickView_MoveEventDefault(void* ptr, void* ev);
char QQuickView_NativeEvent(void* ptr, void* eventType, void* message, long result);
char QQuickView_NativeEventDefault(void* ptr, void* eventType, void* message, long result);
void QQuickView_Raise(void* ptr);
void QQuickView_RaiseDefault(void* ptr);
void QQuickView_RequestActivate(void* ptr);
void QQuickView_RequestActivateDefault(void* ptr);
void QQuickView_RequestUpdate(void* ptr);
void QQuickView_RequestUpdateDefault(void* ptr);
void QQuickView_Show(void* ptr);
void QQuickView_ShowDefault(void* ptr);
void QQuickView_ShowFullScreen(void* ptr);
void QQuickView_ShowFullScreenDefault(void* ptr);
void QQuickView_ShowMaximized(void* ptr);
void QQuickView_ShowMaximizedDefault(void* ptr);
void QQuickView_ShowMinimized(void* ptr);
void QQuickView_ShowMinimizedDefault(void* ptr);
void QQuickView_ShowNormal(void* ptr);
void QQuickView_ShowNormalDefault(void* ptr);
void* QQuickView_Size(void* ptr);
void* QQuickView_SizeDefault(void* ptr);
long long QQuickView_SurfaceType(void* ptr);
long long QQuickView_SurfaceTypeDefault(void* ptr);
void QQuickView_TabletEvent(void* ptr, void* ev);
void QQuickView_TabletEventDefault(void* ptr, void* ev);
void QQuickView_TouchEvent(void* ptr, void* ev);
void QQuickView_TouchEventDefault(void* ptr, void* ev);
void QQuickView_TimerEvent(void* ptr, void* event);
void QQuickView_TimerEventDefault(void* ptr, void* event);
void QQuickView_ChildEvent(void* ptr, void* event);
void QQuickView_ChildEventDefault(void* ptr, void* event);
void QQuickView_ConnectNotify(void* ptr, void* sign);
void QQuickView_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickView_CustomEvent(void* ptr, void* event);
void QQuickView_CustomEventDefault(void* ptr, void* event);
void QQuickView_DeleteLater(void* ptr);
void QQuickView_DeleteLaterDefault(void* ptr);
void QQuickView_DisconnectNotify(void* ptr, void* sign);
void QQuickView_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickView_EventFilter(void* ptr, void* watched, void* event);
char QQuickView_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickView_MetaObject(void* ptr);
void* QQuickView_MetaObjectDefault(void* ptr);
long long QQuickWidget_ResizeMode(void* ptr);
void QQuickWidget_SetResizeMode(void* ptr, long long vre);
long long QQuickWidget_Status(void* ptr);
void* QQuickWidget_NewQQuickWidget2(void* engine, void* parent);
void* QQuickWidget_NewQQuickWidget(void* parent);
void* QQuickWidget_NewQQuickWidget3(void* source, void* parent);
void QQuickWidget_DragEnterEvent(void* ptr, void* e);
void QQuickWidget_DragEnterEventDefault(void* ptr, void* e);
void QQuickWidget_DragLeaveEvent(void* ptr, void* e);
void QQuickWidget_DragLeaveEventDefault(void* ptr, void* e);
void QQuickWidget_DragMoveEvent(void* ptr, void* e);
void QQuickWidget_DragMoveEventDefault(void* ptr, void* e);
void QQuickWidget_DropEvent(void* ptr, void* e);
void QQuickWidget_DropEventDefault(void* ptr, void* e);
void* QQuickWidget_Engine(void* ptr);
struct QtQuick_PackedList QQuickWidget_Errors(void* ptr);
char QQuickWidget_Event(void* ptr, void* e);
void QQuickWidget_FocusInEvent(void* ptr, void* event);
void QQuickWidget_FocusInEventDefault(void* ptr, void* event);
void QQuickWidget_FocusOutEvent(void* ptr, void* event);
void QQuickWidget_FocusOutEventDefault(void* ptr, void* event);
void* QQuickWidget_Format(void* ptr);
void* QQuickWidget_GrabFramebuffer(void* ptr);
void QQuickWidget_HideEvent(void* ptr, void* vqh);
void QQuickWidget_HideEventDefault(void* ptr, void* vqh);
void* QQuickWidget_InitialSize(void* ptr);
void QQuickWidget_KeyPressEvent(void* ptr, void* e);
void QQuickWidget_KeyPressEventDefault(void* ptr, void* e);
void QQuickWidget_KeyReleaseEvent(void* ptr, void* e);
void QQuickWidget_KeyReleaseEventDefault(void* ptr, void* e);
void QQuickWidget_MouseDoubleClickEvent(void* ptr, void* e);
void QQuickWidget_MouseDoubleClickEventDefault(void* ptr, void* e);
void QQuickWidget_MouseMoveEvent(void* ptr, void* e);
void QQuickWidget_MouseMoveEventDefault(void* ptr, void* e);
void QQuickWidget_MousePressEvent(void* ptr, void* e);
void QQuickWidget_MousePressEventDefault(void* ptr, void* e);
void QQuickWidget_MouseReleaseEvent(void* ptr, void* e);
void QQuickWidget_MouseReleaseEventDefault(void* ptr, void* e);
void* QQuickWidget_QuickWindow(void* ptr);
void* QQuickWidget_RootContext(void* ptr);
void* QQuickWidget_RootObject(void* ptr);
void QQuickWidget_ConnectSceneGraphError(void* ptr);
void QQuickWidget_DisconnectSceneGraphError(void* ptr);
void QQuickWidget_SceneGraphError(void* ptr, long long error, char* message);
void QQuickWidget_SetClearColor(void* ptr, void* color);
void QQuickWidget_SetFormat(void* ptr, void* format);
void QQuickWidget_SetSource(void* ptr, void* url);
void QQuickWidget_ShowEvent(void* ptr, void* vqs);
void QQuickWidget_ShowEventDefault(void* ptr, void* vqs);
void QQuickWidget_ConnectStatusChanged(void* ptr);
void QQuickWidget_DisconnectStatusChanged(void* ptr);
void QQuickWidget_StatusChanged(void* ptr, long long status);
void* QQuickWidget_Source(void* ptr);
void QQuickWidget_WheelEvent(void* ptr, void* e);
void QQuickWidget_WheelEventDefault(void* ptr, void* e);
void QQuickWidget_DestroyQQuickWidget(void* ptr);
void QQuickWidget_DestroyQQuickWidgetDefault(void* ptr);
void* QQuickWidget_errors_atList(void* ptr, int i);
void QQuickWidget_ActionEvent(void* ptr, void* event);
void QQuickWidget_ActionEventDefault(void* ptr, void* event);
void QQuickWidget_EnterEvent(void* ptr, void* event);
void QQuickWidget_EnterEventDefault(void* ptr, void* event);
void QQuickWidget_LeaveEvent(void* ptr, void* event);
void QQuickWidget_LeaveEventDefault(void* ptr, void* event);
void* QQuickWidget_MinimumSizeHint(void* ptr);
void* QQuickWidget_MinimumSizeHintDefault(void* ptr);
void QQuickWidget_MoveEvent(void* ptr, void* event);
void QQuickWidget_MoveEventDefault(void* ptr, void* event);
void QQuickWidget_PaintEvent(void* ptr, void* event);
void QQuickWidget_PaintEventDefault(void* ptr, void* event);
void QQuickWidget_SetEnabled(void* ptr, char vbo);
void QQuickWidget_SetEnabledDefault(void* ptr, char vbo);
void QQuickWidget_SetStyleSheet(void* ptr, char* styleSheet);
void QQuickWidget_SetStyleSheetDefault(void* ptr, char* styleSheet);
void QQuickWidget_SetVisible(void* ptr, char visible);
void QQuickWidget_SetVisibleDefault(void* ptr, char visible);
void QQuickWidget_SetWindowModified(void* ptr, char vbo);
void QQuickWidget_SetWindowModifiedDefault(void* ptr, char vbo);
void QQuickWidget_SetWindowTitle(void* ptr, char* vqs);
void QQuickWidget_SetWindowTitleDefault(void* ptr, char* vqs);
void* QQuickWidget_SizeHint(void* ptr);
void* QQuickWidget_SizeHintDefault(void* ptr);
void QQuickWidget_ChangeEvent(void* ptr, void* event);
void QQuickWidget_ChangeEventDefault(void* ptr, void* event);
char QQuickWidget_Close(void* ptr);
char QQuickWidget_CloseDefault(void* ptr);
void QQuickWidget_CloseEvent(void* ptr, void* event);
void QQuickWidget_CloseEventDefault(void* ptr, void* event);
void QQuickWidget_ContextMenuEvent(void* ptr, void* event);
void QQuickWidget_ContextMenuEventDefault(void* ptr, void* event);
char QQuickWidget_FocusNextPrevChild(void* ptr, char next);
char QQuickWidget_FocusNextPrevChildDefault(void* ptr, char next);
char QQuickWidget_HasHeightForWidth(void* ptr);
char QQuickWidget_HasHeightForWidthDefault(void* ptr);
int QQuickWidget_HeightForWidth(void* ptr, int w);
int QQuickWidget_HeightForWidthDefault(void* ptr, int w);
void QQuickWidget_Hide(void* ptr);
void QQuickWidget_HideDefault(void* ptr);
void QQuickWidget_InputMethodEvent(void* ptr, void* event);
void QQuickWidget_InputMethodEventDefault(void* ptr, void* event);
void* QQuickWidget_InputMethodQuery(void* ptr, long long query);
void* QQuickWidget_InputMethodQueryDefault(void* ptr, long long query);
void QQuickWidget_Lower(void* ptr);
void QQuickWidget_LowerDefault(void* ptr);
char QQuickWidget_NativeEvent(void* ptr, void* eventType, void* message, long result);
char QQuickWidget_NativeEventDefault(void* ptr, void* eventType, void* message, long result);
void QQuickWidget_Raise(void* ptr);
void QQuickWidget_RaiseDefault(void* ptr);
void QQuickWidget_Repaint(void* ptr);
void QQuickWidget_RepaintDefault(void* ptr);
void QQuickWidget_ResizeEvent(void* ptr, void* event);
void QQuickWidget_ResizeEventDefault(void* ptr, void* event);
void QQuickWidget_SetDisabled(void* ptr, char disable);
void QQuickWidget_SetDisabledDefault(void* ptr, char disable);
void QQuickWidget_SetFocus2(void* ptr);
void QQuickWidget_SetFocus2Default(void* ptr);
void QQuickWidget_SetHidden(void* ptr, char hidden);
void QQuickWidget_SetHiddenDefault(void* ptr, char hidden);
void QQuickWidget_Show(void* ptr);
void QQuickWidget_ShowDefault(void* ptr);
void QQuickWidget_ShowFullScreen(void* ptr);
void QQuickWidget_ShowFullScreenDefault(void* ptr);
void QQuickWidget_ShowMaximized(void* ptr);
void QQuickWidget_ShowMaximizedDefault(void* ptr);
void QQuickWidget_ShowMinimized(void* ptr);
void QQuickWidget_ShowMinimizedDefault(void* ptr);
void QQuickWidget_ShowNormal(void* ptr);
void QQuickWidget_ShowNormalDefault(void* ptr);
void QQuickWidget_TabletEvent(void* ptr, void* event);
void QQuickWidget_TabletEventDefault(void* ptr, void* event);
void QQuickWidget_Update(void* ptr);
void QQuickWidget_UpdateDefault(void* ptr);
void QQuickWidget_UpdateMicroFocus(void* ptr);
void QQuickWidget_UpdateMicroFocusDefault(void* ptr);
void QQuickWidget_TimerEvent(void* ptr, void* event);
void QQuickWidget_TimerEventDefault(void* ptr, void* event);
void QQuickWidget_ChildEvent(void* ptr, void* event);
void QQuickWidget_ChildEventDefault(void* ptr, void* event);
void QQuickWidget_ConnectNotify(void* ptr, void* sign);
void QQuickWidget_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickWidget_CustomEvent(void* ptr, void* event);
void QQuickWidget_CustomEventDefault(void* ptr, void* event);
void QQuickWidget_DeleteLater(void* ptr);
void QQuickWidget_DeleteLaterDefault(void* ptr);
void QQuickWidget_DisconnectNotify(void* ptr, void* sign);
void QQuickWidget_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickWidget_EventFilter(void* ptr, void* watched, void* event);
char QQuickWidget_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickWidget_MetaObject(void* ptr);
void* QQuickWidget_MetaObjectDefault(void* ptr);
void* QQuickWindow_ActiveFocusItem(void* ptr);
void* QQuickWindow_Color(void* ptr);
void* QQuickWindow_ContentItem(void* ptr);
void QQuickWindow_SetColor(void* ptr, void* color);
void* QQuickWindow_NewQQuickWindow(void* parent);
void* QQuickWindow_AccessibleRoot(void* ptr);
void QQuickWindow_ConnectActiveFocusItemChanged(void* ptr);
void QQuickWindow_DisconnectActiveFocusItemChanged(void* ptr);
void QQuickWindow_ActiveFocusItemChanged(void* ptr);
void QQuickWindow_ConnectAfterAnimating(void* ptr);
void QQuickWindow_DisconnectAfterAnimating(void* ptr);
void QQuickWindow_AfterAnimating(void* ptr);
void QQuickWindow_ConnectAfterRendering(void* ptr);
void QQuickWindow_DisconnectAfterRendering(void* ptr);
void QQuickWindow_AfterRendering(void* ptr);
void QQuickWindow_ConnectAfterSynchronizing(void* ptr);
void QQuickWindow_DisconnectAfterSynchronizing(void* ptr);
void QQuickWindow_AfterSynchronizing(void* ptr);
void QQuickWindow_ConnectBeforeRendering(void* ptr);
void QQuickWindow_DisconnectBeforeRendering(void* ptr);
void QQuickWindow_BeforeRendering(void* ptr);
void QQuickWindow_ConnectBeforeSynchronizing(void* ptr);
void QQuickWindow_DisconnectBeforeSynchronizing(void* ptr);
void QQuickWindow_BeforeSynchronizing(void* ptr);
char QQuickWindow_ClearBeforeRendering(void* ptr);
void QQuickWindow_ConnectColorChanged(void* ptr);
void QQuickWindow_DisconnectColorChanged(void* ptr);
void QQuickWindow_ColorChanged(void* ptr, void* vqc);
void* QQuickWindow_CreateTextureFromId(void* ptr, unsigned int id, void* size, long long options);
void* QQuickWindow_CreateTextureFromImage2(void* ptr, void* image);
void* QQuickWindow_CreateTextureFromImage(void* ptr, void* image, long long options);
double QQuickWindow_EffectiveDevicePixelRatio(void* ptr);
char QQuickWindow_Event(void* ptr, void* e);
void QQuickWindow_ExposeEvent(void* ptr, void* vqe);
void QQuickWindow_FocusInEvent(void* ptr, void* ev);
void QQuickWindow_FocusOutEvent(void* ptr, void* ev);
void QQuickWindow_ConnectFrameSwapped(void* ptr);
void QQuickWindow_DisconnectFrameSwapped(void* ptr);
void QQuickWindow_FrameSwapped(void* ptr);
void* QQuickWindow_GrabWindow(void* ptr);
char QQuickWindow_QQuickWindow_HasDefaultAlphaBuffer();
void QQuickWindow_HideEvent(void* ptr, void* vqh);
void* QQuickWindow_IncubationController(void* ptr);
char QQuickWindow_IsPersistentOpenGLContext(void* ptr);
char QQuickWindow_IsPersistentSceneGraph(void* ptr);
char QQuickWindow_IsSceneGraphInitialized(void* ptr);
void QQuickWindow_KeyPressEvent(void* ptr, void* e);
void QQuickWindow_KeyReleaseEvent(void* ptr, void* e);
void QQuickWindow_MouseDoubleClickEvent(void* ptr, void* event);
void* QQuickWindow_MouseGrabberItem(void* ptr);
void QQuickWindow_MouseMoveEvent(void* ptr, void* event);
void QQuickWindow_MousePressEvent(void* ptr, void* event);
void QQuickWindow_MouseReleaseEvent(void* ptr, void* event);
void* QQuickWindow_OpenglContext(void* ptr);
void QQuickWindow_ConnectOpenglContextCreated(void* ptr);
void QQuickWindow_DisconnectOpenglContextCreated(void* ptr);
void QQuickWindow_OpenglContextCreated(void* ptr, void* context);
void QQuickWindow_ReleaseResources(void* ptr);
void* QQuickWindow_RenderTarget(void* ptr);
unsigned int QQuickWindow_RenderTargetId(void* ptr);
void* QQuickWindow_RenderTargetSize(void* ptr);
void QQuickWindow_ResetOpenGLState(void* ptr);
void QQuickWindow_ResizeEvent(void* ptr, void* ev);
void QQuickWindow_ConnectSceneGraphAboutToStop(void* ptr);
void QQuickWindow_DisconnectSceneGraphAboutToStop(void* ptr);
void QQuickWindow_SceneGraphAboutToStop(void* ptr);
void QQuickWindow_ConnectSceneGraphError(void* ptr);
void QQuickWindow_DisconnectSceneGraphError(void* ptr);
void QQuickWindow_SceneGraphError(void* ptr, long long error, char* message);
void QQuickWindow_ConnectSceneGraphInitialized(void* ptr);
void QQuickWindow_DisconnectSceneGraphInitialized(void* ptr);
void QQuickWindow_SceneGraphInitialized(void* ptr);
void QQuickWindow_ConnectSceneGraphInvalidated(void* ptr);
void QQuickWindow_DisconnectSceneGraphInvalidated(void* ptr);
void QQuickWindow_SceneGraphInvalidated(void* ptr);
void QQuickWindow_ScheduleRenderJob(void* ptr, void* job, long long stage);
char QQuickWindow_SendEvent(void* ptr, void* item, void* e);
void QQuickWindow_SetClearBeforeRendering(void* ptr, char enabled);
void QQuickWindow_QQuickWindow_SetDefaultAlphaBuffer(char useAlpha);
void QQuickWindow_SetPersistentOpenGLContext(void* ptr, char persistent);
void QQuickWindow_SetPersistentSceneGraph(void* ptr, char persistent);
void QQuickWindow_SetRenderTarget(void* ptr, void* fbo);
void QQuickWindow_SetRenderTarget2(void* ptr, unsigned int fboId, void* size);
void QQuickWindow_ShowEvent(void* ptr, void* vqs);
void QQuickWindow_Update(void* ptr);
void QQuickWindow_WheelEvent(void* ptr, void* event);
void QQuickWindow_DestroyQQuickWindow(void* ptr);
void QQuickWindow_DestroyQQuickWindowDefault(void* ptr);
void QQuickWindow_SetHeight(void* ptr, int arg);
void QQuickWindow_SetHeightDefault(void* ptr, int arg);
void QQuickWindow_SetMaximumHeight(void* ptr, int h);
void QQuickWindow_SetMaximumHeightDefault(void* ptr, int h);
void QQuickWindow_SetMaximumWidth(void* ptr, int w);
void QQuickWindow_SetMaximumWidthDefault(void* ptr, int w);
void QQuickWindow_SetMinimumHeight(void* ptr, int h);
void QQuickWindow_SetMinimumHeightDefault(void* ptr, int h);
void QQuickWindow_SetMinimumWidth(void* ptr, int w);
void QQuickWindow_SetMinimumWidthDefault(void* ptr, int w);
void QQuickWindow_SetTitle(void* ptr, char* vqs);
void QQuickWindow_SetTitleDefault(void* ptr, char* vqs);
void QQuickWindow_SetVisible(void* ptr, char visible);
void QQuickWindow_SetVisibleDefault(void* ptr, char visible);
void QQuickWindow_SetWidth(void* ptr, int arg);
void QQuickWindow_SetWidthDefault(void* ptr, int arg);
void QQuickWindow_SetX(void* ptr, int arg);
void QQuickWindow_SetXDefault(void* ptr, int arg);
void QQuickWindow_SetY(void* ptr, int arg);
void QQuickWindow_SetYDefault(void* ptr, int arg);
void QQuickWindow_Alert(void* ptr, int msec);
void QQuickWindow_AlertDefault(void* ptr, int msec);
char QQuickWindow_Close(void* ptr);
char QQuickWindow_CloseDefault(void* ptr);
void* QQuickWindow_FocusObject(void* ptr);
void* QQuickWindow_FocusObjectDefault(void* ptr);
void* QQuickWindow_Format(void* ptr);
void* QQuickWindow_FormatDefault(void* ptr);
void QQuickWindow_Hide(void* ptr);
void QQuickWindow_HideDefault(void* ptr);
void QQuickWindow_Lower(void* ptr);
void QQuickWindow_LowerDefault(void* ptr);
void QQuickWindow_MoveEvent(void* ptr, void* ev);
void QQuickWindow_MoveEventDefault(void* ptr, void* ev);
char QQuickWindow_NativeEvent(void* ptr, void* eventType, void* message, long result);
char QQuickWindow_NativeEventDefault(void* ptr, void* eventType, void* message, long result);
void QQuickWindow_Raise(void* ptr);
void QQuickWindow_RaiseDefault(void* ptr);
void QQuickWindow_RequestActivate(void* ptr);
void QQuickWindow_RequestActivateDefault(void* ptr);
void QQuickWindow_RequestUpdate(void* ptr);
void QQuickWindow_RequestUpdateDefault(void* ptr);
void QQuickWindow_Show(void* ptr);
void QQuickWindow_ShowDefault(void* ptr);
void QQuickWindow_ShowFullScreen(void* ptr);
void QQuickWindow_ShowFullScreenDefault(void* ptr);
void QQuickWindow_ShowMaximized(void* ptr);
void QQuickWindow_ShowMaximizedDefault(void* ptr);
void QQuickWindow_ShowMinimized(void* ptr);
void QQuickWindow_ShowMinimizedDefault(void* ptr);
void QQuickWindow_ShowNormal(void* ptr);
void QQuickWindow_ShowNormalDefault(void* ptr);
void* QQuickWindow_Size(void* ptr);
void* QQuickWindow_SizeDefault(void* ptr);
long long QQuickWindow_SurfaceType(void* ptr);
long long QQuickWindow_SurfaceTypeDefault(void* ptr);
void QQuickWindow_TabletEvent(void* ptr, void* ev);
void QQuickWindow_TabletEventDefault(void* ptr, void* ev);
void QQuickWindow_TouchEvent(void* ptr, void* ev);
void QQuickWindow_TouchEventDefault(void* ptr, void* ev);
void QQuickWindow_TimerEvent(void* ptr, void* event);
void QQuickWindow_TimerEventDefault(void* ptr, void* event);
void QQuickWindow_ChildEvent(void* ptr, void* event);
void QQuickWindow_ChildEventDefault(void* ptr, void* event);
void QQuickWindow_ConnectNotify(void* ptr, void* sign);
void QQuickWindow_ConnectNotifyDefault(void* ptr, void* sign);
void QQuickWindow_CustomEvent(void* ptr, void* event);
void QQuickWindow_CustomEventDefault(void* ptr, void* event);
void QQuickWindow_DeleteLater(void* ptr);
void QQuickWindow_DeleteLaterDefault(void* ptr);
void QQuickWindow_DisconnectNotify(void* ptr, void* sign);
void QQuickWindow_DisconnectNotifyDefault(void* ptr, void* sign);
char QQuickWindow_EventFilter(void* ptr, void* watched, void* event);
char QQuickWindow_EventFilterDefault(void* ptr, void* watched, void* event);
void* QQuickWindow_MetaObject(void* ptr);
void* QQuickWindow_MetaObjectDefault(void* ptr);
void* QSGAbstractRenderer_ClearColor(void* ptr);
long long QSGAbstractRenderer_ClearMode(void* ptr);
void* QSGAbstractRenderer_DeviceRect(void* ptr);
void* QSGAbstractRenderer_ProjectionMatrix(void* ptr);
void QSGAbstractRenderer_ConnectSceneGraphChanged(void* ptr);
void QSGAbstractRenderer_DisconnectSceneGraphChanged(void* ptr);
void QSGAbstractRenderer_SceneGraphChanged(void* ptr);
void QSGAbstractRenderer_SetClearColor(void* ptr, void* color);
void QSGAbstractRenderer_SetClearMode(void* ptr, long long mode);
void QSGAbstractRenderer_SetDeviceRect(void* ptr, void* rect);
void QSGAbstractRenderer_SetDeviceRect2(void* ptr, void* size);
void QSGAbstractRenderer_SetProjectionMatrix(void* ptr, void* matrix);
void QSGAbstractRenderer_SetProjectionMatrixToRect(void* ptr, void* rect);
void QSGAbstractRenderer_SetViewportRect(void* ptr, void* rect);
void QSGAbstractRenderer_SetViewportRect2(void* ptr, void* size);
void* QSGAbstractRenderer_ViewportRect(void* ptr);
void QSGAbstractRenderer_TimerEvent(void* ptr, void* event);
void QSGAbstractRenderer_TimerEventDefault(void* ptr, void* event);
void QSGAbstractRenderer_ChildEvent(void* ptr, void* event);
void QSGAbstractRenderer_ChildEventDefault(void* ptr, void* event);
void QSGAbstractRenderer_ConnectNotify(void* ptr, void* sign);
void QSGAbstractRenderer_ConnectNotifyDefault(void* ptr, void* sign);
void QSGAbstractRenderer_CustomEvent(void* ptr, void* event);
void QSGAbstractRenderer_CustomEventDefault(void* ptr, void* event);
void QSGAbstractRenderer_DeleteLater(void* ptr);
void QSGAbstractRenderer_DeleteLaterDefault(void* ptr);
void QSGAbstractRenderer_DisconnectNotify(void* ptr, void* sign);
void QSGAbstractRenderer_DisconnectNotifyDefault(void* ptr, void* sign);
char QSGAbstractRenderer_Event(void* ptr, void* e);
char QSGAbstractRenderer_EventDefault(void* ptr, void* e);
char QSGAbstractRenderer_EventFilter(void* ptr, void* watched, void* event);
char QSGAbstractRenderer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSGAbstractRenderer_MetaObject(void* ptr);
void* QSGAbstractRenderer_MetaObjectDefault(void* ptr);
void* QSGBasicGeometryNode_Geometry2(void* ptr);
void* QSGBasicGeometryNode_Geometry(void* ptr);
void QSGBasicGeometryNode_SetGeometry(void* ptr, void* geometry);
void QSGBasicGeometryNode_DestroyQSGBasicGeometryNode(void* ptr);
char QSGBasicGeometryNode_IsSubtreeBlocked(void* ptr);
char QSGBasicGeometryNode_IsSubtreeBlockedDefault(void* ptr);
void QSGBasicGeometryNode_Preprocess(void* ptr);
void QSGBasicGeometryNode_PreprocessDefault(void* ptr);
void* QSGClipNode_NewQSGClipNode();
void* QSGClipNode_ClipRect(void* ptr);
char QSGClipNode_IsRectangular(void* ptr);
void QSGClipNode_SetClipRect(void* ptr, void* rect);
void QSGClipNode_SetIsRectangular(void* ptr, char rectHint);
void QSGClipNode_DestroyQSGClipNode(void* ptr);
char QSGClipNode_IsSubtreeBlocked(void* ptr);
char QSGClipNode_IsSubtreeBlockedDefault(void* ptr);
void QSGClipNode_Preprocess(void* ptr);
void QSGClipNode_PreprocessDefault(void* ptr);
char QSGDynamicTexture_UpdateTexture(void* ptr);
void QSGDynamicTexture_Bind(void* ptr);
;
char QSGDynamicTexture_HasAlphaChannel(void* ptr);
;
char QSGDynamicTexture_HasMipmaps(void* ptr);
;
char QSGDynamicTexture_IsAtlasTexture(void* ptr);
char QSGDynamicTexture_IsAtlasTextureDefault(void* ptr);
void* QSGDynamicTexture_NormalizedTextureSubRect(void* ptr);
void* QSGDynamicTexture_NormalizedTextureSubRectDefault(void* ptr);
void* QSGDynamicTexture_RemovedFromAtlas(void* ptr);
void* QSGDynamicTexture_RemovedFromAtlasDefault(void* ptr);
int QSGDynamicTexture_TextureId(void* ptr);
;
void* QSGDynamicTexture_TextureSize(void* ptr);
;
void QSGDynamicTexture_TimerEvent(void* ptr, void* event);
void QSGDynamicTexture_TimerEventDefault(void* ptr, void* event);
void QSGDynamicTexture_ChildEvent(void* ptr, void* event);
void QSGDynamicTexture_ChildEventDefault(void* ptr, void* event);
void QSGDynamicTexture_ConnectNotify(void* ptr, void* sign);
void QSGDynamicTexture_ConnectNotifyDefault(void* ptr, void* sign);
void QSGDynamicTexture_CustomEvent(void* ptr, void* event);
void QSGDynamicTexture_CustomEventDefault(void* ptr, void* event);
void QSGDynamicTexture_DeleteLater(void* ptr);
void QSGDynamicTexture_DeleteLaterDefault(void* ptr);
void QSGDynamicTexture_DisconnectNotify(void* ptr, void* sign);
void QSGDynamicTexture_DisconnectNotifyDefault(void* ptr, void* sign);
char QSGDynamicTexture_Event(void* ptr, void* e);
char QSGDynamicTexture_EventDefault(void* ptr, void* e);
char QSGDynamicTexture_EventFilter(void* ptr, void* watched, void* event);
char QSGDynamicTexture_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSGDynamicTexture_MetaObject(void* ptr);
void* QSGDynamicTexture_MetaObjectDefault(void* ptr);
void* QSGEngine_NewQSGEngine(void* parent);
void* QSGEngine_CreateRenderer(void* ptr);
void* QSGEngine_CreateTextureFromId(void* ptr, unsigned int id, void* size, long long options);
void* QSGEngine_CreateTextureFromImage(void* ptr, void* image, long long options);
void QSGEngine_Initialize(void* ptr, void* context);
void QSGEngine_Invalidate(void* ptr);
void QSGEngine_DestroyQSGEngine(void* ptr);
void QSGEngine_TimerEvent(void* ptr, void* event);
void QSGEngine_TimerEventDefault(void* ptr, void* event);
void QSGEngine_ChildEvent(void* ptr, void* event);
void QSGEngine_ChildEventDefault(void* ptr, void* event);
void QSGEngine_ConnectNotify(void* ptr, void* sign);
void QSGEngine_ConnectNotifyDefault(void* ptr, void* sign);
void QSGEngine_CustomEvent(void* ptr, void* event);
void QSGEngine_CustomEventDefault(void* ptr, void* event);
void QSGEngine_DeleteLater(void* ptr);
void QSGEngine_DeleteLaterDefault(void* ptr);
void QSGEngine_DisconnectNotify(void* ptr, void* sign);
void QSGEngine_DisconnectNotifyDefault(void* ptr, void* sign);
char QSGEngine_Event(void* ptr, void* e);
char QSGEngine_EventDefault(void* ptr, void* e);
char QSGEngine_EventFilter(void* ptr, void* watched, void* event);
char QSGEngine_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSGEngine_MetaObject(void* ptr);
void* QSGEngine_MetaObjectDefault(void* ptr);
void* QSGFlatColorMaterial_NewQSGFlatColorMaterial();
void* QSGFlatColorMaterial_Color(void* ptr);
void QSGFlatColorMaterial_SetColor(void* ptr, void* color);
int QSGFlatColorMaterial_Compare(void* ptr, void* other);
int QSGFlatColorMaterial_CompareDefault(void* ptr, void* other);
void* QSGFlatColorMaterial_CreateShader(void* ptr);
void* QSGFlatColorMaterial_CreateShaderDefault(void* ptr);
void* QSGFlatColorMaterial_Type(void* ptr);
void* QSGFlatColorMaterial_TypeDefault(void* ptr);
void QSGGeometry_Allocate(void* ptr, int vertexCount, int indexCount);
int QSGGeometry_AttributeCount(void* ptr);
int QSGGeometry_IndexCount(void* ptr);
void* QSGGeometry_IndexData(void* ptr);
void* QSGGeometry_IndexData2(void* ptr);
unsigned int QSGGeometry_IndexDataAsUInt(void* ptr);
unsigned int QSGGeometry_IndexDataAsUInt2(void* ptr);
unsigned short QSGGeometry_IndexDataAsUShort(void* ptr);
unsigned short QSGGeometry_IndexDataAsUShort2(void* ptr);
long long QSGGeometry_IndexDataPattern(void* ptr);
int QSGGeometry_IndexType(void* ptr);
float QSGGeometry_LineWidth(void* ptr);
void QSGGeometry_MarkIndexDataDirty(void* ptr);
void QSGGeometry_MarkVertexDataDirty(void* ptr);
void QSGGeometry_SetIndexDataPattern(void* ptr, long long p);
void QSGGeometry_SetLineWidth(void* ptr, float width);
void QSGGeometry_SetVertexDataPattern(void* ptr, long long p);
int QSGGeometry_SizeOfIndex(void* ptr);
int QSGGeometry_SizeOfVertex(void* ptr);
void QSGGeometry_QSGGeometry_UpdateRectGeometry(void* g, void* rect);
void QSGGeometry_QSGGeometry_UpdateTexturedRectGeometry(void* g, void* rect, void* textureRect);
int QSGGeometry_VertexCount(void* ptr);
void* QSGGeometry_VertexData(void* ptr);
void* QSGGeometry_VertexData2(void* ptr);
long long QSGGeometry_VertexDataPattern(void* ptr);
void QSGGeometry_DestroyQSGGeometry(void* ptr);
void QSGGeometry_DestroyQSGGeometryDefault(void* ptr);
void* QSGGeometryNode_NewQSGGeometryNode();
void* QSGGeometryNode_Material(void* ptr);
void* QSGGeometryNode_OpaqueMaterial(void* ptr);
void QSGGeometryNode_SetMaterial(void* ptr, void* material);
void QSGGeometryNode_SetOpaqueMaterial(void* ptr, void* material);
void QSGGeometryNode_DestroyQSGGeometryNode(void* ptr);
char QSGGeometryNode_IsSubtreeBlocked(void* ptr);
char QSGGeometryNode_IsSubtreeBlockedDefault(void* ptr);
void QSGGeometryNode_Preprocess(void* ptr);
void QSGGeometryNode_PreprocessDefault(void* ptr);
int QSGMaterial_Compare(void* ptr, void* other);
int QSGMaterial_CompareDefault(void* ptr, void* other);
void* QSGMaterial_CreateShader(void* ptr);
long long QSGMaterial_Flags(void* ptr);
void QSGMaterial_SetFlag(void* ptr, long long flags, char on);
void* QSGMaterial_Type(void* ptr);
struct QtQuick_PackedString QSGMaterialShader_FragmentShader(void* ptr);
struct QtQuick_PackedString QSGMaterialShader_FragmentShaderDefault(void* ptr);
struct QtQuick_PackedString QSGMaterialShader_VertexShader(void* ptr);
struct QtQuick_PackedString QSGMaterialShader_VertexShaderDefault(void* ptr);
void QSGMaterialShader_Activate(void* ptr);
void QSGMaterialShader_ActivateDefault(void* ptr);
void QSGMaterialShader_Deactivate(void* ptr);
void QSGMaterialShader_DeactivateDefault(void* ptr);
void* QSGMaterialShader_Program(void* ptr);
void QSGMaterialShader_Compile(void* ptr);
void QSGMaterialShader_CompileDefault(void* ptr);
void QSGMaterialShader_Initialize(void* ptr);
void QSGMaterialShader_InitializeDefault(void* ptr);
void QSGMaterialShader_SetShaderSourceFile(void* ptr, long long ty, char* sourceFile);
void QSGMaterialShader_SetShaderSourceFiles(void* ptr, long long ty, char* sourceFiles);
void* QSGNode_ChildAtIndex(void* ptr, int i);
int QSGNode_ChildCount(void* ptr);
void* QSGNode_NewQSGNode();
void QSGNode_AppendChildNode(void* ptr, void* node);
void* QSGNode_FirstChild(void* ptr);
long long QSGNode_Flags(void* ptr);
void QSGNode_InsertChildNodeAfter(void* ptr, void* node, void* after);
void QSGNode_InsertChildNodeBefore(void* ptr, void* node, void* before);
char QSGNode_IsSubtreeBlocked(void* ptr);
char QSGNode_IsSubtreeBlockedDefault(void* ptr);
void* QSGNode_LastChild(void* ptr);
void QSGNode_MarkDirty(void* ptr, long long bits);
void* QSGNode_NextSibling(void* ptr);
void* QSGNode_Parent(void* ptr);
void QSGNode_PrependChildNode(void* ptr, void* node);
void QSGNode_Preprocess(void* ptr);
void QSGNode_PreprocessDefault(void* ptr);
void* QSGNode_PreviousSibling(void* ptr);
void QSGNode_RemoveAllChildNodes(void* ptr);
void QSGNode_RemoveChildNode(void* ptr, void* node);
void QSGNode_SetFlag(void* ptr, long long f, char enabled);
void QSGNode_SetFlags(void* ptr, long long f, char enabled);
long long QSGNode_Type(void* ptr);
void QSGNode_DestroyQSGNode(void* ptr);
void QSGNode_DestroyQSGNodeDefault(void* ptr);
void* QSGOpacityNode_NewQSGOpacityNode();
double QSGOpacityNode_Opacity(void* ptr);
void QSGOpacityNode_SetOpacity(void* ptr, double opacity);
void QSGOpacityNode_DestroyQSGOpacityNode(void* ptr);
char QSGOpacityNode_IsSubtreeBlocked(void* ptr);
char QSGOpacityNode_IsSubtreeBlockedDefault(void* ptr);
void QSGOpacityNode_Preprocess(void* ptr);
void QSGOpacityNode_PreprocessDefault(void* ptr);
void* QSGOpaqueTextureMaterial_NewQSGOpaqueTextureMaterial();
long long QSGOpaqueTextureMaterial_Filtering(void* ptr);
long long QSGOpaqueTextureMaterial_HorizontalWrapMode(void* ptr);
long long QSGOpaqueTextureMaterial_MipmapFiltering(void* ptr);
void QSGOpaqueTextureMaterial_SetFiltering(void* ptr, long long filtering);
void QSGOpaqueTextureMaterial_SetHorizontalWrapMode(void* ptr, long long mode);
void QSGOpaqueTextureMaterial_SetMipmapFiltering(void* ptr, long long filtering);
void QSGOpaqueTextureMaterial_SetTexture(void* ptr, void* texture);
void QSGOpaqueTextureMaterial_SetVerticalWrapMode(void* ptr, long long mode);
void* QSGOpaqueTextureMaterial_Texture(void* ptr);
long long QSGOpaqueTextureMaterial_VerticalWrapMode(void* ptr);
void* QSGOpaqueTextureMaterial_M_texture(void* ptr);
void QSGOpaqueTextureMaterial_SetM_texture(void* ptr, void* vqs);
int QSGOpaqueTextureMaterial_Compare(void* ptr, void* other);
int QSGOpaqueTextureMaterial_CompareDefault(void* ptr, void* other);
void* QSGOpaqueTextureMaterial_CreateShader(void* ptr);
void* QSGOpaqueTextureMaterial_CreateShaderDefault(void* ptr);
void* QSGOpaqueTextureMaterial_Type(void* ptr);
void* QSGOpaqueTextureMaterial_TypeDefault(void* ptr);
void* QSGSimpleRectNode_NewQSGSimpleRectNode2();
void* QSGSimpleRectNode_NewQSGSimpleRectNode(void* rect, void* color);
void* QSGSimpleRectNode_Color(void* ptr);
void* QSGSimpleRectNode_Rect(void* ptr);
void QSGSimpleRectNode_SetColor(void* ptr, void* color);
void QSGSimpleRectNode_SetRect(void* ptr, void* rect);
void QSGSimpleRectNode_SetRect2(void* ptr, double x, double y, double w, double h);
char QSGSimpleRectNode_IsSubtreeBlocked(void* ptr);
char QSGSimpleRectNode_IsSubtreeBlockedDefault(void* ptr);
void QSGSimpleRectNode_Preprocess(void* ptr);
void QSGSimpleRectNode_PreprocessDefault(void* ptr);
void* QSGSimpleTextureNode_NewQSGSimpleTextureNode();
long long QSGSimpleTextureNode_Filtering(void* ptr);
char QSGSimpleTextureNode_OwnsTexture(void* ptr);
void* QSGSimpleTextureNode_Rect(void* ptr);
void QSGSimpleTextureNode_SetFiltering(void* ptr, long long filtering);
void QSGSimpleTextureNode_SetOwnsTexture(void* ptr, char owns);
void QSGSimpleTextureNode_SetRect(void* ptr, void* r);
void QSGSimpleTextureNode_SetRect2(void* ptr, double x, double y, double w, double h);
void QSGSimpleTextureNode_SetSourceRect(void* ptr, void* r);
void QSGSimpleTextureNode_SetSourceRect2(void* ptr, double x, double y, double w, double h);
void QSGSimpleTextureNode_SetTexture(void* ptr, void* texture);
void QSGSimpleTextureNode_SetTextureCoordinatesTransform(void* ptr, long long mode);
void* QSGSimpleTextureNode_SourceRect(void* ptr);
void* QSGSimpleTextureNode_Texture(void* ptr);
long long QSGSimpleTextureNode_TextureCoordinatesTransform(void* ptr);
void QSGSimpleTextureNode_DestroyQSGSimpleTextureNode(void* ptr);
char QSGSimpleTextureNode_IsSubtreeBlocked(void* ptr);
char QSGSimpleTextureNode_IsSubtreeBlockedDefault(void* ptr);
void QSGSimpleTextureNode_Preprocess(void* ptr);
void QSGSimpleTextureNode_PreprocessDefault(void* ptr);
void* QSGTexture_NewQSGTexture();
void QSGTexture_Bind(void* ptr);
void* QSGTexture_ConvertToNormalizedSourceRect(void* ptr, void* rect);
long long QSGTexture_Filtering(void* ptr);
char QSGTexture_HasAlphaChannel(void* ptr);
char QSGTexture_HasMipmaps(void* ptr);
long long QSGTexture_HorizontalWrapMode(void* ptr);
char QSGTexture_IsAtlasTexture(void* ptr);
char QSGTexture_IsAtlasTextureDefault(void* ptr);
long long QSGTexture_MipmapFiltering(void* ptr);
void* QSGTexture_NormalizedTextureSubRect(void* ptr);
void* QSGTexture_NormalizedTextureSubRectDefault(void* ptr);
void* QSGTexture_RemovedFromAtlas(void* ptr);
void* QSGTexture_RemovedFromAtlasDefault(void* ptr);
void QSGTexture_SetFiltering(void* ptr, long long filter);
void QSGTexture_SetHorizontalWrapMode(void* ptr, long long hwrap);
void QSGTexture_SetMipmapFiltering(void* ptr, long long filter);
void QSGTexture_SetVerticalWrapMode(void* ptr, long long vwrap);
int QSGTexture_TextureId(void* ptr);
void* QSGTexture_TextureSize(void* ptr);
void QSGTexture_UpdateBindOptions(void* ptr, char force);
long long QSGTexture_VerticalWrapMode(void* ptr);
void QSGTexture_DestroyQSGTexture(void* ptr);
void QSGTexture_TimerEvent(void* ptr, void* event);
void QSGTexture_TimerEventDefault(void* ptr, void* event);
void QSGTexture_ChildEvent(void* ptr, void* event);
void QSGTexture_ChildEventDefault(void* ptr, void* event);
void QSGTexture_ConnectNotify(void* ptr, void* sign);
void QSGTexture_ConnectNotifyDefault(void* ptr, void* sign);
void QSGTexture_CustomEvent(void* ptr, void* event);
void QSGTexture_CustomEventDefault(void* ptr, void* event);
void QSGTexture_DeleteLater(void* ptr);
void QSGTexture_DeleteLaterDefault(void* ptr);
void QSGTexture_DisconnectNotify(void* ptr, void* sign);
void QSGTexture_DisconnectNotifyDefault(void* ptr, void* sign);
char QSGTexture_Event(void* ptr, void* e);
char QSGTexture_EventDefault(void* ptr, void* e);
char QSGTexture_EventFilter(void* ptr, void* watched, void* event);
char QSGTexture_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSGTexture_MetaObject(void* ptr);
void* QSGTexture_MetaObjectDefault(void* ptr);
int QSGTextureMaterial_Compare(void* ptr, void* other);
int QSGTextureMaterial_CompareDefault(void* ptr, void* other);
void* QSGTextureMaterial_CreateShader(void* ptr);
void* QSGTextureMaterial_CreateShaderDefault(void* ptr);
void* QSGTextureMaterial_Type(void* ptr);
void* QSGTextureMaterial_TypeDefault(void* ptr);
void* QSGTextureProvider_Texture(void* ptr);
void QSGTextureProvider_ConnectTextureChanged(void* ptr);
void QSGTextureProvider_DisconnectTextureChanged(void* ptr);
void QSGTextureProvider_TextureChanged(void* ptr);
void QSGTextureProvider_TimerEvent(void* ptr, void* event);
void QSGTextureProvider_TimerEventDefault(void* ptr, void* event);
void QSGTextureProvider_ChildEvent(void* ptr, void* event);
void QSGTextureProvider_ChildEventDefault(void* ptr, void* event);
void QSGTextureProvider_ConnectNotify(void* ptr, void* sign);
void QSGTextureProvider_ConnectNotifyDefault(void* ptr, void* sign);
void QSGTextureProvider_CustomEvent(void* ptr, void* event);
void QSGTextureProvider_CustomEventDefault(void* ptr, void* event);
void QSGTextureProvider_DeleteLater(void* ptr);
void QSGTextureProvider_DeleteLaterDefault(void* ptr);
void QSGTextureProvider_DisconnectNotify(void* ptr, void* sign);
void QSGTextureProvider_DisconnectNotifyDefault(void* ptr, void* sign);
char QSGTextureProvider_Event(void* ptr, void* e);
char QSGTextureProvider_EventDefault(void* ptr, void* e);
char QSGTextureProvider_EventFilter(void* ptr, void* watched, void* event);
char QSGTextureProvider_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSGTextureProvider_MetaObject(void* ptr);
void* QSGTextureProvider_MetaObjectDefault(void* ptr);
void* QSGTransformNode_NewQSGTransformNode();
void* QSGTransformNode_Matrix(void* ptr);
void QSGTransformNode_SetMatrix(void* ptr, void* matrix);
void QSGTransformNode_DestroyQSGTransformNode(void* ptr);
char QSGTransformNode_IsSubtreeBlocked(void* ptr);
char QSGTransformNode_IsSubtreeBlockedDefault(void* ptr);
void QSGTransformNode_Preprocess(void* ptr);
void QSGTransformNode_PreprocessDefault(void* ptr);
void* QSGVertexColorMaterial_NewQSGVertexColorMaterial();
int QSGVertexColorMaterial_Compare(void* ptr, void* other);
int QSGVertexColorMaterial_CompareDefault(void* ptr, void* other);
void* QSGVertexColorMaterial_CreateShader(void* ptr);
void* QSGVertexColorMaterial_CreateShaderDefault(void* ptr);
void* QSGVertexColorMaterial_Type(void* ptr);
void* QSGVertexColorMaterial_TypeDefault(void* ptr);

#ifdef __cplusplus
}
#endif

#endif