// +build !minimal

#pragma once

#ifndef GO_QTSENSORS_H
#define GO_QTSENSORS_H

#include <stdint.h>

#ifdef __cplusplus
extern "C" {
#endif

struct QtSensors_PackedString { char* data; long long len; };
struct QtSensors_PackedList { void* data; long long len; };
long long QAccelerometer_AccelerationMode(void* ptr);
void* QAccelerometer_Reading(void* ptr);
void* QAccelerometer_NewQAccelerometer(void* parent);
void QAccelerometer_ConnectAccelerationModeChanged(void* ptr);
void QAccelerometer_DisconnectAccelerationModeChanged(void* ptr);
void QAccelerometer_AccelerationModeChanged(void* ptr, long long accelerationMode);
void QAccelerometer_SetAccelerationMode(void* ptr, long long accelerationMode);
void QAccelerometer_DestroyQAccelerometer(void* ptr);
void QAccelerometer_DestroyQAccelerometerDefault(void* ptr);
struct QtSensors_PackedString QAccelerometer_QAccelerometer_Type();
char QAccelerometer_Start(void* ptr);
char QAccelerometer_StartDefault(void* ptr);
void QAccelerometer_Stop(void* ptr);
void QAccelerometer_StopDefault(void* ptr);
void QAccelerometer_TimerEvent(void* ptr, void* event);
void QAccelerometer_TimerEventDefault(void* ptr, void* event);
void QAccelerometer_ChildEvent(void* ptr, void* event);
void QAccelerometer_ChildEventDefault(void* ptr, void* event);
void QAccelerometer_ConnectNotify(void* ptr, void* sign);
void QAccelerometer_ConnectNotifyDefault(void* ptr, void* sign);
void QAccelerometer_CustomEvent(void* ptr, void* event);
void QAccelerometer_CustomEventDefault(void* ptr, void* event);
void QAccelerometer_DeleteLater(void* ptr);
void QAccelerometer_DeleteLaterDefault(void* ptr);
void QAccelerometer_DisconnectNotify(void* ptr, void* sign);
void QAccelerometer_DisconnectNotifyDefault(void* ptr, void* sign);
char QAccelerometer_Event(void* ptr, void* e);
char QAccelerometer_EventDefault(void* ptr, void* e);
char QAccelerometer_EventFilter(void* ptr, void* watched, void* event);
char QAccelerometer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAccelerometer_MetaObject(void* ptr);
void* QAccelerometer_MetaObjectDefault(void* ptr);
char QAccelerometerFilter_Filter(void* ptr, void* reading);
double QAccelerometerReading_X(void* ptr);
double QAccelerometerReading_Y(void* ptr);
double QAccelerometerReading_Z(void* ptr);
void QAccelerometerReading_SetX(void* ptr, double x);
void QAccelerometerReading_SetY(void* ptr, double y);
void QAccelerometerReading_SetZ(void* ptr, double z);
void QAccelerometerReading_TimerEvent(void* ptr, void* event);
void QAccelerometerReading_TimerEventDefault(void* ptr, void* event);
void QAccelerometerReading_ChildEvent(void* ptr, void* event);
void QAccelerometerReading_ChildEventDefault(void* ptr, void* event);
void QAccelerometerReading_ConnectNotify(void* ptr, void* sign);
void QAccelerometerReading_ConnectNotifyDefault(void* ptr, void* sign);
void QAccelerometerReading_CustomEvent(void* ptr, void* event);
void QAccelerometerReading_CustomEventDefault(void* ptr, void* event);
void QAccelerometerReading_DeleteLater(void* ptr);
void QAccelerometerReading_DeleteLaterDefault(void* ptr);
void QAccelerometerReading_DisconnectNotify(void* ptr, void* sign);
void QAccelerometerReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QAccelerometerReading_Event(void* ptr, void* e);
char QAccelerometerReading_EventDefault(void* ptr, void* e);
char QAccelerometerReading_EventFilter(void* ptr, void* watched, void* event);
char QAccelerometerReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAccelerometerReading_MetaObject(void* ptr);
void* QAccelerometerReading_MetaObjectDefault(void* ptr);
void* QAltimeter_Reading(void* ptr);
void* QAltimeter_NewQAltimeter(void* parent);
void QAltimeter_DestroyQAltimeter(void* ptr);
struct QtSensors_PackedString QAltimeter_QAltimeter_Type();
char QAltimeter_Start(void* ptr);
char QAltimeter_StartDefault(void* ptr);
void QAltimeter_Stop(void* ptr);
void QAltimeter_StopDefault(void* ptr);
void QAltimeter_TimerEvent(void* ptr, void* event);
void QAltimeter_TimerEventDefault(void* ptr, void* event);
void QAltimeter_ChildEvent(void* ptr, void* event);
void QAltimeter_ChildEventDefault(void* ptr, void* event);
void QAltimeter_ConnectNotify(void* ptr, void* sign);
void QAltimeter_ConnectNotifyDefault(void* ptr, void* sign);
void QAltimeter_CustomEvent(void* ptr, void* event);
void QAltimeter_CustomEventDefault(void* ptr, void* event);
void QAltimeter_DeleteLater(void* ptr);
void QAltimeter_DeleteLaterDefault(void* ptr);
void QAltimeter_DisconnectNotify(void* ptr, void* sign);
void QAltimeter_DisconnectNotifyDefault(void* ptr, void* sign);
char QAltimeter_Event(void* ptr, void* e);
char QAltimeter_EventDefault(void* ptr, void* e);
char QAltimeter_EventFilter(void* ptr, void* watched, void* event);
char QAltimeter_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAltimeter_MetaObject(void* ptr);
void* QAltimeter_MetaObjectDefault(void* ptr);
char QAltimeterFilter_Filter(void* ptr, void* reading);
double QAltimeterReading_Altitude(void* ptr);
void QAltimeterReading_SetAltitude(void* ptr, double altitude);
void QAltimeterReading_TimerEvent(void* ptr, void* event);
void QAltimeterReading_TimerEventDefault(void* ptr, void* event);
void QAltimeterReading_ChildEvent(void* ptr, void* event);
void QAltimeterReading_ChildEventDefault(void* ptr, void* event);
void QAltimeterReading_ConnectNotify(void* ptr, void* sign);
void QAltimeterReading_ConnectNotifyDefault(void* ptr, void* sign);
void QAltimeterReading_CustomEvent(void* ptr, void* event);
void QAltimeterReading_CustomEventDefault(void* ptr, void* event);
void QAltimeterReading_DeleteLater(void* ptr);
void QAltimeterReading_DeleteLaterDefault(void* ptr);
void QAltimeterReading_DisconnectNotify(void* ptr, void* sign);
void QAltimeterReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QAltimeterReading_Event(void* ptr, void* e);
char QAltimeterReading_EventDefault(void* ptr, void* e);
char QAltimeterReading_EventFilter(void* ptr, void* watched, void* event);
char QAltimeterReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAltimeterReading_MetaObject(void* ptr);
void* QAltimeterReading_MetaObjectDefault(void* ptr);
char QAmbientLightFilter_Filter(void* ptr, void* reading);
long long QAmbientLightReading_LightLevel(void* ptr);
void QAmbientLightReading_SetLightLevel(void* ptr, long long lightLevel);
void QAmbientLightReading_TimerEvent(void* ptr, void* event);
void QAmbientLightReading_TimerEventDefault(void* ptr, void* event);
void QAmbientLightReading_ChildEvent(void* ptr, void* event);
void QAmbientLightReading_ChildEventDefault(void* ptr, void* event);
void QAmbientLightReading_ConnectNotify(void* ptr, void* sign);
void QAmbientLightReading_ConnectNotifyDefault(void* ptr, void* sign);
void QAmbientLightReading_CustomEvent(void* ptr, void* event);
void QAmbientLightReading_CustomEventDefault(void* ptr, void* event);
void QAmbientLightReading_DeleteLater(void* ptr);
void QAmbientLightReading_DeleteLaterDefault(void* ptr);
void QAmbientLightReading_DisconnectNotify(void* ptr, void* sign);
void QAmbientLightReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QAmbientLightReading_Event(void* ptr, void* e);
char QAmbientLightReading_EventDefault(void* ptr, void* e);
char QAmbientLightReading_EventFilter(void* ptr, void* watched, void* event);
char QAmbientLightReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAmbientLightReading_MetaObject(void* ptr);
void* QAmbientLightReading_MetaObjectDefault(void* ptr);
void* QAmbientLightSensor_Reading(void* ptr);
void* QAmbientLightSensor_NewQAmbientLightSensor(void* parent);
void QAmbientLightSensor_DestroyQAmbientLightSensor(void* ptr);
void QAmbientLightSensor_DestroyQAmbientLightSensorDefault(void* ptr);
struct QtSensors_PackedString QAmbientLightSensor_QAmbientLightSensor_Type();
char QAmbientLightSensor_Start(void* ptr);
char QAmbientLightSensor_StartDefault(void* ptr);
void QAmbientLightSensor_Stop(void* ptr);
void QAmbientLightSensor_StopDefault(void* ptr);
void QAmbientLightSensor_TimerEvent(void* ptr, void* event);
void QAmbientLightSensor_TimerEventDefault(void* ptr, void* event);
void QAmbientLightSensor_ChildEvent(void* ptr, void* event);
void QAmbientLightSensor_ChildEventDefault(void* ptr, void* event);
void QAmbientLightSensor_ConnectNotify(void* ptr, void* sign);
void QAmbientLightSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QAmbientLightSensor_CustomEvent(void* ptr, void* event);
void QAmbientLightSensor_CustomEventDefault(void* ptr, void* event);
void QAmbientLightSensor_DeleteLater(void* ptr);
void QAmbientLightSensor_DeleteLaterDefault(void* ptr);
void QAmbientLightSensor_DisconnectNotify(void* ptr, void* sign);
void QAmbientLightSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QAmbientLightSensor_Event(void* ptr, void* e);
char QAmbientLightSensor_EventDefault(void* ptr, void* e);
char QAmbientLightSensor_EventFilter(void* ptr, void* watched, void* event);
char QAmbientLightSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAmbientLightSensor_MetaObject(void* ptr);
void* QAmbientLightSensor_MetaObjectDefault(void* ptr);
char QAmbientTemperatureFilter_Filter(void* ptr, void* reading);
double QAmbientTemperatureReading_Temperature(void* ptr);
void QAmbientTemperatureReading_SetTemperature(void* ptr, double temperature);
void QAmbientTemperatureReading_TimerEvent(void* ptr, void* event);
void QAmbientTemperatureReading_TimerEventDefault(void* ptr, void* event);
void QAmbientTemperatureReading_ChildEvent(void* ptr, void* event);
void QAmbientTemperatureReading_ChildEventDefault(void* ptr, void* event);
void QAmbientTemperatureReading_ConnectNotify(void* ptr, void* sign);
void QAmbientTemperatureReading_ConnectNotifyDefault(void* ptr, void* sign);
void QAmbientTemperatureReading_CustomEvent(void* ptr, void* event);
void QAmbientTemperatureReading_CustomEventDefault(void* ptr, void* event);
void QAmbientTemperatureReading_DeleteLater(void* ptr);
void QAmbientTemperatureReading_DeleteLaterDefault(void* ptr);
void QAmbientTemperatureReading_DisconnectNotify(void* ptr, void* sign);
void QAmbientTemperatureReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QAmbientTemperatureReading_Event(void* ptr, void* e);
char QAmbientTemperatureReading_EventDefault(void* ptr, void* e);
char QAmbientTemperatureReading_EventFilter(void* ptr, void* watched, void* event);
char QAmbientTemperatureReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAmbientTemperatureReading_MetaObject(void* ptr);
void* QAmbientTemperatureReading_MetaObjectDefault(void* ptr);
void* QAmbientTemperatureSensor_Reading(void* ptr);
void* QAmbientTemperatureSensor_NewQAmbientTemperatureSensor(void* parent);
void QAmbientTemperatureSensor_DestroyQAmbientTemperatureSensor(void* ptr);
struct QtSensors_PackedString QAmbientTemperatureSensor_QAmbientTemperatureSensor_Type();
char QAmbientTemperatureSensor_Start(void* ptr);
char QAmbientTemperatureSensor_StartDefault(void* ptr);
void QAmbientTemperatureSensor_Stop(void* ptr);
void QAmbientTemperatureSensor_StopDefault(void* ptr);
void QAmbientTemperatureSensor_TimerEvent(void* ptr, void* event);
void QAmbientTemperatureSensor_TimerEventDefault(void* ptr, void* event);
void QAmbientTemperatureSensor_ChildEvent(void* ptr, void* event);
void QAmbientTemperatureSensor_ChildEventDefault(void* ptr, void* event);
void QAmbientTemperatureSensor_ConnectNotify(void* ptr, void* sign);
void QAmbientTemperatureSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QAmbientTemperatureSensor_CustomEvent(void* ptr, void* event);
void QAmbientTemperatureSensor_CustomEventDefault(void* ptr, void* event);
void QAmbientTemperatureSensor_DeleteLater(void* ptr);
void QAmbientTemperatureSensor_DeleteLaterDefault(void* ptr);
void QAmbientTemperatureSensor_DisconnectNotify(void* ptr, void* sign);
void QAmbientTemperatureSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QAmbientTemperatureSensor_Event(void* ptr, void* e);
char QAmbientTemperatureSensor_EventDefault(void* ptr, void* e);
char QAmbientTemperatureSensor_EventFilter(void* ptr, void* watched, void* event);
char QAmbientTemperatureSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QAmbientTemperatureSensor_MetaObject(void* ptr);
void* QAmbientTemperatureSensor_MetaObjectDefault(void* ptr);
void* QCompass_Reading(void* ptr);
void* QCompass_NewQCompass(void* parent);
void QCompass_DestroyQCompass(void* ptr);
void QCompass_DestroyQCompassDefault(void* ptr);
struct QtSensors_PackedString QCompass_QCompass_Type();
char QCompass_Start(void* ptr);
char QCompass_StartDefault(void* ptr);
void QCompass_Stop(void* ptr);
void QCompass_StopDefault(void* ptr);
void QCompass_TimerEvent(void* ptr, void* event);
void QCompass_TimerEventDefault(void* ptr, void* event);
void QCompass_ChildEvent(void* ptr, void* event);
void QCompass_ChildEventDefault(void* ptr, void* event);
void QCompass_ConnectNotify(void* ptr, void* sign);
void QCompass_ConnectNotifyDefault(void* ptr, void* sign);
void QCompass_CustomEvent(void* ptr, void* event);
void QCompass_CustomEventDefault(void* ptr, void* event);
void QCompass_DeleteLater(void* ptr);
void QCompass_DeleteLaterDefault(void* ptr);
void QCompass_DisconnectNotify(void* ptr, void* sign);
void QCompass_DisconnectNotifyDefault(void* ptr, void* sign);
char QCompass_Event(void* ptr, void* e);
char QCompass_EventDefault(void* ptr, void* e);
char QCompass_EventFilter(void* ptr, void* watched, void* event);
char QCompass_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCompass_MetaObject(void* ptr);
void* QCompass_MetaObjectDefault(void* ptr);
char QCompassFilter_Filter(void* ptr, void* reading);
double QCompassReading_Azimuth(void* ptr);
double QCompassReading_CalibrationLevel(void* ptr);
void QCompassReading_SetAzimuth(void* ptr, double azimuth);
void QCompassReading_SetCalibrationLevel(void* ptr, double calibrationLevel);
void QCompassReading_TimerEvent(void* ptr, void* event);
void QCompassReading_TimerEventDefault(void* ptr, void* event);
void QCompassReading_ChildEvent(void* ptr, void* event);
void QCompassReading_ChildEventDefault(void* ptr, void* event);
void QCompassReading_ConnectNotify(void* ptr, void* sign);
void QCompassReading_ConnectNotifyDefault(void* ptr, void* sign);
void QCompassReading_CustomEvent(void* ptr, void* event);
void QCompassReading_CustomEventDefault(void* ptr, void* event);
void QCompassReading_DeleteLater(void* ptr);
void QCompassReading_DeleteLaterDefault(void* ptr);
void QCompassReading_DisconnectNotify(void* ptr, void* sign);
void QCompassReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QCompassReading_Event(void* ptr, void* e);
char QCompassReading_EventDefault(void* ptr, void* e);
char QCompassReading_EventFilter(void* ptr, void* watched, void* event);
char QCompassReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QCompassReading_MetaObject(void* ptr);
void* QCompassReading_MetaObjectDefault(void* ptr);
char QDistanceFilter_Filter(void* ptr, void* reading);
double QDistanceReading_Distance(void* ptr);
void QDistanceReading_SetDistance(void* ptr, double distance);
void QDistanceReading_TimerEvent(void* ptr, void* event);
void QDistanceReading_TimerEventDefault(void* ptr, void* event);
void QDistanceReading_ChildEvent(void* ptr, void* event);
void QDistanceReading_ChildEventDefault(void* ptr, void* event);
void QDistanceReading_ConnectNotify(void* ptr, void* sign);
void QDistanceReading_ConnectNotifyDefault(void* ptr, void* sign);
void QDistanceReading_CustomEvent(void* ptr, void* event);
void QDistanceReading_CustomEventDefault(void* ptr, void* event);
void QDistanceReading_DeleteLater(void* ptr);
void QDistanceReading_DeleteLaterDefault(void* ptr);
void QDistanceReading_DisconnectNotify(void* ptr, void* sign);
void QDistanceReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QDistanceReading_Event(void* ptr, void* e);
char QDistanceReading_EventDefault(void* ptr, void* e);
char QDistanceReading_EventFilter(void* ptr, void* watched, void* event);
char QDistanceReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QDistanceReading_MetaObject(void* ptr);
void* QDistanceReading_MetaObjectDefault(void* ptr);
void* QDistanceSensor_Reading(void* ptr);
void* QDistanceSensor_NewQDistanceSensor(void* parent);
void QDistanceSensor_DestroyQDistanceSensor(void* ptr);
struct QtSensors_PackedString QDistanceSensor_QDistanceSensor_Type();
char QDistanceSensor_Start(void* ptr);
char QDistanceSensor_StartDefault(void* ptr);
void QDistanceSensor_Stop(void* ptr);
void QDistanceSensor_StopDefault(void* ptr);
void QDistanceSensor_TimerEvent(void* ptr, void* event);
void QDistanceSensor_TimerEventDefault(void* ptr, void* event);
void QDistanceSensor_ChildEvent(void* ptr, void* event);
void QDistanceSensor_ChildEventDefault(void* ptr, void* event);
void QDistanceSensor_ConnectNotify(void* ptr, void* sign);
void QDistanceSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QDistanceSensor_CustomEvent(void* ptr, void* event);
void QDistanceSensor_CustomEventDefault(void* ptr, void* event);
void QDistanceSensor_DeleteLater(void* ptr);
void QDistanceSensor_DeleteLaterDefault(void* ptr);
void QDistanceSensor_DisconnectNotify(void* ptr, void* sign);
void QDistanceSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QDistanceSensor_Event(void* ptr, void* e);
char QDistanceSensor_EventDefault(void* ptr, void* e);
char QDistanceSensor_EventFilter(void* ptr, void* watched, void* event);
char QDistanceSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QDistanceSensor_MetaObject(void* ptr);
void* QDistanceSensor_MetaObjectDefault(void* ptr);
void* QGyroscope_Reading(void* ptr);
void* QGyroscope_NewQGyroscope(void* parent);
void QGyroscope_DestroyQGyroscope(void* ptr);
void QGyroscope_DestroyQGyroscopeDefault(void* ptr);
struct QtSensors_PackedString QGyroscope_QGyroscope_Type();
char QGyroscope_Start(void* ptr);
char QGyroscope_StartDefault(void* ptr);
void QGyroscope_Stop(void* ptr);
void QGyroscope_StopDefault(void* ptr);
void QGyroscope_TimerEvent(void* ptr, void* event);
void QGyroscope_TimerEventDefault(void* ptr, void* event);
void QGyroscope_ChildEvent(void* ptr, void* event);
void QGyroscope_ChildEventDefault(void* ptr, void* event);
void QGyroscope_ConnectNotify(void* ptr, void* sign);
void QGyroscope_ConnectNotifyDefault(void* ptr, void* sign);
void QGyroscope_CustomEvent(void* ptr, void* event);
void QGyroscope_CustomEventDefault(void* ptr, void* event);
void QGyroscope_DeleteLater(void* ptr);
void QGyroscope_DeleteLaterDefault(void* ptr);
void QGyroscope_DisconnectNotify(void* ptr, void* sign);
void QGyroscope_DisconnectNotifyDefault(void* ptr, void* sign);
char QGyroscope_Event(void* ptr, void* e);
char QGyroscope_EventDefault(void* ptr, void* e);
char QGyroscope_EventFilter(void* ptr, void* watched, void* event);
char QGyroscope_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGyroscope_MetaObject(void* ptr);
void* QGyroscope_MetaObjectDefault(void* ptr);
char QGyroscopeFilter_Filter(void* ptr, void* reading);
double QGyroscopeReading_X(void* ptr);
double QGyroscopeReading_Y(void* ptr);
double QGyroscopeReading_Z(void* ptr);
void QGyroscopeReading_SetX(void* ptr, double x);
void QGyroscopeReading_SetY(void* ptr, double y);
void QGyroscopeReading_SetZ(void* ptr, double z);
void QGyroscopeReading_TimerEvent(void* ptr, void* event);
void QGyroscopeReading_TimerEventDefault(void* ptr, void* event);
void QGyroscopeReading_ChildEvent(void* ptr, void* event);
void QGyroscopeReading_ChildEventDefault(void* ptr, void* event);
void QGyroscopeReading_ConnectNotify(void* ptr, void* sign);
void QGyroscopeReading_ConnectNotifyDefault(void* ptr, void* sign);
void QGyroscopeReading_CustomEvent(void* ptr, void* event);
void QGyroscopeReading_CustomEventDefault(void* ptr, void* event);
void QGyroscopeReading_DeleteLater(void* ptr);
void QGyroscopeReading_DeleteLaterDefault(void* ptr);
void QGyroscopeReading_DisconnectNotify(void* ptr, void* sign);
void QGyroscopeReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QGyroscopeReading_Event(void* ptr, void* e);
char QGyroscopeReading_EventDefault(void* ptr, void* e);
char QGyroscopeReading_EventFilter(void* ptr, void* watched, void* event);
char QGyroscopeReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QGyroscopeReading_MetaObject(void* ptr);
void* QGyroscopeReading_MetaObjectDefault(void* ptr);
char QHolsterFilter_Filter(void* ptr, void* reading);
char QHolsterReading_Holstered(void* ptr);
void QHolsterReading_SetHolstered(void* ptr, char holstered);
void QHolsterReading_TimerEvent(void* ptr, void* event);
void QHolsterReading_TimerEventDefault(void* ptr, void* event);
void QHolsterReading_ChildEvent(void* ptr, void* event);
void QHolsterReading_ChildEventDefault(void* ptr, void* event);
void QHolsterReading_ConnectNotify(void* ptr, void* sign);
void QHolsterReading_ConnectNotifyDefault(void* ptr, void* sign);
void QHolsterReading_CustomEvent(void* ptr, void* event);
void QHolsterReading_CustomEventDefault(void* ptr, void* event);
void QHolsterReading_DeleteLater(void* ptr);
void QHolsterReading_DeleteLaterDefault(void* ptr);
void QHolsterReading_DisconnectNotify(void* ptr, void* sign);
void QHolsterReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QHolsterReading_Event(void* ptr, void* e);
char QHolsterReading_EventDefault(void* ptr, void* e);
char QHolsterReading_EventFilter(void* ptr, void* watched, void* event);
char QHolsterReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QHolsterReading_MetaObject(void* ptr);
void* QHolsterReading_MetaObjectDefault(void* ptr);
void* QHolsterSensor_Reading(void* ptr);
void* QHolsterSensor_NewQHolsterSensor(void* parent);
void QHolsterSensor_DestroyQHolsterSensor(void* ptr);
struct QtSensors_PackedString QHolsterSensor_QHolsterSensor_Type();
char QHolsterSensor_Start(void* ptr);
char QHolsterSensor_StartDefault(void* ptr);
void QHolsterSensor_Stop(void* ptr);
void QHolsterSensor_StopDefault(void* ptr);
void QHolsterSensor_TimerEvent(void* ptr, void* event);
void QHolsterSensor_TimerEventDefault(void* ptr, void* event);
void QHolsterSensor_ChildEvent(void* ptr, void* event);
void QHolsterSensor_ChildEventDefault(void* ptr, void* event);
void QHolsterSensor_ConnectNotify(void* ptr, void* sign);
void QHolsterSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QHolsterSensor_CustomEvent(void* ptr, void* event);
void QHolsterSensor_CustomEventDefault(void* ptr, void* event);
void QHolsterSensor_DeleteLater(void* ptr);
void QHolsterSensor_DeleteLaterDefault(void* ptr);
void QHolsterSensor_DisconnectNotify(void* ptr, void* sign);
void QHolsterSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QHolsterSensor_Event(void* ptr, void* e);
char QHolsterSensor_EventDefault(void* ptr, void* e);
char QHolsterSensor_EventFilter(void* ptr, void* watched, void* event);
char QHolsterSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QHolsterSensor_MetaObject(void* ptr);
void* QHolsterSensor_MetaObjectDefault(void* ptr);
char QIRProximityFilter_Filter(void* ptr, void* reading);
double QIRProximityReading_Reflectance(void* ptr);
void QIRProximityReading_SetReflectance(void* ptr, double reflectance);
void QIRProximityReading_TimerEvent(void* ptr, void* event);
void QIRProximityReading_TimerEventDefault(void* ptr, void* event);
void QIRProximityReading_ChildEvent(void* ptr, void* event);
void QIRProximityReading_ChildEventDefault(void* ptr, void* event);
void QIRProximityReading_ConnectNotify(void* ptr, void* sign);
void QIRProximityReading_ConnectNotifyDefault(void* ptr, void* sign);
void QIRProximityReading_CustomEvent(void* ptr, void* event);
void QIRProximityReading_CustomEventDefault(void* ptr, void* event);
void QIRProximityReading_DeleteLater(void* ptr);
void QIRProximityReading_DeleteLaterDefault(void* ptr);
void QIRProximityReading_DisconnectNotify(void* ptr, void* sign);
void QIRProximityReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QIRProximityReading_Event(void* ptr, void* e);
char QIRProximityReading_EventDefault(void* ptr, void* e);
char QIRProximityReading_EventFilter(void* ptr, void* watched, void* event);
char QIRProximityReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QIRProximityReading_MetaObject(void* ptr);
void* QIRProximityReading_MetaObjectDefault(void* ptr);
void* QIRProximitySensor_Reading(void* ptr);
void* QIRProximitySensor_NewQIRProximitySensor(void* parent);
void QIRProximitySensor_DestroyQIRProximitySensor(void* ptr);
void QIRProximitySensor_DestroyQIRProximitySensorDefault(void* ptr);
struct QtSensors_PackedString QIRProximitySensor_QIRProximitySensor_Type();
char QIRProximitySensor_Start(void* ptr);
char QIRProximitySensor_StartDefault(void* ptr);
void QIRProximitySensor_Stop(void* ptr);
void QIRProximitySensor_StopDefault(void* ptr);
void QIRProximitySensor_TimerEvent(void* ptr, void* event);
void QIRProximitySensor_TimerEventDefault(void* ptr, void* event);
void QIRProximitySensor_ChildEvent(void* ptr, void* event);
void QIRProximitySensor_ChildEventDefault(void* ptr, void* event);
void QIRProximitySensor_ConnectNotify(void* ptr, void* sign);
void QIRProximitySensor_ConnectNotifyDefault(void* ptr, void* sign);
void QIRProximitySensor_CustomEvent(void* ptr, void* event);
void QIRProximitySensor_CustomEventDefault(void* ptr, void* event);
void QIRProximitySensor_DeleteLater(void* ptr);
void QIRProximitySensor_DeleteLaterDefault(void* ptr);
void QIRProximitySensor_DisconnectNotify(void* ptr, void* sign);
void QIRProximitySensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QIRProximitySensor_Event(void* ptr, void* e);
char QIRProximitySensor_EventDefault(void* ptr, void* e);
char QIRProximitySensor_EventFilter(void* ptr, void* watched, void* event);
char QIRProximitySensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QIRProximitySensor_MetaObject(void* ptr);
void* QIRProximitySensor_MetaObjectDefault(void* ptr);
char QLightFilter_Filter(void* ptr, void* reading);
double QLightReading_Lux(void* ptr);
void QLightReading_SetLux(void* ptr, double lux);
void QLightReading_TimerEvent(void* ptr, void* event);
void QLightReading_TimerEventDefault(void* ptr, void* event);
void QLightReading_ChildEvent(void* ptr, void* event);
void QLightReading_ChildEventDefault(void* ptr, void* event);
void QLightReading_ConnectNotify(void* ptr, void* sign);
void QLightReading_ConnectNotifyDefault(void* ptr, void* sign);
void QLightReading_CustomEvent(void* ptr, void* event);
void QLightReading_CustomEventDefault(void* ptr, void* event);
void QLightReading_DeleteLater(void* ptr);
void QLightReading_DeleteLaterDefault(void* ptr);
void QLightReading_DisconnectNotify(void* ptr, void* sign);
void QLightReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QLightReading_Event(void* ptr, void* e);
char QLightReading_EventDefault(void* ptr, void* e);
char QLightReading_EventFilter(void* ptr, void* watched, void* event);
char QLightReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QLightReading_MetaObject(void* ptr);
void* QLightReading_MetaObjectDefault(void* ptr);
double QLightSensor_FieldOfView(void* ptr);
void* QLightSensor_Reading(void* ptr);
void* QLightSensor_NewQLightSensor(void* parent);
void QLightSensor_ConnectFieldOfViewChanged(void* ptr);
void QLightSensor_DisconnectFieldOfViewChanged(void* ptr);
void QLightSensor_FieldOfViewChanged(void* ptr, double fieldOfView);
void QLightSensor_SetFieldOfView(void* ptr, double fieldOfView);
void QLightSensor_DestroyQLightSensor(void* ptr);
void QLightSensor_DestroyQLightSensorDefault(void* ptr);
struct QtSensors_PackedString QLightSensor_QLightSensor_Type();
char QLightSensor_Start(void* ptr);
char QLightSensor_StartDefault(void* ptr);
void QLightSensor_Stop(void* ptr);
void QLightSensor_StopDefault(void* ptr);
void QLightSensor_TimerEvent(void* ptr, void* event);
void QLightSensor_TimerEventDefault(void* ptr, void* event);
void QLightSensor_ChildEvent(void* ptr, void* event);
void QLightSensor_ChildEventDefault(void* ptr, void* event);
void QLightSensor_ConnectNotify(void* ptr, void* sign);
void QLightSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QLightSensor_CustomEvent(void* ptr, void* event);
void QLightSensor_CustomEventDefault(void* ptr, void* event);
void QLightSensor_DeleteLater(void* ptr);
void QLightSensor_DeleteLaterDefault(void* ptr);
void QLightSensor_DisconnectNotify(void* ptr, void* sign);
void QLightSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QLightSensor_Event(void* ptr, void* e);
char QLightSensor_EventDefault(void* ptr, void* e);
char QLightSensor_EventFilter(void* ptr, void* watched, void* event);
char QLightSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QLightSensor_MetaObject(void* ptr);
void* QLightSensor_MetaObjectDefault(void* ptr);
void* QMagnetometer_Reading(void* ptr);
char QMagnetometer_ReturnGeoValues(void* ptr);
void QMagnetometer_SetReturnGeoValues(void* ptr, char returnGeoValues);
void* QMagnetometer_NewQMagnetometer(void* parent);
void QMagnetometer_ConnectReturnGeoValuesChanged(void* ptr);
void QMagnetometer_DisconnectReturnGeoValuesChanged(void* ptr);
void QMagnetometer_ReturnGeoValuesChanged(void* ptr, char returnGeoValues);
void QMagnetometer_DestroyQMagnetometer(void* ptr);
void QMagnetometer_DestroyQMagnetometerDefault(void* ptr);
struct QtSensors_PackedString QMagnetometer_QMagnetometer_Type();
char QMagnetometer_Start(void* ptr);
char QMagnetometer_StartDefault(void* ptr);
void QMagnetometer_Stop(void* ptr);
void QMagnetometer_StopDefault(void* ptr);
void QMagnetometer_TimerEvent(void* ptr, void* event);
void QMagnetometer_TimerEventDefault(void* ptr, void* event);
void QMagnetometer_ChildEvent(void* ptr, void* event);
void QMagnetometer_ChildEventDefault(void* ptr, void* event);
void QMagnetometer_ConnectNotify(void* ptr, void* sign);
void QMagnetometer_ConnectNotifyDefault(void* ptr, void* sign);
void QMagnetometer_CustomEvent(void* ptr, void* event);
void QMagnetometer_CustomEventDefault(void* ptr, void* event);
void QMagnetometer_DeleteLater(void* ptr);
void QMagnetometer_DeleteLaterDefault(void* ptr);
void QMagnetometer_DisconnectNotify(void* ptr, void* sign);
void QMagnetometer_DisconnectNotifyDefault(void* ptr, void* sign);
char QMagnetometer_Event(void* ptr, void* e);
char QMagnetometer_EventDefault(void* ptr, void* e);
char QMagnetometer_EventFilter(void* ptr, void* watched, void* event);
char QMagnetometer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMagnetometer_MetaObject(void* ptr);
void* QMagnetometer_MetaObjectDefault(void* ptr);
char QMagnetometerFilter_Filter(void* ptr, void* reading);
double QMagnetometerReading_CalibrationLevel(void* ptr);
double QMagnetometerReading_X(void* ptr);
double QMagnetometerReading_Y(void* ptr);
double QMagnetometerReading_Z(void* ptr);
void QMagnetometerReading_SetCalibrationLevel(void* ptr, double calibrationLevel);
void QMagnetometerReading_SetX(void* ptr, double x);
void QMagnetometerReading_SetY(void* ptr, double y);
void QMagnetometerReading_SetZ(void* ptr, double z);
void QMagnetometerReading_TimerEvent(void* ptr, void* event);
void QMagnetometerReading_TimerEventDefault(void* ptr, void* event);
void QMagnetometerReading_ChildEvent(void* ptr, void* event);
void QMagnetometerReading_ChildEventDefault(void* ptr, void* event);
void QMagnetometerReading_ConnectNotify(void* ptr, void* sign);
void QMagnetometerReading_ConnectNotifyDefault(void* ptr, void* sign);
void QMagnetometerReading_CustomEvent(void* ptr, void* event);
void QMagnetometerReading_CustomEventDefault(void* ptr, void* event);
void QMagnetometerReading_DeleteLater(void* ptr);
void QMagnetometerReading_DeleteLaterDefault(void* ptr);
void QMagnetometerReading_DisconnectNotify(void* ptr, void* sign);
void QMagnetometerReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QMagnetometerReading_Event(void* ptr, void* e);
char QMagnetometerReading_EventDefault(void* ptr, void* e);
char QMagnetometerReading_EventFilter(void* ptr, void* watched, void* event);
char QMagnetometerReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QMagnetometerReading_MetaObject(void* ptr);
void* QMagnetometerReading_MetaObjectDefault(void* ptr);
char QOrientationFilter_Filter(void* ptr, void* reading);
long long QOrientationReading_Orientation(void* ptr);
void QOrientationReading_SetOrientation(void* ptr, long long orientation);
void QOrientationReading_TimerEvent(void* ptr, void* event);
void QOrientationReading_TimerEventDefault(void* ptr, void* event);
void QOrientationReading_ChildEvent(void* ptr, void* event);
void QOrientationReading_ChildEventDefault(void* ptr, void* event);
void QOrientationReading_ConnectNotify(void* ptr, void* sign);
void QOrientationReading_ConnectNotifyDefault(void* ptr, void* sign);
void QOrientationReading_CustomEvent(void* ptr, void* event);
void QOrientationReading_CustomEventDefault(void* ptr, void* event);
void QOrientationReading_DeleteLater(void* ptr);
void QOrientationReading_DeleteLaterDefault(void* ptr);
void QOrientationReading_DisconnectNotify(void* ptr, void* sign);
void QOrientationReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QOrientationReading_Event(void* ptr, void* e);
char QOrientationReading_EventDefault(void* ptr, void* e);
char QOrientationReading_EventFilter(void* ptr, void* watched, void* event);
char QOrientationReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOrientationReading_MetaObject(void* ptr);
void* QOrientationReading_MetaObjectDefault(void* ptr);
void* QOrientationSensor_Reading(void* ptr);
void* QOrientationSensor_NewQOrientationSensor(void* parent);
void QOrientationSensor_DestroyQOrientationSensor(void* ptr);
void QOrientationSensor_DestroyQOrientationSensorDefault(void* ptr);
struct QtSensors_PackedString QOrientationSensor_QOrientationSensor_Type();
char QOrientationSensor_Start(void* ptr);
char QOrientationSensor_StartDefault(void* ptr);
void QOrientationSensor_Stop(void* ptr);
void QOrientationSensor_StopDefault(void* ptr);
void QOrientationSensor_TimerEvent(void* ptr, void* event);
void QOrientationSensor_TimerEventDefault(void* ptr, void* event);
void QOrientationSensor_ChildEvent(void* ptr, void* event);
void QOrientationSensor_ChildEventDefault(void* ptr, void* event);
void QOrientationSensor_ConnectNotify(void* ptr, void* sign);
void QOrientationSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QOrientationSensor_CustomEvent(void* ptr, void* event);
void QOrientationSensor_CustomEventDefault(void* ptr, void* event);
void QOrientationSensor_DeleteLater(void* ptr);
void QOrientationSensor_DeleteLaterDefault(void* ptr);
void QOrientationSensor_DisconnectNotify(void* ptr, void* sign);
void QOrientationSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QOrientationSensor_Event(void* ptr, void* e);
char QOrientationSensor_EventDefault(void* ptr, void* e);
char QOrientationSensor_EventFilter(void* ptr, void* watched, void* event);
char QOrientationSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QOrientationSensor_MetaObject(void* ptr);
void* QOrientationSensor_MetaObjectDefault(void* ptr);
char QPressureFilter_Filter(void* ptr, void* reading);
double QPressureReading_Pressure(void* ptr);
double QPressureReading_Temperature(void* ptr);
void QPressureReading_SetPressure(void* ptr, double pressure);
void QPressureReading_SetTemperature(void* ptr, double temperature);
void QPressureReading_TimerEvent(void* ptr, void* event);
void QPressureReading_TimerEventDefault(void* ptr, void* event);
void QPressureReading_ChildEvent(void* ptr, void* event);
void QPressureReading_ChildEventDefault(void* ptr, void* event);
void QPressureReading_ConnectNotify(void* ptr, void* sign);
void QPressureReading_ConnectNotifyDefault(void* ptr, void* sign);
void QPressureReading_CustomEvent(void* ptr, void* event);
void QPressureReading_CustomEventDefault(void* ptr, void* event);
void QPressureReading_DeleteLater(void* ptr);
void QPressureReading_DeleteLaterDefault(void* ptr);
void QPressureReading_DisconnectNotify(void* ptr, void* sign);
void QPressureReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QPressureReading_Event(void* ptr, void* e);
char QPressureReading_EventDefault(void* ptr, void* e);
char QPressureReading_EventFilter(void* ptr, void* watched, void* event);
char QPressureReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QPressureReading_MetaObject(void* ptr);
void* QPressureReading_MetaObjectDefault(void* ptr);
void* QPressureSensor_Reading(void* ptr);
void* QPressureSensor_NewQPressureSensor(void* parent);
void QPressureSensor_DestroyQPressureSensor(void* ptr);
struct QtSensors_PackedString QPressureSensor_QPressureSensor_Type();
char QPressureSensor_Start(void* ptr);
char QPressureSensor_StartDefault(void* ptr);
void QPressureSensor_Stop(void* ptr);
void QPressureSensor_StopDefault(void* ptr);
void QPressureSensor_TimerEvent(void* ptr, void* event);
void QPressureSensor_TimerEventDefault(void* ptr, void* event);
void QPressureSensor_ChildEvent(void* ptr, void* event);
void QPressureSensor_ChildEventDefault(void* ptr, void* event);
void QPressureSensor_ConnectNotify(void* ptr, void* sign);
void QPressureSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QPressureSensor_CustomEvent(void* ptr, void* event);
void QPressureSensor_CustomEventDefault(void* ptr, void* event);
void QPressureSensor_DeleteLater(void* ptr);
void QPressureSensor_DeleteLaterDefault(void* ptr);
void QPressureSensor_DisconnectNotify(void* ptr, void* sign);
void QPressureSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QPressureSensor_Event(void* ptr, void* e);
char QPressureSensor_EventDefault(void* ptr, void* e);
char QPressureSensor_EventFilter(void* ptr, void* watched, void* event);
char QPressureSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QPressureSensor_MetaObject(void* ptr);
void* QPressureSensor_MetaObjectDefault(void* ptr);
char QProximityFilter_Filter(void* ptr, void* reading);
char QProximityReading_Close(void* ptr);
void QProximityReading_SetClose(void* ptr, char close);
void QProximityReading_TimerEvent(void* ptr, void* event);
void QProximityReading_TimerEventDefault(void* ptr, void* event);
void QProximityReading_ChildEvent(void* ptr, void* event);
void QProximityReading_ChildEventDefault(void* ptr, void* event);
void QProximityReading_ConnectNotify(void* ptr, void* sign);
void QProximityReading_ConnectNotifyDefault(void* ptr, void* sign);
void QProximityReading_CustomEvent(void* ptr, void* event);
void QProximityReading_CustomEventDefault(void* ptr, void* event);
void QProximityReading_DeleteLater(void* ptr);
void QProximityReading_DeleteLaterDefault(void* ptr);
void QProximityReading_DisconnectNotify(void* ptr, void* sign);
void QProximityReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QProximityReading_Event(void* ptr, void* e);
char QProximityReading_EventDefault(void* ptr, void* e);
char QProximityReading_EventFilter(void* ptr, void* watched, void* event);
char QProximityReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QProximityReading_MetaObject(void* ptr);
void* QProximityReading_MetaObjectDefault(void* ptr);
void* QProximitySensor_Reading(void* ptr);
void* QProximitySensor_NewQProximitySensor(void* parent);
void QProximitySensor_DestroyQProximitySensor(void* ptr);
void QProximitySensor_DestroyQProximitySensorDefault(void* ptr);
struct QtSensors_PackedString QProximitySensor_QProximitySensor_Type();
char QProximitySensor_Start(void* ptr);
char QProximitySensor_StartDefault(void* ptr);
void QProximitySensor_Stop(void* ptr);
void QProximitySensor_StopDefault(void* ptr);
void QProximitySensor_TimerEvent(void* ptr, void* event);
void QProximitySensor_TimerEventDefault(void* ptr, void* event);
void QProximitySensor_ChildEvent(void* ptr, void* event);
void QProximitySensor_ChildEventDefault(void* ptr, void* event);
void QProximitySensor_ConnectNotify(void* ptr, void* sign);
void QProximitySensor_ConnectNotifyDefault(void* ptr, void* sign);
void QProximitySensor_CustomEvent(void* ptr, void* event);
void QProximitySensor_CustomEventDefault(void* ptr, void* event);
void QProximitySensor_DeleteLater(void* ptr);
void QProximitySensor_DeleteLaterDefault(void* ptr);
void QProximitySensor_DisconnectNotify(void* ptr, void* sign);
void QProximitySensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QProximitySensor_Event(void* ptr, void* e);
char QProximitySensor_EventDefault(void* ptr, void* e);
char QProximitySensor_EventFilter(void* ptr, void* watched, void* event);
char QProximitySensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QProximitySensor_MetaObject(void* ptr);
void* QProximitySensor_MetaObjectDefault(void* ptr);
char QRotationFilter_Filter(void* ptr, void* reading);
double QRotationReading_X(void* ptr);
double QRotationReading_Y(void* ptr);
double QRotationReading_Z(void* ptr);
void QRotationReading_SetFromEuler(void* ptr, double x, double y, double z);
void QRotationReading_TimerEvent(void* ptr, void* event);
void QRotationReading_TimerEventDefault(void* ptr, void* event);
void QRotationReading_ChildEvent(void* ptr, void* event);
void QRotationReading_ChildEventDefault(void* ptr, void* event);
void QRotationReading_ConnectNotify(void* ptr, void* sign);
void QRotationReading_ConnectNotifyDefault(void* ptr, void* sign);
void QRotationReading_CustomEvent(void* ptr, void* event);
void QRotationReading_CustomEventDefault(void* ptr, void* event);
void QRotationReading_DeleteLater(void* ptr);
void QRotationReading_DeleteLaterDefault(void* ptr);
void QRotationReading_DisconnectNotify(void* ptr, void* sign);
void QRotationReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QRotationReading_Event(void* ptr, void* e);
char QRotationReading_EventDefault(void* ptr, void* e);
char QRotationReading_EventFilter(void* ptr, void* watched, void* event);
char QRotationReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QRotationReading_MetaObject(void* ptr);
void* QRotationReading_MetaObjectDefault(void* ptr);
char QRotationSensor_HasZ(void* ptr);
void* QRotationSensor_Reading(void* ptr);
void* QRotationSensor_NewQRotationSensor(void* parent);
void QRotationSensor_ConnectHasZChanged(void* ptr);
void QRotationSensor_DisconnectHasZChanged(void* ptr);
void QRotationSensor_HasZChanged(void* ptr, char hasZ);
void QRotationSensor_SetHasZ(void* ptr, char hasZ);
void QRotationSensor_DestroyQRotationSensor(void* ptr);
void QRotationSensor_DestroyQRotationSensorDefault(void* ptr);
struct QtSensors_PackedString QRotationSensor_QRotationSensor_Type();
char QRotationSensor_Start(void* ptr);
char QRotationSensor_StartDefault(void* ptr);
void QRotationSensor_Stop(void* ptr);
void QRotationSensor_StopDefault(void* ptr);
void QRotationSensor_TimerEvent(void* ptr, void* event);
void QRotationSensor_TimerEventDefault(void* ptr, void* event);
void QRotationSensor_ChildEvent(void* ptr, void* event);
void QRotationSensor_ChildEventDefault(void* ptr, void* event);
void QRotationSensor_ConnectNotify(void* ptr, void* sign);
void QRotationSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QRotationSensor_CustomEvent(void* ptr, void* event);
void QRotationSensor_CustomEventDefault(void* ptr, void* event);
void QRotationSensor_DeleteLater(void* ptr);
void QRotationSensor_DeleteLaterDefault(void* ptr);
void QRotationSensor_DisconnectNotify(void* ptr, void* sign);
void QRotationSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QRotationSensor_Event(void* ptr, void* e);
char QRotationSensor_EventDefault(void* ptr, void* e);
char QRotationSensor_EventFilter(void* ptr, void* watched, void* event);
char QRotationSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QRotationSensor_MetaObject(void* ptr);
void* QRotationSensor_MetaObjectDefault(void* ptr);
long long QSensor_AxesOrientationMode(void* ptr);
int QSensor_BufferSize(void* ptr);
int QSensor_CurrentOrientation(void* ptr);
int QSensor_DataRate(void* ptr);
struct QtSensors_PackedString QSensor_Description(void* ptr);
int QSensor_EfficientBufferSize(void* ptr);
int QSensor_Error(void* ptr);
void* QSensor_Identifier(void* ptr);
char QSensor_IsActive(void* ptr);
char QSensor_IsAlwaysOn(void* ptr);
char QSensor_IsBusy(void* ptr);
char QSensor_IsConnectedToBackend(void* ptr);
int QSensor_MaxBufferSize(void* ptr);
int QSensor_OutputRange(void* ptr);
void* QSensor_Reading(void* ptr);
void QSensor_SetActive(void* ptr, char active);
void QSensor_SetAlwaysOn(void* ptr, char alwaysOn);
void QSensor_SetAxesOrientationMode(void* ptr, long long axesOrientationMode);
void QSensor_SetBufferSize(void* ptr, int bufferSize);
void QSensor_SetDataRate(void* ptr, int rate);
void QSensor_SetIdentifier(void* ptr, void* identifier);
void QSensor_SetOutputRange(void* ptr, int index);
void QSensor_SetUserOrientation(void* ptr, int userOrientation);
char QSensor_SkipDuplicates(void* ptr);
void* QSensor_Type(void* ptr);
int QSensor_UserOrientation(void* ptr);
void* QSensor_NewQSensor(void* ty, void* parent);
void QSensor_ConnectActiveChanged(void* ptr);
void QSensor_DisconnectActiveChanged(void* ptr);
void QSensor_ActiveChanged(void* ptr);
void QSensor_AddFilter(void* ptr, void* filter);
void QSensor_ConnectAlwaysOnChanged(void* ptr);
void QSensor_DisconnectAlwaysOnChanged(void* ptr);
void QSensor_AlwaysOnChanged(void* ptr);
void QSensor_ConnectAvailableSensorsChanged(void* ptr);
void QSensor_DisconnectAvailableSensorsChanged(void* ptr);
void QSensor_AvailableSensorsChanged(void* ptr);
void QSensor_ConnectAxesOrientationModeChanged(void* ptr);
void QSensor_DisconnectAxesOrientationModeChanged(void* ptr);
void QSensor_AxesOrientationModeChanged(void* ptr, long long axesOrientationMode);
void QSensor_ConnectBufferSizeChanged(void* ptr);
void QSensor_DisconnectBufferSizeChanged(void* ptr);
void QSensor_BufferSizeChanged(void* ptr, int bufferSize);
void QSensor_ConnectBusyChanged(void* ptr);
void QSensor_DisconnectBusyChanged(void* ptr);
void QSensor_BusyChanged(void* ptr);
char QSensor_ConnectToBackend(void* ptr);
void QSensor_ConnectCurrentOrientationChanged(void* ptr);
void QSensor_DisconnectCurrentOrientationChanged(void* ptr);
void QSensor_CurrentOrientationChanged(void* ptr, int currentOrientation);
void QSensor_ConnectDataRateChanged(void* ptr);
void QSensor_DisconnectDataRateChanged(void* ptr);
void QSensor_DataRateChanged(void* ptr);
void* QSensor_QSensor_DefaultSensorForType(void* ty);
void QSensor_ConnectEfficientBufferSizeChanged(void* ptr);
void QSensor_DisconnectEfficientBufferSizeChanged(void* ptr);
void QSensor_EfficientBufferSizeChanged(void* ptr, int efficientBufferSize);
struct QtSensors_PackedList QSensor_Filters(void* ptr);
char QSensor_IsFeatureSupported(void* ptr, long long feature);
void QSensor_ConnectMaxBufferSizeChanged(void* ptr);
void QSensor_DisconnectMaxBufferSizeChanged(void* ptr);
void QSensor_MaxBufferSizeChanged(void* ptr, int maxBufferSize);
void QSensor_ConnectReadingChanged(void* ptr);
void QSensor_DisconnectReadingChanged(void* ptr);
void QSensor_ReadingChanged(void* ptr);
void QSensor_RemoveFilter(void* ptr, void* filter);
void QSensor_ConnectSensorError(void* ptr);
void QSensor_DisconnectSensorError(void* ptr);
void QSensor_SensorError(void* ptr, int error);
struct QtSensors_PackedList QSensor_QSensor_SensorTypes();
struct QtSensors_PackedList QSensor_QSensor_SensorsForType(void* ty);
void QSensor_SetCurrentOrientation(void* ptr, int currentOrientation);
void QSensor_SetEfficientBufferSize(void* ptr, int efficientBufferSize);
void QSensor_SetMaxBufferSize(void* ptr, int maxBufferSize);
void QSensor_SetSkipDuplicates(void* ptr, char skipDuplicates);
void QSensor_ConnectSkipDuplicatesChanged(void* ptr);
void QSensor_DisconnectSkipDuplicatesChanged(void* ptr);
void QSensor_SkipDuplicatesChanged(void* ptr, char skipDuplicates);
char QSensor_Start(void* ptr);
void QSensor_Stop(void* ptr);
void QSensor_ConnectUserOrientationChanged(void* ptr);
void QSensor_DisconnectUserOrientationChanged(void* ptr);
void QSensor_UserOrientationChanged(void* ptr, int userOrientation);
void QSensor_DestroyQSensor(void* ptr);
void QSensor_DestroyQSensorDefault(void* ptr);
void* QSensor_filters_atList(void* ptr, int i);
void* QSensor_sensorTypes_atList(void* ptr, int i);
void* QSensor_sensorsForType_atList(void* ptr, int i);
void QSensor_TimerEvent(void* ptr, void* event);
void QSensor_TimerEventDefault(void* ptr, void* event);
void QSensor_ChildEvent(void* ptr, void* event);
void QSensor_ChildEventDefault(void* ptr, void* event);
void QSensor_ConnectNotify(void* ptr, void* sign);
void QSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QSensor_CustomEvent(void* ptr, void* event);
void QSensor_CustomEventDefault(void* ptr, void* event);
void QSensor_DeleteLater(void* ptr);
void QSensor_DeleteLaterDefault(void* ptr);
void QSensor_DisconnectNotify(void* ptr, void* sign);
void QSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QSensor_Event(void* ptr, void* e);
char QSensor_EventDefault(void* ptr, void* e);
char QSensor_EventFilter(void* ptr, void* watched, void* event);
char QSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSensor_MetaObject(void* ptr);
void* QSensor_MetaObjectDefault(void* ptr);
void QSensorBackend_AddDataRate(void* ptr, double min, double max);
char QSensorBackend_IsFeatureSupported(void* ptr, long long feature);
char QSensorBackend_IsFeatureSupportedDefault(void* ptr, long long feature);
void QSensorBackend_SensorBusy(void* ptr);
void QSensorBackend_SensorError(void* ptr, int error);
void QSensorBackend_AddOutputRange(void* ptr, double min, double max, double accuracy);
void QSensorBackend_NewReadingAvailable(void* ptr);
void* QSensorBackend_Reading(void* ptr);
void* QSensorBackend_Sensor(void* ptr);
void QSensorBackend_SensorStopped(void* ptr);
void QSensorBackend_SetDataRates(void* ptr, void* otherSensor);
void QSensorBackend_SetDescription(void* ptr, char* description);
void QSensorBackend_Start(void* ptr);
void QSensorBackend_Stop(void* ptr);
void QSensorBackend_TimerEvent(void* ptr, void* event);
void QSensorBackend_TimerEventDefault(void* ptr, void* event);
void QSensorBackend_ChildEvent(void* ptr, void* event);
void QSensorBackend_ChildEventDefault(void* ptr, void* event);
void QSensorBackend_ConnectNotify(void* ptr, void* sign);
void QSensorBackend_ConnectNotifyDefault(void* ptr, void* sign);
void QSensorBackend_CustomEvent(void* ptr, void* event);
void QSensorBackend_CustomEventDefault(void* ptr, void* event);
void QSensorBackend_DeleteLater(void* ptr);
void QSensorBackend_DeleteLaterDefault(void* ptr);
void QSensorBackend_DisconnectNotify(void* ptr, void* sign);
void QSensorBackend_DisconnectNotifyDefault(void* ptr, void* sign);
char QSensorBackend_Event(void* ptr, void* e);
char QSensorBackend_EventDefault(void* ptr, void* e);
char QSensorBackend_EventFilter(void* ptr, void* watched, void* event);
char QSensorBackend_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSensorBackend_MetaObject(void* ptr);
void* QSensorBackend_MetaObjectDefault(void* ptr);
void* QSensorBackendFactory_CreateBackend(void* ptr, void* sensor);
void QSensorChangesInterface_SensorsChanged(void* ptr);
char QSensorFilter_Filter(void* ptr, void* reading);
void QSensorFilter_DestroyQSensorFilter(void* ptr);
void QSensorFilter_DestroyQSensorFilterDefault(void* ptr);
void* QSensorFilter_M_sensor(void* ptr);
void QSensorFilter_SetM_sensor(void* ptr, void* vqs);
void* QSensorGesture_NewQSensorGesture(char* ids, void* parent);
void QSensorGesture_ConnectDetected(void* ptr);
void QSensorGesture_DisconnectDetected(void* ptr);
void QSensorGesture_Detected(void* ptr, char* gestureId);
struct QtSensors_PackedString QSensorGesture_GestureSignals(void* ptr);
struct QtSensors_PackedString QSensorGesture_InvalidIds(void* ptr);
char QSensorGesture_IsActive(void* ptr);
void QSensorGesture_StartDetection(void* ptr);
void QSensorGesture_StopDetection(void* ptr);
struct QtSensors_PackedString QSensorGesture_ValidIds(void* ptr);
void QSensorGesture_DestroyQSensorGesture(void* ptr);
void QSensorGesture_TimerEvent(void* ptr, void* event);
void QSensorGesture_TimerEventDefault(void* ptr, void* event);
void QSensorGesture_ChildEvent(void* ptr, void* event);
void QSensorGesture_ChildEventDefault(void* ptr, void* event);
void QSensorGesture_ConnectNotify(void* ptr, void* sign);
void QSensorGesture_ConnectNotifyDefault(void* ptr, void* sign);
void QSensorGesture_CustomEvent(void* ptr, void* event);
void QSensorGesture_CustomEventDefault(void* ptr, void* event);
void QSensorGesture_DeleteLater(void* ptr);
void QSensorGesture_DeleteLaterDefault(void* ptr);
void QSensorGesture_DisconnectNotify(void* ptr, void* sign);
void QSensorGesture_DisconnectNotifyDefault(void* ptr, void* sign);
char QSensorGesture_Event(void* ptr, void* e);
char QSensorGesture_EventDefault(void* ptr, void* e);
char QSensorGesture_EventFilter(void* ptr, void* watched, void* event);
char QSensorGesture_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSensorGesture_MetaObject(void* ptr);
void* QSensorGesture_MetaObjectDefault(void* ptr);
void* QSensorGestureManager_NewQSensorGestureManager(void* parent);
struct QtSensors_PackedString QSensorGestureManager_GestureIds(void* ptr);
void QSensorGestureManager_ConnectNewSensorGestureAvailable(void* ptr);
void QSensorGestureManager_DisconnectNewSensorGestureAvailable(void* ptr);
void QSensorGestureManager_NewSensorGestureAvailable(void* ptr);
struct QtSensors_PackedString QSensorGestureManager_RecognizerSignals(void* ptr, char* gestureId);
char QSensorGestureManager_RegisterSensorGestureRecognizer(void* ptr, void* recognizer);
void* QSensorGestureManager_QSensorGestureManager_SensorGestureRecognizer(char* id);
void QSensorGestureManager_DestroyQSensorGestureManager(void* ptr);
void QSensorGestureManager_TimerEvent(void* ptr, void* event);
void QSensorGestureManager_TimerEventDefault(void* ptr, void* event);
void QSensorGestureManager_ChildEvent(void* ptr, void* event);
void QSensorGestureManager_ChildEventDefault(void* ptr, void* event);
void QSensorGestureManager_ConnectNotify(void* ptr, void* sign);
void QSensorGestureManager_ConnectNotifyDefault(void* ptr, void* sign);
void QSensorGestureManager_CustomEvent(void* ptr, void* event);
void QSensorGestureManager_CustomEventDefault(void* ptr, void* event);
void QSensorGestureManager_DeleteLater(void* ptr);
void QSensorGestureManager_DeleteLaterDefault(void* ptr);
void QSensorGestureManager_DisconnectNotify(void* ptr, void* sign);
void QSensorGestureManager_DisconnectNotifyDefault(void* ptr, void* sign);
char QSensorGestureManager_Event(void* ptr, void* e);
char QSensorGestureManager_EventDefault(void* ptr, void* e);
char QSensorGestureManager_EventFilter(void* ptr, void* watched, void* event);
char QSensorGestureManager_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSensorGestureManager_MetaObject(void* ptr);
void* QSensorGestureManager_MetaObjectDefault(void* ptr);
struct QtSensors_PackedString QSensorGesturePluginInterface_Name(void* ptr);
struct QtSensors_PackedString QSensorGesturePluginInterface_SupportedIds(void* ptr);
void QSensorGesturePluginInterface_DestroyQSensorGesturePluginInterface(void* ptr);
void QSensorGesturePluginInterface_DestroyQSensorGesturePluginInterfaceDefault(void* ptr);
void* QSensorGesturePluginInterface_createRecognizers_atList(void* ptr, int i);
void* QSensorGestureRecognizer_NewQSensorGestureRecognizer(void* parent);
void QSensorGestureRecognizer_Create(void* ptr);
void QSensorGestureRecognizer_CreateBackend(void* ptr);
void QSensorGestureRecognizer_ConnectDetected(void* ptr);
void QSensorGestureRecognizer_DisconnectDetected(void* ptr);
void QSensorGestureRecognizer_Detected(void* ptr, char* gestureId);
struct QtSensors_PackedString QSensorGestureRecognizer_GestureSignals(void* ptr);
struct QtSensors_PackedString QSensorGestureRecognizer_Id(void* ptr);
char QSensorGestureRecognizer_IsActive(void* ptr);
char QSensorGestureRecognizer_Start(void* ptr);
void QSensorGestureRecognizer_StartBackend(void* ptr);
char QSensorGestureRecognizer_Stop(void* ptr);
void QSensorGestureRecognizer_StopBackend(void* ptr);
void QSensorGestureRecognizer_DestroyQSensorGestureRecognizer(void* ptr);
void QSensorGestureRecognizer_DestroyQSensorGestureRecognizerDefault(void* ptr);
void QSensorGestureRecognizer_TimerEvent(void* ptr, void* event);
void QSensorGestureRecognizer_TimerEventDefault(void* ptr, void* event);
void QSensorGestureRecognizer_ChildEvent(void* ptr, void* event);
void QSensorGestureRecognizer_ChildEventDefault(void* ptr, void* event);
void QSensorGestureRecognizer_ConnectNotify(void* ptr, void* sign);
void QSensorGestureRecognizer_ConnectNotifyDefault(void* ptr, void* sign);
void QSensorGestureRecognizer_CustomEvent(void* ptr, void* event);
void QSensorGestureRecognizer_CustomEventDefault(void* ptr, void* event);
void QSensorGestureRecognizer_DeleteLater(void* ptr);
void QSensorGestureRecognizer_DeleteLaterDefault(void* ptr);
void QSensorGestureRecognizer_DisconnectNotify(void* ptr, void* sign);
void QSensorGestureRecognizer_DisconnectNotifyDefault(void* ptr, void* sign);
char QSensorGestureRecognizer_Event(void* ptr, void* e);
char QSensorGestureRecognizer_EventDefault(void* ptr, void* e);
char QSensorGestureRecognizer_EventFilter(void* ptr, void* watched, void* event);
char QSensorGestureRecognizer_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSensorGestureRecognizer_MetaObject(void* ptr);
void* QSensorGestureRecognizer_MetaObjectDefault(void* ptr);
void* QSensorManager_QSensorManager_CreateBackend(void* sensor);
char QSensorManager_QSensorManager_IsBackendRegistered(void* ty, void* identifier);
void QSensorManager_QSensorManager_RegisterBackend(void* ty, void* identifier, void* factory);
void QSensorManager_QSensorManager_SetDefaultBackend(void* ty, void* identifier);
void QSensorManager_QSensorManager_UnregisterBackend(void* ty, void* identifier);
void QSensorPluginInterface_RegisterSensors(void* ptr);
void QSensorReading_SetTimestamp(void* ptr, unsigned long long timestamp);
unsigned long long QSensorReading_Timestamp(void* ptr);
void* QSensorReading_Value(void* ptr, int index);
int QSensorReading_ValueCount(void* ptr);
void QSensorReading_TimerEvent(void* ptr, void* event);
void QSensorReading_TimerEventDefault(void* ptr, void* event);
void QSensorReading_ChildEvent(void* ptr, void* event);
void QSensorReading_ChildEventDefault(void* ptr, void* event);
void QSensorReading_ConnectNotify(void* ptr, void* sign);
void QSensorReading_ConnectNotifyDefault(void* ptr, void* sign);
void QSensorReading_CustomEvent(void* ptr, void* event);
void QSensorReading_CustomEventDefault(void* ptr, void* event);
void QSensorReading_DeleteLater(void* ptr);
void QSensorReading_DeleteLaterDefault(void* ptr);
void QSensorReading_DisconnectNotify(void* ptr, void* sign);
void QSensorReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QSensorReading_Event(void* ptr, void* e);
char QSensorReading_EventDefault(void* ptr, void* e);
char QSensorReading_EventFilter(void* ptr, void* watched, void* event);
char QSensorReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QSensorReading_MetaObject(void* ptr);
void* QSensorReading_MetaObjectDefault(void* ptr);
char QTapFilter_Filter(void* ptr, void* reading);
char QTapReading_IsDoubleTap(void* ptr);
long long QTapReading_TapDirection(void* ptr);
void QTapReading_SetDoubleTap(void* ptr, char doubleTap);
void QTapReading_SetTapDirection(void* ptr, long long tapDirection);
void QTapReading_TimerEvent(void* ptr, void* event);
void QTapReading_TimerEventDefault(void* ptr, void* event);
void QTapReading_ChildEvent(void* ptr, void* event);
void QTapReading_ChildEventDefault(void* ptr, void* event);
void QTapReading_ConnectNotify(void* ptr, void* sign);
void QTapReading_ConnectNotifyDefault(void* ptr, void* sign);
void QTapReading_CustomEvent(void* ptr, void* event);
void QTapReading_CustomEventDefault(void* ptr, void* event);
void QTapReading_DeleteLater(void* ptr);
void QTapReading_DeleteLaterDefault(void* ptr);
void QTapReading_DisconnectNotify(void* ptr, void* sign);
void QTapReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QTapReading_Event(void* ptr, void* e);
char QTapReading_EventDefault(void* ptr, void* e);
char QTapReading_EventFilter(void* ptr, void* watched, void* event);
char QTapReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QTapReading_MetaObject(void* ptr);
void* QTapReading_MetaObjectDefault(void* ptr);
void* QTapSensor_Reading(void* ptr);
char QTapSensor_ReturnDoubleTapEvents(void* ptr);
void QTapSensor_SetReturnDoubleTapEvents(void* ptr, char returnDoubleTapEvents);
void* QTapSensor_NewQTapSensor(void* parent);
void QTapSensor_ConnectReturnDoubleTapEventsChanged(void* ptr);
void QTapSensor_DisconnectReturnDoubleTapEventsChanged(void* ptr);
void QTapSensor_ReturnDoubleTapEventsChanged(void* ptr, char returnDoubleTapEvents);
void QTapSensor_DestroyQTapSensor(void* ptr);
void QTapSensor_DestroyQTapSensorDefault(void* ptr);
struct QtSensors_PackedString QTapSensor_QTapSensor_Type();
char QTapSensor_Start(void* ptr);
char QTapSensor_StartDefault(void* ptr);
void QTapSensor_Stop(void* ptr);
void QTapSensor_StopDefault(void* ptr);
void QTapSensor_TimerEvent(void* ptr, void* event);
void QTapSensor_TimerEventDefault(void* ptr, void* event);
void QTapSensor_ChildEvent(void* ptr, void* event);
void QTapSensor_ChildEventDefault(void* ptr, void* event);
void QTapSensor_ConnectNotify(void* ptr, void* sign);
void QTapSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QTapSensor_CustomEvent(void* ptr, void* event);
void QTapSensor_CustomEventDefault(void* ptr, void* event);
void QTapSensor_DeleteLater(void* ptr);
void QTapSensor_DeleteLaterDefault(void* ptr);
void QTapSensor_DisconnectNotify(void* ptr, void* sign);
void QTapSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QTapSensor_Event(void* ptr, void* e);
char QTapSensor_EventDefault(void* ptr, void* e);
char QTapSensor_EventFilter(void* ptr, void* watched, void* event);
char QTapSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QTapSensor_MetaObject(void* ptr);
void* QTapSensor_MetaObjectDefault(void* ptr);
char QTiltFilter_Filter(void* ptr, void* reading);
double QTiltReading_XRotation(void* ptr);
double QTiltReading_YRotation(void* ptr);
void QTiltReading_SetXRotation(void* ptr, double x);
void QTiltReading_SetYRotation(void* ptr, double y);
void QTiltReading_TimerEvent(void* ptr, void* event);
void QTiltReading_TimerEventDefault(void* ptr, void* event);
void QTiltReading_ChildEvent(void* ptr, void* event);
void QTiltReading_ChildEventDefault(void* ptr, void* event);
void QTiltReading_ConnectNotify(void* ptr, void* sign);
void QTiltReading_ConnectNotifyDefault(void* ptr, void* sign);
void QTiltReading_CustomEvent(void* ptr, void* event);
void QTiltReading_CustomEventDefault(void* ptr, void* event);
void QTiltReading_DeleteLater(void* ptr);
void QTiltReading_DeleteLaterDefault(void* ptr);
void QTiltReading_DisconnectNotify(void* ptr, void* sign);
void QTiltReading_DisconnectNotifyDefault(void* ptr, void* sign);
char QTiltReading_Event(void* ptr, void* e);
char QTiltReading_EventDefault(void* ptr, void* e);
char QTiltReading_EventFilter(void* ptr, void* watched, void* event);
char QTiltReading_EventFilterDefault(void* ptr, void* watched, void* event);
void* QTiltReading_MetaObject(void* ptr);
void* QTiltReading_MetaObjectDefault(void* ptr);
void* QTiltSensor_NewQTiltSensor(void* parent);
void* QTiltSensor_Reading(void* ptr);
void QTiltSensor_DestroyQTiltSensor(void* ptr);
void QTiltSensor_Calibrate(void* ptr);
struct QtSensors_PackedString QTiltSensor_QTiltSensor_Type();
char QTiltSensor_Start(void* ptr);
char QTiltSensor_StartDefault(void* ptr);
void QTiltSensor_Stop(void* ptr);
void QTiltSensor_StopDefault(void* ptr);
void QTiltSensor_TimerEvent(void* ptr, void* event);
void QTiltSensor_TimerEventDefault(void* ptr, void* event);
void QTiltSensor_ChildEvent(void* ptr, void* event);
void QTiltSensor_ChildEventDefault(void* ptr, void* event);
void QTiltSensor_ConnectNotify(void* ptr, void* sign);
void QTiltSensor_ConnectNotifyDefault(void* ptr, void* sign);
void QTiltSensor_CustomEvent(void* ptr, void* event);
void QTiltSensor_CustomEventDefault(void* ptr, void* event);
void QTiltSensor_DeleteLater(void* ptr);
void QTiltSensor_DeleteLaterDefault(void* ptr);
void QTiltSensor_DisconnectNotify(void* ptr, void* sign);
void QTiltSensor_DisconnectNotifyDefault(void* ptr, void* sign);
char QTiltSensor_Event(void* ptr, void* e);
char QTiltSensor_EventDefault(void* ptr, void* e);
char QTiltSensor_EventFilter(void* ptr, void* watched, void* event);
char QTiltSensor_EventFilterDefault(void* ptr, void* watched, void* event);
void* QTiltSensor_MetaObject(void* ptr);
void* QTiltSensor_MetaObjectDefault(void* ptr);

#ifdef __cplusplus
}
#endif

#endif